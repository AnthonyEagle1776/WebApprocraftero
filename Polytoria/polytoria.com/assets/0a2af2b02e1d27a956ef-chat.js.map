{"version":3,"sources":["webpack:///./js/angular/chat/constants|sync|/.js$","webpack:///./js/angular/chat/controllers|sync|/.js$","webpack:///./js/angular/chat/directives|sync|/.js$","webpack:///./js/angular/chat/services|sync|/.js$","webpack:///./js/angular/chat|sync|/.html$","webpack:///../Roblox.App.Configuration/Roblox_modules/roblox-es6-migration-helper/index.js","webpack:///./js/angular/chat/chatModule.js","webpack:///./js/angular/chat/constants/apiParamsInitialization.js","webpack:///./js/angular/chat/constants/gameParameters.js","webpack:///./js/angular/chat/constants/httpResponse.js","webpack:///./js/angular/chat/constants/messageHelper.js","webpack:///./js/angular/chat/constants/notificationType.js","webpack:///./js/angular/chat/constants/notificationsName.js","webpack:///./js/angular/chat/constants/resources.js","webpack:///./js/angular/chat/controllers/chatBarController.js","webpack:///./js/angular/chat/controllers/chatController.js","webpack:///./js/angular/chat/controllers/detailsController.js","webpack:///./js/angular/chat/controllers/dialogController.js","webpack:///./js/angular/chat/controllers/dialogHeaderController.js","webpack:///./js/angular/chat/controllers/dialogMessagesController.js","webpack:///./js/angular/chat/controllers/dialogsController.js","webpack:///./js/angular/chat/controllers/friendsController.js","webpack:///./js/angular/chat/controllers/linkCardController.js","webpack:///./js/angular/chat/controllers/linkCardMessagesController.js","webpack:///./js/angular/chat/controllers/playTogetherController.js","webpack:///./js/angular/chat/controllers/userConversationInfoController.js","webpack:///./js/angular/chat/directives/abuseReportDirective.js","webpack:///./js/angular/chat/directives/addFriendsDirective.js","webpack:///./js/angular/chat/directives/backBtnDirective.js","webpack:///./js/angular/chat/directives/chatAvatarHeadshotDirective.js","webpack:///./js/angular/chat/directives/chatBarDirective.js","webpack:///./js/angular/chat/directives/chatBaseDirective.js","webpack:///./js/angular/chat/directives/chatGameIconDirective.js","webpack:///./js/angular/chat/directives/chatPlaceholderDirective.js","webpack:///./js/angular/chat/directives/confirmNegativeActionDirective.js","webpack:///./js/angular/chat/directives/confirmRemoveMemberDirective.js","webpack:///./js/angular/chat/directives/conversationTitleDirective.js","webpack:///./js/angular/chat/directives/conversationTitleEditorDirective.js","webpack:///./js/angular/chat/directives/detailsDirective.js","webpack:///./js/angular/chat/directives/detailsScrollbarDirective.js","webpack:///./js/angular/chat/directives/dialogDirective.js","webpack:///./js/angular/chat/directives/dialogHeaderDirective.js","webpack:///./js/angular/chat/directives/dialogLazyLoadDirective.js","webpack:///./js/angular/chat/directives/dialogMinimizeDirective.js","webpack:///./js/angular/chat/directives/displayMessageDirective.js","webpack:///./js/angular/chat/directives/friendsLazyLoadDirective.js","webpack:///./js/angular/chat/directives/groupSelectDirective.js","webpack:///./js/angular/chat/directives/lazyLoadDirective.js","webpack:///./js/angular/chat/directives/linkCardDirective.js","webpack:///./js/angular/chat/directives/minimizeItemDirective.js","webpack:///./js/angular/chat/directives/removeFocusDirective.js","webpack:///./js/angular/chat/directives/repeatDoneDirective.js","webpack:///./js/angular/chat/directives/selectFriendsDirective.js","webpack:///./js/angular/chat/directives/selectFriendsResizeDirective.js","webpack:///./js/angular/chat/directives/systemMessageDirective.js","webpack:///./js/angular/chat/directives/togglePopoverDirective.js","webpack:///./js/angular/chat/directives/userConversationInfoDirective.js","webpack:///./js/angular/chat/services/chatClientStorageUtilityService.js","webpack:///./js/angular/chat/services/chatService.js","webpack:///./js/angular/chat/services/chatUtilityService.js","webpack:///./js/angular/chat/services/conversationUtilityService.js","webpack:///external \"jQuery\"","webpack:///./js/angular/chat/services/cookieService.js","webpack:///./js/angular/chat/services/dialogAttributesService.js","webpack:///./js/angular/chat/services/gameLayoutService.js","webpack:///./js/angular/chat/services/gameService.js","webpack:///./js/angular/chat/services/gameUtility.js","webpack:///./js/angular/chat/services/libraryInitializationService.js","webpack:///./js/angular/chat/services/messageService.js","webpack:///./js/angular/chat/services/messageUtility.js","webpack:///./js/angular/chat/services/pinGameLayoutService.js","webpack:///./js/angular/chat/services/pinGameService.js","webpack:///./js/angular/chat/services/playTogetherLayoutService.js","webpack:///./js/angular/chat/services/playTogetherService.js","webpack:///./js/angular/chat/services/presenceLayoutService.js","webpack:///./js/angular/chat/services/storageService.js","webpack:///./js/angular/chat/services/systemMessagesService.js","webpack:///./js/angular/chat/services/usersService.js","webpack:///./js/angular/chat/directives/templates/addFriends.html","webpack:///./js/angular/chat/directives/templates/chatAbuseReport.html","webpack:///./js/angular/chat/directives/templates/chatAvatarHeadshot.html","webpack:///./js/angular/chat/directives/templates/chatBar.html","webpack:///./js/angular/chat/directives/templates/chatBase.html","webpack:///./js/angular/chat/directives/templates/chatDialog.html","webpack:///./js/angular/chat/directives/templates/chatGameIcon.html","webpack:///./js/angular/chat/directives/templates/chatGroupDialog.html","webpack:///./js/angular/chat/directives/templates/chatPlaceholder.html","webpack:///./js/angular/chat/directives/templates/confirmNegativeAction.html","webpack:///./js/angular/chat/directives/templates/conversationTitle.html","webpack:///./js/angular/chat/directives/templates/conversationTitleEditor.html","webpack:///./js/angular/chat/directives/templates/createChatGroup.html","webpack:///./js/angular/chat/directives/templates/details.html","webpack:///./js/angular/chat/directives/templates/dialogHeader.html","webpack:///./js/angular/chat/directives/templates/dialogMinimize.html","webpack:///./js/angular/chat/directives/templates/displayMessage.html","webpack:///./js/angular/chat/directives/templates/gamesList.html","webpack:///./js/angular/chat/directives/templates/linkCard.html","webpack:///./js/angular/chat/directives/templates/selectFriends.html","webpack:///./js/angular/chat/directives/templates/systemMessage.html","webpack:///./js/angular/chat/directives/templates/userConversationInfo.html","webpack:///external \"Roblox\"","webpack:///external \"angular\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./js/angular/chat/chatEntry.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","camelToKebab","str","replace","toLowerCase","extractHtmlFileName","split","pop","ES6MigrationHelper","importFilesUnderPath","ctx","forEach","templateCacheGenerator","angular","moduleName","mainTplCtx","commonTplCtx","run","tc","key","name","put","dependencies","contactsModule","push","err","chat","config","msdElasticConfig","languageResourceProvider","append","Lang","setLanguageKeysFromFile","apiParamsInitialization","chatApiParams","pageNumberOfUnreadConversations","pageSizeOfUnreadConversations","pageNumberOfConversations","pageSizeOfConversations","pageSizeOfDisplayMessages","pageSizeOfUnreadMessages","pageSizeOfGetMessages","startIndexOfFriendList","pageSizeOfFriendList","loadMoreUnreadConversations","loadMoreConversations","loadMoreFriends","dialogParams","loadMoreMessages","sendingMessage","sendMessageHasError","smallestPageSizeOfGetMessages","gameUrls","multiGetPlaceDetails","GetGamesSorts","GetGamesList","getGamesByUniverseIds","EnvironmentUrls","multiGetPlayabilityStatus","chatUrls","setConversationUniverse","resetConversationUniverse","getConversations","apiSets","multiGetAvatarHeadshots","url","retryable","withCredentials","multiGetContacts","multiGetPresence","getMetaData","getContactsMetadata","chatModule","gameParameters","reasonProhibitedMessage","None","Playable","AnonymousAccessProhibited","AssetUnapproved","IncorrectAssetType","IncorrectAssetConfiguration","PlaceHasNoUniverse","UniverseDoesNotHaveARootPlace","UniverseRootPlaceIsNotAPlace","UniverseRootPlaceIsNotActive","InsufficientPermissionCopylocked","InsufficientPermissionFriendsOnly","InsufficientPermissionGroupOnly","InsufficientPermissionOwnerOnly","InsufficientPermissionMembershipLevel","InsufficientPermissionRoleSet","PermissionDenied","RequiredValueNotSet","AssetUnavailable","DeviceRestricted","UnderReview","PurchaseRequired","AccountRestricted","PlaceHasNoPublishedVersion","sortNames","myRecent","maxRowsOfMyRecentGames","gameIconMultiGetLimit","gameUrl","httpResponse","sendMessageErrorCode","textTooLong","messageHelper","linkCardTypes","gameCard","catalogItemCard","libraryItemCard","messageRegexs","RegExp","gameCardRegexs","privateServerLinkCode","urlRegex","onlyNewLineRegex","removeNewLineRegex","emojiRegex","zwjRegex","emojiRepRegex","senderTypes","user","system","messageTypes","plainText","link","eventBased","notificationType","newMessage","newMessageBySelf","newConversation","addedToConversation","removedFromConversation","participantAdded","participantLeft","friendshipDestroyed","friendshipCreated","presenceOffline","presenceOnline","conversationTitleModerated","chatEnabled","chatDisabled","conversationTitleChanged","participantTyping","conversationUniverseChanged","userTagUpdate","notificationsName","ChatNotifications","FriendshipNotifications","PresenceNotifications","ChatPrivacySettingNotifications","UserTagNotifications","VoiceNotifications","resources","templates","chatBaseTemplate","chatBarTemplate","abuseReportTemplate","dialogTemplate","groupDialogTemplate","dialogMinimizeTemplate","chatPlaceholderTemplate","confirmNegativeActionTemplate","userConversationInfoTemplate","selectFriendsTemplate","createChatGroupTemplate","conversationTitleTemplate","conversationTitleEditorTemplate","detailsTemplate","addFriendsTemplate","aliasTemplate","toastTemplate","linkCard","gamesList","dialogHeader","systemMessage","displayMessage","chatAvatarHeadshot","chatGameIcon","eventStreamParams","actions","click","hover","render","properties","clickPlayFromLinkCardInChat","clickLinkCardInChat","clickPlayButtonInPlayTogether","clickJoinButtonInPlayTogether","clickBuyButtonInPlayTogether","clickViewDetailsButtonInPlayTogether","openGameListInPlayTogether","pinGameInPlayTogether","unpinGameInPlayTogether","pinGameInLinkCard","unpinGameInLinkCard","loadGameLinkCardInChat","context","gamePlayFromLinkCard","gamePlayFromPlayTogether","urlParamNames","startConversationWithUserId","conversationId","events","openGameList","hoverPopoverParams","isOpen","triggerSelector","hoverPopoverSelector","performanceMeasurements","messageSend","messageReceive","chatDataLSNamePrefix","CurrentUser","chatBarController","$scope","$log","chatClientStorageUtilityService","chatUtility","cancelSearch","chatViewModel","searchTerm","chatLibrary","chatLayout","searchFocus","saveChatBarLayoutInCookie","chatBarLayout","collapsed","updateStorage","storageDictionary","cookieOption","toggleChatContainer","updateUnreadConversationCount","chatBarInitialized","isChatDisconnected","isChatEnabledByPrivacySetting","errorMaskEnable","pageDataLoading","chatEnabledByPrivacySettingTypes","enabled","isChatEmpty","chatLandingEnabled","search","item","contact","participants","searchTermLowerCase","isSearchMatchedInParticipants","length","some","participant","displayName","participantName","indexOf","chatController","$window","$document","$timeout","$interval","chatService","messageService","localStorageService","performanceService","messageUtility","googleAnalyticsEventsService","urlService","dialogAttributes","libraryInitialization","gameService","playTogetherService","pinGameService","presenceLayout","storageService","usersService","conversationsUtility","contactsService","thumbnailConstants","usersPresenceService","getDialogsNumber","availableWidthOfDialogs","innerWidth","widthOfChat","widthOfDialogMinimize","widthOfDialog","spaceOfDialog","availableNumberOfDialogs","Math","floor","numberOfDialogs","dialogIdList","numberOfMinimizedDialogs","minimizedDialogIdList","debug","notifyUser","conversation","layoutId","dialogDict","isUpdated","updateStatus","dialogStatus","REFRESH","content","launchDialog","dialogsOverflowWindow","widthOfWindow","thresholdMobile","getMessageForConversations","conversationIds","multiGetLatestMessages","then","data","messageData","messages","chatMessages","message","conversationsDict","chatUserDict","hasUnreadMessages","isRespectingMessageTypeEnabled","categorizeMessageType","getDisplayMessageForUser","sanitizeMessage","buildDisplayMessage","resetConversationUnreadStatus","formatTimestampInConversation","getUnreadConversationCount","count","unreadConversationCount","document","title","currentTabTitle","fetchConversations","buildChatUserListByUnreadConversations","getPlaceDetailsForNewPlaceIds","updateChatConversation","allMessages","isSelf","appendMessages","fetchDataForLinkCard","typing","status","userId","senderTargetId","updateConverationTypingStatus","updateChatViewModel","activeType","NEWMESSAGE","markAsActive","markSeenData","getDataForMarkingSeen","markAsSeen","updateCurrentConversation","allData","getLayoutId","dialogType","CHAT","exclusiveStartMessageId","messageReceiveStartTime","Date","getTime","getMessagesByPageSize","messageReceiveInterval","sendPerformanceData","resetDialogLayout","dialogLayout","dialogLayoutInitialization","dialogLayoutResetConstant","value","retrieveDialogStatus","preSetChatLibrary","dialogsLayout","removeFromStorage","dialogId","idx","newGroup","splice","dialog","chatBarOpenEnabled","thresholdChatBarOpen","isTakeOverOn","realTimeClient","setup","memberStatus","userPresenceTypes","selectedFriendIds","RealTime","initializePresetData","isStorageDefined","getFromStorage","initializeChatBar","logSinglePerformanceMark","performanceMarkLabels","chatPageDataLoaded","updateLayoutIdList","remove","position","layoutIdList","doesUserHavePrivateConversation","userConversationsDict","removeFriend","FRIEND","isConversation","chatLayoutIds","friendsHasConversation","positionOfFriends","closeDialog","getAllFriends","getFriendsPresence","result","getFriendsInfo","error","console","updateDialogList","autoPop","maxOpenDialogs","oldestLayoutId","lastLayoutId","MINIMIZE","positionInMinimizedList","minimizedDialogData","dialogInitValue","autoOpen","getUserConversations","friendsDict","chatConversationsLoaded","userIds","getUserIdsNotInFriendsDict","buildChatUserListByConversations","urlParseInitialized","window","location","query","substr","part","decodeURIComponent","startSpecificConversationFromUserId","startSpecificConversationFromConvId","getUserContacts","getUserInfo","updateConversationTitle","actorId","conversations","currentConversation","actorUsername","buildSystemMessage","resetTypingStatusAsReceiver","userIdForTyping","typingStatus","userTypingStatus","userTypingDict","indexOfUserTyping","isTypingFromSender","lastTimeReceiveTypingEvent","cancel","lastTimeReceiveTimer","typingStatusForReceiverExpirationInterval","currentDate","now","typingInChatForReceiverExpirationMs","refreshTypingStatus","fetchPlaceDetailsIntoPlacesLibrary","placeIds","buildPlacesLibrary","placesLibrary","buildButtonLayoutPerConversation","handleChatNotifications","Type","rootPlaceId","parameters","type","ConversationId","actorTargetId","ActorTargetId","IsTyping","UserId","RootPlaceId","universeId","UniverseId","placeName","encodedPlaceName","setPinGameData","fireEvent","googleAnalyticsEvent","category","action","handleFriendshipNotifications","EventArgs","$digest","triggerHandler","handleUserTagNotifications","options","skipCache","buildPlayTogetherInConversationFromPresence","presenceData","sortPlayTogetherIds","pinGame","recentUserIdFromPresence","recentPlaceIdFromPresence","togglePopoverParams","placeForShown","playTogetherIds","setPlaceForShown","releasePlayerFromActivePlaceLists","placeIdsThatNotActive","playTogetherDict","playTogether","pId","parseInt","playerIds","updateButtonLayoutPerConversation","vanishRootPlaceIdFromPlayTogether","playerId","expiredRootPlaceId","expiredPlaceIds","updatePresenceInFriendDict","userPresenceType","presence","updatePresenceStatus","response","i","newRootPlaceId","existingUserPresenceData","inGame","layoutIdsDictPerUserId","listenToPresenceServiceInWeb","addEventListener","event","detail","unsubscribeRealTimeForChat","Unsubscribe","handleChatPrivacySetting","handleSignalRSuccess","initializeRealTimeSubscriptionsForChat","disabled","initializeRealTimeSubscriptionsForChatPrivacySetting","Subscribe","chatSignalRInitializing","SubscribeToConnectionEvents","handleSignalRError","isReloadRequired","$apply","timer","chatSignalRSucceeded","pageInitializing","initializeChat","signalRDisconnectionResponseInMilliseconds","onResize","resizing","NEWGROUPCHAT","GROUPCHAT","ADDFRIENDS","formatUserDataByType","participantType","targetId","getUserInfoForConversation","userIdsNotInFriendsDict","initiator","candidatePlayerIds","username","displayUserId","buildPlayTogetherListForEachConveration","nameForDisplay","DisplayNames","isGroupChat","noCache","userInfo","addToFront","friendId","allConversationLayoutIdsDict","Username","unshift","conversationInitStatus","filterFriends","friends","sortFriendList","friendIds","friendLayoutIds","friend","friendData","updatedLayoutIds","concat","updateConversationInLocalStorage","params","pageNumber","pageSize","localStorageName","getStorageName","chatDataName","cacheData","getChatDataFromLocalStorage","saveChatDataToLocalStorage","unreadConversations","newMsg","unreadConversation","conversationType","multiUserConversation","existingConversation","processMessages","placeIdsNotInPlaceLibrary","placeButtonLayoutNotSetConversationIds","pinGameId","isPlaceDetailQualifiedInLibrary","placeId","placeButtonLayout","isConversationExistedInViewModel","openConversation","dialogRequestedToOpenParams","startOneToOneConversation","newLayoutId","updateFocusedDialog","destroyDialogLayout","destroyId","empty","deleteLayoutIdFromDialogList","dialogList","indicesToRemove","j","expandGameListInConversation","playTogetherLibrary","layout","activeGamesList","isCollapsed","focusMeEnabled","updateDialogsPosition","scrollbarElm","getScrollBarSelector","scrollbarObj","layoutPosition","focusedLayoutId","selectedUserIds","selectedUsersDict","numberOfSelected","mCustomScrollbar","$broadcast","addOnLayoutId","shift","REPLACE","validLayoutId","openSettingsPage","href","getAbsoluteUrl","linksLibrary","settingLink","getAvatars","getAvatarHeadshots","currentFriend","chatConversationsLoading","initializeEvents","bind","$on","chatFriendsListReloadTime","removeLocalStorage","dialogLocalStorageName","clearLocalStorage","args","initializeServices","appData","setParams","setStorageParams","initializeLayoutLibrary","thumbnailTypes","avatarHeadshotSize","layoutLibrary","initializeChatLibrary","domain","languageForPrivacySettingUnavailable","playTogetherGameCardsEnabled","isPlayTogetherForGameCardsEnabled","path","expires","dialogLocalStorageNamePrefix","isUserUnder13","maxConversationTitleLengthInput","maxConversationTitleLength","partyChromeDisplayTimeStampInterval","quotaOfGroupChatMembers","numberOfMembersForPartyChrome","screenHeight","screen","height","typingInChatAsSenderThrottleMs","typingInChatFromSenderThrottleMs","eventAction","eventActions","Chat","getUserAgent","eventCategories","JSErrors","senderTypesForUnknownMessageTypeError","relativeValueToRecordUiPerformance","isUsingCacheToLoadFriendsInfoEnabled","cachedDataFromLocalStorageExpirationMS","isInvalidMessageTypeFallbackEnabled","validMessageTypesWhiteList","shouldRespectConversationHasUnreadMessageToMarkAsRead","initializeChatViewModel","chatDomain","bootstrapAllInitialization","initialize","catch","getContactsMetaData","detailsController","initator","dialogData","currentUserId","canConversationRemoveMember","dialogController","keyCode","$filter","httpStatusCodes","removeFromConversation","random","startSendingTime","interval","sendMessage","rawContent","canResend","resultType","SUCCESS","errorMessages","default","MODERATED","messageContentModerated","hashOutContent","hasLinkCard","linkCardMessages","pieceOfMessage","isCard","messageFromServer","messagesDict","messageId","sent","messageType","buildTimeStamp","resetClusterMessage","pieces","filteredForReceivers","senderType","setClusterMaster","errorResponse","textTooLongCode","sendingMessagesTooQuicklyErrorMsg","errorStatus","errorData","textTooLongErrorMsg","sendingMessagesTooQuickly","errors","tooManyAttempts","toggleDetails","details","isEnabled","saveIntoDialogsLayout","toggleConversationEditor","isConversationTitleEditorEnabled","toggleAddFriends","isAddFriendsEnabled","addFriends","addMoreFriends","getLimitLinkNameForMemberList","numberOfRemove","numberOfMemebers","memberDisplay","linkName","isAll","seeLessLink","seeMoreLink","defaultLimit","toggleMemberList","limitNumber","toggleFriendsMenu","isHidden","friendIdForMenuOn","friendMenuAction","updatePopoverParams","dialogSelectorPrefix","popoverTriggerSelectorPrefix","dialogTriggerClassPrefix","togglePopoverParamsUpdate","dialogSelect","dialogTriggerClassSelector","isFirstTimeOpen","assign","messageForSend","scrollBarType","MESSAGE","listenToScrollInitialized","friendsScrollbarElm","FRIENDSELECTION","updateDialog","IsdialogContainerVisible","find","addClass","buildNewMessage","read","newMessageObj","resendMessage","resendMessageObj","keyPressEnter","isTypingAsSender","lastTimeTypingAsSender","$event","isTyping","which","enter","updateUserTypingStatus","toggleDialogFocusStatus","abuseReport","isConfirmed","isConfirmationOn","userIdForAbuseReport","relativeUrl","abuseReportUrl","escape","Endpoints","AbuseReportDispatcher","leaveGroupChat","resetConfirmDialog","confirmDialog","leaveChatGroupData","negativeAction","leaveChatGroup","headerTitle","btnName","cancelBtnName","updateFriends","viewParticipants","lookUpMembers","toggleGroupNameEditor","renameEditor","hasFocus","updateDialogStyle","renameTitle","legacyTitle","renameGroupConversation","conversationTitle","removeMember","isOverLoaded","removeUserData","removeUser","confirmCallBack","updateDialogHeader","isHovered","hoverOnCollapsed","isDialogMainContainerHidden","getMessages","element","oldHeight","newHeight","preventDefault","stopPropagation","setResizeInputLayout","init","dialogHeaderController","eventStreamService","isGameIconAvailable","isPinOrActiveGameAvailable","isMyRecentGameAvailable","myRecentPlaceId","eventType","sendEventWithTarget","gamesListTemplateUrl","dialogMessagesController","isSenderTypeAllowed","canRenderMessage","isSystemMessage","isMessageTypeInWhiteList","isMessageTypeLegal","isSenderTypeLegal","shouldShowInvalidMessageTypePrompt","dialogsController","isNewGroupChat","canAddFriendInExistedConversation","resetPreviousDialog","oldLayoutId","preDialogData","preserved","isDuplicatedConversation","generateDialog","createNewGroupChat","newTitle","newGroupChatLocked","participantUsers","hiddenFromSelection","startGroupConversation","ex","sendInvite","addToConversation","selectedUserId","finally","myPosition","friendsController","scrollToBottom","isCreated","updateFriendsDictData","linkCardController","modalService","gameLayout","isLinkCardAvailableAndParsedByClientSide","isLinkCard","sendEventStream","sendLoadLinkCardEvent","sendGamePlayEnvent","sendGamePlayEvent","playGame","addition","playPrivateServerGame","playTogetherGame","playRegularGame","buyAccess","place","gameIconUrl","bodyText","creatorName","price","titleText","imageUrl","actionButtonShow","actionButtonText","yesButtonText","actionButtonClass","yesButtonClass","neutralButtonText","noButtonText","closeButtonShow","playTogetherButton","isPlayButtonDisabled","open","goToPlaceDetails","placeUrl","play","buttonLayoutForLinkCard","playButtonTypes","buy","sendPinGameEvent","linkCardMessagesController","pinGameLayout","playTogetherController","playTogetherLayout","playGameService","gameInstanceId","encodedCreatorName","joinGame","playGameProperties","buildPlayGameProperties","eventStreamProperties","eventName","gamePlayIntentEventCtx","launchGame","joinGameFromPlayTogether","buttonType","join","toggleActiveGameList","toggleMenuText","showMoreText","minNumberForFit","showLess","numberOfActiveGames","hasPinGameAndActiveGames","hasActiveGames","pinGameIsInActiveGames","hasNoPinGameAndNoActiveGame","isMyRecentAvaliable","unPinGame","unpinGame","updateScrollbar","gameListScrollListSelector","initData","activeGamesListUpdate","inDialog","maxNumberForFit","limitCount","showMore","chatUser","userConversationInfoController","hasGameAlbum","isGameAvailableInChat","setupHoverPopover","restrict","templateUrl","backBtn","scope","className","chatBar","chatBase","chatPlaceholder","confirmNegativeAction","confirmCallback","confirmRemoveMember","conversationTitleEditor","detailsScrollbar","autoExpandScrollbar","scrollInertia","contentTouchScroll","mouseWheel","advanced","autoScrollOnFocus","$compile","$templateCache","loadScope","newGroupTemplate","nameLink","profileUrl","limitMemberDisplay","loadTemplate","get","dialogScopeLib","validTimeStamp","$$childHead","timeStamp","$destroy","newScope","$new","lfn","intervalCount","isFriendNonMember","currentUserPosition","selectedUserPosition","getDialogLibrary","dialogLibrary","getLocalStorage","candidateFriendIds","slice","isMembersOverloaded","selectFriends","isNumberOfMemberOverloaded","numberOfSelectedUsers","numberOfExistingUsers","toastLayout","isNeeded","text","toastText","toggleFriendSelection","isSelected","toggleDialogContainer","markMessagesAsRead","active","markInactive","getSelection","toString","selection","createRange","getTitle","defaultTitleForMessage","userName","changeTitle","played","setLocalStorage","markActive","handleLocalStorage","checkNewGenerationDialogStatus","isRenameEditorNeeded","getRecentGames","isGetRecentGamesCalled","getRecentGame","placeDetailsData","buttonLayoutForMe","playButtons","dialogMessages","dialogBannerTypes","timeout","timeoutToast","defaultStyle","$watch","newValue","oldValue","currentDialog","INIT","list","idOfDialog","dialogElm","querySelector","widthOfChatContainer","indexPositionOfDialog","library","right","calculateRightPosition","zIndex","defaultChatZIndex","css","listenLocalStorage","dialogLazyLoad","callbackScrollToBottom","callbackLazyLoad","isChatLoading","sizeOfMessages","preProcessMessages","buildFallbackTimeStamp","setFallbackClusterMaster","callbacks","onInit","onUpdate","hasClass","onTotalScroll","onTotalScrollOffset","onTotalScrollBack","dialogMinimize","updatePosition","numberOfOpenDialogs","hasMinimizedDialogs","layoutIdHasClicked","openDialog","Roblox","BootstrapWidgets","SetupPopover","selector","areDialogsUpdated","$evalAsync","initializeDisplayMessage","friendsLazyLoad","onOverflowYNone","groupSelect","heightOfHeader","topBarHeight","innerHeight","dialogObj","valueExcludedFromHeight","heightOfScrollbar","lazyLoad","getFriends","scrollbarClassName","callbackScrollStart","onScrollStart","minimizeItem","on","dialogLayoutId","removeFocus","repeatDone","buildScrollbar","setInviteBtnState","inviteBtnDisabled","selectFriendsResize","detailsActionHeight","detailsInputHeight","togglePopover","dialogSelector","pinIconClassName","isExclusiveClickSelector","bindDocumentClick","target","insideTrigger","isExclusive","isPinIcon","dialogTrigger","is","isDialogTrigger","trigger","watchPlayTogetherIds","watchDialogFirstTimeOpen","userConversationInfo","cookieService","Storage","this","isCookieDefined","retrieveCookie","updateCookie","destroyCookie","updateChatFriendsListReloadTime","reloadTime","$q","httpService","markAsReadApi","markAsSeenApi","sendMessageApi","conversationsApi","userConversationsApi","getMessagesApi","multiGetLatestMessagesApi","getUnreadConversationCountApi","startOneToOneConversationApi","startGroupConversationApi","addToConversationApi","removeFromConversationApi","renameGroupConversationApi","updateUserTypingStatusApi","uiPerformanceTrackingApi","httpGet","paramsOfConvs","deferred","defer","promise","urlConfig","buildPinGameInConversation","participantUserIds","httpPost","participantUserId","update","nextPageSize","shouldRetrieveNextMessages","markAsRead","endMessageId","conversationIdsToMarkRead","conversationsToMarkSeen","measureName","featureName","callBackTypes","linkify","Linkify","escapeHTML","escapeNewline","getAssetDetails","privateServer","match","emojiPiece","isEmoji","dialogTypes","scrollBarTypes","unavailable","htmlEntities","String","buildLinkCard","cardType","linkContent","pieceOfMsg","hasOwnProperty","reg","assetDetails","buildEmojiPieces","regex","emojiSequence","isZwj","prevIndex","frag","exec","newIndex","index","currentEmoji","lastIndex","buildLinkCardMessages","parsedContent","arrayOfMsgs","orderBy","onlineFriends","offlineFriends","scrollType","hasLinkifyContent","beforeLinkifyMessage","hasLinkifyMessage","sanitizeMessages","inputStyle","inputHeight","inputMaxHeight","maxHeightOfTextInput","maxHeightOfInput","bannerHeight","renameEditorHeight","dialogHeight","marginTop","paddingOfInput","dialogStyle","inputTextStyle","currentIndex","widthOfCollapsedDialog","widthOfDialogs","dialogContainerClass","invalidateLinkCardsInMessageDict","messageDictByPlaceIds","invalidatePlaceDetails","isInvalid","reasonProhibited","isUserInfoInFriendsDict","avatarHeadshot","conversationUniverse","jQuery","$","JSON","stringify","parse","languageResource","lang","member","game","OPEN","COLLAPSE","REMOVE","friendsCount","friendNum","oneToOneConversation","cloudEditConversation","isFocused","heightOfInput","limitCharacterCount","heightOfBanner","isBannerEnabled","bannerType","isNegativeConfirmationEnabled","PENDING","MEMBER","LEADER","isErrorMsg","notAvailable","isPlayable","robux","placeNameString","robuxString","multiGetPlaceDetailsForLinkCard","getPlaceForMessages","placeDetails","placeDetail","inValidPlaceIds","originalPlaceData","builder","universeRootPlaceId","creatorId","builderId","description","gameReferralUrl","universeLibrary","invalidateLinkCardInPieceOfMessage","chatApiDomain","gameApiDomain","placeDetailDict","isPlayTogetherGame","GameLauncher","rootPlaceIdForPinGame","isPinGameAnActiveGame","sortToken","sortName","sorts","sort","token","maxRows","games","universeIds","urlInChatTemplate","getGameDetailReferralUrls","getGames","promises","getGamesInfo","getPlayabilityStatus","all","results","gameInfo","playabilityStatus","placeLibrary","gameUtility","isGameExistedInPlacesLibrary","chatContentSelector","widthOfChatCollapsed","numberOfDialogOpen","isFriendListEmpty","isUserConversationEmpty","noConnectionMsg","focusedDialogId","conversationTitleChangedText","messageFilterForReceivers","unknownMessageType","playTogetherBannerHeight","searchHeight","gamesPageLink","isMetaDataLoaded","voiceChannelMapToConversation","settingTabName","$rootScope","systemMessages","parseMessageTimestamp","parsedTimestamp","formatTimeStamp","isBriefVersion","yesterday","messageDateObj","messageDate","toDateString","diffDays","round","abs","messageDay","getDay","currentYear","getFullYear","messageYear","timeFormat","displayTimeStamp","briefTimeStamp","universeIdsNotInPlaceLibrary","isSystemMessageFromApi","setSystemMessage","placesData","messagesToMarkRead","markMessagesRead","queueMessageToMarkRead","latestMessageId","doMarkMessagesRead","savedData","unreadMessageIds","unreadMessageTimestamps","pendingUnreadMessageId","isClusterMaster","startTimeStamp","previousTimeStamp","updateContentForInvalidMessageType","manipulateMessages","sizeOfMsg","alienIds","senderId","lastUpdated","currentLatestMsg","chatMessage","isCurrentMessageSameAsTheLatestMessage","isMessagePresentInMessagesDict","sizeOfUnreadMsg","groupName","pinGameUpdate","playGameUpdate","hasParams","userTyping","clusterMessagesMarkedAsTyping","isLegal","toISOString","tooltipForPinGame","tooltipForUnPinGame","titleForPinGame","numberOfMembers","inPinnedGame","inActiveGame","recommendedLabel","isPlacePlayersOnlyMe","latestSeenRootPlaceId","numberOfPlayers","gameId","lastSeen","lastOnline","existingPlayerIds","offline","online","inStudio","isChatDataFromLocalStorageEnabled","chatDataFromLocalStorageExpirationMS","IsChatDataFromLocalStorageEnabled","ChatDataFromLocalStorageExpirationSeconds","chatDataLSName","param","saveDataByTimeStamp","fetchNonExpiredCachedData","storageData","storage","gameName","avatarUrlConfig","buildBatchPromises","avatars","avatar","getUserPresence","presenceUrlConfig","presences","userPresences","avatarHeadshots","payload","__webpack_module_cache__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","defineProperty","enumerable","obj","prop","prototype","call","r","Symbol","toStringTag","require","chatTemplateContext"],"mappings":"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","file":"chat.bundle.min.js","sourcesContent":["var map = {\n\t\"./apiParamsInitialization.js\": 9167,\n\t\"./gameParameters.js\": 4560,\n\t\"./httpResponse.js\": 7682,\n\t\"./messageHelper.js\": 5667,\n\t\"./notificationType.js\": 6515,\n\t\"./notificationsName.js\": 8180,\n\t\"./resources.js\": 8513\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 4940;","var map = {\n\t\"./chatBarController.js\": 5825,\n\t\"./chatController.js\": 2586,\n\t\"./detailsController.js\": 7097,\n\t\"./dialogController.js\": 7850,\n\t\"./dialogHeaderController.js\": 5002,\n\t\"./dialogMessagesController.js\": 9205,\n\t\"./dialogsController.js\": 7542,\n\t\"./friendsController.js\": 6664,\n\t\"./linkCardController.js\": 1206,\n\t\"./linkCardMessagesController.js\": 9596,\n\t\"./playTogetherController.js\": 2335,\n\t\"./userConversationInfoController.js\": 9976\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 9084;","var map = {\n\t\"./abuseReportDirective.js\": 8613,\n\t\"./addFriendsDirective.js\": 2070,\n\t\"./backBtnDirective.js\": 1803,\n\t\"./chatAvatarHeadshotDirective.js\": 8395,\n\t\"./chatBarDirective.js\": 6626,\n\t\"./chatBaseDirective.js\": 9752,\n\t\"./chatGameIconDirective.js\": 1974,\n\t\"./chatPlaceholderDirective.js\": 4630,\n\t\"./confirmNegativeActionDirective.js\": 4167,\n\t\"./confirmRemoveMemberDirective.js\": 6818,\n\t\"./conversationTitleDirective.js\": 7449,\n\t\"./conversationTitleEditorDirective.js\": 7486,\n\t\"./detailsDirective.js\": 6715,\n\t\"./detailsScrollbarDirective.js\": 6983,\n\t\"./dialogDirective.js\": 5585,\n\t\"./dialogHeaderDirective.js\": 2359,\n\t\"./dialogLazyLoadDirective.js\": 4835,\n\t\"./dialogMinimizeDirective.js\": 9300,\n\t\"./displayMessageDirective.js\": 7730,\n\t\"./friendsLazyLoadDirective.js\": 31,\n\t\"./groupSelectDirective.js\": 9458,\n\t\"./lazyLoadDirective.js\": 4684,\n\t\"./linkCardDirective.js\": 3657,\n\t\"./minimizeItemDirective.js\": 3889,\n\t\"./removeFocusDirective.js\": 8828,\n\t\"./repeatDoneDirective.js\": 3717,\n\t\"./selectFriendsDirective.js\": 9775,\n\t\"./selectFriendsResizeDirective.js\": 3252,\n\t\"./systemMessageDirective.js\": 2287,\n\t\"./togglePopoverDirective.js\": 9262,\n\t\"./userConversationInfoDirective.js\": 189\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 9083;","var map = {\n\t\"./chatClientStorageUtilityService.js\": 235,\n\t\"./chatService.js\": 7417,\n\t\"./chatUtilityService.js\": 4031,\n\t\"./conversationUtilityService.js\": 5767,\n\t\"./cookieService.js\": 2768,\n\t\"./dialogAttributesService.js\": 512,\n\t\"./gameLayoutService.js\": 6796,\n\t\"./gameService.js\": 2436,\n\t\"./gameUtility.js\": 9816,\n\t\"./libraryInitializationService.js\": 2731,\n\t\"./messageService.js\": 7523,\n\t\"./messageUtility.js\": 3355,\n\t\"./pinGameLayoutService.js\": 6737,\n\t\"./pinGameService.js\": 8034,\n\t\"./playTogetherLayoutService.js\": 3254,\n\t\"./playTogetherService.js\": 1062,\n\t\"./presenceLayoutService.js\": 4411,\n\t\"./storageService.js\": 5404,\n\t\"./systemMessagesService.js\": 5898,\n\t\"./usersService.js\": 7482\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2883;","var map = {\n\t\"./directives/templates/addFriends.html\": 4742,\n\t\"./directives/templates/chatAbuseReport.html\": 5707,\n\t\"./directives/templates/chatAvatarHeadshot.html\": 6492,\n\t\"./directives/templates/chatBar.html\": 5307,\n\t\"./directives/templates/chatBase.html\": 1254,\n\t\"./directives/templates/chatDialog.html\": 5244,\n\t\"./directives/templates/chatGameIcon.html\": 5016,\n\t\"./directives/templates/chatGroupDialog.html\": 3578,\n\t\"./directives/templates/chatPlaceholder.html\": 7999,\n\t\"./directives/templates/confirmNegativeAction.html\": 5430,\n\t\"./directives/templates/conversationTitle.html\": 6125,\n\t\"./directives/templates/conversationTitleEditor.html\": 1108,\n\t\"./directives/templates/createChatGroup.html\": 8061,\n\t\"./directives/templates/details.html\": 6203,\n\t\"./directives/templates/dialogHeader.html\": 185,\n\t\"./directives/templates/dialogMinimize.html\": 2553,\n\t\"./directives/templates/displayMessage.html\": 4040,\n\t\"./directives/templates/gamesList.html\": 3400,\n\t\"./directives/templates/linkCard.html\": 4148,\n\t\"./directives/templates/selectFriends.html\": 5015,\n\t\"./directives/templates/systemMessage.html\": 2674,\n\t\"./directives/templates/userConversationInfo.html\": 4174\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 4850;","\r\nfunction camelToKebab(str) {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nfunction extractHtmlFileName(str) {\r\n    let file = str.split('/').pop();\r\n    return file.replace('.html', '');\r\n}\r\n\r\n//we don't touch common template code is it might break other consumers\r\n//so we just remove the surrounding script tags.\r\nfunction removeScriptTag(str) {\r\n    var scriptTagReg = /<\\/?script[^>]*>/gi;\r\n    return str.replace(scriptTagReg, '');\r\n}\r\n\r\nconst ES6MigrationHelper = {\r\n\r\n    importFilesUnderPath: (ctx) => {\r\n        ctx.keys().forEach(ctx);\r\n    },\r\n\r\n    templateCacheGenerator: (angular, moduleName, mainTplCtx, commonTplCtx) => {\r\n        return angular.module(moduleName, [])\r\n            .run(['$templateCache', function (tc) {\r\n                if (mainTplCtx) {\r\n                    mainTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, mainTplCtx(key));\r\n                    });\r\n                }\r\n                if (commonTplCtx) {\r\n                    commonTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, removeScriptTag(commonTplCtx(key)));\r\n                    });\r\n                }\r\n            }]);\r\n    }\r\n};\r\n\r\nmodule.exports = ES6MigrationHelper;","import { Lang } from 'Roblox';\r\nimport angular from 'angular';\r\n\r\nconst dependencies = [\r\n  'robloxApp',\r\n  'monospaced.elastic',\r\n  'modal',\r\n  'ui.bootstrap.popover',\r\n  'toast',\r\n  'thumbnails'\r\n];\r\nconst contactsModule = 'contacts';\r\n\r\ntry {\r\n  angular.module(contactsModule);\r\n  dependencies.push(contactsModule);\r\n} catch (err) {}\r\n\r\nconst chat = angular.module('chat', dependencies).config([\r\n  'msdElasticConfig',\r\n  'languageResourceProvider',\r\n  function (msdElasticConfig, languageResourceProvider) {\r\n    msdElasticConfig.append = '\\n';\r\n    if (Lang.ChatResources) {\r\n      languageResourceProvider.setLanguageKeysFromFile(Lang.ChatResources);\r\n    }\r\n  }\r\n]);\r\n\r\nexport default chat;\r\n","import { EnvironmentUrls } from 'Roblox';\r\nimport chatModule from '../chatModule';\r\n\r\nconst apiParamsInitialization = {\r\n  chatApiParams: {\r\n    pageNumberOfUnreadConversations: 1,\r\n    pageSizeOfUnreadConversations: 30,\r\n    pageNumberOfConversations: 1,\r\n    pageSizeOfConversations: 30,\r\n    pageSizeOfDisplayMessages: 1,\r\n    pageSizeOfUnreadMessages: 30,\r\n    pageSizeOfGetMessages: 30,\r\n    startIndexOfFriendList: 0,\r\n    pageSizeOfFriendList: 50,\r\n    loadMoreUnreadConversations: false,\r\n    loadMoreConversations: false,\r\n    loadMoreFriends: false\r\n  },\r\n\r\n  dialogParams: {\r\n    loadMoreMessages: true,\r\n    sendingMessage: false,\r\n    sendMessageHasError: false,\r\n    loadMoreFriends: false,\r\n    startIndexOfFriendList: 0,\r\n    pageSizeOfFriendList: 50,\r\n    pageSizeOfGetMessages: 30,\r\n    smallestPageSizeOfGetMessages: 3\r\n  },\r\n\r\n  gameUrls: {\r\n    multiGetPlaceDetails: '/v1/games/multiget-place-details',\r\n    GetGamesSorts: '/v1/games/sorts?model.gameSortsContext=ChatSorts',\r\n    GetGamesList: '/v1/games/list',\r\n    getGamesByUniverseIds: EnvironmentUrls ? `${EnvironmentUrls.gamesApi}/v1/games` : '/v1/games',\r\n    multiGetPlayabilityStatus: EnvironmentUrls\r\n      ? `${EnvironmentUrls.gamesApi}/v1/games/multiget-playability-status`\r\n      : '/v1/games/multiget-playability-status'\r\n  },\r\n\r\n  chatUrls: {\r\n    setConversationUniverse: '/v2/set-conversation-universe',\r\n    resetConversationUniverse: '/v2/reset-conversation-universe',\r\n    getConversations: '/v2/get-conversations'\r\n  },\r\n\r\n  apiSets: {\r\n    multiGetAvatarHeadshots: {\r\n      url: EnvironmentUrls\r\n        ? `${EnvironmentUrls.thumbnailsApi}/v1/users/avatar-headshot?size=48x48&format=png`\r\n        : '/v1/users/avatar-headshot?size=48x48&format=png',\r\n      retryable: true,\r\n      withCredentials: true\r\n    },\r\n    multiGetContacts: {\r\n      url: EnvironmentUrls\r\n        ? `${EnvironmentUrls.contactsApi}/v1/user/get-tags`\r\n        : '/v1/user/get-tags',\r\n      retryable: true,\r\n      withCredentials: true\r\n    },\r\n    multiGetPresence: {\r\n      url: EnvironmentUrls\r\n        ? `${EnvironmentUrls.presenceApi}/v1/presence/users`\r\n        : '/v1/presence/users',\r\n      retryable: true,\r\n      withCredentials: true\r\n    },\r\n    getMetaData: {\r\n      url: EnvironmentUrls ? `${EnvironmentUrls.chatApi}/v2/metadata` : '/v2/metadata',\r\n      retryable: false,\r\n      withCredentials: true\r\n    },\r\n    getContactsMetadata: {\r\n      url: EnvironmentUrls\r\n        ? `${EnvironmentUrls.contactsApi}/v1/contacts/metadata`\r\n        : '/v1/contacts/metadata',\r\n      retryable: true,\r\n      withCredentials: true\r\n    }\r\n  }\r\n};\r\n\r\nchatModule.constant('apiParamsInitialization', apiParamsInitialization);\r\n\r\nexport default apiParamsInitialization;\r\n","import chatModule from '../chatModule';\r\n\r\nconst gameParameters = {\r\n  reasonProhibitedMessage: {\r\n    None: 'None',\r\n    Playable: 'Playable',\r\n    AnonymousAccessProhibited: 'AnonymousAccessProhibited',\r\n    AssetUnapproved: 'AssetUnapproved',\r\n    IncorrectAssetType: 'IncorrectAssetType',\r\n    IncorrectAssetConfiguration: 'IncorrectAssetConfiguration',\r\n    PlaceHasNoUniverse: 'PlaceHasNoUniverse',\r\n    UniverseDoesNotHaveARootPlace: 'This game has no root place.',\r\n    UniverseRootPlaceIsNotAPlace: 'UniverseRootPlaceIsNotAPlace',\r\n    UniverseRootPlaceIsNotActive: 'UniverseRootPlaceIsNotActive',\r\n    InsufficientPermissionCopylocked: 'InsufficientPermissionCopylocked',\r\n    InsufficientPermissionFriendsOnly: 'This game is friends only.',\r\n    InsufficientPermissionGroupOnly: 'Group members only.',\r\n    InsufficientPermissionOwnerOnly: 'InsufficientPermissionOwnerOnly',\r\n    InsufficientPermissionMembershipLevel: 'InsufficientPermissionMembershipLevel',\r\n    InsufficientPermissionRoleSet: 'InsufficientPermissionRoleSet',\r\n    PermissionDenied: 'PermissionDenied',\r\n    RequiredValueNotSet: 'RequiredValueNotSet',\r\n    AssetUnavailable: 'AssetUnavailable',\r\n    DeviceRestricted: 'DeviceRestricted',\r\n    UnderReview: 'This game is under moderation review.',\r\n    PurchaseRequired: 'PurchaseRequired',\r\n    AccountRestricted: 'AccountRestricted',\r\n    PlaceHasNoPublishedVersion: 'This place has no published version.'\r\n  },\r\n  sortNames: {\r\n    myRecent: 'MyRecent'\r\n  },\r\n  maxRowsOfMyRecentGames: 1,\r\n  gameIconMultiGetLimit: 30,\r\n  gameUrl: '/games/{placeId}/robloxgame'\r\n};\r\n\r\nchatModule.constant('gameParameters', gameParameters);\r\n\r\nexport default gameParameters;\r\n","import chatModule from '../chatModule';\r\n\r\nconst httpResponse = {\r\n  sendMessageErrorCode: {\r\n    textTooLong: 'TextTooLong'\r\n  }\r\n};\r\n\r\nchatModule.constant('httpResponse', httpResponse);\r\n\r\nexport default httpResponse;\r\n","import chatModule from '../chatModule';\r\n\r\nconst messageHelper = {\r\n  linkCardTypes: {\r\n    gameCard: 'gameCard',\r\n    catalogItemCard: 'catalogItemCard',\r\n    libraryItemCard: 'libraryItemCard'\r\n  },\r\n  messageRegexs: {\r\n    gameCard: new RegExp(/\\/games\\/(\\d+)/) // catalogItemCard: new RegExp(/\\/catalog\\/(\\d+)/), libraryItemCard: new RegExp(/\\/library\\/(\\d+)/)\r\n  },\r\n  gameCardRegexs: {\r\n    privateServerLinkCode: new RegExp(/privateServerLinkCode=(\\S+)/)\r\n  },\r\n  urlRegex: new RegExp(\r\n    /(https?:\\/\\/(?:www\\.|(?!www)|(?:web\\.))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|web\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www)|(?:web\\.))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/\r\n  ),\r\n  onlyNewLineRegex: new RegExp(/^[\\r|\\n|\\s]+$/),\r\n  removeNewLineRegex: new RegExp(/^\\n+|\\n+$/g),\r\n  emojiRegex: new RegExp(\r\n    /\\u200D|\\uFE0F|(?:[\\xA9\\xAE\\u2122\\u23E9-\\u23EF\\u23F3\\u23F8-\\u23FA\\u24C2\\u25B6\\u2600-\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDE4F\\uDE80-\\uDEFF]|\\uD83E[\\uDD00-\\uDDFF])/g\r\n  ),\r\n  zwjRegex: new RegExp(/\\u200D/),\r\n  emojiRepRegex: new RegExp(/\\uFE0F/),\r\n  senderTypes: {\r\n    user: 'User',\r\n    system: 'System'\r\n  },\r\n  messageTypes: {\r\n    plainText: {\r\n      name: 'PlainText'\r\n    },\r\n    link: {\r\n      name: 'Link'\r\n    },\r\n    eventBased: {\r\n      name: 'EventBased',\r\n      setConversationUniverse: 'SetConversationUniverse'\r\n    }\r\n  }\r\n};\r\n\r\nchatModule.constant('messageHelper', messageHelper);\r\n\r\nexport default messageHelper;\r\n","import chatModule from '../chatModule';\r\n\r\nconst notificationType = {\r\n  newMessage: 'NewMessage',\r\n  newMessageBySelf: 'NewMessageBySelf',\r\n  newConversation: 'NewConversation',\r\n  addedToConversation: 'AddedToConversation',\r\n  removedFromConversation: 'RemovedFromConversation',\r\n  participantAdded: 'ParticipantAdded',\r\n  participantLeft: 'ParticipantLeft',\r\n  friendshipDestroyed: 'FriendshipDestroyed',\r\n  friendshipCreated: 'FriendshipCreated',\r\n  presenceOffline: 'UserOffline',\r\n  presenceOnline: 'UserOnline',\r\n  conversationTitleModerated: 'ConversationTitleModerated',\r\n  chatEnabled: 'ChatEnabled',\r\n  chatDisabled: 'ChatDisabled',\r\n  conversationTitleChanged: 'ConversationTitleChanged',\r\n  participantTyping: 'ParticipantTyping',\r\n  conversationUniverseChanged: 'ConversationUniverseChanged',\r\n  userTagUpdate: 'UserTagUpdate'\r\n};\r\n\r\nchatModule.constant('notificationType', notificationType);\r\n\r\nexport default notificationType;\r\n","import chatModule from '../chatModule';\r\n\r\nconst notificationsName = {\r\n  ChatNotifications: 'ChatNotifications',\r\n  FriendshipNotifications: 'FriendshipNotifications',\r\n  PresenceNotifications: 'PresenceNotifications',\r\n  ChatPrivacySettingNotifications: 'ChatPrivacySettingNotifications',\r\n  UserTagNotifications: 'UserTagChangeNotification',\r\n  VoiceNotifications: 'VoiceNotifications'\r\n};\r\n\r\nchatModule.constant('notificationsName', notificationsName);\r\n\r\nexport default notificationsName;\r\n","import { CurrentUser } from 'Roblox';\r\nimport chatModule from '../chatModule';\r\n\r\nconst resources = {\r\n  templates: {\r\n    chatBaseTemplate: 'chat-base',\r\n    chatBarTemplate: 'chat-bar',\r\n    abuseReportTemplate: 'chat-abuse-report',\r\n    dialogTemplate: 'chat-dialog',\r\n    groupDialogTemplate: 'chat-group-dialog',\r\n    dialogMinimizeTemplate: 'dialog-minimize',\r\n    chatPlaceholderTemplate: 'chat-placeholder',\r\n    confirmNegativeActionTemplate: 'confirm-negative-action',\r\n    userConversationInfoTemplate: 'user-conversation-info',\r\n    selectFriendsTemplate: 'select-friends',\r\n    createChatGroupTemplate: 'create-chat-group',\r\n    conversationTitleTemplate: 'conversation-title',\r\n    conversationTitleEditorTemplate: 'conversation-title-editor',\r\n    detailsTemplate: 'details',\r\n    addFriendsTemplate: 'add-friends',\r\n    aliasTemplate: 'alias',\r\n    toastTemplate: 'toast',\r\n    linkCard: 'link-card',\r\n    gamesList: 'games-list',\r\n    dialogHeader: 'dialog-header',\r\n    systemMessage: 'system-message',\r\n    displayMessage: 'display-message',\r\n    chatAvatarHeadshot: 'chat-avatar-headshot',\r\n    chatGameIcon: 'chat-game-icon'\r\n  },\r\n  eventStreamParams: {\r\n    actions: {\r\n      click: 'click',\r\n      hover: 'hover',\r\n      render: 'render'\r\n    },\r\n    properties: {},\r\n    clickPlayFromLinkCardInChat: 'clickBtnFromLinkCardInChat',\r\n    clickLinkCardInChat: 'clickLinkCardInChat',\r\n    clickPlayButtonInPlayTogether: 'clickPlayButtonInPlayTogether',\r\n    clickJoinButtonInPlayTogether: 'clickJoinButtonInPlayTogether',\r\n    clickBuyButtonInPlayTogether: 'clickBuyButtonInPlayTogether',\r\n    clickViewDetailsButtonInPlayTogether: 'clickViewDetailsButtonInPlayTogether',\r\n    openGameListInPlayTogether: 'openGameListInPlayTogether',\r\n    pinGameInPlayTogether: 'pinGameInPlayTogether',\r\n    unpinGameInPlayTogether: 'unpinGameInPlayTogether',\r\n    pinGameInLinkCard: 'pinGameInLinkCard',\r\n    unpinGameInLinkCard: 'unpinGameInLinkCard',\r\n    loadGameLinkCardInChat: 'loadGameLinkCardInChat',\r\n    context: {\r\n      gamePlayFromLinkCard: 'PlayGameFromLinkCard',\r\n      gamePlayFromPlayTogether: 'PlayGameFromPlayTogether'\r\n    }\r\n  },\r\n  urlParamNames: {\r\n    startConversationWithUserId: 'startConversationWithUserId', // notfication stream\r\n    conversationId: 'conversationId' // push notification\r\n  },\r\n  events: {\r\n    openGameList: 'openGameList'\r\n  },\r\n  hoverPopoverParams: {\r\n    isOpen: false,\r\n    triggerSelector: '',\r\n    hoverPopoverSelector: ''\r\n  },\r\n  performanceMeasurements: {\r\n    messageSend: 'MessageSend',\r\n    messageReceive: 'MessageReceive'\r\n  },\r\n  chatDataLSNamePrefix: CurrentUser ? `Roblox.Chat.${CurrentUser.userId}` : 'Roblox.Chat'\r\n};\r\n\r\nchatModule.constant('resources', resources);\r\n\r\nexport default resources;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatBarController($scope, $log, chatClientStorageUtilityService, chatUtility) {\r\n  'ngInject';\r\n\r\n  $scope.cancelSearch = () => {\r\n    $scope.chatViewModel.searchTerm = '';\r\n    $scope.chatLibrary.chatLayout.searchFocus = false;\r\n  };\r\n\r\n  $scope.saveChatBarLayoutInCookie = function () {\r\n    const chatBarLayout = {\r\n      collapsed: $scope.chatLibrary.chatLayout.collapsed\r\n    };\r\n    chatClientStorageUtilityService.updateStorage(\r\n      chatClientStorageUtilityService.storageDictionary.chatBarLayout,\r\n      chatBarLayout,\r\n      $scope.chatLibrary.cookieOption\r\n    );\r\n  };\r\n\r\n  $scope.toggleChatContainer = function () {\r\n    $scope.chatLibrary.chatLayout.collapsed = !$scope.chatLibrary.chatLayout.collapsed;\r\n    $scope.updateUnreadConversationCount();\r\n    $scope.chatLibrary.chatLayout.chatBarInitialized = true;\r\n    $scope.saveChatBarLayoutInCookie();\r\n  };\r\n\r\n  $scope.isChatDisconnected = function () {\r\n    const {\r\n      chatLayout: { isChatEnabledByPrivacySetting, errorMaskEnable, pageDataLoading }\r\n    } = $scope.chatLibrary;\r\n    const { chatEnabledByPrivacySettingTypes } = chatUtility;\r\n    return (\r\n      isChatEnabledByPrivacySetting === chatEnabledByPrivacySettingTypes.enabled &&\r\n      (errorMaskEnable || pageDataLoading)\r\n    );\r\n  };\r\n\r\n  $scope.isChatEmpty = function () {\r\n    const {\r\n      chatLayout: { isChatEnabledByPrivacySetting, chatLandingEnabled }\r\n    } = $scope.chatLibrary;\r\n    const { chatEnabledByPrivacySettingTypes } = chatUtility;\r\n    return (\r\n      chatLandingEnabled ||\r\n      isChatEnabledByPrivacySetting !== chatEnabledByPrivacySettingTypes.enabled\r\n    );\r\n  };\r\n\r\n  $scope.search = item => {\r\n    const { searchTerm } = $scope.chatViewModel;\r\n    if (!searchTerm) {\r\n      return true;\r\n    }\r\n    const { name, contact, participants } = item;\r\n    const searchTermLowerCase = searchTerm.toLowerCase();\r\n    let isSearchMatchedInParticipants = false;\r\n    if (participants && participants.length) {\r\n      isSearchMatchedInParticipants = participants.some(participant => {\r\n        const { displayName, name: participantName } = participant;\r\n        return (\r\n          (displayName && displayName.toLowerCase().indexOf(searchTermLowerCase) > -1) ||\r\n          participantName.toLowerCase().indexOf(searchTermLowerCase) > -1\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      isSearchMatchedInParticipants ||\r\n      name.toLowerCase().indexOf(searchTermLowerCase) !== -1 ||\r\n      (contact && contact.toLowerCase().indexOf(searchTermLowerCase) !== -1)\r\n    );\r\n  };\r\n}\r\n\r\nchatModule.controller('chatBarController', chatBarController);\r\n\r\nexport default chatBarController;\r\n","import { RealTime, EnvironmentUrls, CurrentUser, DisplayNames } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction chatController(\r\n  $scope,\r\n  $window,\r\n  $document,\r\n  $timeout,\r\n  $interval,\r\n  $log,\r\n  chatService,\r\n  messageService,\r\n  chatUtility,\r\n  chatClientStorageUtilityService,\r\n  localStorageService,\r\n  performanceService,\r\n  messageUtility,\r\n  googleAnalyticsEventsService,\r\n  urlService,\r\n  dialogAttributes,\r\n  libraryInitialization,\r\n  gameService,\r\n  playTogetherService,\r\n  pinGameService,\r\n  presenceLayout,\r\n  resources,\r\n  storageService,\r\n  usersService,\r\n  conversationsUtility,\r\n  contactsService,\r\n  thumbnailConstants,\r\n  usersPresenceService\r\n) {\r\n  'ngInject';\r\n\r\n  // // ----------------------------------- PRIVATE --------------------------------\r\n\r\n  const refreshDialog = function (layoutId) {\r\n    if ($scope.chatLibrary.dialogDict[layoutId]) {\r\n      $scope.chatLibrary.dialogDict[layoutId].isUpdated = true;\r\n      $scope.chatLibrary.dialogDict[layoutId].updateStatus = chatUtility.dialogStatus.REFRESH;\r\n    }\r\n  };\r\n\r\n  const getDialogsNumber = function () {\r\n    const widthOfWindow = $document.innerWidth();\r\n    const availableWidthOfDialogs =\r\n      widthOfWindow -\r\n      chatUtility.chatLayout.widthOfChat -\r\n      chatUtility.chatLayout.widthOfDialogMinimize;\r\n    const widthOfDialog =\r\n      chatUtility.chatLayout.widthOfDialog + chatUtility.chatLayout.spaceOfDialog;\r\n\r\n    $scope.chatLibrary.chatLayout.availableNumberOfDialogs = Math.floor(\r\n      availableWidthOfDialogs / widthOfDialog\r\n    );\r\n    $scope.chatLibrary.chatLayout.numberOfDialogs = $scope.chatLibrary.dialogIdList.length;\r\n    $scope.chatLibrary.chatLayout.numberOfMinimizedDialogs =\r\n      $scope.chatLibrary.minimizedDialogIdList.length;\r\n    $log.debug(\r\n      ` -------------numberOfDialogs = -------------- ${$scope.chatLibrary.chatLayout.numberOfDialogs}`\r\n    );\r\n    $log.debug(\r\n      ` -------------availableNumberOfDialogs = -------------- ${$scope.chatLibrary.chatLayout.availableNumberOfDialogs}`\r\n    );\r\n  };\r\n\r\n  const dialogsFitWindow = function () {\r\n    const widthOfWindow = $document.innerWidth();\r\n    return (\r\n      $scope.chatLibrary.chatLayout.numberOfDialogs <\r\n        $scope.chatLibrary.chatLayout.availableNumberOfDialogs &&\r\n      widthOfWindow > chatUtility.chatLayout.thresholdMobile\r\n    );\r\n  };\r\n\r\n  const markActiveForDialog = function (layoutId, activeType) {\r\n    if ($scope.chatLibrary.dialogDict[layoutId]) {\r\n      $scope.chatLibrary.dialogDict[layoutId].markAsActive = true;\r\n      $scope.chatLibrary.dialogDict[layoutId].activeType = activeType;\r\n    }\r\n  };\r\n\r\n  const notifyUser = function (conversation) {\r\n    // existing dialog, just refresh data\r\n    if ($scope.chatLibrary.dialogDict[conversation.layoutId]) {\r\n      refreshDialog(conversation.layoutId);\r\n    }\r\n    // populate new dialog\r\n    if (\r\n      !$scope.chatLibrary.dialogDict[conversation.layoutId] &&\r\n      conversation.displayMessage &&\r\n      conversation.displayMessage.content\r\n    ) {\r\n      $scope.launchDialog(conversation.layoutId, true);\r\n    }\r\n  };\r\n\r\n  $scope.dialogsOverflowWindow = function () {\r\n    const widthOfWindow = $document.innerWidth();\r\n    return (\r\n      $scope.chatLibrary.chatLayout.numberOfDialogs >=\r\n        $scope.chatLibrary.chatLayout.availableNumberOfDialogs &&\r\n      widthOfWindow > chatUtility.chatLayout.thresholdMobile\r\n    );\r\n  };\r\n\r\n  $scope.getMessageForConversations = function (conversationIds) {\r\n    if (conversationIds.length > 0) {\r\n      chatService\r\n        .multiGetLatestMessages(\r\n          conversationIds,\r\n          chatUtility.chatApiParams.pageSizeOfDisplayMessages\r\n        )\r\n        .then(\r\n          function (data) {\r\n            if (data && data.length > 0) {\r\n              angular.forEach(data, function (messageData) {\r\n                const messages = messageData.chatMessages;\r\n                const message = messages.length > 0 ? messages[0] : {};\r\n                if ($scope.chatLibrary.conversationsDict[messageData.conversationId]) {\r\n                  const { layoutId } = $scope.chatLibrary.conversationsDict[\r\n                    messageData.conversationId\r\n                  ];\r\n                  const conversation = $scope.chatUserDict[layoutId];\r\n                  conversation.hasUnreadMessages =\r\n                    conversation.hasUnreadMessages ||\r\n                    messageUtility.hasUnreadMessages(conversation, messages);\r\n                  if ($scope.chatLibrary.isRespectingMessageTypeEnabled) {\r\n                    messageService.categorizeMessageType(\r\n                      $scope.chatLibrary,\r\n                      messages,\r\n                      conversation\r\n                    );\r\n                    conversation.displayMessage = messageService.getDisplayMessageForUser(messages);\r\n                  } else {\r\n                    chatUtility.sanitizeMessage(message);\r\n                    conversation.displayMessage = messageService.buildDisplayMessage(message);\r\n                  }\r\n                  messageService.resetConversationUnreadStatus(\r\n                    $scope.chatUserDict[layoutId],\r\n                    messages\r\n                  );\r\n                  messageService.formatTimestampInConversation($scope.chatUserDict[layoutId]);\r\n                }\r\n              });\r\n            }\r\n          },\r\n          function () {\r\n            $log.debug('----- multiGetLatestMessages request is failed ! ------');\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  $scope.updateUnreadConversationCount = function () {\r\n    chatService.getUnreadConversationCount().then(\r\n      function (data) {\r\n        if (data) {\r\n          const { count } = data;\r\n          $scope.chatViewModel.unreadConversationCount = count;\r\n          if (count > 0) {\r\n            $window.document.title = `(${count}) ${$scope.chatLibrary.currentTabTitle}`;\r\n          } else {\r\n            $window.document.title = $scope.chatLibrary.currentTabTitle;\r\n          }\r\n        }\r\n      },\r\n      function () {\r\n        $log.debug('----- getUnreadConversationCount request is failed ! ------');\r\n        $window.document.title = $scope.chatLibrary.currentTabTitle;\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchConversations = function (id) {\r\n    const conversationIds = [];\r\n    conversationIds.push(id);\r\n    chatService.getConversations(conversationIds).then(function (data) {\r\n      if (data) {\r\n        $scope.buildChatUserListByUnreadConversations(data);\r\n        $scope.getPlaceDetailsForNewPlaceIds(data);\r\n      }\r\n    });\r\n  };\r\n\r\n  const updateChatConversation = function (allMessages, conversation, isSelf) {\r\n    messageService.appendMessages($scope.chatLibrary, conversation, allMessages);\r\n    gameService.fetchDataForLinkCard(allMessages, $scope.chatLibrary);\r\n    messageUtility.hasUnreadMessages(conversation, allMessages);\r\n    const latestMessage = allMessages[0];\r\n    const typing = {\r\n      status: false,\r\n      userId: latestMessage.senderTargetId\r\n    };\r\n    $scope.updateConverationTypingStatus(conversation.id, typing);\r\n    $scope.updateChatViewModel(conversation, true);\r\n    notifyUser(conversation);\r\n    if (!isSelf) {\r\n      markActiveForDialog(conversation.layoutId, chatUtility.activeType.NEWMESSAGE);\r\n      // mark any windows as seen if the tab is focused.\r\n      const markSeenData = chatUtility.getDataForMarkingSeen($scope.chatUserDict);\r\n      if (markSeenData.length > 0) {\r\n        chatService.markAsSeen(markSeenData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCurrentConversationMessages = function (\r\n    layoutId,\r\n    conversationId,\r\n    exclusiveStartMessageId,\r\n    isSelf\r\n  ) {\r\n    const allData = [];\r\n    const conversation = $scope.chatUserDict[layoutId];\r\n    let messageReceiveStartTime = null;\r\n    if (!isSelf) {\r\n      messageReceiveStartTime = new Date().getTime();\r\n    }\r\n    const updateChatConversationCallback = function (messageReceiveStartTime) {\r\n      updateChatConversation(allData, conversation, isSelf);\r\n      if (messageReceiveStartTime) {\r\n        const messageReceiveEndTime = new Date().getTime();\r\n        const messageReceiveInterval = messageReceiveEndTime - messageReceiveStartTime;\r\n        chatService.sendPerformanceData(\r\n          resources.performanceMeasurements.messageReceive,\r\n          messageReceiveInterval\r\n        );\r\n      }\r\n    };\r\n    chatService.getMessagesByPageSize(\r\n      conversation,\r\n      exclusiveStartMessageId,\r\n      chatUtility.dialogParams.smallestPageSizeOfGetMessages,\r\n      allData,\r\n      updateChatConversationCallback,\r\n      messageReceiveStartTime\r\n    );\r\n  };\r\n\r\n  const updateCurrentConversation = function (id, isSelf) {\r\n    const layoutId = $scope.getLayoutId(id, chatUtility.dialogType.CHAT);\r\n    if (angular.isUndefined($scope.chatUserDict[layoutId])) {\r\n      fetchConversations(id);\r\n    } else {\r\n      getCurrentConversationMessages(layoutId, id, null, isSelf);\r\n    }\r\n  };\r\n\r\n  $scope.resetDialogLayout = function (dialogLayout) {\r\n    if (dialogLayout) {\r\n      const dialogLayoutInitialization = { ...chatUtility.dialogLayout };\r\n      const dialogLayoutResetConstant = { ...chatUtility.dialogLayoutResetConstant };\r\n\r\n      angular.forEach(dialogLayoutInitialization, function (value, key) {\r\n        if (angular.isUndefined(dialogLayout[key])) {\r\n          dialogLayout[key] = { ...value };\r\n        }\r\n      });\r\n\r\n      angular.forEach(dialogLayoutResetConstant, function (value, key) {\r\n        dialogLayout[key] = { ...value };\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.retrieveDialogStatus = function () {\r\n    // need to do with whole dialogDict\r\n    if (\r\n      angular.isDefined($scope.preSetChatLibrary) &&\r\n      angular.isDefined($scope.preSetChatLibrary.dialogIdList)\r\n    ) {\r\n      const dialogIdList = { ...$scope.preSetChatLibrary.dialogIdList };\r\n\r\n      if (dialogIdList.length === 0) {\r\n        $scope.preSetChatLibrary.dialogDict = {};\r\n        $scope.preSetChatLibrary.dialogsLayout = {};\r\n        chatClientStorageUtilityService.removeFromStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogDict,\r\n          $scope.chatLibrary.cookieOption\r\n        );\r\n        chatClientStorageUtilityService.removeFromStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogsLayout,\r\n          $scope.chatLibrary.cookieOption\r\n        );\r\n        return false;\r\n      }\r\n      const { dialogDict } = $scope.preSetChatLibrary;\r\n      const { dialogsLayout } = $scope.preSetChatLibrary;\r\n      angular.forEach(dialogIdList, function (dialogId, idx) {\r\n        if (dialogId !== chatUtility.newGroup.layoutId && !$scope.chatUserDict[dialogId]) {\r\n          $scope.preSetChatLibrary.dialogIdList.splice(idx, 1);\r\n          delete dialogDict[dialogId];\r\n          delete dialogsLayout[dialogId];\r\n        }\r\n\r\n        $scope.resetDialogLayout(dialogsLayout[dialogId]);\r\n      });\r\n      $scope.chatLibrary.dialogIdList = $scope.preSetChatLibrary.dialogIdList;\r\n      angular.forEach(dialogDict, function (dialog, layoutId) {\r\n        if (!dialog.isUpdated) {\r\n          dialog.isUpdated = true;\r\n        }\r\n        if (layoutId === chatUtility.newGroup.layoutId) {\r\n          $scope.chatUserDict[chatUtility.newGroup.layoutId] = $scope.newGroup;\r\n        }\r\n        $scope.chatLibrary.dialogDict[layoutId] = dialog;\r\n        if (dialogsLayout[layoutId]) {\r\n          $scope.chatLibrary.dialogsLayout[layoutId] = dialogsLayout[layoutId];\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const chatBarOpenEnabled = function () {\r\n    return (\r\n      $window.innerWidth >= chatUtility.chatLayout.thresholdChatBarOpen &&\r\n      !$scope.chatLibrary.isTakeOverOn &&\r\n      !angular.element('#GamesPageLeftColumn').length\r\n    ); // window size large enough to fit, takeover is on or games page\r\n  };\r\n\r\n  let realTimeClient;\r\n  $scope.setup = function () {\r\n    $scope.chatUserDict = {};\r\n    $scope.dialogType = { ...chatUtility.dialogType };\r\n    $scope.memberStatus = { ...chatUtility.memberStatus };\r\n    $scope.userPresenceTypes = { ...chatUtility.userPresenceTypes };\r\n    $scope.newGroup = { ...dialogAttributes.newGroup };\r\n    $scope.selectedFriendIds = [];\r\n    $scope.chatLibrary = { ...libraryInitialization.chatLibrary };\r\n    if (angular.isDefined(RealTime)) {\r\n      realTimeClient = RealTime.Factory.GetClient();\r\n    }\r\n  };\r\n\r\n  $scope.initializePresetData = function () {\r\n    // temp store cookie data\r\n    $scope.preSetChatLibrary = {};\r\n\r\n    if (\r\n      chatClientStorageUtilityService.isStorageDefined(\r\n        chatClientStorageUtilityService.storageDictionary.dialogIdList\r\n      ) &&\r\n      chatClientStorageUtilityService.isStorageDefined(\r\n        chatClientStorageUtilityService.storageDictionary.dialogDict\r\n      )\r\n    ) {\r\n      $scope.preSetChatLibrary = {\r\n        dialogIdList: chatClientStorageUtilityService.getFromStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogIdList\r\n        ),\r\n        dialogDict: chatClientStorageUtilityService.getFromStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogDict\r\n        ),\r\n        dialogsLayout: chatClientStorageUtilityService.isStorageDefined(\r\n          chatClientStorageUtilityService.storageDictionary.dialogsLayout\r\n        )\r\n          ? chatClientStorageUtilityService.getFromStorage(\r\n              chatClientStorageUtilityService.storageDictionary.dialogsLayout\r\n            )\r\n          : {}\r\n      };\r\n    } else {\r\n      $scope.preSetChatLibrary = {\r\n        dialogIdList: [],\r\n        dialogDict: {},\r\n        dialogsLayout: {}\r\n      };\r\n    }\r\n\r\n    if (\r\n      chatClientStorageUtilityService.isStorageDefined(\r\n        chatClientStorageUtilityService.storageDictionary.chatBarLayout\r\n      )\r\n    ) {\r\n      $scope.preSetChatLibrary.chatBarLayout = chatClientStorageUtilityService.getFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.chatBarLayout\r\n      );\r\n    }\r\n    // setup api endpoint params for lazy loading\r\n    $scope.chatApiParams = { ...chatUtility.chatApiParams };\r\n  };\r\n\r\n  $scope.initializeChatBar = function () {\r\n    if (!$scope.chatLibrary.chatLayout.chatBarInitialized) {\r\n      if (chatBarOpenEnabled() && !$scope.preSetChatLibrary.chatBarLayout) {\r\n        $scope.chatLibrary.chatLayout.collapsed = false;\r\n      } else if ($scope.preSetChatLibrary.chatBarLayout) {\r\n        $scope.chatLibrary.chatLayout.collapsed = $scope.preSetChatLibrary.chatBarLayout.collapsed;\r\n      } else if (!chatBarOpenEnabled()) {\r\n        $scope.chatLibrary.chatLayout.collapsed = true;\r\n      }\r\n      $scope.chatLibrary.chatLayout.chatBarInitialized = true;\r\n    }\r\n    performanceService.logSinglePerformanceMark(\r\n      chatUtility.performanceMarkLabels.chatPageDataLoaded\r\n    );\r\n  };\r\n\r\n  const buildFriendList = function (friend) {\r\n    // having all friends store\r\n    if ($scope.chatLibrary.friendIds.indexOf(friend.id) < 0) {\r\n      $scope.chatLibrary.friendIds.push(friend.id);\r\n    }\r\n    if (!$scope.chatLibrary.friendsDict[friend.id]) {\r\n      const friendData = { ...friend };\r\n      $scope.chatLibrary.friendsDict[friend.id] = friendData;\r\n    }\r\n    if ($scope.chatViewModel.friendsHasConversation.indexOf(friend.id) < 0) {\r\n      const layoutId = $scope.getLayoutId(friend.id, chatUtility.dialogType.FRIEND);\r\n      friend.layoutId = layoutId;\r\n      friend.isConversation = false;\r\n      friend.dialogType = chatUtility.dialogType.FRIEND;\r\n      // this is for building chat bar friend list\r\n      if ($scope.chatLibrary.friendLayoutIds.indexOf(layoutId) < 0) {\r\n        $scope.chatLibrary.friendLayoutIds.push(layoutId);\r\n      }\r\n      $scope.updateChatViewModel(friend, false);\r\n\r\n      if ($scope.chatLibrary.chatLayout.chatLandingEnabled) {\r\n        $scope.chatLibrary.chatLayout.chatLandingEnabled = false;\r\n      }\r\n      $scope.buildPlayTogetherListForEachConveration(friend, friend);\r\n      playTogetherService.setPlaceForShown(friend); // set active game for shown game\r\n    }\r\n  };\r\n\r\n  const updateLayoutIdList = function (layoutId, remove) {\r\n    const position = $scope.chatLibrary.layoutIdList.indexOf(layoutId);\r\n    if (remove && position > -1) {\r\n      $scope.chatLibrary.layoutIdList.splice(position, 1);\r\n    } else if (!remove && position < 0) {\r\n      $scope.chatLibrary.layoutIdList.push(layoutId);\r\n    }\r\n  };\r\n\r\n  const doesUserHavePrivateConversation = function (userId) {\r\n    if ($scope.chatLibrary.userConversationsDict[userId]) {\r\n      return $scope.chatLibrary.userConversationsDict[userId];\r\n    }\r\n    return null;\r\n  };\r\n  $scope.removeFriend = function (userId) {\r\n    let layoutId = doesUserHavePrivateConversation(userId);\r\n    if (!layoutId) {\r\n      layoutId = $scope.getLayoutId(userId, chatUtility.dialogType.FRIEND);\r\n    }\r\n    const conversation = $scope.chatUserDict[layoutId];\r\n    if (conversation && conversation.isConversation) {\r\n      const conversationId = $scope.chatUserDict[layoutId].id;\r\n      $scope.chatLibrary.conversationsDict[conversationId].remove = true;\r\n    } else if (conversation) {\r\n      // if it is still friend object\r\n      const position = $scope.chatLibrary.chatLayoutIds.indexOf(layoutId);\r\n      if (position > -1) {\r\n        $scope.chatLibrary.chatLayoutIds.splice(position, 1);\r\n        delete $scope.chatUserDict[layoutId];\r\n        updateLayoutIdList(layoutId, true);\r\n      }\r\n    }\r\n\r\n    if ($scope.chatViewModel.friendsHasConversation.indexOf(userId) > -1) {\r\n      const positionOfFriends = $scope.chatViewModel.friendsHasConversation.indexOf(userId);\r\n      $scope.chatViewModel.friendsHasConversation.splice(positionOfFriends, 1);\r\n    }\r\n\r\n    if ($scope.chatLibrary.chatLayoutIds.indexOf(layoutId) > -1) {\r\n      $scope.closeDialog(layoutId);\r\n    }\r\n\r\n    if ($scope.chatLibrary.chatLayoutIds.length === 0) {\r\n      $scope.chatLibrary.chatLayout.chatLandingEnabled = true;\r\n    }\r\n  };\r\n\r\n  const initialzeUrlParser = function () {\r\n    if (window && window.location) {\r\n      $log.debug('--- -initialzeUrlParser- ---');\r\n      let query = window.location.search;\r\n      if (query && query.indexOf('?') > -1) {\r\n        query = query.substr(1);\r\n        query.split('&').forEach(function (part) {\r\n          const item = part.split('=');\r\n          const key = item[0];\r\n          const value = decodeURIComponent(item[1]);\r\n          switch (key) {\r\n            case chatUtility.urlParamNames.startConversationWithUserId:\r\n              $scope.startSpecificConversationFromUserId(value);\r\n              break;\r\n            case chatUtility.urlParamNames.conversationId:\r\n              $scope.chatLibrary.chatLayout.urlParseInitialized = true;\r\n              $scope.startSpecificConversationFromConvId(value);\r\n              break;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  $scope.getAllFriends = function () {\r\n    usersPresenceService.getFriendsPresence().then(\r\n      result => {\r\n        $scope.getFriendsInfo(result);\r\n      },\r\n      error => {\r\n        console.debug(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.updateDialogList = function (layoutId, autoPop) {\r\n    getDialogsNumber();\r\n\r\n    while (\r\n      $scope.chatLibrary.chatLayout.numberOfDialogs +\r\n        $scope.chatLibrary.chatLayout.numberOfMinimizedDialogs >=\r\n      $scope.chatLibrary.chatLayout.maxOpenDialogs\r\n    ) {\r\n      const oldestLayoutId = $scope.chatLibrary.dialogIdList[0];\r\n      $scope.closeDialog(oldestLayoutId);\r\n      getDialogsNumber();\r\n    }\r\n\r\n    if ($scope.dialogsOverflowWindow()) {\r\n      while (\r\n        $scope.chatLibrary.dialogIdList.length >=\r\n        $scope.chatLibrary.chatLayout.availableNumberOfDialogs\r\n      ) {\r\n        const lastLayoutId = $scope.chatLibrary.dialogIdList.pop();\r\n        if (angular.isUndefined(lastLayoutId)) {\r\n          break;\r\n        }\r\n        $scope.chatLibrary.dialogDict[lastLayoutId].isUpdated = true;\r\n        $scope.chatLibrary.dialogDict[lastLayoutId].updateStatus =\r\n          chatUtility.dialogStatus.MINIMIZE;\r\n        // remove layoutId in the minimize dialog list\r\n        const positionInMinimizedList = $scope.chatLibrary.minimizedDialogIdList.indexOf(layoutId);\r\n        if (positionInMinimizedList > -1) {\r\n          // if the dialog was previously collapsed while minimized, then uncollapse as the dialog is restored)\r\n          if ($scope.chatLibrary.dialogsLayout[layoutId].collapsed) {\r\n            $scope.chatLibrary.dialogsLayout[layoutId].collapsed = false;\r\n          }\r\n          $scope.chatLibrary.minimizedDialogIdList.splice(positionInMinimizedList, 1);\r\n          delete $scope.chatLibrary.minimizedDialogData[layoutId];\r\n        }\r\n      }\r\n    }\r\n\r\n    if ($scope.chatLibrary.dialogIdList.indexOf(layoutId) < 0) {\r\n      $scope.chatLibrary.dialogIdList.push(layoutId);\r\n    }\r\n    const dialogInitValue = { ...chatUtility.dialogInitValue };\r\n    if (angular.isDefined(autoPop) && autoPop) {\r\n      dialogInitValue.autoOpen = true;\r\n    }\r\n    $scope.chatLibrary.dialogDict[layoutId] = dialogInitValue;\r\n  };\r\n\r\n  $scope.getUserConversations = function () {\r\n    chatService\r\n      .getUserConversations(\r\n        $scope.chatApiParams.pageNumberOfConversations,\r\n        $scope.chatApiParams.pageSizeOfConversations,\r\n        $scope.chatLibrary.friendsDict\r\n      )\r\n      .then(\r\n        data => {\r\n          performanceService.logSinglePerformanceMark(\r\n            chatUtility.performanceMarkLabels.chatConversationsLoaded\r\n          );\r\n          let userIds = [];\r\n          const { friendsDict } = $scope.chatLibrary;\r\n          if (data && data.length > 0) {\r\n            userIds = conversationsUtility.getUserIdsNotInFriendsDict(data, friendsDict);\r\n            $scope.buildChatUserListByConversations(data, false);\r\n            $scope.chatApiParams.pageNumberOfConversations++;\r\n            $scope.retrieveDialogStatus();\r\n          }\r\n\r\n          if (!data || data.length < $scope.chatApiParams.pageSizeOfConversations) {\r\n            $scope.chatApiParams.loadMoreConversations = false;\r\n            $scope.chatApiParams.pageNumberOfConversations = 1;\r\n            if (data && data.length === 0) {\r\n              $scope.chatLibrary.chatLayout.chatLandingEnabled = true;\r\n            }\r\n            $scope.getAllFriends();\r\n          } else {\r\n            if ($scope.chatLibrary.chatLayout.pageDataLoading) {\r\n              $scope.chatLibrary.chatLayout.pageDataLoading = false;\r\n            }\r\n            $scope.chatApiParams.loadMoreConversations = true;\r\n          }\r\n          if (!$scope.chatLibrary.chatLayout.urlParseInitialized) {\r\n            initialzeUrlParser();\r\n          }\r\n          contactsService.getUserContacts(userIds, friendsDict);\r\n          return usersService.getUserInfo(userIds, friendsDict);\r\n        },\r\n        error => {\r\n          console.debug(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  $scope.updateConversationTitle = function (conversationId, actorId) {\r\n    const conversationIds = [conversationId];\r\n    chatService.getConversations(conversationIds).then(\r\n      function (conversations) {\r\n        if (conversations) {\r\n          angular.forEach(conversations, function (conversation) {\r\n            if (conversation.id === conversationId) {\r\n              let layoutId;\r\n              if ($scope.chatLibrary.conversationsDict[conversationId]) {\r\n                layoutId = $scope.chatLibrary.conversationsDict[conversationId].layoutId;\r\n              } else {\r\n                layoutId = $scope.getLayoutId(conversationId, chatUtility.dialogType.CHAT);\r\n              }\r\n              const currentConversation = $scope.chatUserDict[layoutId];\r\n              chatUtility.updateConversationTitle(currentConversation, conversation.title);\r\n              if ($scope.chatLibrary.userId !== actorId) {\r\n                currentConversation.actorUsername = $scope.chatLibrary.friendsDict[actorId].name;\r\n                messageService.buildSystemMessage(\r\n                  chatUtility.notificationType.conversationTitleChanged,\r\n                  currentConversation\r\n                );\r\n              }\r\n            }\r\n          });\r\n        }\r\n      },\r\n      function () {\r\n        $log.debug(' -------- getConversations request failed ------ ');\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.resetTypingStatusAsReceiver = function (dialogLayout, userIdForTyping) {\r\n    $log.debug('--------- resetTypingStatusAsReceiver has been called-----------');\r\n    const typingStatus = dialogLayout.typing;\r\n    const userTypingStatus = dialogLayout.typing.userTypingDict[userIdForTyping];\r\n\r\n    const indexOfUserTyping = dialogLayout.typing.userIds.indexOf(userIdForTyping);\r\n    dialogLayout.typing.userIds.splice(indexOfUserTyping);\r\n    dialogLayout.typing.isTypingFromSender = false;\r\n    userTypingStatus.status = false;\r\n    userTypingStatus.lastTimeReceiveTypingEvent = null;\r\n    $interval.cancel(userTypingStatus.lastTimeReceiveTimer);\r\n    delete dialogLayout.typing.userTypingDict[userIdForTyping];\r\n    $interval.cancel(typingStatus.lastTimeReceiveTimer);\r\n  };\r\n\r\n  $scope.typingStatusForReceiverExpirationInterval = function (\r\n    dialogLayout,\r\n    currentDate,\r\n    userIdForTyping\r\n  ) {\r\n    if (dialogLayout.typing.userIds.indexOf(userIdForTyping) < 0) {\r\n      dialogLayout.typing.userIds.push(userIdForTyping);\r\n    }\r\n    const now = currentDate || new Date().getTime();\r\n    const userTypingStatus = dialogLayout.typing.userTypingDict[userIdForTyping];\r\n    if (!userTypingStatus.lastTimeReceiveTypingEvent) {\r\n      userTypingStatus.lastTimeReceiveTypingEvent = now;\r\n    }\r\n    if (\r\n      now - userTypingStatus.lastTimeReceiveTypingEvent >\r\n        $scope.chatLibrary.typingInChatForReceiverExpirationMs ||\r\n      !userTypingStatus.status\r\n    ) {\r\n      $scope.resetTypingStatusAsReceiver(dialogLayout, userIdForTyping);\r\n    }\r\n  };\r\n\r\n  $scope.updateConverationTypingStatus = function (conversationId, typing) {\r\n    const layoutId = $scope.chatLibrary.conversationsDict[conversationId]\r\n      ? $scope.chatLibrary.conversationsDict[conversationId].layoutId\r\n      : $scope.getLayoutId(conversationId);\r\n    const conversation = $scope.chatUserDict[layoutId];\r\n    const typingStatus = typing.status;\r\n    const userIdForTyping = typing.userId;\r\n    const dialogLayout = $scope.chatLibrary.dialogsLayout[layoutId];\r\n    if (dialogLayout) {\r\n      if (!dialogLayout.typing.userTypingDict[userIdForTyping]) {\r\n        dialogLayout.typing.userTypingDict[userIdForTyping] = {};\r\n      }\r\n      dialogLayout.typing.isTypingFromSender = typingStatus;\r\n      const userTypingStatus = dialogLayout.typing.userTypingDict[userIdForTyping];\r\n      userTypingStatus.status = typingStatus;\r\n      messageService.refreshTypingStatus(conversation, userIdForTyping, typingStatus, dialogLayout);\r\n      if (typingStatus && !userTypingStatus.lastTimeReceiveTimer) {\r\n        $log.debug(`--------- start a new timer-----------${userIdForTyping}`);\r\n        $scope.typingStatusForReceiverExpirationInterval(dialogLayout, null, userIdForTyping);\r\n        userTypingStatus.lastTimeReceiveTimer = $interval(function () {\r\n          return $scope.typingStatusForReceiverExpirationInterval(\r\n            dialogLayout,\r\n            null,\r\n            userIdForTyping\r\n          );\r\n        }, $scope.chatLibrary.typingInChatForReceiverExpirationMs);\r\n      } else if (!typingStatus && userTypingStatus.lastTimeReceiveTimer) {\r\n        $log.debug(`--------- cancel timer-----------${userIdForTyping}`);\r\n        $scope.resetTypingStatusAsReceiver(dialogLayout, userIdForTyping);\r\n      }\r\n    }\r\n  };\r\n\r\n  $scope.fetchPlaceDetailsIntoPlacesLibrary = function (placeIds, conversations) {\r\n    if (placeIds && placeIds.length > 0) {\r\n      gameService.multiGetPlaceDetails(placeIds).then(function (data) {\r\n        gameService.buildPlacesLibrary($scope.chatLibrary, data);\r\n        const { placesLibrary } = $scope.chatLibrary;\r\n        angular.forEach(conversations, function (conversation) {\r\n          gameService.buildButtonLayoutPerConversation(conversation, placesLibrary);\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.handleChatNotifications = function (data) {\r\n    $log.debug(`--------- this is ChatNotifications subscription -----------${data.Type}`);\r\n    try {\r\n      const type = data.Type;\r\n      const conversationId = data.ConversationId;\r\n      switch (type) {\r\n        case chatUtility.notificationType.newMessage:\r\n          updateCurrentConversation(conversationId);\r\n          break;\r\n        case chatUtility.notificationType.newMessageBySelf:\r\n          updateCurrentConversation(conversationId, true);\r\n          break;\r\n        case chatUtility.notificationType.newConversation:\r\n        case chatUtility.notificationType.addedToConversation:\r\n        case chatUtility.notificationType.participantAdded:\r\n        case chatUtility.notificationType.participantLeft:\r\n          fetchConversations(conversationId);\r\n          break;\r\n        case chatUtility.notificationType.removedFromConversation:\r\n          if (!$scope.chatLibrary.conversationsDict[conversationId].remove) {\r\n            var { layoutId } = $scope.chatLibrary.conversationsDict[conversationId];\r\n            $scope.chatLibrary.conversationsDict[conversationId].remove = true;\r\n            $scope.closeDialog(layoutId);\r\n          }\r\n          break;\r\n        case chatUtility.notificationType.conversationTitleChanged:\r\n          var actorTargetId = data.ActorTargetId;\r\n          $scope.updateConversationTitle(conversationId, actorTargetId);\r\n          break;\r\n        case chatUtility.notificationType.participantTyping:\r\n          var typing = {\r\n            status: data.IsTyping,\r\n            userId: data.UserId\r\n          };\r\n          $scope.updateConverationTypingStatus(conversationId, typing);\r\n          break;\r\n        case chatUtility.notificationType.conversationUniverseChanged:\r\n          if ($scope.chatLibrary.conversationsDict[conversationId]) {\r\n            const rootPlaceId = data.RootPlaceId;\r\n            const universeId = data.UniverseId;\r\n            var actorTargetId = data.ActorTargetId;\r\n            var { layoutId } = $scope.chatLibrary.conversationsDict[conversationId];\r\n            const conversation = $scope.chatUserDict[layoutId];\r\n            const placeName =\r\n              $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n                ? $scope.chatLibrary.placesLibrary[rootPlaceId].placeName\r\n                : '';\r\n            const encodedPlaceName =\r\n              $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n                ? $scope.chatLibrary.placesLibrary[rootPlaceId].encodedPlaceName\r\n                : '';\r\n            const actorUsername = $scope.chatLibrary.friendsDict[actorTargetId].name;\r\n            const parameters = {\r\n              rootPlaceId,\r\n              universeId,\r\n              actorUsername,\r\n              userId: data.ActorTargetId,\r\n              placeName,\r\n              encodedPlaceName\r\n            };\r\n            const placeIds = [rootPlaceId];\r\n            const conversations = [conversation];\r\n            $scope.fetchPlaceDetailsIntoPlacesLibrary(placeIds, conversations);\r\n            pinGameService.setPinGameData(conversation, parameters);\r\n            if (\r\n              rootPlaceId &&\r\n              actorTargetId !== $scope.chatLibrary.userId &&\r\n              !$scope.chatLibrary.isRespectingMessageTypeEnabled\r\n            ) {\r\n              messageService.buildSystemMessage(\r\n                chatUtility.notificationType.conversationUniverseChanged,\r\n                conversation\r\n              );\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      let message = `ChatNotifications:${data.Type}: `;\r\n      if (e && e.message) {\r\n        message += e.message;\r\n      }\r\n      googleAnalyticsEventsService.fireEvent(\r\n        $scope.chatLibrary.googleAnalyticsEvent.category,\r\n        $scope.chatLibrary.googleAnalyticsEvent.action,\r\n        message\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.handleFriendshipNotifications = function (data) {\r\n    $log.debug(`--------- this is FriendshipNotifications subscription -----------${data.Type}`);\r\n    try {\r\n      switch (data.Type) {\r\n        case chatUtility.notificationType.friendshipDestroyed: // remove friends\r\n          var userIds = data.EventArgs;\r\n          angular.forEach(userIds, function (userId) {\r\n            if (userId !== $scope.chatLibrary.userId) {\r\n              $scope.$digest($scope.removeFriend(userId));\r\n            }\r\n          });\r\n          // when friendship notification received, always flush fiends data\r\n          usersPresenceService.getFriendsPresence(true).then(\r\n            result => {\r\n              $scope.getFriendsInfo(result);\r\n            },\r\n            error => {\r\n              console.debug(error);\r\n            }\r\n          );\r\n          $document.triggerHandler('Roblox.Friends.CountChanged');\r\n          break;\r\n        case chatUtility.notificationType.friendshipCreated:\r\n          // when friendship notification received, always flush fiends data\r\n          usersPresenceService.getFriendsPresence(true).then(\r\n            result => {\r\n              $scope.getFriendsInfo(result);\r\n            },\r\n            error => {\r\n              console.debug(error);\r\n            }\r\n          );\r\n          $document.triggerHandler('Roblox.Friends.CountChanged');\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      let message = `FriendshipNotifications:${data.Type}: `;\r\n      if (e && e.message) {\r\n        message += e.message;\r\n      }\r\n      googleAnalyticsEventsService.fireEvent(\r\n        $scope.chatLibrary.googleAnalyticsEvent.category,\r\n        $scope.chatLibrary.googleAnalyticsEvent.action,\r\n        message\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.handleUserTagNotifications = function (data) {\r\n    if (data.Type === chatUtility.notificationType.userTagUpdate) {\r\n      contactsService.getUserContacts(\r\n        Object.keys($scope.chatLibrary.friendsDict),\r\n        $scope.chatLibrary.friendsDict,\r\n        contactsService.options.skipCache\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.buildPlayTogetherInConversationFromPresence = function (\r\n    layoutIdList,\r\n    rootPlaceId,\r\n    presenceData\r\n  ) {\r\n    angular.forEach(layoutIdList, function (layoutId) {\r\n      const conversation = $scope.chatUserDict[layoutId];\r\n      const placeIds = [rootPlaceId];\r\n      playTogetherService.sortPlayTogetherIds(conversation, presenceData);\r\n      $scope.fetchPlaceDetailsIntoPlacesLibrary(placeIds, [conversation]);\r\n      if ($scope.chatLibrary.dialogDict[layoutId]) {\r\n        // update system message for game play update\r\n        if (\r\n          conversation.pinGame &&\r\n          rootPlaceId === conversation.pinGame.rootPlaceId &&\r\n          presenceData.userId !== $scope.chatLibrary.userId\r\n        ) {\r\n          conversation.recentUserIdFromPresence = presenceData.userId;\r\n          conversation.recentPlaceIdFromPresence = rootPlaceId;\r\n          messageService.buildSystemMessage(\r\n            chatUtility.notificationType.presenceOnline,\r\n            conversation\r\n          );\r\n        }\r\n\r\n        const dialogLayout = $scope.chatLibrary.dialogsLayout[layoutId];\r\n        if (\r\n          !dialogLayout.togglePopoverParams.isOpen &&\r\n          !conversation.placeForShown &&\r\n          conversation.playTogetherIds &&\r\n          conversation.playTogetherIds.length > 0\r\n        ) {\r\n          dialogLayout.togglePopoverParams.isOpen = true;\r\n        }\r\n      }\r\n\r\n      // update place for shown in conversation and dialog header\r\n      playTogetherService.setPlaceForShown(conversation);\r\n    });\r\n  };\r\n\r\n  $scope.releasePlayerFromActivePlaceLists = function (layoutIdList, userId) {\r\n    angular.forEach(layoutIdList, function (layoutId) {\r\n      const conversation = $scope.chatUserDict[layoutId];\r\n      const placeIdsThatNotActive = [];\r\n      angular.forEach(conversation.playTogetherDict, function (playTogether, pId) {\r\n        pId = parseInt(pId);\r\n        if (playTogether.playerIds.indexOf(userId) > -1) {\r\n          const position = playTogether.playerIds.indexOf(userId);\r\n          playTogether.playerIds.splice(position, 1);\r\n          if (playTogether.playerIds.length === 0) {\r\n            placeIdsThatNotActive.push(pId);\r\n          }\r\n        }\r\n      });\r\n      if (placeIdsThatNotActive && placeIdsThatNotActive.length > 0) {\r\n        angular.forEach(placeIdsThatNotActive, function (pId) {\r\n          const position = conversation.playTogetherIds.indexOf(pId);\r\n          conversation.playTogetherIds.splice(position, 1);\r\n          delete conversation.playTogetherDict[pId];\r\n        });\r\n      }\r\n      playTogetherService.setPlaceForShown(conversation);\r\n      if (conversation.pinGame && conversation.pinGame.rootPlaceId) {\r\n        const { rootPlaceId } = conversation.pinGame;\r\n        gameService.updateButtonLayoutPerConversation(conversation, rootPlaceId);\r\n      }\r\n    });\r\n  };\r\n\r\n  $scope.vanishRootPlaceIdFromPlayTogether = function (playerId, expiredRootPlaceId, layoutIdList) {\r\n    angular.forEach(layoutIdList, function (layoutId) {\r\n      const conversation = $scope.chatUserDict[layoutId];\r\n      const expiredPlaceIds = [];\r\n      angular.forEach(conversation.playTogetherDict, function (playTogether, pId) {\r\n        pId = parseInt(pId);\r\n        if (\r\n          expiredRootPlaceId === pId &&\r\n          playTogether.playerIds.length === 1 &&\r\n          playTogether.playerIds.indexOf(playerId) > -1\r\n        ) {\r\n          expiredPlaceIds.push(pId);\r\n        }\r\n      });\r\n      if (expiredPlaceIds && expiredPlaceIds.length > 0) {\r\n        angular.forEach(expiredPlaceIds, function (pId) {\r\n          const position = conversation.playTogetherIds.indexOf(pId);\r\n          conversation.playTogetherIds.splice(position, 1);\r\n          delete conversation.playTogetherDict[pId];\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  $scope.updatePresenceInFriendDict = function (presenceData) {\r\n    $scope.chatLibrary.friendsDict[presenceData.userId].userPresenceType =\r\n      presenceData.userPresenceType;\r\n    $scope.chatLibrary.friendsDict[presenceData.userId].presenceData = presenceData;\r\n    $scope.chatLibrary.friendsDict[presenceData.userId].presence = presenceData;\r\n  };\r\n\r\n  $scope.updatePresenceStatus = function (response) {\r\n    for (let i = 0; i < response.length; i++) {\r\n      const presenceData = response[i];\r\n      const { userId } = presenceData;\r\n      if (!$scope.chatLibrary.friendsDict[userId]) {\r\n        $scope.chatLibrary.friendsDict[userId] = {};\r\n      }\r\n\r\n      const { userPresenceType } = presenceData;\r\n      const existingUserPresenceData = $scope.chatLibrary.friendsDict[userId].presence;\r\n      let layoutIdList = null;\r\n      switch (userPresenceType) {\r\n        case presenceLayout.status.inGame:\r\n          var newRootPlaceId = presenceData.rootPlaceId;\r\n          if (\r\n            !existingUserPresenceData ||\r\n            userPresenceType !== existingUserPresenceData.userPresenceType ||\r\n            newRootPlaceId !== existingUserPresenceData.rootPlaceId\r\n          ) {\r\n            layoutIdList = $scope.chatLibrary.layoutIdsDictPerUserId[userId];\r\n            if (existingUserPresenceData && existingUserPresenceData.rootPlaceId) {\r\n              $scope.vanishRootPlaceIdFromPlayTogether(\r\n                userId,\r\n                existingUserPresenceData.rootPlaceId,\r\n                layoutIdList\r\n              );\r\n            }\r\n            $scope.updatePresenceInFriendDict(presenceData);\r\n            if (newRootPlaceId) {\r\n              $scope.buildPlayTogetherInConversationFromPresence(\r\n                layoutIdList,\r\n                newRootPlaceId,\r\n                presenceData\r\n              );\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          if (\r\n            !existingUserPresenceData ||\r\n            userPresenceType !== existingUserPresenceData.userPresenceType\r\n          ) {\r\n            $scope.updatePresenceInFriendDict(presenceData);\r\n\r\n            if (\r\n              existingUserPresenceData &&\r\n              existingUserPresenceData.userPresenceType === presenceLayout.status.inGame\r\n            ) {\r\n              layoutIdList = $scope.chatLibrary.layoutIdsDictPerUserId[userId];\r\n              $scope.releasePlayerFromActivePlaceLists(layoutIdList, userId);\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  $scope.listenToPresenceServiceInWeb = () => {\r\n    document.addEventListener('Roblox.Presence.Update', event => {\r\n      if (event?.detail) {\r\n        $timeout(() => {\r\n          $scope.updatePresenceStatus(event.detail);\r\n        }, 0);\r\n      }\r\n    });\r\n  };\r\n  $scope.unsubscribeRealTimeForChat = function () {\r\n    realTimeClient.Unsubscribe(\r\n      chatUtility.notificationsName.ChatNotifications,\r\n      $scope.handleChatNotifications\r\n    );\r\n    realTimeClient.Unsubscribe(\r\n      chatUtility.notificationsName.FriendshipNotifications,\r\n      $scope.handleFriendshipNotifications\r\n    );\r\n  };\r\n\r\n  $scope.handleChatPrivacySetting = function (data) {\r\n    $log.debug(\r\n      `--------- this is ChatPrivacySettingNotifications subscription -----------${data.Type}`\r\n    );\r\n    try {\r\n      switch (data.Type) {\r\n        case chatUtility.notificationType.chatEnabled:\r\n          $scope.chatLibrary.chatLayout.isChatEnabledByPrivacySetting =\r\n            $scope.chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled;\r\n          $scope.handleSignalRSuccess(true);\r\n          $scope.initializeRealTimeSubscriptionsForChat();\r\n          break;\r\n        case chatUtility.notificationType.chatDisabled:\r\n          $scope.chatLibrary.chatLayout.isChatEnabledByPrivacySetting =\r\n            $scope.chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.disabled;\r\n          $scope.unsubscribeRealTimeForChat();\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      let message = `ChatPrivacySettingNotifications:${data.Type}: `;\r\n      if (e && e.message) {\r\n        message += e.message;\r\n      }\r\n      googleAnalyticsEventsService.fireEvent(\r\n        $scope.chatLibrary.googleAnalyticsEvent.category,\r\n        $scope.chatLibrary.googleAnalyticsEvent.action,\r\n        message\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.initializeRealTimeSubscriptionsForChatPrivacySetting = function () {\r\n    if (angular.isDefined(realTimeClient)) {\r\n      realTimeClient.Subscribe(\r\n        chatUtility.notificationsName.ChatPrivacySettingNotifications,\r\n        $scope.handleChatPrivacySetting\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.initializeRealTimeSubscriptionsForChat = () => {\r\n    if (angular.isDefined(realTimeClient)) {\r\n      performanceService.logSinglePerformanceMark(\r\n        chatUtility.performanceMarkLabels.chatSignalRInitializing\r\n      );\r\n      realTimeClient.SubscribeToConnectionEvents(\r\n        $scope.handleSignalRSuccess,\r\n        $scope.handleSignalRSuccess,\r\n        $scope.handleSignalRError,\r\n        chatUtility.notificationsName.ChatNotifications\r\n      );\r\n\r\n      realTimeClient.Subscribe(\r\n        chatUtility.notificationsName.ChatNotifications,\r\n        $scope.handleChatNotifications\r\n      );\r\n\r\n      realTimeClient.Subscribe(\r\n        chatUtility.notificationsName.FriendshipNotifications,\r\n        $scope.handleFriendshipNotifications\r\n      );\r\n\r\n      realTimeClient.Subscribe(\r\n        chatUtility.notificationsName.UserTagNotifications,\r\n        $scope.handleUserTagNotifications\r\n      );\r\n\r\n      $scope.listenToPresenceServiceInWeb();\r\n    }\r\n  };\r\n\r\n  $scope.handleSignalRSuccess = function (isReloadRequired) {\r\n    $log.debug(' -------- Signal R is connected ------ ');\r\n    if ($scope.chatLibrary.chatLayout.errorMaskEnable) {\r\n      $scope.$apply(function () {\r\n        $scope.chatLibrary.chatLayout.errorMaskEnable = false;\r\n      });\r\n    }\r\n    if ($scope.chatLibrary.timer) {\r\n      $timeout.cancel($scope.chatLibrary.timer);\r\n    }\r\n    if (!isReloadRequired) {\r\n      performanceService.logSinglePerformanceMark(\r\n        chatUtility.performanceMarkLabels.chatSignalRSucceeded\r\n      );\r\n    }\r\n\r\n    if ($scope.chatLibrary.chatLayout.pageInitializing) {\r\n      $scope.chatLibrary.chatLayout.pageInitializing = false;\r\n    } else {\r\n      try {\r\n        if (isReloadRequired) {\r\n          $scope.initializePresetData();\r\n          $scope.initializeChat();\r\n        }\r\n      } catch (e) {\r\n        let message = 'handleSignalRSuccess: ';\r\n        if (e && e.message) {\r\n          message += e.message;\r\n        }\r\n        googleAnalyticsEventsService.fireEvent(\r\n          $scope.chatLibrary.googleAnalyticsEvent.category,\r\n          $scope.chatLibrary.googleAnalyticsEvent.action,\r\n          message\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  $scope.handleSignalRError = function () {\r\n    $log.debug(' -------- Signal R is disconnected ------ ');\r\n    $scope.chatLibrary.timer = $timeout(function () {\r\n      $scope.chatLibrary.chatLayout.errorMaskEnable = true;\r\n    }, parseInt($scope.chatLibrary.signalRDisconnectionResponseInMilliseconds));\r\n  };\r\n\r\n  $scope.onResize = function () {\r\n    if (\r\n      $scope.chatLibrary.chatLayout.numberOfDialogs >\r\n      $scope.chatLibrary.chatLayout.availableNumberOfDialogs\r\n    ) {\r\n      while (\r\n        $scope.chatLibrary.dialogIdList.length >\r\n        $scope.chatLibrary.chatLayout.availableNumberOfDialogs\r\n      ) {\r\n        $log.debug(\r\n          ` -------------overflow ------ $scope.chatLibrary.dialogIdList.length ------------- ${$scope.chatLibrary.dialogIdList.length}`\r\n        );\r\n        var lastLayoutId = $scope.chatLibrary.dialogIdList.pop();\r\n        if (angular.isUndefined(lastLayoutId)) {\r\n          break;\r\n        }\r\n        if (lastLayoutId && $scope.chatLibrary.dialogDict[lastLayoutId]) {\r\n          $scope.chatLibrary.dialogDict[lastLayoutId].isUpdated = true;\r\n          $scope.chatLibrary.dialogDict[lastLayoutId].updateStatus =\r\n            chatUtility.dialogStatus.MINIMIZE;\r\n        }\r\n      }\r\n    } else if (\r\n      $scope.chatLibrary.chatLayout.numberOfDialogs <\r\n      $scope.chatLibrary.chatLayout.availableNumberOfDialogs\r\n    ) {\r\n      while (\r\n        $scope.chatLibrary.dialogIdList.length <\r\n        $scope.chatLibrary.chatLayout.availableNumberOfDialogs\r\n      ) {\r\n        $log.debug(\r\n          ` -------------fit ------ $scope.chatLibrary.dialogIdList.length ------------- ${$scope.chatLibrary.dialogIdList.length}`\r\n        );\r\n        var lastLayoutId = $scope.chatLibrary.minimizedDialogIdList.pop();\r\n        if (angular.isUndefined(lastLayoutId)) {\r\n          break;\r\n        }\r\n        if (lastLayoutId && $scope.chatLibrary.minimizedDialogData[lastLayoutId]) {\r\n          delete $scope.chatLibrary.minimizedDialogData[lastLayoutId];\r\n          $scope.chatLibrary.dialogIdList.push(lastLayoutId);\r\n          const dialogInitValue = { ...chatUtility.dialogInitValue };\r\n          $scope.chatLibrary.dialogDict[lastLayoutId] = dialogInitValue;\r\n        }\r\n      }\r\n    }\r\n    $scope.chatLibrary.chatLayout.resizing = false;\r\n  };\r\n\r\n  $scope.getLayoutId = function (id, dialogType) {\r\n    switch (dialogType) {\r\n      case chatUtility.dialogType.FRIEND:\r\n        return `friend_${id}`;\r\n      case chatUtility.dialogType.NEWGROUPCHAT:\r\n        return chatUtility.newGroup.dialogType;\r\n      case chatUtility.dialogType.CHAT:\r\n      case chatUtility.dialogType.GROUPCHAT:\r\n      case chatUtility.dialogType.ADDFRIENDS:\r\n      default:\r\n        return `conv_${id}`;\r\n    }\r\n  };\r\n\r\n  $scope.formatUserDataByType = function (user) {\r\n    switch (user.type) {\r\n      case chatUtility.participantType.user:\r\n        user.userId = user.targetId;\r\n        user.id = user.targetId;\r\n        break;\r\n    }\r\n  };\r\n\r\n  $scope.getUserInfoForConversation = function (conversation) {\r\n    if (conversation.initiator) {\r\n      $scope.formatUserDataByType(conversation.initiator);\r\n    }\r\n    if (conversation.participants) {\r\n      conversation.userIds = [];\r\n      conversation.candidatePlayerIds = [];\r\n      const userIdsNotInFriendsDict = [];\r\n\r\n      conversation.participants.forEach(function (user) {\r\n        $scope.formatUserDataByType(user);\r\n        const { userId } = user;\r\n        const username = user.name;\r\n        switch (conversation.dialogType) {\r\n          case $scope.dialogType.GROUPCHAT:\r\n            conversation.userIds.push(userId);\r\n            if (userId !== $scope.chatLibrary.userId) {\r\n              if (\r\n                (conversation.playerIds && conversation.playerIds.indexOf(userId) < 0) ||\r\n                !conversation.playerIds\r\n              ) {\r\n                conversation.candidatePlayerIds.push(userId);\r\n              }\r\n            }\r\n            break;\r\n          case $scope.dialogType.CHAT:\r\n            if (userId !== $scope.chatLibrary.userId) {\r\n              conversation.userIds.push(userId);\r\n              conversation.displayUserId = userId;\r\n              conversation.username = username;\r\n              if (\r\n                (conversation.playerIds && conversation.playerIds.indexOf(userId) < 0) ||\r\n                !conversation.playerIds\r\n              ) {\r\n                conversation.candidatePlayerIds.push(userId);\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            conversation.userIds.push(userId);\r\n        }\r\n        if (userId !== $scope.chatLibrary.userId) {\r\n          $scope.buildPlayTogetherListForEachConveration(user, conversation);\r\n        }\r\n        if (!$scope.chatLibrary.friendsDict[userId]) {\r\n          userIdsNotInFriendsDict.push(userId);\r\n          const { name, displayName } = user;\r\n          $scope.chatLibrary.friendsDict[userId] = {\r\n            id: userId,\r\n            name,\r\n            displayName,\r\n            nameForDisplay: DisplayNames?.Enabled() ? displayName : name\r\n          };\r\n        }\r\n        if (\r\n          !conversation.isGroupChat &&\r\n          $scope.chatViewModel.friendsHasConversation.indexOf(userId) < 0\r\n        ) {\r\n          $scope.chatViewModel.friendsHasConversation.push(userId);\r\n        }\r\n\r\n        if (!$scope.chatLibrary.layoutIdsDictPerUserId[userId]) {\r\n          $scope.chatLibrary.layoutIdsDictPerUserId[userId] = [];\r\n        }\r\n        if ($scope.chatLibrary.layoutIdsDictPerUserId[userId].indexOf(conversation.layoutId) < 0) {\r\n          $scope.chatLibrary.layoutIdsDictPerUserId[userId].push(conversation.layoutId);\r\n        }\r\n      });\r\n\r\n      if (userIdsNotInFriendsDict.length > 0) {\r\n        usersService\r\n          .getUserInfo(userIdsNotInFriendsDict, $scope.chatLibrary.friendsDict)\r\n          .then(function (response) {\r\n            if (response) {\r\n              userIdsNotInFriendsDict.forEach(function (userId) {\r\n                const user = $scope.chatLibrary.friendsDict[userId];\r\n                $scope.buildPlayTogetherListForEachConveration(user, conversation);\r\n                $scope.getPlaceDetailsForNewPlaceIds([conversation]);\r\n              });\r\n              contactsService.getUserContacts(\r\n                userIdsNotInFriendsDict,\r\n                $scope.chatLibrary.friendsDict,\r\n                contactsService.options.noCache\r\n              );\r\n            }\r\n          });\r\n      }\r\n      playTogetherService.setPlaceForShown(conversation); // set active game for shown game\r\n    }\r\n  };\r\n\r\n  $scope.buildPlayTogetherListForEachConveration = function (user, conversation) {\r\n    if (!$scope.chatLibrary.friendsDict) {\r\n      return false;\r\n    }\r\n\r\n    const userInfo = $scope.chatLibrary.friendsDict[user.id];\r\n    if (\r\n      userInfo &&\r\n      userInfo.presence &&\r\n      userInfo.presence.userPresenceType === presenceLayout.status.inGame\r\n    ) {\r\n      playTogetherService.sortPlayTogetherIds(conversation, userInfo.presence);\r\n    }\r\n  };\r\n\r\n  $scope.updateChatViewModel = function (conversation, addToFront) {\r\n    // remove friend object from chatUserDict and update chatLayoutIds\r\n    if (!conversation.isGroupChat && conversation.dialogType === chatUtility.dialogType.CHAT) {\r\n      conversation.participants.forEach(function (user) {\r\n        const userId = user.targetId;\r\n        if (userId !== $scope.chatLibrary.userId) {\r\n          const friendId = $scope.getLayoutId(userId, chatUtility.dialogType.FRIEND);\r\n          const position = $scope.chatLibrary.chatLayoutIds.indexOf(friendId);\r\n          if (position > -1) {\r\n            $scope.chatLibrary.chatLayoutIds.splice(position, 1);\r\n            delete $scope.chatUserDict[friendId];\r\n          }\r\n          updateLayoutIdList(friendId, true);\r\n          $scope.chatLibrary.userConversationsDict[userId] = conversation.layoutId;\r\n        }\r\n      });\r\n    }\r\n    switch (conversation.dialogType) {\r\n      case $scope.dialogType.GROUPCHAT:\r\n        conversation.name = conversation.title;\r\n        $scope.chatLibrary.allConversationLayoutIdsDict[conversation.id] = conversation.layoutId;\r\n        break;\r\n      case $scope.dialogType.CHAT:\r\n        conversation.name = conversation.title;\r\n        $scope.chatLibrary.allConversationLayoutIdsDict[conversation.id] = conversation.layoutId;\r\n        break;\r\n      default:\r\n        if (angular.isDefined(conversation.Username)) {\r\n          conversation.name = conversation.Username;\r\n        }\r\n    }\r\n    // add new conversation into the right place;\r\n    $scope.chatUserDict[conversation.layoutId] = conversation;\r\n    const position = $scope.chatLibrary.chatLayoutIds.indexOf(conversation.layoutId);\r\n    if (position > -1) {\r\n      // remove the existing position in order to reset the position\r\n      $scope.chatLibrary.chatLayoutIds.splice(position, 1);\r\n    }\r\n    if (conversation.isConversation) {\r\n      if (addToFront) {\r\n        const layoutId = $scope.chatLibrary.chatLayoutIds[0];\r\n        const firstConversation = $scope.chatUserDict[layoutId];\r\n        $scope.chatLibrary.chatLayoutIds.unshift(conversation.layoutId);\r\n      } else {\r\n        $scope.chatLibrary.chatLayoutIds.push(conversation.layoutId);\r\n      }\r\n    }\r\n    updateLayoutIdList(conversation.layoutId);\r\n    // update chatLibrary\r\n    if (conversation.isConversation && !$scope.chatLibrary.conversationsDict[conversation.id]) {\r\n      $scope.chatLibrary.conversationsDict[conversation.id] = {\r\n        ...chatUtility.conversationInitStatus\r\n      };\r\n      $scope.chatLibrary.conversationsDict[conversation.id].layoutId = conversation.layoutId;\r\n    }\r\n  };\r\n\r\n  $scope.filterFriends = function (friends) {\r\n    const conversationIds = [];\r\n    friends = chatUtility.sortFriendList($scope.chatLibrary, friends);\r\n    // clean friendIds to refill the new order of the friendIds\r\n    $scope.chatLibrary.friendIds = [];\r\n    $scope.chatLibrary.friendLayoutIds = [];\r\n    friends.forEach(function (friend) {\r\n      buildFriendList(friend);\r\n    });\r\n\r\n    $scope.getPlaceDetailsForNewPlaceIds(friends);\r\n    // find all converstions\r\n    $scope.chatLibrary.chatLayoutIds.forEach(function (layoutId) {\r\n      if ($scope.chatUserDict[layoutId].isConversation) {\r\n        conversationIds.push(layoutId);\r\n      }\r\n    });\r\n    const updatedLayoutIds = conversationIds.concat($scope.chatLibrary.friendLayoutIds);\r\n    $scope.chatLibrary.chatLayoutIds = updatedLayoutIds;\r\n  };\r\n\r\n  $scope.updateConversationInLocalStorage = function (newConversation) {\r\n    const params = {\r\n      pageNumber: 1,\r\n      pageSize: $scope.chatApiParams.pageSizeOfConversations\r\n    };\r\n    const localStorageName = storageService.getStorageName(\r\n      storageService.chatDataName.getUserConversations,\r\n      params\r\n    );\r\n    const cacheData = storageService.getChatDataFromLocalStorage(localStorageName);\r\n    if (cacheData) {\r\n      const conversations = cacheData.data;\r\n      conversations.unshift(newConversation);\r\n      storageService.saveChatDataToLocalStorage(localStorageName, conversations);\r\n    }\r\n  };\r\n\r\n  $scope.buildChatUserListByUnreadConversations = function (unreadConversations, newMsg) {\r\n    unreadConversations.forEach(function (unreadConversation) {\r\n      unreadConversation.isGroupChat =\r\n        chatUtility.conversationType.multiUserConversation === unreadConversation.conversationType;\r\n      messageService.formatTimestampInConversation(unreadConversation);\r\n      const layoutId = $scope.getLayoutId(unreadConversation.id, chatUtility.dialogType.CHAT);\r\n      // existing conversation\r\n      if ($scope.chatUserDict[layoutId]) {\r\n        const existingConversation = $scope.chatUserDict[layoutId];\r\n        if (\r\n          unreadConversation.hasUnreadMessages &&\r\n          unreadConversation.chatMessages &&\r\n          unreadConversation.chatMessages.length > 0\r\n        ) {\r\n          existingConversation.hasUnreadMessages = true;\r\n          if (\r\n            $scope.chatLibrary.dialogDict[layoutId] &&\r\n            $scope.chatLibrary.dialogIdList.indexOf(layoutId) > -1\r\n          ) {\r\n            messageService.processMessages(\r\n              $scope.chatLibrary,\r\n              existingConversation,\r\n              unreadConversation.chatMessages,\r\n              $scope.chatLibrary.friendsDict\r\n            );\r\n            gameService.fetchDataForLinkCard(unreadConversation.chatMessages, $scope.chatLibrary);\r\n          }\r\n          if ($scope.chatLibrary.isRespectingMessageTypeEnabled) {\r\n            existingConversation.displayMessage = messageService.getDisplayMessageForUser(\r\n              unreadConversation.chatMessages\r\n            );\r\n          } else {\r\n            chatUtility.sanitizeMessage(unreadConversation.chatMessages[0]);\r\n            existingConversation.displayMessage = messageService.buildDisplayMessage(\r\n              unreadConversation.chatMessages[0]\r\n            );\r\n          }\r\n          $scope.updateChatViewModel(existingConversation, true);\r\n        }\r\n        existingConversation.participants = unreadConversation.participants;\r\n        $scope.getUserInfoForConversation(existingConversation);\r\n        notifyUser(existingConversation);\r\n      } else {\r\n        $scope.updateConversationInLocalStorage(unreadConversation);\r\n        unreadConversation.layoutId = layoutId;\r\n        unreadConversation.isConversation = true;\r\n        unreadConversation.dialogType = unreadConversation.isGroupChat\r\n          ? chatUtility.dialogType.GROUPCHAT\r\n          : chatUtility.dialogType.CHAT;\r\n        $scope.getUserInfoForConversation(unreadConversation);\r\n        $scope.updateChatViewModel(unreadConversation, true);\r\n        notifyUser(unreadConversation);\r\n      }\r\n    });\r\n  };\r\n\r\n  $scope.getPlaceDetailsForNewPlaceIds = function (conversations) {\r\n    const placeIdsNotInPlaceLibrary = [];\r\n    const placeButtonLayoutNotSetConversationIds = [];\r\n    conversations.forEach(function (conversation) {\r\n      const { placesLibrary } = $scope.chatLibrary;\r\n      if (conversation.pinGame) {\r\n        const pinGameId = conversation.pinGame.rootPlaceId;\r\n        if (\r\n          !chatUtility.isPlaceDetailQualifiedInLibrary(placesLibrary, pinGameId) &&\r\n          placeIdsNotInPlaceLibrary.indexOf(pinGameId) < 0\r\n        ) {\r\n          placeIdsNotInPlaceLibrary.push(pinGameId);\r\n        }\r\n      }\r\n      if (conversation.playTogetherIds && conversation.playTogetherIds.length > 0) {\r\n        conversation.playTogetherIds.forEach(function (placeId) {\r\n          if (\r\n            !chatUtility.isPlaceDetailQualifiedInLibrary(placesLibrary, placeId) &&\r\n            placeIdsNotInPlaceLibrary.indexOf(placeId) < 0\r\n          ) {\r\n            placeIdsNotInPlaceLibrary.push(placeId);\r\n          }\r\n\r\n          const conversationId = conversation.id;\r\n          if (\r\n            (!conversation.placeButtonLayout || !conversation.placeButtonLayout[placeId]) &&\r\n            placeButtonLayoutNotSetConversationIds.indexOf(conversationId) < 0\r\n          ) {\r\n            placeButtonLayoutNotSetConversationIds.push(conversationId);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    if (placeIdsNotInPlaceLibrary.length > 0) {\r\n      $scope.fetchPlaceDetailsIntoPlacesLibrary(placeIdsNotInPlaceLibrary, conversations);\r\n    } else if (placeButtonLayoutNotSetConversationIds.length > 0) {\r\n      const { placesLibrary } = $scope.chatLibrary;\r\n      angular.forEach(conversations, function (conversation) {\r\n        if (placeButtonLayoutNotSetConversationIds.indexOf(conversation.id) > -1) {\r\n          gameService.buildButtonLayoutPerConversation(conversation, placesLibrary);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.isConversationExistedInViewModel = function (conversation) {\r\n    if (conversation && conversation.layoutId) {\r\n      const { layoutId } = conversation;\r\n      return $scope.chatUserDict && $scope.chatUserDict[layoutId];\r\n    }\r\n    return false;\r\n  };\r\n\r\n  $scope.buildChatUserListByConversations = function (conversations, addToFront) {\r\n    const conversationIds = [];\r\n    conversations.forEach(function (conversation) {\r\n      const layoutId = $scope.getLayoutId(conversation.id, conversation.dialogType);\r\n      conversationIds.push(conversation.id);\r\n      conversation.layoutId = layoutId;\r\n      conversation.isConversation = true;\r\n      $scope.getUserInfoForConversation(conversation);\r\n      if (!$scope.isConversationExistedInViewModel(conversation)) {\r\n        $scope.updateChatViewModel(conversation, addToFront);\r\n      }\r\n    });\r\n    $scope.getMessageForConversations(conversationIds);\r\n    $scope.getPlaceDetailsForNewPlaceIds(conversations);\r\n  };\r\n\r\n  $scope.openConversation = function (friendId, addToFront) {\r\n    const { layoutId } = $scope.chatLibrary.dialogRequestedToOpenParams;\r\n    const { autoPop } = $scope.chatLibrary.dialogRequestedToOpenParams;\r\n    if ($scope.chatUserDict[layoutId] && $scope.chatUserDict[layoutId].isConversation) {\r\n      // existing conversation\r\n      $scope.updateDialogList(layoutId, autoPop);\r\n    } else {\r\n      // start new 1:1 conversation with friend\r\n      const userId = !friendId ? $scope.chatUserDict[layoutId].id : friendId;\r\n      addToFront =\r\n        typeof addToFront === 'undefined' || typeof addToFront !== 'boolean' ? true : addToFront;\r\n      chatService.startOneToOneConversation(userId).then(\r\n        function (conversation) {\r\n          const position = $scope.chatLibrary.chatLayoutIds.indexOf(layoutId);\r\n          $scope.chatLibrary.chatLayoutIds.splice(position, 1);\r\n          delete $scope.chatUserDict[layoutId];\r\n          updateLayoutIdList(layoutId, true);\r\n          const newLayoutId = $scope.getLayoutId(conversation.id, chatUtility.dialogType.CHAT);\r\n          conversation.layoutId = newLayoutId;\r\n          conversation.isConversation = true;\r\n          conversation.dialogType = chatUtility.dialogType.CHAT;\r\n          conversation.chatMessages = [];\r\n          conversation.isGroupChat =\r\n            conversation.conversationType === chatUtility.conversationType.multiUserConversation;\r\n          $scope.getUserInfoForConversation(conversation);\r\n          gameService.buildButtonLayoutPerConversation(\r\n            conversation,\r\n            $scope.chatLibrary.placesLibrary\r\n          );\r\n          $scope.updateChatViewModel(conversation, addToFront);\r\n          $scope.updateDialogList(newLayoutId, autoPop);\r\n          if (conversation.pinGame) {\r\n            const { rootPlaceId } = conversation.pinGame;\r\n            $scope.fetchPlaceDetailsIntoPlacesLibrary([rootPlaceId], [conversation]);\r\n          }\r\n          chatUtility.updateFocusedDialog($scope.chatLibrary, newLayoutId);\r\n          messageService.formatTimestampInConversation(conversation);\r\n        },\r\n        function () {\r\n          $log.debug(' ---- startOneToOneConversation ---- failed!');\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.destroyDialogLayout = function (layoutId) {\r\n    const destroyId = `#${layoutId}`;\r\n    angular.element(destroyId).empty();\r\n  };\r\n\r\n  $scope.deleteLayoutIdFromDialogList = function (layoutId) {\r\n    const dialogList = $scope.chatLibrary.dialogIdList;\r\n    const indicesToRemove = [];\r\n    for (let i = 0; i < dialogList.length; i++) {\r\n      if (dialogList[i] === layoutId) {\r\n        indicesToRemove.push(i);\r\n      }\r\n    }\r\n    if (indicesToRemove.length > 0) {\r\n      for (let j = indicesToRemove.length - 1; j >= 0; j--) {\r\n        $scope.chatLibrary.dialogIdList.splice(indicesToRemove[j], 1);\r\n      }\r\n      delete $scope.chatLibrary.dialogDict[layoutId];\r\n    }\r\n  };\r\n\r\n  $scope.expandGameListInConversation = function (layoutId) {\r\n    const conversation = $scope.chatUserDict[layoutId];\r\n    if (\r\n      $scope.chatLibrary.playTogetherLibrary &&\r\n      $scope.chatLibrary.playTogetherLibrary[conversation.id]\r\n    ) {\r\n      const playTogetherLayout = $scope.chatLibrary.playTogetherLibrary[conversation.id].layout;\r\n      playTogetherLayout.activeGamesList.isCollapsed = true;\r\n    }\r\n  };\r\n\r\n  // autoPop will be true when the dialog generation is not from user click interaction\r\n  $scope.launchDialog = function (layoutId, autoPop) {\r\n    $scope.chatLibrary.dialogRequestedToOpenParams.layoutId = layoutId;\r\n    $scope.chatLibrary.dialogRequestedToOpenParams.autoPop = autoPop;\r\n    if (\r\n      $scope.chatLibrary.dialogIdList.indexOf(layoutId) < 0 &&\r\n      layoutId === chatUtility.newGroup.layoutId\r\n    ) {\r\n      // new group chat\r\n      $scope.updateDialogList(layoutId, autoPop);\r\n      $scope.chatUserDict[chatUtility.newGroup.layoutId] = $scope.newGroup;\r\n    } else if (\r\n      $scope.chatLibrary.dialogIdList.indexOf(layoutId) < 0 &&\r\n      $scope.chatUserDict[layoutId]\r\n    ) {\r\n      // either conversation or friends\r\n      $scope.openConversation();\r\n      $scope.expandGameListInConversation(layoutId);\r\n      if (!autoPop) {\r\n        chatUtility.updateFocusedDialog($scope.chatLibrary, layoutId);\r\n      }\r\n    } else if (\r\n      $scope.chatLibrary.dialogIdList.indexOf(layoutId) > -1 &&\r\n      $scope.chatLibrary.dialogsLayout[layoutId]\r\n    ) {\r\n      // active dialog\r\n      const dialogLayout = $scope.chatLibrary.dialogsLayout[layoutId];\r\n      dialogLayout.focusMeEnabled = true;\r\n      chatUtility.updateFocusedDialog($scope.chatLibrary, layoutId);\r\n      if (dialogLayout.collapsed) {\r\n        dialogLayout.collapsed = false;\r\n        chatUtility.updateDialogsPosition($scope.chatLibrary);\r\n      }\r\n    }\r\n  };\r\n\r\n  $scope.closeDialog = function (layoutId) {\r\n    const conversation = $scope.chatUserDict[layoutId];\r\n    let scrollbarElm;\r\n    let scrollbarObj;\r\n    if (conversation) {\r\n      scrollbarElm = chatUtility.getScrollBarSelector(conversation);\r\n      scrollbarObj = angular.element(scrollbarElm);\r\n    }\r\n    const elmOfChatContainer = angular.element('#chat-main');\r\n\r\n    if ($scope.chatLibrary.chatLayout.focusedLayoutId === layoutId) {\r\n      chatUtility.updateFocusedDialog($scope.chatLibrary, null);\r\n    }\r\n    // remove from dialog order list\r\n    $scope.deleteLayoutIdFromDialogList(layoutId);\r\n    if (conversation && conversation.dialogType === chatUtility.dialogType.NEWGROUPCHAT) {\r\n      conversation.selectedUserIds = [];\r\n      conversation.selectedUsersDict = {};\r\n      conversation.numberOfSelected = 0;\r\n    }\r\n    // destroy scrollbar event\r\n    if (scrollbarObj && scrollbarObj.length > 0) {\r\n      scrollbarObj.mCustomScrollbar('destroy');\r\n    }\r\n    // reset active status\r\n    $scope.$broadcast('Roblox.Chat.MarkDialogInactive', { layoutId });\r\n\r\n    // remove from user chat list and conversation data\r\n    if (conversation) {\r\n      const conversationId = conversation.id;\r\n      if (\r\n        $scope.chatLibrary.conversationsDict[conversationId] &&\r\n        $scope.chatLibrary.conversationsDict[conversationId].remove\r\n      ) {\r\n        const layoutPosition = $scope.chatLibrary.chatLayoutIds.indexOf(layoutId);\r\n        if (layoutPosition > -1 && conversation) {\r\n          $scope.chatLibrary.chatLayoutIds.splice(layoutPosition, 1);\r\n          delete $scope.chatUserDict[layoutId];\r\n          if (angular.equals($scope.chatUserDict, {})) {\r\n            $scope.chatLibrary.chatLayout.chatLandingEnabled = true;\r\n          }\r\n        }\r\n        updateLayoutIdList(layoutId, true);\r\n      } else {\r\n        // clean up message object\r\n        messageService.processMessages($scope.chatLibrary, conversation, null);\r\n      }\r\n    }\r\n\r\n    // destroy dialog template\r\n    $scope.destroyDialogLayout(layoutId);\r\n\r\n    // retrieve the minimized dialog data and open dialog for it\r\n    if ($scope.chatLibrary.minimizedDialogIdList.length > 0) {\r\n      const addOnLayoutId = $scope.chatLibrary.minimizedDialogIdList.shift();\r\n      delete $scope.chatLibrary.minimizedDialogData[addOnLayoutId];\r\n      $scope.chatLibrary.dialogIdList.push(addOnLayoutId);\r\n      $scope.chatLibrary.dialogDict[addOnLayoutId].isUpdated = true;\r\n      $scope.chatLibrary.dialogDict[addOnLayoutId].updateStatus = chatUtility.dialogStatus.REPLACE;\r\n    }\r\n    chatClientStorageUtilityService.updateStorage(\r\n      chatClientStorageUtilityService.storageDictionary.dialogIdList,\r\n      $scope.chatLibrary.dialogIdList,\r\n      $scope.chatLibrary.cookieOption\r\n    );\r\n    chatClientStorageUtilityService.updateStorage(\r\n      chatClientStorageUtilityService.storageDictionary.dialogDict,\r\n      $scope.chatLibrary.dialogDict,\r\n      $scope.chatLibrary.cookieOption\r\n    );\r\n\r\n    // reset dialog layout\r\n    if ($scope.chatLibrary.dialogsLayout && $scope.chatLibrary.dialogsLayout[layoutId]) {\r\n      $scope.chatLibrary.dialogsLayout[layoutId].collapsed = false;\r\n    }\r\n    // clean up dialog layout\r\n    delete $scope.chatLibrary.dialogsLayout[layoutId];\r\n    chatClientStorageUtilityService.updateStorage(\r\n      chatClientStorageUtilityService.storageDictionary.dialogsLayout,\r\n      $scope.chatLibrary.dialogsLayout,\r\n      $scope.chatLibrary.cookieOption\r\n    );\r\n  };\r\n\r\n  $scope.validLayoutId = function (layoutId, dialogType) {\r\n    if (!$scope.chatUserDict[layoutId]) {\r\n      switch (dialogType) {\r\n        case chatUtility.dialogType.FRIEND:\r\n          if ($scope.chatApiParams.loadMoreFriends) {\r\n            $scope.getAllFriends();\r\n          } else {\r\n            $scope.chatLibrary.chatLayout.urlParseInitialized = true;\r\n          }\r\n          break;\r\n        case chatUtility.dialogType.CHAT:\r\n        default:\r\n          if ($scope.chatApiParams.loadMoreConversations) {\r\n            $scope.getUserConversations();\r\n          } else {\r\n            $scope.chatLibrary.chatLayout.urlParseInitialized = true;\r\n          }\r\n          break;\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  $scope.startSpecificConversationFromUserId = function (userId) {\r\n    let layoutId = doesUserHavePrivateConversation(userId);\r\n    let dialogType = chatUtility.dialogType.CHAT;\r\n    if (!layoutId) {\r\n      layoutId = $scope.getLayoutId(userId, chatUtility.dialogType.FRIEND);\r\n      dialogType = chatUtility.dialogType.FRIEND;\r\n    }\r\n    if ($scope.validLayoutId(layoutId, dialogType)) {\r\n      $scope.chatLibrary.chatLayout.urlParseInitialized = true;\r\n      $scope.launchDialog(layoutId, true);\r\n    } else {\r\n      $scope.chatLibrary.dialogRequestedToOpenParams.layoutId = layoutId;\r\n      $scope.chatLibrary.dialogRequestedToOpenParams.autoPop = true;\r\n      $scope.openConversation(userId, false);\r\n    }\r\n  };\r\n\r\n  $scope.startSpecificConversationFromConvId = function (conversationId) {\r\n    const layoutId = $scope.getLayoutId(conversationId, chatUtility.dialogType.CHAT);\r\n    $log.debug(`--attempting to open specific conversation on load: ${conversationId}--`);\r\n    if ($scope.validLayoutId(layoutId, chatUtility.dialogType.CHAT)) {\r\n      $scope.chatLibrary.chatLayout.urlParseInitialized = true;\r\n      $scope.launchDialog(layoutId);\r\n    }\r\n  };\r\n\r\n  $scope.openSettingsPage = function () {\r\n    window.location.href = urlService.getAbsoluteUrl(chatUtility.linksLibrary.settingLink);\r\n  };\r\n\r\n  $scope.getAvatars = function (userIds) {\r\n    if (userIds && userIds.length > 0) {\r\n      usersService.getAvatarHeadshots(userIds, $scope.chatLibrary.friendsDict);\r\n    }\r\n  };\r\n\r\n  $scope.getFriendsInfo = friends => {\r\n    if ($scope.chatLibrary.chatLayout.pageDataLoading) {\r\n      $scope.chatLibrary.chatLayout.pageDataLoading = false;\r\n    }\r\n    if (friends?.length) {\r\n      const userIds = [];\r\n      angular.forEach(friends, friend => {\r\n        const currentFriend = friend;\r\n        const { id: userId } = currentFriend;\r\n        userIds.push(userId);\r\n        currentFriend.id = parseInt(userId, 10);\r\n        currentFriend.userId = parseInt(userId, 10);\r\n        const { name, displayName } = currentFriend;\r\n        currentFriend.nameForDisplay = DisplayNames?.Enabled() ? displayName : name;\r\n        if (!$scope.chatLibrary.friendsDict[userId]) {\r\n          $scope.chatLibrary.friendsDict[userId] = currentFriend;\r\n        }\r\n      });\r\n      $scope.filterFriends(friends);\r\n      $scope.getAvatars(userIds);\r\n    }\r\n  };\r\n\r\n  $scope.initializeChat = function () {\r\n    if (!$scope.chatUserDict || !$scope.chatLibrary) {\r\n      $scope.setup();\r\n    }\r\n    performanceService.logSinglePerformanceMark(\r\n      chatUtility.performanceMarkLabels.chatConversationsLoading\r\n    );\r\n    // initialize loading conversation count and chat user list\r\n    $scope.updateUnreadConversationCount();\r\n    // initialize the chat windows\r\n    $scope.getUserConversations();\r\n  };\r\n\r\n  $scope.initializeEvents = function () {\r\n    angular.element($window).bind('resize', function () {\r\n      if (\r\n        !$scope.chatLibrary.chatLayout.resizing &&\r\n        ($scope.chatLibrary.dialogIdList.length > 0 ||\r\n          $scope.chatLibrary.minimizedDialogIdList.length > 0)\r\n      ) {\r\n        $scope.chatLibrary.chatLayout.resizing = true;\r\n        getDialogsNumber();\r\n        if ($scope.dialogsOverflowWindow() || dialogsFitWindow()) {\r\n          $log.debug(' ------- need to resize -------------- ');\r\n          $scope.onResize();\r\n        } else {\r\n          $scope.chatLibrary.chatLayout.resizing = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    $scope.$on('Roblox.Chat.destroyChatCookie', function () {\r\n      chatClientStorageUtilityService.removeFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.dialogIdList,\r\n        $scope.chatLibrary.cookieOption\r\n      );\r\n      chatClientStorageUtilityService.removeFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.dialogDict,\r\n        $scope.chatLibrary.cookieOption\r\n      );\r\n      chatClientStorageUtilityService.removeFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.dialogsLayout,\r\n        $scope.chatLibrary.cookieOption\r\n      );\r\n      chatClientStorageUtilityService.removeFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.chatBarLayout,\r\n        $scope.chatLibrary.cookieOption\r\n      );\r\n      chatClientStorageUtilityService.removeFromStorage(\r\n        chatClientStorageUtilityService.storageDictionary.chatFriendsListReloadTime\r\n      );\r\n\r\n      // remove localstorage\r\n      localStorageService.removeLocalStorage($scope.chatLibrary.dialogLocalStorageName);\r\n      storageService.clearLocalStorage();\r\n    });\r\n\r\n    $scope.$on('Roblox.Chat.LoadUnreadConversationCount', function () {\r\n      $scope.updateUnreadConversationCount();\r\n    });\r\n\r\n    $document.bind('Roblox.Chat.StartChat', function (event, args) {\r\n      $scope.startSpecificConversationFromUserId(args.userId);\r\n    });\r\n  };\r\n\r\n  $scope.initializeServices = function (appData) {\r\n    chatService.setParams();\r\n    messageService.setParams(appData);\r\n    gameService.setParams(EnvironmentUrls.chatApi, EnvironmentUrls.gamesApi);\r\n    storageService.setStorageParams(appData);\r\n  };\r\n\r\n  $scope.initializeLayoutLibrary = () => {\r\n    const { thumbnailTypes, avatarHeadshotSize } = thumbnailConstants;\r\n    $scope.chatLibrary.layoutLibrary = {\r\n      thumbnailTypes,\r\n      avatarHeadshotSize\r\n    };\r\n  };\r\n\r\n  // need to combine this with setup function after we rollout chat app site\r\n  $scope.initializeChatLibrary = function (appData) {\r\n    const { domain } = EnvironmentUrls;\r\n    $scope.chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes =\r\n      chatUtility.chatEnabledByPrivacySettingTypes;\r\n    $scope.chatLibrary.chatLayout.isChatEnabledByPrivacySetting =\r\n      appData.isChatEnabledByPrivacySetting;\r\n    $scope.chatLibrary.chatLayout.languageForPrivacySettingUnavailable =\r\n      appData.languageForPrivacySettingUnavailable;\r\n    $scope.chatLibrary.chatLayout.playTogetherGameCardsEnabled =\r\n      appData.isPlayTogetherForGameCardsEnabled;\r\n    $scope.chatLibrary.cookieOption = {\r\n      domain,\r\n      path: '/',\r\n      expires: null\r\n    };\r\n    $scope.chatLibrary.currentTabTitle = $window.document.title;\r\n    $scope.chatLibrary.dialogLocalStorageName =\r\n      libraryInitialization.dialogLocalStorageNamePrefix + domain;\r\n    $scope.chatLibrary.domain = domain;\r\n\r\n    $scope.chatLibrary.isUserUnder13 = CurrentUser.isUnder13;\r\n    $scope.chatLibrary.maxConversationTitleLengthInput = appData.maxConversationTitleLength;\r\n\r\n    $scope.chatLibrary.partyChromeDisplayTimeStampInterval =\r\n      appData.partyChromeDisplayTimeStampInterval;\r\n    $scope.chatLibrary.quotaOfGroupChatMembers = appData.numberOfMembersForPartyChrome - 1;\r\n    ($scope.chatLibrary.screenHeight = window.screen ? window.screen.height : 0),\r\n      ($scope.chatLibrary.signalRDisconnectionResponseInMilliseconds =\r\n        appData.signalRDisconnectionResponseInMilliseconds);\r\n    $scope.chatLibrary.typingInChatAsSenderThrottleMs = appData.typingInChatFromSenderThrottleMs;\r\n    $scope.chatLibrary.typingInChatForReceiverExpirationMs =\r\n      appData.typingInChatForReceiverExpirationMs;\r\n\r\n    $scope.chatLibrary.userId = parseInt(CurrentUser.userId);\r\n    $scope.chatLibrary.username = CurrentUser.name;\r\n    let eventAction = googleAnalyticsEventsService.eventActions.Chat;\r\n    eventAction += `: ${googleAnalyticsEventsService.getUserAgent()}`;\r\n    $scope.chatLibrary.googleAnalyticsEvent = {\r\n      category: googleAnalyticsEventsService.eventCategories.JSErrors,\r\n      action: eventAction\r\n    };\r\n\r\n    $scope.chatLibrary.senderTypesForUnknownMessageTypeError =\r\n      appData.senderTypesForUnknownMessageTypeError;\r\n\r\n    // initialize eventstream variable\r\n    $scope.chatLibrary.eventStreamParams = { ...chatUtility.eventStreamParams };\r\n\r\n    $scope.chatLibrary.relativeValueToRecordUiPerformance =\r\n      appData.relativeValueToRecordUiPerformance;\r\n    $scope.chatLibrary.isUsingCacheToLoadFriendsInfoEnabled =\r\n      appData.isUsingCacheToLoadFriendsInfoEnabled;\r\n    $scope.chatLibrary.cachedDataFromLocalStorageExpirationMS =\r\n      appData.cachedDataFromLocalStorageExpirationMS;\r\n    $scope.chatLibrary.isInvalidMessageTypeFallbackEnabled =\r\n      appData.isInvalidMessageTypeFallbackEnabled;\r\n    $scope.chatLibrary.isRespectingMessageTypeEnabled = appData.isRespectingMessageTypeEnabled;\r\n    $scope.chatLibrary.validMessageTypesWhiteList = appData.validMessageTypesWhiteList;\r\n    $scope.chatLibrary.shouldRespectConversationHasUnreadMessageToMarkAsRead =\r\n      appData.shouldRespectConversationHasUnreadMessageToMarkAsRead;\r\n\r\n    $scope.initializeLayoutLibrary();\r\n  };\r\n\r\n  $scope.initializeChatViewModel = function () {\r\n    $scope.chatViewModel = { ...libraryInitialization.chatViewModel };\r\n    $scope.chatViewModel.chatDomain = EnvironmentUrls.chatApi;\r\n  };\r\n  $scope.bootstrapAllInitialization = function (data) {\r\n    // start populating page data\r\n    $scope.initializeChatViewModel();\r\n    $scope.initializeChatLibrary(data); // popluate page data into chat library for display\r\n    $scope.initializeServices(data); // populate page data into services to initialize params there\r\n    $scope.initializeRealTimeSubscriptionsForChatPrivacySetting(); // get privacy setting\r\n    $scope.initializePresetData(); // preload data from localstorage and set up api endpoint params\r\n    $scope.initializeChatBar(); // initialize chat conversation UI\r\n    // data initializing\r\n    if (\r\n      $scope.chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes &&\r\n      $scope.chatLibrary.chatLayout.isChatEnabledByPrivacySetting ===\r\n        $scope.chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled\r\n    ) {\r\n      $scope.chatLibrary.chatLayout.pageDataLoading = true;\r\n      $scope.initializeChat();\r\n      $scope.initializeRealTimeSubscriptionsForChat();\r\n    }\r\n    if ($scope.chatLibrary.chatLayout.pageInitializing) {\r\n      $scope.chatLibrary.chatLayout.pageInitializing = false;\r\n    }\r\n  };\r\n\r\n  $scope.initialize = function () {\r\n    $scope.setup(); // set variables into scope\r\n    $scope.initializeEvents();\r\n    $scope.chatLibrary.chatLayout.pageInitializing = true;\r\n\r\n    chatService\r\n      .getMetaData()\r\n      .then(data => {\r\n        $scope.bootstrapAllInitialization(data);\r\n      })\r\n      .catch(error => {\r\n        $log.debug(error);\r\n      });\r\n    contactsService\r\n      .getContactsMetaData()\r\n      .then(() => {})\r\n      .catch(error => {\r\n        $log.debug(error);\r\n      });\r\n  };\r\n\r\n  $scope.initialize();\r\n}\r\n\r\nchatModule.controller('chatController', chatController);\r\n\r\nexport default chatController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction detailsController($scope, $log) {\r\n  'ngInject';\r\n\r\n  const initator = $scope.dialogData.initiator;\r\n  const currentUserId = $scope.chatLibrary.userId;\r\n  $scope.canConversationRemoveMember = function() {\r\n    if ($scope.dialogData.dialogType !== $scope.dialogType.CHAT) {\r\n      return initator && initator.id === currentUserId;\r\n    }\r\n    return false;\r\n  };\r\n}\r\n\r\nchatModule.controller('detailsController', detailsController);\r\n\r\nexport default detailsController;\r\n","import { Endpoints, AbuseReportDispatcher } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction dialogController(\r\n  $scope,\r\n  $log,\r\n  chatService,\r\n  chatUtility,\r\n  messageService,\r\n  dialogAttributes,\r\n  keyCode,\r\n  gameService,\r\n  resources,\r\n  $filter,\r\n  messageHelper,\r\n  httpStatusCodes\r\n) {\r\n  'ngInject';\r\n\r\n  // // ----------------------------------- PRIVATE --------------------------------\r\n\r\n  $scope.removeFromConversation = function (conversationId, layoutId) {\r\n    chatService.removeFromConversation($scope.chatLibrary.userId, conversationId);\r\n    if (\r\n      $scope.chatLibrary.chatLayoutIds &&\r\n      $scope.chatLibrary.chatLayoutIds.indexOf(layoutId) > -1\r\n    ) {\r\n      $scope.chatLibrary.conversationsDict[conversationId].remove = true;\r\n      $scope.closeDialog({ layoutId });\r\n    }\r\n  };\r\n\r\n  $scope.sendPerformanceData = function (message) {\r\n    if (Math.random() < $scope.chatLibrary.relativeValueToRecordUiPerformance) {\r\n      const { startSendingTime } = message;\r\n      const endRespondingTime = new Date().getTime();\r\n      const interval = endRespondingTime - startSendingTime;\r\n      chatService.sendPerformanceData(resources.performanceMeasurements.messageSend, interval);\r\n    }\r\n  };\r\n\r\n  const sendMessage = function (newMessage) {\r\n    chatService.sendMessage($scope.dialogData.id, newMessage.rawContent).then(\r\n      function (response) {\r\n        if (response) {\r\n          const { data } = response;\r\n          if (data) {\r\n            newMessage.sendingMessage = false;\r\n            newMessage.canResend = false;\r\n            $scope.sendPerformanceData(newMessage);\r\n            if (data.resultType !== chatUtility.resultType.SUCCESS) {\r\n              newMessage.sendMessageHasError = true;\r\n              newMessage.error = chatUtility.errorMessages.default;\r\n              if (data.resultType === chatUtility.resultType.MODERATED) {\r\n                newMessage.error = chatUtility.errorMessages.messageContentModerated;\r\n                newMessage.content = chatUtility.hashOutContent(newMessage.content);\r\n                chatUtility.sanitizeMessage(newMessage);\r\n                if (newMessage.hasLinkCard) {\r\n                  const { linkCardMessages } = newMessage;\r\n                  linkCardMessages.forEach(function (pieceOfMessage) {\r\n                    if (!pieceOfMessage.isCard) {\r\n                      pieceOfMessage.content = chatUtility.hashOutContent(pieceOfMessage.content);\r\n                    }\r\n                  });\r\n                }\r\n              } else {\r\n                newMessage.canResend = true;\r\n              }\r\n            } else {\r\n              const messageFromServer = data.content;\r\n              newMessage.sendMessageHasError = false;\r\n              if (angular.isUndefined($scope.dialogData.messagesDict)) {\r\n                $scope.dialogData.messagesDict = {};\r\n              }\r\n\r\n              newMessage.id = data.messageId;\r\n              newMessage.sent = data.sent;\r\n              newMessage.messageType = data.messageType;\r\n              messageService.buildTimeStamp(newMessage, $scope.dialogData);\r\n              messageService.buildDisplayMessage(newMessage);\r\n              newMessage.resetClusterMessage = true;\r\n              chatUtility.sanitizeMessage(data);\r\n              newMessage.content = data.content;\r\n              newMessage.pieces = data.pieces;\r\n              newMessage.filteredForReceivers = data.filteredForReceivers;\r\n              newMessage.messageType = data.messageType;\r\n              newMessage.senderType = messageHelper.senderTypes.user;\r\n              messageService.setClusterMaster($scope.dialogData, newMessage);\r\n              if (newMessage.hasLinkCard && newMessage.rawContent !== messageFromServer) {\r\n                if (!data.hasLinkCard) {\r\n                  newMessage.hasLinkCard = false;\r\n                } else {\r\n                  gameService.fetchDataForLinkCard([data], $scope.chatLibrary);\r\n                  newMessage.linkCardMessages = data.linkCardMessages;\r\n                }\r\n              }\r\n              $scope.dialogData.messagesDict[data.messageId] = newMessage;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      function (errorResponse) {\r\n        $log.debug(' ------ sendMessage error -------');\r\n        newMessage.sendingMessage = false;\r\n        newMessage.sendMessageHasError = true;\r\n        newMessage.canResend = true;\r\n        const { status: errorStatus, data: errorData } = errorResponse;\r\n        if (errorData) {\r\n          newMessage.sendingMessage = false;\r\n          newMessage.sendMessageHasError = true;\r\n          newMessage.canResend = true;\r\n          const { textTooLong: textTooLongCode } = chatUtility.sendMessageErrorCode;\r\n          const {\r\n            textTooLong: textTooLongErrorMsg,\r\n            sendingMessagesTooQuickly: sendingMessagesTooQuicklyErrorMsg\r\n          } = chatUtility.errorMessages;\r\n          if (errorData?.errors?.length) {\r\n            if (errorData.errors[0].message === textTooLongCode) {\r\n              newMessage.error = textTooLongErrorMsg;\r\n            } else if (errorStatus == httpStatusCodes.tooManyAttempts) {\r\n              newMessage.error = sendingMessagesTooQuicklyErrorMsg;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.toggleDetails = function () {\r\n    $scope.dialogLayout.details.isEnabled = !$scope.dialogLayout.details.isEnabled;\r\n    $scope.saveIntoDialogsLayout();\r\n  };\r\n\r\n  $scope.toggleConversationEditor = function () {\r\n    $scope.dialogLayout.details.isConversationTitleEditorEnabled = !$scope.dialogLayout.details\r\n      .isConversationTitleEditorEnabled;\r\n    $scope.dialogLayout.focusMeEnabled =\r\n      $scope.dialogLayout.details.isConversationTitleEditorEnabled;\r\n    $scope.saveIntoDialogsLayout();\r\n  };\r\n\r\n  $scope.toggleAddFriends = function () {\r\n    $scope.dialogLayout.details.isAddFriendsEnabled = !$scope.dialogLayout.details\r\n      .isAddFriendsEnabled;\r\n    if ($scope.dialogLayout.details.isAddFriendsEnabled) {\r\n      $scope.addFriends();\r\n    } else {\r\n      $scope.dialogData.addMoreFriends = false;\r\n    }\r\n    $scope.getLimitLinkNameForMemberList();\r\n    $scope.saveIntoDialogsLayout();\r\n  };\r\n\r\n  $scope.getLimitLinkNameForMemberList = function (numberOfRemove) {\r\n    let numberOfMemebers = $scope.dialogData.userIds.length;\r\n    if ($scope.dialogData.selectedUserIds) {\r\n      numberOfMemebers += $scope.dialogData.selectedUserIds.length;\r\n    }\r\n\r\n    if (numberOfRemove) {\r\n      numberOfMemebers -= numberOfRemove;\r\n    }\r\n    $scope.dialogLayout.memberDisplay.linkName = $scope.dialogLayout.memberDisplay.isAll\r\n      ? $scope.dialogLayout.memberDisplay.seeLessLink\r\n      : `${$scope.dialogLayout.memberDisplay.seeMoreLink} (${\r\n          numberOfMemebers - $scope.dialogLayout.memberDisplay.defaultLimit\r\n        })`;\r\n  };\r\n\r\n  $scope.toggleMemberList = function () {\r\n    $scope.dialogLayout.memberDisplay.isAll = !$scope.dialogLayout.memberDisplay.isAll;\r\n\r\n    $scope.dialogLayout.memberDisplay.limitNumber = $scope.dialogLayout.memberDisplay.isAll\r\n      ? $scope.dialogData.userIds.length\r\n      : $scope.dialogLayout.memberDisplay.defaultLimit;\r\n    $scope.getLimitLinkNameForMemberList();\r\n  };\r\n\r\n  $scope.toggleFriendsMenu = function (userId, isHidden) {\r\n    if (isHidden && $scope.dialogLayout.details.friendIdForMenuOn === userId) {\r\n      $scope.dialogLayout.details.friendMenuAction = {};\r\n      $scope.dialogLayout.details.friendIdForMenuOn = null;\r\n    } else if (userId && !isHidden) {\r\n      $scope.dialogLayout.details.friendMenuAction[userId] = !$scope.dialogLayout.details\r\n        .friendMenuAction[userId];\r\n      $scope.dialogLayout.details.friendIdForMenuOn = userId;\r\n    }\r\n  };\r\n\r\n  $scope.updatePopoverParams = function () {\r\n    const { id, playTogetherIds } = $scope.dialogData;\r\n    const {\r\n      dialogSelectorPrefix,\r\n      popoverTriggerSelectorPrefix,\r\n      dialogTriggerClassPrefix\r\n    } = $scope.dialogLayout.togglePopoverParams;\r\n    const { togglePopoverParams } = $scope.dialogLayout;\r\n    const togglePopoverParamsUpdate = {\r\n      dialogSelect: dialogSelectorPrefix + id,\r\n      triggerSelector: popoverTriggerSelectorPrefix + id,\r\n      dialogTriggerClassSelector: dialogTriggerClassPrefix + id,\r\n      isOpen: playTogetherIds ? playTogetherIds.length > 0 : false,\r\n      isFirstTimeOpen: true\r\n    };\r\n    Object.assign(togglePopoverParams, togglePopoverParamsUpdate);\r\n  };\r\n\r\n  // // ----------------------------------- PUBLIC ---------------------------------\r\n  $scope.dialogParams = { ...chatUtility.dialogParams };\r\n  $scope.userPresenceTypes = chatUtility.userPresenceTypes;\r\n  $scope.dialogData.messageForSend = '';\r\n  $scope.dialogLayout.scrollbarElm = chatUtility.getScrollBarSelector(\r\n    $scope.dialogData,\r\n    chatUtility.scrollBarType.MESSAGE\r\n  );\r\n  $scope.dialogLayout.listenToScrollInitialized = false;\r\n  $scope.friendsScrollbarElm = chatUtility.getScrollBarSelector(\r\n    $scope.dialogData,\r\n    chatUtility.scrollBarType.FRIENDSELECTION\r\n  );\r\n  $scope.updatePopoverParams();\r\n  $scope.updateDialog = function () {\r\n    $log.debug('---- updateDialog callback ---- Scrollbars updated');\r\n    if (!$scope.dialogLayout.IsdialogContainerVisible) {\r\n      const scrollbarObject = angular.element($scope.dialogLayout.scrollbarElm);\r\n      scrollbarObject.find('.mCustomScrollBox').addClass('dialog-visible');\r\n      $scope.dialogLayout.IsdialogContainerVisible = true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  $scope.buildNewMessage = function (newMessage) {\r\n    return {\r\n      read: true,\r\n      content: newMessage,\r\n      rawContent: newMessage,\r\n      senderTargetId: $scope.chatLibrary.userId,\r\n      sendingMessage: true,\r\n      sendMessageHasError: false,\r\n      startSendingTime: new Date().getTime(),\r\n      messageType: 'PlainText',\r\n      senderType: 'User'\r\n    };\r\n  };\r\n  $scope.sendMessage = function () {\r\n    if ($scope.dialogData.messageForSend.length > 0) {\r\n      const newMessageObj = $scope.buildNewMessage($scope.dialogData.messageForSend);\r\n      chatUtility.sanitizeMessage(newMessageObj);\r\n      gameService.fetchDataForLinkCard([newMessageObj], $scope.chatLibrary);\r\n      $scope.dialogData.messageForSend = '';\r\n      if (angular.isUndefined($scope.dialogData.chatMessages)) {\r\n        $scope.dialogData.chatMessages = [];\r\n      }\r\n      messageService.setClusterMaster($scope.dialogData, newMessageObj);\r\n      $scope.dialogData.displayMessage = newMessageObj;\r\n\r\n      sendMessage(newMessageObj);\r\n    }\r\n  };\r\n\r\n  $scope.resendMessage = function (resendMessageObj) {\r\n    sendMessage(resendMessageObj);\r\n  };\r\n\r\n  $scope.keyPressEnter = function () {\r\n    $scope.sendMessage();\r\n    if ($scope.dialogLayout.typing.isTypingAsSender) {\r\n      $scope.dialogLayout.typing.lastTimeTypingAsSender = null;\r\n      $scope.dialogLayout.typing.isTypingAsSender = false;\r\n    }\r\n  };\r\n\r\n  $scope.typing = function ($event, isTyping, currentDate) {\r\n    if (isTyping) {\r\n      if ($event.which !== keyCode.enter) {\r\n        const now = currentDate || new Date().getTime();\r\n        const typingStatus = $scope.dialogLayout.typing;\r\n\r\n        if (\r\n          !typingStatus.lastTimeTypingAsSender ||\r\n          now - typingStatus.lastTimeTypingAsSender >\r\n            $scope.chatLibrary.typingInChatAsSenderThrottleMs\r\n        ) {\r\n          typingStatus.lastTimeTypingAsSender = now;\r\n          typingStatus.isTypingAsSender = true;\r\n          chatService.updateUserTypingStatus($scope.dialogData.id, true);\r\n        }\r\n      }\r\n\r\n      $scope.toggleDialogFocusStatus(true);\r\n    }\r\n  };\r\n\r\n  $scope.abuseReport = function (userId, isConfirmed) {\r\n    $scope.dialogLayout.isConfirmationOn = true;\r\n    // remember userId for the confirmation\r\n    if (userId) {\r\n      $scope.dialogLayout.userIdForAbuseReport = userId;\r\n    }\r\n    if (isConfirmed && $scope.dialogLayout.userIdForAbuseReport) {\r\n      const relativeUrl = $filter('formatString')(chatUtility.chatLayout.abuseReportUrl, {\r\n        userId: $scope.dialogLayout.userIdForAbuseReport,\r\n        location: escape(window.location),\r\n        conversationId: $scope.dialogData.id\r\n      });\r\n      const url = Endpoints ? Endpoints.getAbsoluteUrl(relativeUrl) : relativeUrl;\r\n\r\n      if (AbuseReportDispatcher) {\r\n        AbuseReportDispatcher.triggerUrlAction(url);\r\n      } else {\r\n        window.location.href = url;\r\n      }\r\n\r\n      $scope.dialogLayout.userIdForAbuseReport = null;\r\n      $scope.dialogLayout.isConfirmationOn = false;\r\n    }\r\n    $scope.saveIntoDialogsLayout();\r\n  };\r\n\r\n  $scope.leaveGroupChat = function (isConfirmed) {\r\n    if (isConfirmed) {\r\n      $scope.chatLibrary.conversationsDict[$scope.dialogData.id].remove = true;\r\n      $scope.removeFromConversation($scope.dialogData.id, $scope.dialogData.layoutId);\r\n      $scope.resetConfirmDialog();\r\n    } else {\r\n      $scope.dialogLayout.confirmDialog.isOpen = true;\r\n      const leaveChatGroupData = dialogAttributes.negativeAction.leaveChatGroup;\r\n      $scope.dialogLayout.confirmDialog.title = leaveChatGroupData.title;\r\n      $scope.dialogLayout.confirmDialog.headerTitle = leaveChatGroupData.headerTitle;\r\n      $scope.dialogLayout.confirmDialog.btnName = leaveChatGroupData.btnName;\r\n      $scope.dialogLayout.confirmDialog.cancelBtnName = leaveChatGroupData.cancelBtnName;\r\n      $scope.dialogLayout.confirmDialog.type = leaveChatGroupData.type;\r\n    }\r\n  };\r\n\r\n  $scope.addFriends = function () {\r\n    $scope.dialogData.addMoreFriends = true;\r\n    if ($scope.chatLibrary.friendIds.length > 0) {\r\n      $scope.updateFriends();\r\n    }\r\n    $scope.dialogData.scrollBarType = chatUtility.scrollBarType.FRIENDSELECTION;\r\n  };\r\n\r\n  $scope.viewParticipants = function () {\r\n    $scope.dialogLayout.lookUpMembers = !$scope.dialogLayout.lookUpMembers;\r\n  };\r\n\r\n  $scope.toggleGroupNameEditor = function () {\r\n    $scope.dialogLayout.renameEditor.isEnabled = !$scope.dialogLayout.renameEditor.isEnabled;\r\n    $scope.dialogLayout.renameEditor.hasFocus = !$scope.dialogLayout.renameEditor.hasFocus;\r\n\r\n    $scope.updateDialogStyle();\r\n    $scope.dialogLayout.focusMeEnabled = !$scope.dialogLayout.renameEditor.isEnabled;\r\n  };\r\n\r\n  $scope.renameTitle = function () {\r\n    const legacyTitle = $scope.dialogData.title;\r\n    chatService\r\n      .renameGroupConversation($scope.dialogData.id, $scope.dialogData.name)\r\n      .then(function (data) {\r\n        if (data) {\r\n          switch (data.resultType) {\r\n            case chatUtility.resultType.MODERATED:\r\n              messageService.buildSystemMessage(\r\n                chatUtility.notificationType.conversationTitleModerated,\r\n                $scope.dialogData,\r\n                true\r\n              );\r\n              chatUtility.updateConversationTitle($scope.dialogData, legacyTitle);\r\n              break;\r\n            case chatUtility.resultType.SUCCESS:\r\n              chatUtility.updateConversationTitle($scope.dialogData, data.conversationTitle);\r\n              break;\r\n          }\r\n          $scope.toggleConversationEditor();\r\n        }\r\n      });\r\n  };\r\n\r\n  $scope.removeMember = function (id, isConfirmed) {\r\n    if (isConfirmed) {\r\n      $scope.resetConfirmDialog();\r\n      $scope.getLimitLinkNameForMemberList(1);\r\n      chatService.removeFromConversation(id, $scope.dialogData.id).then(function () {\r\n        $scope.isOverLoaded();\r\n      });\r\n    } else {\r\n      $scope.dialogLayout.confirmDialog.isOpen = true;\r\n      const removeUserData = dialogAttributes.negativeAction.removeUser;\r\n      $scope.dialogLayout.confirmDialog.title = removeUserData.title;\r\n      $scope.dialogLayout.confirmDialog.headerTitle = removeUserData.headerTitle;\r\n      $scope.dialogLayout.confirmDialog.btnName = removeUserData.btnName;\r\n      $scope.dialogLayout.confirmDialog.cancelBtnName = removeUserData.cancelBtnName;\r\n      $scope.dialogLayout.confirmDialog.type = removeUserData.type;\r\n      $scope.dialogLayout.confirmDialog.params = { userId: id };\r\n    }\r\n  };\r\n\r\n  $scope.resetConfirmDialog = function () {\r\n    const resetParams = {\r\n      isOpen: false,\r\n      title: '',\r\n      btnName: '',\r\n      type: '',\r\n      params: {}\r\n    };\r\n    Object.assign($scope.dialogLayout.confirmDialog, resetParams);\r\n  };\r\n\r\n  $scope.confirmCallBack = function () {\r\n    const { confirmDialog } = $scope.dialogLayout;\r\n    switch (confirmDialog.type) {\r\n      case dialogAttributes.negativeAction.removeUser.type:\r\n        $scope.removeMember(confirmDialog.params.userId, true);\r\n        break;\r\n      case dialogAttributes.negativeAction.leaveChatGroup.type:\r\n        $scope.leaveGroupChat(true);\r\n        break;\r\n    }\r\n  };\r\n\r\n  $scope.updateDialogHeader = function (isHovered) {\r\n    if ($scope.dialogLayout.collapsed) {\r\n      $scope.dialogLayout.hoverOnCollapsed = isHovered;\r\n    }\r\n  };\r\n\r\n  $scope.isDialogMainContainerHidden = function () {\r\n    return $scope.dialogData.addMoreFriends || $scope.dialogLayout.details.isEnabled;\r\n  };\r\n  // // ----------------------------------- CODE TO RUN --------------------------------\r\n  chatService\r\n    .getMessages($scope.dialogData.id, null, $scope.dialogParams.pageSizeOfGetMessages)\r\n    .then(function (data) {\r\n      if (data && data.length > 0) {\r\n        $scope.dialogData.chatMessages = [];\r\n        $scope.dialogData.messagesDict = {};\r\n        messageService.processMessages(\r\n          $scope.chatLibrary,\r\n          $scope.dialogData,\r\n          data,\r\n          $scope.chatLibrary.friendsDict\r\n        );\r\n        gameService.fetchDataForLinkCard(data, $scope.chatLibrary);\r\n        $scope.dialogData.scrollBarType = chatUtility.scrollBarType.MESSAGE;\r\n      } else {\r\n        $scope.dialogData.scrollBarType = chatUtility.scrollBarType.MESSAGE;\r\n        $scope.updateDialog();\r\n      }\r\n    });\r\n\r\n  $scope.$on('elastic:resize', function (event, element, oldHeight, newHeight) {\r\n    $log.debug(`---- oldHeight -----${oldHeight}---- newHeight -----${newHeight}`);\r\n    if (oldHeight !== newHeight) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      chatUtility.setResizeInputLayout(\r\n        $scope.chatLibrary,\r\n        newHeight,\r\n        $scope.dialogData,\r\n        $scope.dialogLayout\r\n      );\r\n    }\r\n  });\r\n\r\n  $scope.init = function () {\r\n    $scope.getLimitLinkNameForMemberList();\r\n  };\r\n\r\n  $scope.init();\r\n}\r\n\r\nchatModule.controller('dialogController', dialogController);\r\n\r\nexport default dialogController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction dialogHeaderController($scope, $log, resources, eventStreamService) {\r\n  'ngInject';\r\n\r\n  $scope.isGameIconAvailable = function() {\r\n    return $scope.isPinOrActiveGameAvailable() || $scope.isMyRecentGameAvailable();\r\n  };\r\n\r\n  $scope.isPinOrActiveGameAvailable = function() {\r\n    return (\r\n      $scope.dialogData.placeForShown &&\r\n      $scope.dialogData.placeForShown.universeId &&\r\n      $scope.dialogData.placeForShown.rootPlaceId\r\n    );\r\n  };\r\n\r\n  $scope.isMyRecentGameAvailable = function() {\r\n    return $scope.chatLibrary.myRecentPlaceId;\r\n  };\r\n\r\n  $scope.openGameList = function() {\r\n    const eventType = resources.eventStreamParams.openGameListInPlayTogether;\r\n    const properties = {\r\n      conversationId: $scope.dialogData.id\r\n    };\r\n    eventStreamService.sendEventWithTarget(\r\n      eventType,\r\n      resources.eventStreamParams.actions.click,\r\n      properties\r\n    );\r\n  };\r\n\r\n  $scope.init = function() {\r\n    $scope.gamesListTemplateUrl = resources.templates.gamesList;\r\n  };\r\n\r\n  $scope.init();\r\n}\r\n\r\nchatModule.controller('dialogHeaderController', dialogHeaderController);\r\n\r\nexport default dialogHeaderController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction dialogMessagesController($scope, $log, messageUtility) {\r\n  'ngInject';\r\n\r\n  $scope.isSenderTypeAllowed = function(message) {\r\n    return (\r\n      $scope.chatLibrary.senderTypesForUnknownMessageTypeError.indexOf(message.senderType) > -1\r\n    );\r\n  };\r\n\r\n  $scope.canRenderMessage = function(message) {\r\n    if (message.sendingMessage) {\r\n      return true;\r\n    }\r\n    if (!$scope.chatLibrary.isRespectingMessageTypeEnabled) {\r\n      return true;\r\n    }\r\n\r\n    return (\r\n      message.isSystemMessage ||\r\n      (messageUtility.isMessageTypeInWhiteList($scope.chatLibrary, message) &&\r\n        messageUtility.isMessageTypeLegal(message) &&\r\n        messageUtility.isSenderTypeLegal(message))\r\n    );\r\n  };\r\n\r\n  $scope.shouldShowInvalidMessageTypePrompt = function(message) {\r\n    return (\r\n      $scope.chatLibrary.isInvalidMessageTypeFallbackEnabled && $scope.isSenderTypeAllowed(message)\r\n    );\r\n  };\r\n}\r\n\r\nchatModule.controller('dialogMessagesController', dialogMessagesController);\r\n\r\nexport default dialogMessagesController;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction dialogsController($scope, chatService, chatUtility, messageService, $log) {\r\n  'ngInject';\r\n\r\n  $scope.isNewGroupChat = function(conversation) {\r\n    return (\r\n      conversation.dialogType === chatUtility.dialogType.NEWGROUPCHAT ||\r\n      (conversation.addMoreFriends && !conversation.isGroupChat)\r\n    );\r\n  };\r\n\r\n  $scope.canAddFriendInExistedConversation = function(conversation) {\r\n    return conversation.addMoreFriends && conversation.isGroupChat;\r\n  };\r\n\r\n  $scope.resetPreviousDialog = function(oldLayoutId, newLayoutId, preDialogData) {\r\n    $scope.chatUserDict[oldLayoutId].selectedUserIds = [];\r\n    $scope.chatUserDict[oldLayoutId].selectedUsersDict = {};\r\n    if (!preDialogData.preserved) {\r\n      delete $scope.chatUserDict[oldLayoutId];\r\n    } else {\r\n      $scope.chatUserDict[oldLayoutId].addMoreFriends = false;\r\n    }\r\n\r\n    // update dialogList for position and dialog status\r\n    const position = $scope.chatLibrary.dialogIdList.indexOf(oldLayoutId);\r\n    if (position > -1 && !preDialogData.preserved) {\r\n      // legacy dialog existed but no need to keep, such as new group creation\r\n      $scope.destroyDialogLayout(oldLayoutId);\r\n      delete $scope.chatLibrary.dialogDict[oldLayoutId];\r\n      if (preDialogData.isDuplicatedConversation) {\r\n        $scope.chatLibrary.dialogIdList.splice(position);\r\n      } else {\r\n        $scope.chatLibrary.dialogIdList[position] = newLayoutId;\r\n        $scope.chatLibrary.dialogDict[newLayoutId] = { ...chatUtility.dialogInitValue };\r\n      }\r\n    } else {\r\n      $scope.updateDialogList(newLayoutId, true);\r\n    }\r\n  };\r\n  $scope.generateDialog = function(conversation, dialogType, preDialogData) {\r\n    const oldLayoutId = preDialogData.layoutId;\r\n    const newLayoutId = $scope.getLayoutId(conversation.id, dialogType);\r\n    conversation.dialogType = dialogType;\r\n    if (oldLayoutId !== newLayoutId) {\r\n      // update user data and friends library\r\n      $scope.getUserInfoForConversation(conversation);\r\n\r\n      // fill the new conversation and update chatUserDict\r\n      conversation.layoutId = newLayoutId;\r\n      conversation.isConversation = true;\r\n      $scope.updateChatViewModel(conversation, true);\r\n\r\n      // reset previous dialog and update dialogList for position and dialog status\r\n      $scope.resetPreviousDialog(oldLayoutId, newLayoutId, preDialogData);\r\n    } else {\r\n      // update user data and friends library\r\n      $scope.getUserInfoForConversation(conversation);\r\n      $scope.updateChatViewModel(conversation, true);\r\n      $scope.chatLibrary.dialogDict[oldLayoutId].isUpdated = true;\r\n      $scope.chatLibrary.dialogDict[oldLayoutId].updateStatus = chatUtility.dialogStatus.REFRESH;\r\n    }\r\n  };\r\n\r\n  $scope.createNewGroupChat = function(layoutId, currentConversation) {\r\n    if ($scope.newGroupChatLocked) {\r\n      return;\r\n    }\r\n    $scope.newGroupChatLocked = true;\r\n\r\n    const preDialogData = { layoutId };\r\n    let newTitle = currentConversation.name;\r\n    if (currentConversation.addMoreFriends && !currentConversation.isGroupChat) {\r\n      const participantUsers = currentConversation.participants;\r\n      angular.forEach(participantUsers, function(user) {\r\n        const userId = user.targetId;\r\n        if (userId !== $scope.chatLibrary.userId) {\r\n          if (\r\n            currentConversation.selectedUserIds &&\r\n            currentConversation.selectedUserIds.indexOf(userId) < 0\r\n          ) {\r\n            currentConversation.selectedUserIds.push(userId);\r\n          }\r\n          currentConversation.selectedUsersDict[userId] = angular.copy(\r\n            $scope.chatLibrary.friendsDict[userId]\r\n          );\r\n          currentConversation.selectedUsersDict[userId].hiddenFromSelection = true;\r\n        }\r\n      });\r\n      preDialogData.preserved = true;\r\n      newTitle = '';\r\n    }\r\n    chatService\r\n      .startGroupConversation(currentConversation.selectedUserIds, newTitle)\r\n      .then(function(data) {\r\n        if (data.resultType === chatUtility.resultType.SUCCESS) {\r\n          const { conversation } = data;\r\n          const layoutId = $scope.chatLibrary.allConversationLayoutIdsDict[conversation.id];\r\n          if (layoutId) {\r\n            // duplicate group conversation\r\n            preDialogData.isDuplicatedConversation = true;\r\n            $scope.resetPreviousDialog(currentConversation.layoutId, layoutId, preDialogData);\r\n            if ($scope.chatLibrary.dialogIdList.indexOf(layoutId) < 0) {\r\n              $scope.launchDialog(layoutId, true);\r\n            }\r\n          } else {\r\n            conversation.isGroupChat =\r\n              conversation.conversationType === chatUtility.conversationType.multiUserConversation;\r\n            messageService.formatTimestampInConversation(conversation);\r\n            $scope.generateDialog(conversation, chatUtility.dialogType.GROUPCHAT, preDialogData);\r\n          }\r\n        }\r\n        $scope.newGroupChatLocked = false;\r\n      })\r\n      .catch(function(ex) {\r\n        $scope.newGroupChatLocked = false;\r\n      });\r\n  };\r\n\r\n  $scope.sendInvite = function(layoutId) {\r\n    $log.debug('------------- sendInvite ------------');\r\n    const currentConversation = $scope.chatUserDict[layoutId];\r\n    if (\r\n      (currentConversation.dialogType === chatUtility.dialogType.CHAT ||\r\n        currentConversation.dialogType === chatUtility.dialogType.GROUPCHAT) &&\r\n      !currentConversation.addMoreFriends\r\n    ) {\r\n      const { userIds } = currentConversation;\r\n      const myPosition = userIds.indexOf($scope.chatLibrary.userId);\r\n      if (myPosition > -1) {\r\n        userIds.splice(myPosition, 1);\r\n      }\r\n      currentConversation.selectedUserIds = userIds;\r\n    } else if ($scope.canAddFriendInExistedConversation(currentConversation)) {\r\n      chatService\r\n        .addToConversation(currentConversation.selectedUserIds, currentConversation.id)\r\n        .then(function(data) {\r\n          if (data && data.resultType === chatUtility.resultType.SUCCESS && data.conversationId) {\r\n            currentConversation.addMoreFriends = false;\r\n            currentConversation.selectedUserIds.forEach(selectedUserId => {\r\n              if (currentConversation.userIds.indexOf(selectedUserId) < 0) {\r\n                currentConversation.userIds.push(selectedUserId);\r\n              }\r\n            });\r\n          }\r\n        })\r\n        .finally(() => {\r\n          currentConversation.selectedUserIds = [];\r\n          currentConversation.selectedUsersDict = {};\r\n        });\r\n    } else if ($scope.isNewGroupChat(currentConversation)) {\r\n      $scope.createNewGroupChat(layoutId, currentConversation);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.controller('dialogsController', dialogsController);\r\n\r\nexport default dialogsController;\r\n","import { DisplayNames } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction friendsController($scope, chatUtility, usersService, usersPresenceService, $timeout) {\r\n  'ngInject';\r\n\r\n  $scope.dialogLayout.scrollToBottom = false;\r\n  $scope.dialogLayout.IsdialogContainerVisible = false;\r\n  $scope.dialogParams = { ...chatUtility.dialogParams };\r\n  $scope.dialogType = { ...chatUtility.dialogType };\r\n  $scope.userPresenceTypes = { ...chatUtility.userPresenceTypes };\r\n  $scope.friendsScrollbarElm = chatUtility.getScrollBarSelector(\r\n    $scope.dialogData,\r\n    chatUtility.scrollBarType.FRIENDSELECTION\r\n  );\r\n  $scope.dialogData.scrollBarType = chatUtility.scrollBarType.FRIENDSELECTION;\r\n\r\n  $scope.dialogData.isCreated = true;\r\n\r\n  $scope.updateFriendsDictData = friends => {\r\n    if (friends?.length) {\r\n      const userIds = [];\r\n      angular.forEach(friends, friend => {\r\n        const currentFriend = friend;\r\n        const { id: userId } = currentFriend;\r\n        currentFriend.id = parseInt(userId, 10);\r\n        const { name, displayName } = currentFriend;\r\n        currentFriend.nameForDisplay = DisplayNames?.Enabled() ? displayName : name;\r\n\r\n        if (!$scope.chatLibrary.friendsDict[userId]) {\r\n          $scope.chatLibrary.friendsDict[userId] = currentFriend;\r\n          userIds.push(userId);\r\n        }\r\n      });\r\n\r\n      $scope.updateFriends(friends);\r\n      if (userIds && userIds.length > 0) {\r\n        usersService.getAvatarHeadshots(userIds, $scope.chatLibrary.friendsDict);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getFriends = function () {\r\n    usersPresenceService.getFriendsPresence().then(\r\n      result => {\r\n        if (result?.length) {\r\n          $scope.updateFriendsDictData(result);\r\n        }\r\n      },\r\n      error => {\r\n        console.debug(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  if ($scope.chatLibrary.friendIds.length > 0) {\r\n    $scope.updateFriends();\r\n  }\r\n  getFriends();\r\n  $scope.isOverLoaded();\r\n}\r\n\r\nchatModule.controller('friendsController', friendsController);\r\n\r\nexport default friendsController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction linkCardController(\r\n  $scope,\r\n  $log,\r\n  eventStreamService,\r\n  gameService,\r\n  modalService,\r\n  $window,\r\n  $filter,\r\n  pinGameService,\r\n  gameLayout\r\n) {\r\n  'ngInject';\r\n\r\n  $scope.isLinkCardAvailableAndParsedByClientSide = function(pieceOfMessage) {\r\n    return !pieceOfMessage.isLinkCard && pieceOfMessage.isCard;\r\n  };\r\n\r\n  $scope.sendEventStream = function(eventType, rootPlaceId) {\r\n    const properties = {\r\n      placeId: rootPlaceId,\r\n      conversationId: $scope.dialogData.id\r\n    };\r\n    eventStreamService.sendEventWithTarget(\r\n      eventType,\r\n      $scope.chatLibrary.eventStreamParams.actions.click,\r\n      properties\r\n    );\r\n  };\r\n\r\n  $scope.sendLoadLinkCardEvent = function(rootPlaceId) {\r\n    const properties = {\r\n      placeId: rootPlaceId,\r\n      conversationId: $scope.dialogData.id\r\n    };\r\n    eventStreamService.sendEventWithTarget(\r\n      $scope.chatLibrary.eventStreamParams.loadGameLinkCardInChat,\r\n      $scope.chatLibrary.eventStreamParams.actions.render,\r\n      properties\r\n    );\r\n  };\r\n\r\n  $scope.sendGamePlayEnvent = function(rootPlaceId) {\r\n    const { context } = $scope.chatLibrary.eventStreamParams;\r\n    eventStreamService.sendGamePlayEvent(context.gamePlayFromLinkCard, rootPlaceId);\r\n  };\r\n\r\n  $scope.playGame = function(rootPlaceId, eventType, addition) {\r\n    $scope.sendEventStream(eventType, rootPlaceId);\r\n    $scope.sendGamePlayEnvent(rootPlaceId);\r\n    if (addition && addition.privateServerLinkCode) {\r\n      gameService.playPrivateServerGame(rootPlaceId, addition.privateServerLinkCode);\r\n    } else if ($scope.chatLibrary.chatLayout.playTogetherGameCardsEnabled) {\r\n      gameService.playTogetherGame(rootPlaceId, $scope.dialogData.id);\r\n    } else {\r\n      gameService.playRegularGame(rootPlaceId);\r\n    }\r\n  };\r\n\r\n  $scope.buyAccess = function(placeId, layout) {\r\n    const place = $scope.chatLibrary.placesLibrary[placeId];\r\n    const { gameIconUrl } = place;\r\n    const bodyText = $filter('formatString')(layout.buyAccess.bodyText(), {\r\n      placeName: place.placeName,\r\n      creatorName: place.creatorName,\r\n      price: place.price\r\n    });\r\n    const options = {\r\n      titleText: layout.buyAccess.title,\r\n      bodyText,\r\n      imageUrl: gameIconUrl,\r\n      actionButtonShow: true,\r\n      actionButtonText: layout.buyAccess.yesButtonText,\r\n      actionButtonClass: layout.buyAccess.yesButtonClass,\r\n      neutralButtonText: layout.buyAccess.noButtonText,\r\n      closeButtonShow: true\r\n    };\r\n    $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = true;\r\n    const modal = modalService.open(options);\r\n    modal.result.then(\r\n      function() {\r\n        // make purchase\r\n        $log.debug('--- purchase ---');\r\n        $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = false;\r\n      },\r\n      function() {\r\n        $log.debug('--- cancel ---');\r\n        $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = false;\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.goToPlaceDetails = function(rootPlaceId, eventType) {\r\n    $scope.sendEventStream(eventType, rootPlaceId);\r\n    $window.location.href = $scope.chatLibrary.placesLibrary[rootPlaceId].placeUrl;\r\n  };\r\n\r\n  $scope.play = function(placeId, eventType, addition) {\r\n    const buttonType = $scope.chatLibrary.placesLibrary[placeId].buttonLayoutForLinkCard.type;\r\n    switch (buttonType) {\r\n      case gameLayout.playButtonTypes.play:\r\n        $scope.playGame(placeId, eventType, addition);\r\n        break;\r\n      case gameLayout.playButtonTypes.buy:\r\n        $scope.buyAccess(placeId, gameLayout);\r\n        break;\r\n      case gameLayout.playButtonTypes.details:\r\n        $scope.goToPlaceDetails(placeId, eventType);\r\n        break;\r\n    }\r\n  };\r\n  $scope.pinGame = function(universeId, rootPlaceId) {\r\n    universeId = parseInt(universeId);\r\n    rootPlaceId = parseInt(rootPlaceId);\r\n    let eventType = '';\r\n    if (\r\n      !$scope.dialogData.pinGame ||\r\n      $scope.dialogData.pinGame.rootPlaceId !== parseInt(rootPlaceId)\r\n    ) {\r\n      eventType = $scope.chatLibrary.eventStreamParams.pinGameInLinkCard;\r\n      pinGameService.sendPinGameEvent(eventType, rootPlaceId, $scope.dialogData);\r\n      const parameters = {\r\n        rootPlaceId,\r\n        universeId,\r\n        actorUsername: $scope.chatLibrary.username, //\r\n        userId: $scope.chatLibrary.userId,\r\n        placeName:\r\n          $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n            ? $scope.chatLibrary.placesLibrary[rootPlaceId].placeName\r\n            : '',\r\n        encodedPlaceName:\r\n          $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n            ? $scope.chatLibrary.placesLibrary[rootPlaceId].encodedPlaceName\r\n            : ''\r\n      };\r\n      pinGameService.setPinGameData($scope.dialogData, parameters);\r\n      pinGameService.pinGame($scope.dialogData, universeId);\r\n      gameService.buildButtonLayoutPerConversation(\r\n        $scope.dialogData,\r\n        $scope.chatLibrary.placesLibrary\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.controller('linkCardController', linkCardController);\r\n\r\nexport default linkCardController;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction linkCardMessagesController($scope, pinGameLayout) {\r\n  'ngInject';\r\n\r\n  $scope.pinGameLayout = angular.copy(pinGameLayout);\r\n  $scope.linkCardMessages = $scope.message.linkCardMessages;\r\n}\r\n\r\nchatModule.controller('linkCardMessagesController', linkCardMessagesController);\r\n\r\nexport default linkCardMessagesController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction playTogetherController(\r\n  $scope,\r\n  $log,\r\n  $window,\r\n  modalService,\r\n  gameService,\r\n  playTogetherLayout,\r\n  eventStreamService,\r\n  pinGameService,\r\n  gameParameters,\r\n  chatUtility,\r\n  gameLayout,\r\n  pinGameLayout,\r\n  playGameService\r\n) {\r\n  'ngInject';\r\n\r\n  $scope.sendEventStream = function(eventType, rootPlaceId, gameInstanceId) {\r\n    const properties = {\r\n      placeId: rootPlaceId,\r\n      conversationId: $scope.playTogether.id\r\n    };\r\n    if (gameInstanceId) {\r\n      properties.gameInstanceId = gameInstanceId;\r\n    }\r\n    eventStreamService.sendEventWithTarget(\r\n      eventType,\r\n      $scope.chatLibrary.eventStreamParams.actions.click,\r\n      properties\r\n    );\r\n  };\r\n\r\n  $scope.sendGamePlayEnvent = function(rootPlaceId) {\r\n    const { context } = $scope.chatLibrary.eventStreamParams;\r\n    eventStreamService.sendGamePlayEvent(context.gamePlayFromPlayTogether, rootPlaceId);\r\n  };\r\n\r\n  $scope.buyAccess = function(rootPlaceId, layout) {\r\n    const eventType = $scope.chatLibrary.eventStreamParams.clickBuyButtonInPlayTogether;\r\n    $scope.sendEventStream(eventType, rootPlaceId);\r\n\r\n    $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = true;\r\n\r\n    const place = $scope.chatLibrary.placesLibrary[rootPlaceId];\r\n    const { gameIconUrl } = place;\r\n    const bodyText = layout.buyAccess.bodyText(\r\n      place.encodedPlaceName,\r\n      place.encodedCreatorName,\r\n      place.price\r\n    );\r\n    const options = {\r\n      titleText: layout.buyAccess.title,\r\n      bodyText,\r\n      imageUrl: gameIconUrl,\r\n      actionButtonShow: true,\r\n      actionButtonText: layout.buyAccess.yesButtonText,\r\n      actionButtonClass: layout.buyAccess.yesButtonClass,\r\n      neutralButtonText: layout.buyAccess.noButtonText,\r\n      closeButtonShow: true\r\n    };\r\n    const modal = modalService.open(options);\r\n    modal.result.then(\r\n      function() {\r\n        // make purchase\r\n        $log.debug('--- purchase ---');\r\n        $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = false;\r\n      },\r\n      function() {\r\n        $log.debug('--- cancel ---');\r\n        $scope.dialogLayout.playTogetherButton.isPlayButtonDisabled = false;\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.goToPlaceDetails = function(rootPlaceId) {\r\n    const eventType = $scope.chatLibrary.eventStreamParams.clickViewDetailsButtonInPlayTogether;\r\n    $scope.sendEventStream(eventType, rootPlaceId);\r\n\r\n    $window.location.href = $scope.chatLibrary.placesLibrary[rootPlaceId].placeUrl;\r\n  };\r\n\r\n  $scope.joinGame = function(rootPlaceId) {\r\n    const eventType = $scope.chatLibrary.eventStreamParams.clickJoinButtonInPlayTogether;\r\n    const { placeId } = $scope.playTogether.playTogetherDict[rootPlaceId];\r\n    const { gameInstanceId } = $scope.playTogether.playTogetherDict[rootPlaceId];\r\n    const playerId = $scope.playTogether.playTogetherDict[rootPlaceId].playerIds\r\n      ? $scope.playTogether.playTogetherDict[rootPlaceId].playerIds[0]\r\n      : null;\r\n    const playGameProperties = playGameService.buildPlayGameProperties(\r\n      rootPlaceId,\r\n      placeId,\r\n      gameInstanceId,\r\n      playerId\r\n    );\r\n    const properties = {\r\n      placeId: rootPlaceId,\r\n      conversationId: $scope.playTogether.id\r\n    };\r\n    if (gameInstanceId) {\r\n      properties.gameInstanceId = gameInstanceId;\r\n    }\r\n    const eventStreamProperties = {\r\n      eventName: $scope.chatLibrary.eventStreamParams.clickJoinButtonInPlayTogether,\r\n      ctx: $scope.chatLibrary.eventStreamParams.actions.click,\r\n      properties,\r\n      gamePlayIntentEventCtx: $scope.chatLibrary.eventStreamParams.context.gamePlayFromPlayTogether\r\n    };\r\n    playGameService.launchGame(playGameProperties, eventStreamProperties);\r\n  };\r\n\r\n  $scope.playGame = function(rootPlaceId, conversationId) {\r\n    const eventType = $scope.chatLibrary.eventStreamParams.clickPlayButtonInPlayTogether;\r\n    $scope.sendEventStream(eventType, rootPlaceId);\r\n    $scope.sendGamePlayEnvent(rootPlaceId);\r\n    gameService.playTogetherGame(rootPlaceId, conversationId);\r\n  };\r\n\r\n  $scope.joinGameFromPlayTogether = function(rootPlaceId) {\r\n    rootPlaceId = parseInt(rootPlaceId);\r\n    const buttonType = $scope.playTogether.placeButtonLayout[rootPlaceId].type;\r\n    const conversationId = $scope.playTogether.id;\r\n\r\n    switch (buttonType) {\r\n      case gameLayout.playButtonTypes.join:\r\n        $scope.joinGame(rootPlaceId);\r\n        break;\r\n      case gameLayout.playButtonTypes.play:\r\n        $scope.playGame(rootPlaceId, conversationId);\r\n        break;\r\n      case gameLayout.playButtonTypes.buy:\r\n        $scope.buyAccess(rootPlaceId, gameLayout);\r\n        break;\r\n      case gameLayout.playButtonTypes.details:\r\n        $scope.goToPlaceDetails(rootPlaceId);\r\n        break;\r\n    }\r\n  };\r\n\r\n  $scope.toggleActiveGameList = function() {\r\n    $scope.playTogetherLayout.activeGamesList.isCollapsed = !$scope.playTogetherLayout\r\n      .activeGamesList.isCollapsed;\r\n    if ($scope.playTogetherLayout.activeGamesList.isCollapsed) {\r\n      $scope.playTogetherLayout.activeGamesList.toggleMenuText =\r\n        $scope.playTogetherLayout.activeGamesList.showMoreText;\r\n      $scope.playTogetherLayout.activeGamesList.limitNumber =\r\n        $scope.playTogetherLayout.activeGamesList.minNumberForFit;\r\n    } else {\r\n      $scope.playTogetherLayout.activeGamesList.toggleMenuText =\r\n        $scope.playTogetherLayout.activeGamesList.showLess;\r\n      $scope.playTogetherLayout.activeGamesList.limitNumber =\r\n        $scope.playTogetherLayout.numberOfActiveGames;\r\n    }\r\n  };\r\n\r\n  $scope.hasPinGameAndActiveGames = function() {\r\n    if ($scope.hasActiveGames() && $scope.playTogether.pinGame) {\r\n      if ($scope.playTogether.playTogetherIds.length === 1) {\r\n        return $scope.playTogether.playTogetherIds[0] !== $scope.playTogether.pinGame.rootPlaceId;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  $scope.hasActiveGames = function() {\r\n    let pinGameIsInActiveGames = false;\r\n    if (!$scope.playTogether.playTogetherIds) {\r\n      return 0;\r\n    }\r\n    if ($scope.playTogether.pinGame) {\r\n      pinGameIsInActiveGames =\r\n        $scope.playTogether.playTogetherIds.indexOf($scope.playTogether.pinGame.rootPlaceId) > -1;\r\n      $scope.playTogetherLayout.activeGamesList.pinGameIsInActiveGames = pinGameIsInActiveGames;\r\n    }\r\n    return pinGameIsInActiveGames\r\n      ? $scope.playTogether.playTogetherIds.length - 1\r\n      : $scope.playTogether.playTogetherIds.length;\r\n  };\r\n\r\n  $scope.hasNoPinGameAndNoActiveGame = function() {\r\n    return !(\r\n      ($scope.playTogether.pinGame && $scope.playTogether.pinGame.rootPlaceId) ||\r\n      $scope.hasActiveGames()\r\n    );\r\n  };\r\n\r\n  $scope.isMyRecentAvaliable = function() {\r\n    return $scope.hasNoPinGameAndNoActiveGame() && $scope.chatLibrary.myRecentPlaceId;\r\n  };\r\n\r\n  $scope.unPinGame = function() {\r\n    if ($scope.playTogether && $scope.playTogether.pinGame) {\r\n      const eventType = $scope.chatLibrary.eventStreamParams.unpinGameInPlayTogether;\r\n      const { rootPlaceId } = $scope.playTogether.pinGame;\r\n      pinGameService.sendPinGameEvent(eventType, rootPlaceId, $scope.playTogether);\r\n      pinGameService.setPinGameData($scope.playTogether);\r\n      pinGameService.unpinGame($scope.playTogether);\r\n      gameService.updateButtonLayoutPerConversation($scope.playTogether, rootPlaceId);\r\n      chatUtility.updateScrollbar(playTogetherLayout.gameListScrollListSelector);\r\n    }\r\n  };\r\n\r\n  $scope.pinGame = function(universeId, rootPlaceId) {\r\n    universeId = parseInt(universeId);\r\n    rootPlaceId = parseInt(rootPlaceId);\r\n    const eventType = $scope.chatLibrary.eventStreamParams.pinGameInPlayTogether;\r\n    pinGameService.sendPinGameEvent(eventType, rootPlaceId, $scope.playTogether);\r\n    const parameters = {\r\n      rootPlaceId,\r\n      universeId,\r\n      actorUsername: $scope.chatLibrary.name,\r\n      userId: $scope.chatLibrary.userId,\r\n      placeName:\r\n        $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n          ? $scope.chatLibrary.placesLibrary[rootPlaceId].placeName\r\n          : '',\r\n      encodedPlaceName:\r\n        $scope.chatLibrary.placesLibrary && $scope.chatLibrary.placesLibrary[rootPlaceId]\r\n          ? $scope.chatLibrary.placesLibrary[rootPlaceId].encodedPlaceName\r\n          : ''\r\n    };\r\n    pinGameService.setPinGameData($scope.playTogether, parameters);\r\n    pinGameService.pinGame($scope.playTogether, universeId);\r\n    gameService.updateButtonLayoutPerConversation($scope.playTogether, rootPlaceId);\r\n  };\r\n\r\n  $scope.initData = function() {\r\n    $scope.playTogetherLayout = Object.assign({}, playTogetherLayout);\r\n    $scope.gameParameters = Object.assign({}, gameParameters);\r\n    $scope.gameLayout = Object.assign({}, gameLayout);\r\n    $scope.pinGameLayout = Object.assign({}, pinGameLayout);\r\n    if ($scope.dialogData) {\r\n      $scope.playTogether = $scope.dialogData;\r\n      $scope.playTogether.inDialog = true;\r\n      $scope.playTogetherLayout.numberOfActiveGames = $scope.hasActiveGames();\r\n      const { numberOfActiveGames } = $scope.playTogetherLayout;\r\n      const {\r\n        isCollapsed,\r\n        pinGameIsInActiveGames,\r\n        limitNumber,\r\n        minNumberForFit,\r\n        maxNumberForFit,\r\n        showLess\r\n      } = $scope.playTogetherLayout.activeGamesList;\r\n      if (pinGameIsInActiveGames) {\r\n        const activeGamesListUpdate = {\r\n          limitNumber: limitNumber + 1,\r\n          minNumberForFit: minNumberForFit + 1,\r\n          maxNumberForFit: maxNumberForFit + 1\r\n        };\r\n        const { activeGamesList } = $scope.playTogetherLayout;\r\n        Object.assign(activeGamesList, activeGamesListUpdate);\r\n      }\r\n      let limitCount = numberOfActiveGames - minNumberForFit;\r\n      limitCount = limitCount > 0 ? limitCount : 0;\r\n      const showMoreText = $scope.playTogetherLayout.activeGamesList.showMore(limitCount);\r\n      $scope.playTogetherLayout.activeGamesList.showMoreText = showMoreText;\r\n      if ($scope.playTogetherLayout.numberOfActiveGames > 1) {\r\n        $scope.playTogetherLayout.activeGamesList.toggleMenuText = isCollapsed\r\n          ? showMoreText\r\n          : showLess;\r\n      }\r\n    } else {\r\n      $scope.playTogether = $scope.chatUser;\r\n      $scope.playTogether.inDialog = false;\r\n      $scope.playTogetherLayout.numberOfActiveGames = $scope.hasActiveGames();\r\n      $scope.playTogetherLayout.activeGamesList.limitNumber =\r\n        $scope.playTogetherLayout.numberOfActiveGames;\r\n    }\r\n    $scope.chatLibrary.playTogetherLibrary[$scope.playTogether.id] = {\r\n      layout: $scope.playTogetherLayout\r\n    };\r\n  };\r\n\r\n  $scope.initData();\r\n}\r\n\r\nchatModule.controller('playTogetherController', playTogetherController);\r\n\r\nexport default playTogetherController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction userConversationInfoController($scope, $log, resources, eventStreamService) {\r\n  'ngInject';\r\n\r\n  $scope.hasGameAlbum = function() {\r\n    let count = 0;\r\n    let pinGameId = null;\r\n    if ($scope.chatUser.pinGame) {\r\n      count++;\r\n      pinGameId = $scope.chatUser.pinGame.rootPlaceId;\r\n    }\r\n    if ($scope.chatUser.playTogetherIds) {\r\n      if (pinGameId && $scope.chatUser.playTogetherIds.indexOf(pinGameId) > -1) {\r\n        count = count + $scope.chatUser.playTogetherIds.length - 1;\r\n      } else {\r\n        count += $scope.chatUser.playTogetherIds.length;\r\n      }\r\n    }\r\n    return count > 1;\r\n  };\r\n\r\n  $scope.isGameAvailableInChat = () => {\r\n    return (\r\n      $scope.chatUser.placeForShown &&\r\n      $scope.chatUser.placeForShown.universeId &&\r\n      $scope.chatUser.placeForShown.rootPlaceId\r\n    );\r\n  };\r\n\r\n  $scope.openGameList = function() {\r\n    if ($scope.hoverPopoverParams && !$scope.hoverPopoverParams.isOpen) {\r\n      const eventType = resources.eventStreamParams.openGameListInPlayTogether;\r\n      const properties = {\r\n        conversationId: $scope.chatUser.id\r\n      };\r\n      eventStreamService.sendEventWithTarget(\r\n        eventType,\r\n        resources.eventStreamParams.actions.hover,\r\n        properties\r\n      );\r\n    }\r\n  };\r\n  $scope.setupHoverPopover = function() {\r\n    $scope.hoverPopoverParams = { ...resources.hoverPopoverParams };\r\n    $scope.hoverPopoverParams.triggerSelector = `.chat-friend-${$scope.chatUser.id}`;\r\n    $scope.hoverPopoverParams.hoverPopoverSelector = `.game-list-${$scope.chatUser.id}`;\r\n  };\r\n\r\n  $scope.init = function() {\r\n    $scope.gamesListTemplateUrl = resources.templates.gamesList;\r\n    $scope.setupHoverPopover();\r\n  };\r\n\r\n  $scope.init();\r\n}\r\n\r\nchatModule.controller('userConversationInfoController', userConversationInfoController);\r\n\r\nexport default userConversationInfoController;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction abuseReport(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    templateUrl: resources.templates.abuseReportTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('abuseReport', abuseReport);\r\n\r\nexport default abuseReport;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction addFriends(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    templateUrl: resources.templates.addFriendsTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('addFriends', addFriends);\r\n\r\nexport default addFriends;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction backBtn($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      element.bind('click touchstart', function(e) {\r\n        e.preventDefault();\r\n        scope.closeDialog(scope.dialogData.layoutId);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('backBtn', backBtn);\r\n\r\nexport default backBtn;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatAvatarHeadshot(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      userId: '@',\r\n      className: '@',\r\n      layoutLibrary: '='\r\n    },\r\n    templateUrl: resources.templates.chatAvatarHeadshot\r\n  };\r\n}\r\n\r\nchatModule.directive('chatAvatarHeadshot', chatAvatarHeadshot);\r\n\r\nexport default chatAvatarHeadshot;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatBar(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    replace: true,\r\n    templateUrl: resources.templates.chatBarTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('chatBar', chatBar);\r\n\r\nexport default chatBar;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatBase(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    replace: true,\r\n    templateUrl: resources.templates.chatBaseTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('chatBase', chatBase);\r\n\r\nexport default chatBase;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatGameIcon(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      universeId: '@',\r\n      className: '@',\r\n      layoutLibrary: '='\r\n    },\r\n    templateUrl: resources.templates.chatGameIcon\r\n  };\r\n}\r\n\r\nchatModule.directive('chatGameIcon', chatGameIcon);\r\n\r\nexport default chatGameIcon;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatPlaceholder(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    templateUrl: resources.templates.chatPlaceholderTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('chatPlaceholder', chatPlaceholder);\r\n\r\nexport default chatPlaceholder;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction confirmNegativeAction(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      chatLibrary: '=',\r\n      dialogLayout: '=',\r\n      confirmCallback: '&'\r\n    },\r\n    templateUrl: resources.templates.confirmNegativeActionTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('confirmNegativeAction', confirmNegativeAction);\r\n\r\nexport default confirmNegativeAction;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction confirmRemoveMember(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      dialogLayout: '=',\r\n      confirmCallback: '&'\r\n    },\r\n    templateUrl: resources.templates.confirmNegativeActionTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('confirmRemoveMember', confirmRemoveMember);\r\n\r\nexport default confirmRemoveMember;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction conversationTitle(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    templateUrl: resources.templates.conversationTitleTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('conversationTitle', conversationTitle);\r\n\r\nexport default conversationTitle;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction conversationTitleEditor(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    templateUrl: resources.templates.conversationTitleEditorTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('conversationTitleEditor', conversationTitleEditor);\r\n\r\nexport default conversationTitleEditor;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction details(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: resources.templates.detailsTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('details', details);\r\n\r\nexport default details;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction detailsScrollbar($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      element.mCustomScrollbar({\r\n        autoExpandScrollbar: false,\r\n        scrollInertia: 5,\r\n        contentTouchScroll: 1,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        },\r\n        advanced: {\r\n            autoScrollOnFocus: false // prevents the browser from jumping to the 'Leave Group' button when clicking on it (SOC-279)\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('detailsScrollbar', detailsScrollbar);\r\n\r\nexport default detailsScrollbar;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction dialog(\r\n  $window,\r\n  $compile,\r\n  $templateCache,\r\n  $filter,\r\n  chatUtility,\r\n  chatClientStorageUtilityService,\r\n  localStorageService,\r\n  messageService,\r\n  resources,\r\n  gameService,\r\n  gameLayout,\r\n  $log\r\n) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      dialogData: '=',\r\n      chatLibrary: '=',\r\n      chatUser: '=',\r\n      closeDialog: '&',\r\n      sendInvite: '&'\r\n    },\r\n    link(scope, element, attrs) {\r\n      const { limitMemberDisplay } = chatUtility.dialogLayout;\r\n      let intervalCount = 0;\r\n\r\n      const loadScope = function () {\r\n        scope.isOverLoaded();\r\n        scope.dialogData.currentUserId = scope.currentUserId;\r\n        const { dialogTemplate } = resources.templates;\r\n        const { groupDialogTemplate } = resources.templates;\r\n        const newGroupTemplate = resources.templates.createChatGroupTemplate;\r\n        switch (scope.dialogData.dialogType) {\r\n          case chatUtility.dialogType.CHAT:\r\n            var userId;\r\n            angular.forEach(scope.dialogData.userIds, function (id) {\r\n              if (id !== scope.chatLibrary.userId) {\r\n                userId = id;\r\n              }\r\n            });\r\n            scope.dialogLayout.title = scope.dialogData.title;\r\n            scope.dialogLayout.templateUrl = dialogTemplate;\r\n            scope.dialogLayout.scrollbarElm = chatUtility.getScrollBarSelector(\r\n              scope.dialogData,\r\n              chatUtility.scrollBarType.MESSAGE\r\n            );\r\n            scope.dialogData.name = !scope.chatLibrary.friendsDict[userId]\r\n              ? scope.dialogData.title\r\n              : scope.chatLibrary.friendsDict[userId].nameForDisplay;\r\n            scope.dialogData.nameLink = scope.chatLibrary.friendsDict[userId]\r\n              ? scope.chatLibrary.friendsDict[userId].profileUrl\r\n              : '';\r\n            break;\r\n          case chatUtility.dialogType.GROUPCHAT:\r\n            scope.dialogLayout.templateUrl = groupDialogTemplate;\r\n            scope.dialogLayout.limitMemberDisplay = limitMemberDisplay;\r\n            scope.dialogLayout.scrollbarElm = chatUtility.getScrollBarSelector(\r\n              scope.dialogData,\r\n              chatUtility.scrollBarType.MESSAGE\r\n            );\r\n            scope.dialogData.name = scope.dialogData.title;\r\n            break;\r\n          case chatUtility.dialogType.NEWGROUPCHAT:\r\n            scope.dialogLayout.title = scope.dialogData.title;\r\n            scope.dialogLayout.templateUrl = newGroupTemplate;\r\n            break;\r\n        }\r\n\r\n        scope.updateDialogStyle();\r\n      };\r\n\r\n      const destroyChildScope = function () {\r\n        let validTimeStamp;\r\n        if (scope.chatLibrary && scope.chatLibrary.dialogScopeLib[scope.dialogData.id]) {\r\n          validTimeStamp = scope.chatLibrary.dialogScopeLib[scope.dialogData.id];\r\n        }\r\n        if (\r\n          scope.$$childHead &&\r\n          scope.$$childHead != null &&\r\n          scope.$$childHead.timeStamp === validTimeStamp\r\n        ) {\r\n          scope.$$childHead.$destroy();\r\n        }\r\n      };\r\n\r\n      const loadTemplate = function () {\r\n        if (scope.dialogLayout.IsdialogContainerVisible || element.find('.dialog-container')) {\r\n          scope.dialogLayout.IsdialogContainerVisible = false;\r\n          element.empty();\r\n        }\r\n        const dialogTemplate = angular.element($templateCache.get(scope.dialogLayout.templateUrl));\r\n\r\n        destroyChildScope();\r\n\r\n        const newScope = scope.$new();\r\n        const timeStamp = Date.now();\r\n        if (scope.chatLibrary) {\r\n          scope.chatLibrary.dialogScopeLib[scope.dialogData.id] = timeStamp;\r\n        }\r\n        newScope.timeStamp = timeStamp;\r\n        const lfn = $compile(dialogTemplate);\r\n        element.append(dialogTemplate);\r\n        lfn(newScope);\r\n      };\r\n\r\n      const isTextSelected = function () {\r\n        let text = '';\r\n        if (angular.isDefined(window.getSelection)) {\r\n          text = window.getSelection().toString();\r\n        } else if (\r\n          angular.isDefined(window.document.selection) &&\r\n          window.document.selection.type === 'Text'\r\n        ) {\r\n          text = window.document.selection.createRange().text;\r\n        }\r\n        return text.length > 0;\r\n      };\r\n\r\n      const updatePosition = function (list) {\r\n        const { layoutId } = scope.dialogData;\r\n        const idOfDialog = `#${layoutId}`;\r\n        const { chatLayout } = scope.chatLibrary;\r\n        const dialogElm = angular\r\n          .element(document.querySelector(idOfDialog))\r\n          .find('.dialog-container');\r\n        const widthOfChatContainer = chatLayout.widthOfChat;\r\n        const widthOfDialog = chatLayout.widthOfDialog + chatLayout.spaceOfDialog;\r\n        const indexPositionOfDialog = list.indexOf(layoutId);\r\n        const library = scope.chatLibrary;\r\n        const widthOfDialogs = chatUtility.calculateRightPosition(library, indexPositionOfDialog);\r\n\r\n        const right = +widthOfChatContainer + widthOfDialogs + chatLayout.spaceOfDialog;\r\n        // get current window size\r\n        const widthOfWindow = $window.innerWidth;\r\n        if (widthOfWindow < right + widthOfDialog) {\r\n          var zIndex = +chatLayout.defaultChatZIndex + 1;\r\n          dialogElm.css('z-index', zIndex);\r\n        } else {\r\n          var zIndex = +chatLayout.defaultChatZIndex + indexPositionOfDialog;\r\n          chatUtility.updateDialogsPosition(library);\r\n          dialogElm.css('z-index', zIndex);\r\n        }\r\n        dialogElm.addClass('dialog-visible');\r\n      };\r\n\r\n      const saveDialogStatusInCookie = function () {\r\n        chatClientStorageUtilityService.updateStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogIdList,\r\n          scope.chatLibrary.dialogIdList,\r\n          scope.chatLibrary.cookieOption\r\n        );\r\n        chatClientStorageUtilityService.updateStorage(\r\n          chatClientStorageUtilityService.storageDictionary.dialogDict,\r\n          scope.chatLibrary.dialogDict,\r\n          scope.chatLibrary.cookieOption\r\n        );\r\n      };\r\n\r\n      scope.saveIntoDialogsLayout = function () {\r\n        const { layoutId } = scope.dialogData;\r\n        if (scope.dialogLayout && scope.dialogLayout.layoutId === layoutId) {\r\n          scope.chatLibrary.dialogsLayout[layoutId] = scope.dialogLayout;\r\n          chatClientStorageUtilityService.updateStorage(\r\n            chatClientStorageUtilityService.storageDictionary.dialogsLayout,\r\n            scope.chatLibrary.dialogsLayout,\r\n            scope.chatLibrary.cookieOption\r\n          );\r\n        }\r\n      };\r\n\r\n      const isFriendNonMember = function (friendId) {\r\n        const currentUserPosition = angular.isDefined(scope.dialogData.userIds)\r\n          ? scope.dialogData.userIds.indexOf(friendId)\r\n          : -1;\r\n        const selectedUserPosition = angular.isDefined(scope.dialogData.selectedUserIds)\r\n          ? scope.dialogData.selectedUserIds.indexOf(friendId)\r\n          : -1;\r\n        return currentUserPosition < 0 && selectedUserPosition < 0;\r\n      };\r\n\r\n      // dialogLibrary is used for chat dialogs in each tab status\r\n      const getDialogLibrary = function () {\r\n        scope.dialogLibrary = !localStorageService.getLocalStorage(\r\n          scope.chatLibrary.dialogLocalStorageName\r\n        )\r\n          ? {}\r\n          : localStorageService.getLocalStorage(scope.chatLibrary.dialogLocalStorageName);\r\n      };\r\n\r\n      const getActiveStatusFromLocalStorage = function () {\r\n        return (\r\n          scope.dialogLibrary &&\r\n          scope.dialogLibrary[scope.dialogData.layoutId] &&\r\n          scope.dialogLibrary[scope.dialogData.layoutId].active\r\n        );\r\n      };\r\n\r\n      const getInactiveStatusFromLocalStorage = function () {\r\n        return (\r\n          scope.dialogLibrary &&\r\n          scope.dialogLibrary[scope.dialogData.layoutId] &&\r\n          !scope.dialogLibrary[scope.dialogData.layoutId].active\r\n        );\r\n      };\r\n\r\n      const init = function () {\r\n        scope.dialogData.friendIds = scope.chatLibrary.friendIds\r\n          ? scope.chatLibrary.friendIds.slice()\r\n          : [];\r\n        scope.dialogMessages = [];\r\n        scope.dialogType = { ...chatUtility.dialogType };\r\n        scope.memberStatus = { ...chatUtility.memberStatus };\r\n        scope.dialogBannerTypes = { ...chatUtility.dialogBannerTypes };\r\n        scope.dialogLayout = angular.isDefined(\r\n          scope.chatLibrary.dialogsLayout[scope.dialogData.layoutId]\r\n        )\r\n          ? scope.chatLibrary.dialogsLayout[scope.dialogData.layoutId]\r\n          : angular.copy(chatUtility.dialogLayout);\r\n        scope.dialogLayout.layoutId = scope.dialogData.layoutId;\r\n        scope.toastLayout = {\r\n          isEnabled: scope.dialogLayout.isMembersOverloaded,\r\n          timeout: scope.dialogLayout.memberDisplay.timeoutToast\r\n        };\r\n        scope.dialogLayout.defaultStyle = {};\r\n      };\r\n\r\n      // // ----------------------------------- PUBLIC ---------------------------------\r\n      scope.updateDialogStyle = function () {\r\n        chatUtility.updateDialogStyle(scope.dialogData, scope.dialogLayout, scope.chatLibrary);\r\n      };\r\n\r\n      scope.updateFriends = function (data) {\r\n        // friend Ids library exist\r\n        const candidateFriendIds = [];\r\n        if (!data) {\r\n          const friendIds = scope.chatLibrary.friendIds.slice();\r\n          angular.forEach(friendIds, function (friendId) {\r\n            // remove existing user from friendIs;\r\n            if (isFriendNonMember(friendId)) {\r\n              candidateFriendIds.push(friendId);\r\n            }\r\n          });\r\n          scope.dialogData.friendIds = candidateFriendIds;\r\n        } else {\r\n          // get the friends or more data;\r\n          const friends = chatUtility.sortFriendList(scope.chatLibrary, data);\r\n          if (friends) {\r\n            friends.forEach(function (friend) {\r\n              if (isFriendNonMember(friend.id)) {\r\n                candidateFriendIds.push(friend.id);\r\n              }\r\n              if (!scope.chatLibrary.friendsDict[friend.id]) {\r\n                scope.chatLibrary.friendsDict[friend.id] = friend;\r\n              }\r\n            });\r\n            scope.dialogData.friendIds = candidateFriendIds;\r\n          }\r\n        }\r\n      };\r\n\r\n      // verify number of member is overloaded\r\n      scope.isOverLoaded = function () {\r\n        if (angular.isUndefined(scope.dialogData.selectedUserIds)) {\r\n          scope.dialogData.selectedUserIds = [];\r\n          scope.dialogData.selectedUsersDict = {};\r\n        }\r\n        if (scope.dialogData.dialogType !== chatUtility.dialogType.FRIEND) {\r\n          if (scope.dialogData.dialogType === chatUtility.dialogType.NEWGROUPCHAT) {\r\n            scope.dialogData.numberOfSelected = scope.dialogData.selectedUserIds.length;\r\n          } else if (scope.dialogData.dialogType === chatUtility.dialogType.CHAT) {\r\n            scope.dialogData.numberOfSelected =\r\n              scope.dialogData.userIds.length + scope.dialogData.selectedUserIds.length; // decrease both user in 1:1\r\n          } else {\r\n            scope.dialogData.numberOfSelected =\r\n              scope.dialogData.userIds.length + scope.dialogData.selectedUserIds.length - 1; // decrease myself\r\n          }\r\n          scope.dialogLayout.isMembersOverloaded =\r\n            scope.dialogData.numberOfSelected >= scope.chatLibrary.quotaOfGroupChatMembers;\r\n        }\r\n      };\r\n\r\n      scope.dialogData.selectedUserIds = [];\r\n      scope.dialogData.selectedUsersDict = {};\r\n      // used for legacy select friends\r\n      scope.selectFriends = function (userId) {\r\n        const position = scope.dialogData.selectedUserIds.indexOf(userId);\r\n        if (position < 0 && !scope.dialogLayout.isMembersOverloaded) {\r\n          // not existing\r\n          scope.dialogData.selectedUserIds.push(userId);\r\n          scope.dialogData.selectedUsersDict[userId] = angular.copy(\r\n            scope.chatLibrary.friendsDict[userId]\r\n          );\r\n        } else if (position > -1) {\r\n          scope.dialogData.selectedUserIds.splice(position, 1);\r\n          delete scope.dialogData.selectedUsersDict[userId];\r\n        }\r\n        scope.dialogData.searchTerm = '';\r\n        scope.isOverLoaded();\r\n      };\r\n\r\n      // reskin\r\n      scope.isNumberOfMemberOverloaded = function () {\r\n        const numberOfSelectedUsers = scope.dialogData.selectedUserIds\r\n          ? scope.dialogData.selectedUserIds.length\r\n          : 0;\r\n        let numberOfExistingUsers = 0;\r\n        if (scope.dialogData.userIds) {\r\n          numberOfExistingUsers =\r\n            scope.dialogData.dialogType === chatUtility.dialogType.CHAT\r\n              ? scope.dialogData.userIds.length\r\n              : scope.dialogData.userIds.length - 1;\r\n        }\r\n        if (\r\n          numberOfSelectedUsers + numberOfExistingUsers >=\r\n          scope.chatLibrary.quotaOfGroupChatMembers\r\n        ) {\r\n          scope.dialogLayout.isMembersOverloaded = true;\r\n\r\n          if (\r\n            scope.dialogLayout.details.isEnabled ||\r\n            scope.dialogData.dialogType === chatUtility.dialogType.NEWGROUPCHAT\r\n          ) {\r\n            scope.toastLayout.isNeeded = true;\r\n            if (!scope.toastLayout.text) {\r\n              scope.toastLayout.text = scope.dialogLayout.memberDisplay.toastText(\r\n                scope.chatLibrary.quotaOfGroupChatMembers\r\n              );\r\n            }\r\n          }\r\n          return true;\r\n        }\r\n        return false;\r\n      };\r\n\r\n      scope.toggleFriendSelection = function (userId, event) {\r\n        if (event) {\r\n          event.preventDefault();\r\n        }\r\n        const position = scope.dialogData.selectedUserIds.indexOf(userId);\r\n        if (position < 0 && !scope.isNumberOfMemberOverloaded()) {\r\n          // not existing\r\n          scope.dialogData.selectedUserIds.push(userId);\r\n          scope.dialogData.selectedUsersDict[userId] = angular.copy(\r\n            scope.chatLibrary.friendsDict[userId]\r\n          );\r\n          scope.dialogData.selectedUsersDict[userId].isSelected = true;\r\n        } else if (position > -1) {\r\n          scope.dialogData.selectedUserIds.splice(position, 1);\r\n          delete scope.dialogData.selectedUsersDict[userId];\r\n        }\r\n        scope.dialogData.searchTerm = '';\r\n        scope.isOverLoaded();\r\n      };\r\n\r\n      scope.toggleDialogContainer = function () {\r\n        scope.dialogLayout.collapsed = !scope.dialogLayout.collapsed;\r\n        scope.toggleDialogFocusStatus(!scope.dialogLayout.collapsed);\r\n        scope.saveIntoDialogsLayout();\r\n        chatUtility.updateDialogsPosition(scope.chatLibrary);\r\n      };\r\n\r\n      scope.toggleDialogFocusStatus = function (status) {\r\n        if (status) {\r\n          chatUtility.updateFocusedDialog(scope.chatLibrary, scope.dialogData.layoutId);\r\n          messageService.markMessagesAsRead(\r\n            scope.dialogData,\r\n            scope.chatLibrary.shouldRespectConversationHasUnreadMessageToMarkAsRead\r\n          );\r\n        }\r\n        scope.dialogLayout.hasFocus = status;\r\n        if (status && scope.dialogLayout.active) {\r\n          scope.markInactive();\r\n        }\r\n\r\n        // can not be input box selected\r\n        // can not be in app\r\n        // can not be minimized status\r\n        const focusMeEnabled =\r\n          status &&\r\n          !isTextSelected() &&\r\n          !scope.dialogLayout.collapsed &&\r\n          !scope.dialogLayout.renameEditor.isEnabled;\r\n        scope.dialogLayout.focusMeEnabled = focusMeEnabled;\r\n        scope.saveIntoDialogsLayout();\r\n        return false;\r\n      };\r\n\r\n      scope.getTitle = function (activeType) {\r\n        let title;\r\n        let username;\r\n        const message = scope.dialogData.chatMessages;\r\n        if (message && message.length > 0) {\r\n          const userId = message[0].senderTargetId;\r\n          if (!userId) {\r\n            // need to remove this feature\r\n            return false;\r\n          }\r\n          username = scope.chatLibrary.friendsDict[userId].name;\r\n        } else {\r\n          username = scope.dialogData.initiator.name;\r\n        }\r\n        title = $filter('formatString')(chatUtility.chatLayout.defaultTitleForMessage, {\r\n          userName: username\r\n        });\r\n        scope.title = title;\r\n      };\r\n\r\n      scope.changeTitle = function () {\r\n        $window.document.title =\r\n          intervalCount % 2 === 0 ? scope.title : scope.chatLibrary.currentTabTitle;\r\n        intervalCount++;\r\n      };\r\n\r\n      scope.markInactive = function () {\r\n        if (scope.dialogLayout.active) {\r\n          scope.dialogLayout.active = false;\r\n\r\n          getDialogLibrary();\r\n          if (getActiveStatusFromLocalStorage()) {\r\n            $log.debug(' --------------- markInactive -------------- set into local storage');\r\n            if (angular.isUndefined(scope.dialogLibrary[scope.dialogData.layoutId])) {\r\n              scope.dialogLibrary[scope.dialogData.layoutId] = {};\r\n            }\r\n            scope.dialogLibrary[scope.dialogData.layoutId].active = false;\r\n            scope.dialogLibrary[scope.dialogData.layoutId].played = false;\r\n            localStorageService.setLocalStorage(\r\n              scope.chatLibrary.dialogLocalStorageName,\r\n              scope.dialogLibrary\r\n            );\r\n          }\r\n        }\r\n      };\r\n\r\n      scope.markActive = function (activeType) {\r\n        getDialogLibrary();\r\n\r\n        if (angular.isUndefined(scope.dialogLibrary[scope.dialogData.layoutId])) {\r\n          scope.dialogLibrary[scope.dialogData.layoutId] = {};\r\n        }\r\n        scope.dialogLibrary[scope.dialogData.layoutId].active = true;\r\n        scope.dialogLibrary[scope.dialogData.layoutId].played = false;\r\n        localStorageService.setLocalStorage(\r\n          scope.chatLibrary.dialogLocalStorageName,\r\n          scope.dialogLibrary\r\n        );\r\n\r\n        if (\r\n          scope.dialogLayout.collapsed ||\r\n          scope.chatLibrary.chatLayout.focusedLayoutId !== scope.dialogData.layoutId\r\n        ) {\r\n          scope.dialogLayout.active = true;\r\n          if (scope.dialogLayout.focusMeEnabled) {\r\n            scope.dialogLayout.focusMeEnabled = false;\r\n          }\r\n        } else {\r\n          messageService.markMessagesAsRead(scope.dialogData);\r\n        }\r\n      };\r\n\r\n      scope.handleLocalStorage = function (event) {\r\n        if (event.key === scope.chatLibrary.dialogLocalStorageName) {\r\n          getDialogLibrary();\r\n          if (scope.dialogLayout.active && getInactiveStatusFromLocalStorage()) {\r\n            scope.markInactive();\r\n          }\r\n        }\r\n      };\r\n\r\n      scope.checkNewGenerationDialogStatus = function () {\r\n        if (scope.dialogData.isRenameEditorNeeded) {\r\n          if (scope.dialogLayout.focusMeEnabled) {\r\n            scope.dialogLayout.focusMeEnabled = false; // turn off dialog message input auto focus\r\n          }\r\n          scope.dialogData.isRenameEditorNeeded = false;\r\n          scope.dialogLayout.renameEditor.isEnabled = true;\r\n          scope.dialogLayout.renameEditor.hasFocus = true;\r\n        }\r\n      };\r\n\r\n      scope.getRecentGames = function () {\r\n        if (!scope.chatLibrary.isGetRecentGamesCalled) {\r\n          if (!scope.chatLibrary.isGetRecentGamesCalled) {\r\n            scope.chatLibrary.isGetRecentGamesCalled = true;\r\n          }\r\n          gameService.getRecentGame().then(function success(result) {\r\n            if (result && result.length > 0) {\r\n              const place = result[0];\r\n              const { placeId } = place;\r\n              const placeDetailsData = {};\r\n              placeDetailsData[placeId] = place;\r\n              gameService.buildPlacesLibrary(scope.chatLibrary, placeDetailsData);\r\n              scope.chatLibrary.placesLibrary[place.placeId].buttonLayoutForMe = {\r\n                ...gameLayout.playButtons.play\r\n              };\r\n              scope.chatLibrary.myRecentPlaceId = placeId;\r\n              const universeIds = [place.universeId];\r\n            }\r\n          });\r\n        }\r\n      };\r\n      scope.search = function (item) {\r\n        const { searchTerm } = scope.dialogData;\r\n        if (!searchTerm) {\r\n          return true;\r\n        }\r\n        const { name, contact, displayName } = item;\r\n        const searchTermLowerCase = searchTerm.toLowerCase();\r\n\r\n        return (\r\n          name.toLowerCase().indexOf(searchTermLowerCase) !== -1 ||\r\n          (displayName && displayName.toLowerCase().indexOf(searchTermLowerCase) !== -1) ||\r\n          (contact && contact.toLowerCase().indexOf(searchTermLowerCase) !== -1)\r\n        );\r\n      };\r\n      // // ----------------------------------- CODE TO RUN --------------------------------\r\n      init();\r\n      scope.isOverLoaded();\r\n\r\n      scope.$watch(\r\n        function () {\r\n          return scope.chatLibrary.dialogDict;\r\n        },\r\n        function (newValue, oldValue) {\r\n          if (\r\n            angular.isDefined(newValue) &&\r\n            angular.isDefined(newValue[scope.dialogData.layoutId])\r\n          ) {\r\n            // $log.debug(\"------ watch dialogDict ----- update on scope.dialogData.layoutId : \" + scope.dialogData.layoutId);\r\n            const { layoutId } = scope.dialogData;\r\n            const { chatLibrary } = scope;\r\n            const position = chatLibrary.dialogIdList.indexOf(layoutId);\r\n            const currentDialog = newValue[layoutId];\r\n            const previousDialog = oldValue[layoutId];\r\n\r\n            if (!previousDialog || currentDialog.isUpdated) {\r\n              if (angular.isDefined(scope.chatLibrary.dialogsLayout[scope.dialogData.layoutId])) {\r\n                scope.dialogLayout = scope.chatLibrary.dialogsLayout[scope.dialogData.layoutId];\r\n              } else if (angular.isUndefined(scope.dialogLayout)) {\r\n                scope.dialogLayout = angular.copy(chatUtility.dialogLayout);\r\n              } else if (\r\n                currentDialog.updateStatus === chatUtility.dialogStatus.INIT &&\r\n                scope.dialogLayout\r\n              ) {\r\n                scope.dialogLayout.renameEditor = {\r\n                  ...chatUtility.dialogLayout.renameEditor\r\n                };\r\n              }\r\n\r\n              currentDialog.isUpdated = false;\r\n              switch (currentDialog.updateStatus) {\r\n                case chatUtility.dialogStatus.REPLACE:\r\n                  if (position > -1) {\r\n                    // uncollapse tab only if replacing chat tab with a tab being opened from the minimized chat section\r\n                    if (scope.dialogLayout.collapsed) {\r\n                      scope.dialogLayout.collapsed = false;\r\n                    }\r\n                    // this prevents the uncollapsing from occurring\r\n                    // on a previously restored (REPLACE status) dialog that has been collapsed\r\n                    currentDialog.updateStatus = chatUtility.dialogStatus.INIT;\r\n                    scope.toggleDialogFocusStatus(true);\r\n                  }\r\n                case chatUtility.dialogStatus.INIT:\r\n                  if (position > -1) {\r\n                    // only load template when it is part of dialogIdList which is the list of open dialogs\r\n                    // Whenever the auto open dialog happens, dialog will be not set focus as default\r\n                    if (scope.dialogLayout.focusMeEnabled === currentDialog.autoOpen) {\r\n                      scope.dialogLayout.focusMeEnabled = !currentDialog.autoOpen;\r\n                      if (!currentDialog.autoOpen) {\r\n                        messageService.markMessagesAsRead(scope.dialogData);\r\n                      }\r\n                    }\r\n                    scope.checkNewGenerationDialogStatus();\r\n                    loadScope();\r\n                    loadTemplate();\r\n                  }\r\n                  break;\r\n                case chatUtility.dialogStatus.MINIMIZE:\r\n                  loadScope();\r\n                  if (scope.chatLibrary.minimizedDialogIdList.indexOf(layoutId) < 0) {\r\n                    scope.chatLibrary.minimizedDialogIdList.push(layoutId);\r\n                    scope.chatLibrary.minimizedDialogData[layoutId] = scope.dialogData;\r\n                  }\r\n                  element.empty();\r\n                  break;\r\n                case chatUtility.dialogStatus.REFRESH:\r\n                  loadScope();\r\n                  currentDialog.updateStatus = chatUtility.dialogStatus.INIT;\r\n                  break;\r\n              }\r\n\r\n              if (position === 0) {\r\n                scope.getRecentGames();\r\n              }\r\n            }\r\n\r\n            saveDialogStatusInCookie();\r\n            scope.saveIntoDialogsLayout();\r\n            if (position > -1) {\r\n              updatePosition(chatLibrary.dialogIdList);\r\n\r\n              if (currentDialog.markAsActive) {\r\n                scope.markActive(currentDialog.activeType);\r\n                currentDialog.markAsActive = false;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      scope.$on('Roblox.Chat.MarkDialogInactive', function (event, args) {\r\n        if (args.layoutId === scope.dialogData.layoutId) {\r\n          scope.markInactive();\r\n        }\r\n      });\r\n\r\n      localStorageService.listenLocalStorage(scope.handleLocalStorage);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('dialog', dialog);\r\n\r\nexport default dialog;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction dialogHeader(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: resources.templates.dialogHeader\r\n  };\r\n}\r\n\r\nchatModule.directive('dialogHeader', dialogHeader);\r\n\r\nexport default dialogHeader;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction dialogLazyLoad(chatService, chatUtility, messageService, gameService, $log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      scope.callbackScrollToBottom = function() {\r\n        scope.updateDialog();\r\n      };\r\n\r\n      scope.callbackLazyLoad = function() {\r\n        if (!scope.dialogParams.loadMoreMessages || !scope.dialogLayout.IsdialogContainerVisible) {\r\n          return false;\r\n        }\r\n        scope.dialogLayout.isChatLoading = true;\r\n        const sizeOfMessages = scope.dialogData.chatMessages.length;\r\n        chatService\r\n          .getMessages(\r\n            scope.dialogData.id,\r\n            scope.dialogData.chatMessages[sizeOfMessages - 1].id,\r\n            scope.dialogParams.pageSizeOfGetMessages\r\n          )\r\n          .then(\r\n            function(data) {\r\n              scope.dialogLayout.isChatLoading = false;\r\n              if (!data) {\r\n                scope.dialogParams.loadMoreMessages = false;\r\n                messageService.processMessages(\r\n                  scope.chatLibrary,\r\n                  scope.dialogData,\r\n                  data,\r\n                  scope.chatLibrary.friendsDict\r\n                );\r\n                gameService.fetchDataForLinkCard(data, scope.chatLibrary);\r\n              } else {\r\n                if (data.length > 0) {\r\n                  scope.dialogLayout.scrollToBottom = false;\r\n\r\n                  messageService.preProcessMessages(scope.chatLibrary, scope.dialogData, data);\r\n                  for (let i = 0; i < data.length; i++) {\r\n                    messageService.buildFallbackTimeStamp(data[i], scope.dialogData);\r\n                    messageService.setFallbackClusterMaster(scope.dialogData, data[i]);\r\n                  }\r\n                  gameService.fetchDataForLinkCard(data, scope.chatLibrary);\r\n                }\r\n                if (data.length < scope.dialogParams.pageSizeOfGetMessages) {\r\n                  scope.dialogParams.loadMoreMessages = false;\r\n                }\r\n              }\r\n            },\r\n            function() {\r\n              scope.dialogLayout.isChatLoading = false;\r\n              $log.debug('---error from get getMessages in dialogLazyLoadDirective.js---');\r\n            }\r\n          );\r\n      };\r\n\r\n      let init = function() {\r\n        $log.debug('---- onInit callback ---- Scrollbars updated');\r\n        scope.dialogLayout.scrollToBottom = true;\r\n      };\r\n\r\n      element.mCustomScrollbar({\r\n        autoExpandScrollbar: false,\r\n        scrollInertia: 5,\r\n        contentTouchScroll: 1,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        },\r\n        callbacks: {\r\n          onInit: init,\r\n          onUpdate() {\r\n            $log.debug(\r\n              '---- onUpdate callback ---- Scrollbars updated' + scope.dialogLayout.scrollToBottom\r\n            );\r\n            if (scope.dialogLayout.scrollToBottom) {\r\n              element.mCustomScrollbar('scrollTo', 'bottom', {\r\n                scrollInertia: 0\r\n              });\r\n            } else {\r\n              scope.dialogLayout.scrollToBottom = true;\r\n            }\r\n\r\n            if (element.hasClass('mCS_no_scrollbar')) {\r\n              // equivalent to (element.has(\":mcsOverflow\") && !element.is(\":mcsOverflow\"))\r\n              scope.updateDialog();\r\n            }\r\n          },\r\n          onTotalScroll: scope.callbackScrollToBottom,\r\n          onTotalScrollOffset: 60,\r\n          onTotalScrollBack: scope.callbackLazyLoad\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('dialogLazyLoad', dialogLazyLoad);\r\n\r\nexport default dialogLazyLoad;\r\n","import { BootstrapWidgets } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction dialogMinimize(chatUtility, resources, $log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      chatLibrary: '='\r\n    },\r\n    templateUrl: resources.templates.dialogMinimizeTemplate,\r\n    link(scope, element, attrs) {\r\n      var updatePosition = function() {\r\n        let {chatLayout} = scope.chatLibrary;\r\n        let numberOfOpenDialogs = scope.chatLibrary.dialogIdList.length;\r\n        let widthOfChatContainer = chatLayout.widthOfChat;\r\n        var widthOfDialogs = chatUtility.calculateRightPosition(\r\n          scope.chatLibrary,\r\n          numberOfOpenDialogs\r\n        );\r\n        let right = +widthOfChatContainer + widthOfDialogs + chatLayout.spaceOfDialog;\r\n        element.css('right', right);\r\n      };\r\n\r\n      scope.dialogType = chatUtility.dialogType;\r\n      scope.hasMinimizedDialogs = false;\r\n      scope.layoutIdHasClicked = false;\r\n\r\n      scope.openDialog = function(layoutId) {\r\n        $log.debug(' -------------------openDialog------------------ ' + layoutId);\r\n        let lastLayoutId = scope.chatLibrary.dialogIdList.pop();\r\n        scope.chatLibrary.dialogDict[lastLayoutId].isUpdated = true;\r\n        scope.chatLibrary.dialogDict[lastLayoutId].updateStatus = chatUtility.dialogStatus.MINIMIZE;\r\n        scope.chatLibrary.dialogIdList.push(layoutId);\r\n        scope.chatLibrary.dialogDict[layoutId].isUpdated = true;\r\n        scope.chatLibrary.dialogDict[layoutId].updateStatus = chatUtility.dialogStatus.REPLACE;\r\n        let position = scope.chatLibrary.minimizedDialogIdList.indexOf(layoutId);\r\n        if (position > -1) {\r\n          scope.chatLibrary.minimizedDialogIdList.splice(position, 1);\r\n          delete scope.chatLibrary.minimizedDialogData[layoutId];\r\n        }\r\n      };\r\n\r\n      scope.remove = function(layoutId) {\r\n        let position = scope.chatLibrary.minimizedDialogIdList.indexOf(layoutId);\r\n        if (position > -1) {\r\n          scope.chatLibrary.minimizedDialogIdList.splice(position, 1);\r\n          delete scope.chatLibrary.minimizedDialogData[layoutId];\r\n          delete scope.chatLibrary.dialogDict[layoutId];\r\n        }\r\n      };\r\n\r\n      Roblox.BootstrapWidgets.SetupPopover(\r\n        'top',\r\n        { selector: '#dialogs-minimize' },\r\n        '#dialogs-minimize-container'\r\n      );\r\n\r\n      scope.$watch(\r\n        function() {\r\n          return scope.chatLibrary.minimizedDialogIdList;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (!angular.isUndefined(newValue) && newValue != oldValue) {\r\n            $log.debug('------ watch minimizedDialogIdList ----- ');\r\n            if (newValue.length > 0) {\r\n              if (!scope.hasMinimizedDialogs) {\r\n                scope.hasMinimizedDialogs = true;\r\n              }\r\n              updatePosition();\r\n            } else if (newValue.length === 0) {\r\n              scope.hasMinimizedDialogs = false;\r\n            }\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      scope.$watch(\r\n        function() {\r\n          return scope.chatLibrary.chatLayout.areDialogsUpdated;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue && newValue !== oldValue) {\r\n            scope.$evalAsync(function() {\r\n              scope.chatLibrary.chatLayout.areDialogsUpdated = false;\r\n            });\r\n            updatePosition();\r\n          }\r\n        },\r\n        true\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('dialogMinimize', dialogMinimize);\r\n\r\nexport default dialogMinimize;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction displayMessage(resources, messageHelper) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: resources.templates.displayMessage,\r\n    link(scope, element, attrs) {\r\n      scope.initializeDisplayMessage = function() {\r\n        scope.messageHelper = messageHelper;\r\n        scope.displayMessage = scope.chatUser.displayMessage;\r\n      };\r\n\r\n      scope.initializeDisplayMessage();\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('displayMessage', displayMessage);\r\n\r\nexport default displayMessage;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction friendsLazyLoad($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      const callbackLazyLoad = function() {\r\n        if (!scope.dialogParams.loadMoreFriends) {\r\n          return false;\r\n        }\r\n        scope.dialogLayout.isChatLoading = true;\r\n      };\r\n\r\n      element.mCustomScrollbar({\r\n        autoExpandScrollbar: false,\r\n        scrollInertia: 5,\r\n        contentTouchScroll: 1,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        },\r\n        callbacks: {\r\n          onTotalScroll: callbackLazyLoad,\r\n          onOverflowYNone: callbackLazyLoad\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('friendsLazyLoad', friendsLazyLoad);\r\n\r\nexport default friendsLazyLoad;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction groupSelect($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    link(scope, element, attrs) {\r\n      const heightOfHeader = scope.chatLibrary.layout.topBarHeight;\r\n      scope.$watch(\r\n        function() {\r\n          return element.innerHeight();\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue && newValue !== oldValue) {\r\n            const dialogElm = `#${scope.dialogData.layoutId} .dialog-container`;\r\n            const scrollbarElm = `#${scope.dialogData.layoutId} ${scope.friendsScrollbarElm}`;\r\n            const dialogObj = angular.element(dialogElm);\r\n            const scrollbarObj = angular.element(scrollbarElm);\r\n            let heightOfDialog;\r\n            let heightOfScrollbar;\r\n            let valueExcludedFromHeight;\r\n            valueExcludedFromHeight = heightOfHeader + newValue;\r\n            heightOfDialog = dialogObj.height();\r\n            heightOfScrollbar = heightOfDialog - valueExcludedFromHeight;\r\n\r\n            scrollbarObj.css('height', heightOfScrollbar);\r\n            scrollbarObj.mCustomScrollbar('update');\r\n          }\r\n        },\r\n        true\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('groupSelect', groupSelect);\r\n\r\nexport default groupSelect;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction lazyLoad(\r\n  chatService,\r\n  chatUtility,\r\n  $log,\r\n  $document,\r\n  conversationsUtility,\r\n  usersService,\r\n  contactsService,\r\n  usersPresenceService\r\n) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      const getFriends = function () {\r\n        usersPresenceService.getFriendsPresence().then(\r\n          result => {\r\n            if (result?.length) {\r\n              scope.getFriendsInfo(result);\r\n            }\r\n          },\r\n          error => {\r\n            console.debug(error);\r\n          }\r\n        );\r\n        scope.chatLibrary.chatLayout.isChatLoading = false;\r\n        scope.chatApiParams.loadMoreFriends = false;\r\n      };\r\n      scope.callbackLazyLoad = function () {\r\n        if (\r\n          !scope.chatApiParams ||\r\n          scope.chatLibrary.chatLayout.errorMaskEnable ||\r\n          (!scope.chatApiParams.loadMoreConversations && !scope.chatApiParams.loadMoreFriends)\r\n        ) {\r\n          return false;\r\n        }\r\n        scope.chatLibrary.chatLayout.isChatLoading = true;\r\n        if (scope.chatApiParams.loadMoreConversations) {\r\n          chatService\r\n            .getUserConversations(\r\n              scope.chatApiParams.pageNumberOfConversations,\r\n              scope.chatApiParams.pageSizeOfConversations,\r\n              scope.chatLibrary.friendsDict\r\n            )\r\n            .then(\r\n              function success(data) {\r\n                let userIds = [];\r\n                const { friendsDict } = scope.chatLibrary;\r\n                userIds = conversationsUtility.getUserIdsNotInFriendsDict(data, friendsDict);\r\n\r\n                scope.chatLibrary.chatLayout.isChatLoading = false;\r\n                if (data && data.length > 0) {\r\n                  scope.buildChatUserListByConversations(data);\r\n                  scope.chatApiParams.pageNumberOfConversations++;\r\n                  chatUtility.updateScrollbar(chatUtility.chatLayout.scrollbarClassName);\r\n                  if (data.length < scope.chatApiParams.pageSizeOfConversations) {\r\n                    scope.chatApiParams.loadMoreConversations = false;\r\n                    scope.chatApiParams.loadMoreFriends = true;\r\n                    scope.chatApiParams.pageNumberOfConversations = 1;\r\n                    getFriends();\r\n                  }\r\n                } else {\r\n                  scope.chatApiParams.loadMoreConversations = false;\r\n                  scope.chatApiParams.loadMoreFriends = true;\r\n                  scope.chatApiParams.pageNumberOfConversations = 1;\r\n                  getFriends();\r\n                }\r\n                contactsService.getUserContacts(userIds, friendsDict);\r\n                return usersService.getUserInfo(userIds, friendsDict);\r\n              },\r\n              function error() {\r\n                scope.chatLibrary.chatLayout.isChatLoading = false;\r\n                $log.debug('---error from get Conversations in lazyLoadDirective.js---');\r\n              }\r\n            );\r\n        }\r\n        if (scope.chatApiParams.loadMoreFriends) {\r\n          getFriends();\r\n        }\r\n      };\r\n\r\n      scope.callbackScrollStart = function () {\r\n        scope.$broadcast('Roblox.Chat.ConversationListScroll');\r\n        $document.triggerHandler('HoverPopover.EnableClose');\r\n      };\r\n\r\n      element.mCustomScrollbar({\r\n        autoExpandScrollbar: false,\r\n        scrollInertia: 5,\r\n        contentTouchScroll: 1,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        },\r\n        callbacks: {\r\n          onTotalScrollOffset: 100,\r\n          onTotalScroll: scope.callbackLazyLoad,\r\n          onOverflowYNone: scope.callbackLazyLoad,\r\n          onScrollStart: scope.callbackScrollStart\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('lazyLoad', lazyLoad);\r\n\r\nexport default lazyLoad;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction linkCard(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    replace: true,\r\n    templateUrl: resources.templates.linkCard\r\n  };\r\n}\r\n\r\nchatModule.directive('linkCard', linkCard);\r\n\r\nexport default linkCard;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction minimizeItem($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      var openDialogOnClick = function() {\r\n        scope.$apply(scope.openDialog(scope.dialogLayoutId));\r\n      };\r\n      angular\r\n        .element('#dialogs-minimize')\r\n        .on(\r\n          'click touchstart',\r\n          '.popover-content #' + scope.dialogLayoutId + ' .minimize-title',\r\n          openDialogOnClick\r\n        );\r\n\r\n      var removeOnClick = function() {\r\n        scope.$apply(scope.remove(scope.dialogLayoutId));\r\n      };\r\n      angular\r\n        .element('#dialogs-minimize')\r\n        .on(\r\n          'click touchstart',\r\n          '.popover-content #' + scope.dialogLayoutId + ' .minimize-close',\r\n          removeOnClick\r\n        );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('minimizeItem', minimizeItem);\r\n\r\nexport default minimizeItem;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction removeFocus($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      element.bind('click touchstart', function(e) {\r\n        e.preventDefault();\r\n        scope.sendMessage();\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('removeFocus', removeFocus);\r\n\r\nexport default removeFocus;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction repeatDone(chatUtility, playTogetherLayout) {\r\n  'ngInject';\r\n\r\n  return {\r\n    link(scope, elem, attrs) {\r\n      chatUtility.buildScrollbar(playTogetherLayout.gameListScrollListSelector);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('repeatDone', repeatDone);\r\n\r\nexport default repeatDone;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction selectFriends(chatUtility, resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    templateUrl: resources.templates.selectFriendsTemplate,\r\n    link(scope, element, attrs) {\r\n      let setInviteBtnState = function() {\r\n        if (\r\n          angular.isUndefined(scope.dialogData) ||\r\n          angular.isUndefined(scope.dialogData.selectedUserIds)\r\n        ) {\r\n          return false;\r\n        }\r\n        if (scope.dialogData.dialogType === chatUtility.dialogType.NEWGROUPCHAT) {\r\n          scope.dialogLayout.inviteBtnDisabled = scope.dialogData.selectedUserIds.length < 2;\r\n        } else {\r\n          scope.dialogLayout.inviteBtnDisabled = scope.dialogData.selectedUserIds.length === 0;\r\n        }\r\n      };\r\n\r\n      setInviteBtnState();\r\n\r\n      scope.$watch(\r\n        function() {\r\n          return scope.dialogData && scope.dialogData.selectedUserIds;\r\n        },\r\n        function() {\r\n          setInviteBtnState();\r\n        },\r\n        true\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('selectFriends', selectFriends);\r\n\r\nexport default selectFriends;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction selectFriendsResize(chatUtility, $log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    link(scope, element, attrs) {\r\n      let heightOfHeader = scope.chatLibrary.layout.topBarHeight;\r\n      scope.$watch(\r\n        function() {\r\n          return element.innerHeight();\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue && newValue !== oldValue) {\r\n            var dialogElm = '#' + scope.dialogData.layoutId + ' .dialog-container';\r\n            var scrollbarElm = '#' + scope.dialogData.layoutId + ' ' + scope.friendsScrollbarElm;\r\n            let dialogObj = angular.element(dialogElm);\r\n            let scrollbarObj = angular.element(scrollbarElm);\r\n            let heightOfDialog; var heightOfScrollbar;\r\n            var valueExcludedFromHeight =\r\n              heightOfHeader + scope.chatLibrary.layout.detailsActionHeight + newValue;\r\n            if (scope.dialogData.dialogType === chatUtility.dialogType.NEWGROUPCHAT) {\r\n              valueExcludedFromHeight += scope.chatLibrary.layout.detailsInputHeight;\r\n            }\r\n            heightOfDialog = dialogObj.height();\r\n            heightOfScrollbar = heightOfDialog - valueExcludedFromHeight;\r\n\r\n            scrollbarObj.css('height', heightOfScrollbar);\r\n            scrollbarObj.mCustomScrollbar('update');\r\n          }\r\n        },\r\n        true\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('selectFriendsResize', selectFriendsResize);\r\n\r\nexport default selectFriendsResize;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction systemMessage(resources, messageHelper) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: resources.templates.systemMessage,\r\n    link(scope, element, attrs) {\r\n      scope.messageHelper = messageHelper;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('systemMessage', systemMessage);\r\n\r\nexport default systemMessage;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction togglePopover($log, $document) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      const { togglePopoverParams } = scope.dialogLayout;\r\n      const { dialogSelector } = togglePopoverParams;\r\n      const { triggerSelector } = togglePopoverParams;\r\n      const { pinIconClassName } = togglePopoverParams;\r\n      const { dialogTriggerClassSelector } = togglePopoverParams;\r\n      const isExclusiveClickSelector = togglePopoverParams.isExclusiveClickSelector\r\n        ? togglePopoverParams.isExclusiveClickSelector\r\n        : 'is-exclusive-click';\r\n\r\n      element.on('click', function(event) {\r\n        const target = angular.element(event.target);\r\n        if (insideTrigger(target)) {\r\n          scope.dialogLayout.togglePopoverParams.isOpen = !scope.dialogLayout.togglePopoverParams\r\n            .isOpen;\r\n        }\r\n      });\r\n\r\n      function bindDocumentClick() {\r\n        $document.on('click', function(event) {\r\n          event.stopPropagation();\r\n\r\n          const target = angular.element(event.target);\r\n\r\n          if (!insideTrigger(target) && !insideDialog(target) && !isExclusive(target)) {\r\n            scope.dialogLayout.togglePopoverParams.isOpen = false;\r\n          }\r\n        });\r\n      }\r\n      function insideTrigger(target) {\r\n        const trigger = angular.element(triggerSelector);\r\n        return trigger.is(target) || (trigger.find(target) && trigger.find(target).length > 0);\r\n      }\r\n\r\n      function insideDialog(target) {\r\n        const dialog = angular.element(dialogSelector);\r\n        return dialog.find(target) && dialog.find(target).length > 0;\r\n      }\r\n\r\n      function isExclusive(target) {\r\n        let isExclusive = false;\r\n        if (isPinIcon(target)) {\r\n          isExclusive =\r\n            (scope.dialogData.playTogetherIds && scope.dialogData.playTogetherIds.length > 0) ||\r\n            scope.dialogData.pinGame;\r\n        }\r\n        if (isDialogTrigger(target)) {\r\n          isExclusive = true;\r\n        }\r\n\r\n        if (target.hasClass(isExclusiveClickSelector)) {\r\n          isExclusive = true;\r\n        }\r\n\r\n        return isExclusive;\r\n      }\r\n\r\n      function isPinIcon(target) {\r\n        return target.hasClass(pinIconClassName);\r\n      }\r\n\r\n      function isDialogTrigger(target) {\r\n        const dialogTrigger = angular.element(dialogTriggerClassSelector);\r\n        return (\r\n          dialogTrigger.is(target) ||\r\n          (dialogTrigger.find(target) && dialogTrigger.find(target).length > 0)\r\n        );\r\n      }\r\n\r\n      const watchPlayTogetherIds = scope.$watch(\r\n        function() {\r\n          return scope.dialogData.playTogetherIds;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue && newValue.length > 0) {\r\n            if (!scope.dialogLayout.togglePopoverParams.isOpen) {\r\n              scope.dialogLayout.togglePopoverParams.isOpen = true;\r\n            }\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      const watchDialogFirstTimeOpen = scope.$watch(\r\n        function() {\r\n          return scope.dialogLayout.togglePopoverParams.isFirstTimeOpen;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue) {\r\n            bindDocumentClick();\r\n          }\r\n        },\r\n        true\r\n      );\r\n\r\n      scope.$on('$destroy', function() {\r\n        watchPlayTogetherIds();\r\n        watchDialogFirstTimeOpen();\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.directive('togglePopover', togglePopover);\r\n\r\nexport default togglePopover;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction userConversationInfo(resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: resources.templates.userConversationInfoTemplate\r\n  };\r\n}\r\n\r\nchatModule.directive('userConversationInfo', userConversationInfo);\r\n\r\nexport default userConversationInfo;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction chatClientStorageUtilityService(chatUtility, localStorageService, cookieService) {\r\n  'ngInject';\r\n\r\n  return {\r\n    storageDictionary: {\r\n      dialogIdList: 'dialogIdList',\r\n      dialogDict: 'dialogDict',\r\n      dialogsLayout: 'dialogsLayout',\r\n      chatBarLayout: 'chatBarLayout',\r\n      chatFriendsListReloadTime: 'chatFriendsListReloadTime'\r\n    },\r\n\r\n    isStorageDefined(key) {\r\n      if (typeof window.Storage !== 'undefined') {\r\n        return this.getFromStorage(key);\r\n      } else {\r\n        return cookieService.isCookieDefined(key);\r\n      }\r\n    },\r\n\r\n    getFromStorage(key) {\r\n      if (typeof window.Storage !== 'undefined') {\r\n        return localStorageService.getLocalStorage(key);\r\n      } else {\r\n        return cookieService.retrieveCookie(key);\r\n      }\r\n    },\r\n\r\n    updateStorage(key, value, options) {\r\n      if (typeof window.Storage !== 'undefined') {\r\n        localStorageService.setLocalStorage(key, value);\r\n      } else {\r\n        cookieService.updateCookie(key, value, options);\r\n      }\r\n    },\r\n\r\n    removeFromStorage(key, options) {\r\n      if (typeof window.Storage !== 'undefined') {\r\n        localStorageService.removeLocalStorage(key);\r\n      } else {\r\n        cookieService.destroyCookie(key, options);\r\n      }\r\n    },\r\n\r\n    updateChatFriendsListReloadTime(reloadTime) {\r\n      this.updateStorage(this.storageDictionary.chatFriendsListReloadTime, reloadTime);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('chatClientStorageUtilityService', chatClientStorageUtilityService);\r\n\r\nexport default chatClientStorageUtilityService;\r\n","import { EnvironmentUrls, CurrentUser } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction chatService(\r\n  $q,\r\n  chatUtility,\r\n  httpService,\r\n  $log,\r\n  apiParamsInitialization,\r\n  conversationsUtility,\r\n  storageService\r\n) {\r\n  'ngInject';\r\n\r\n  const getConversations = function(conversationIds) {\r\n    const params = {\r\n      conversationIds\r\n    };\r\n    const url = EnvironmentUrls.chatApi + apiParamsInitialization.chatUrls.getConversations;\r\n    const urlConfig = {\r\n      url,\r\n      withCredentials: true,\r\n      retryable: true\r\n    };\r\n    return httpService.httpGet(urlConfig, params).then(function success(conversations) {\r\n      conversations.forEach(function(conversation) {\r\n        conversationsUtility.buildPinGameInConversation(conversation);\r\n      });\r\n      return conversations;\r\n    });\r\n  };\r\n\r\n  const shouldRetrieveNextMessages = function(conversation, data) {\r\n    // first message\r\n    if (!conversation || !conversation.chatMessages || conversation.chatMessages.length <= 0) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].id === conversation.chatMessages[0].id) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n  const getCacheData = function(cacheData) {\r\n    const deferred = $q.defer();\r\n    deferred.resolve(cacheData.data);\r\n    return deferred.promise;\r\n  };\r\n\r\n  return {\r\n    apiSets: {},\r\n\r\n    setParams() {\r\n      const chatDomain = EnvironmentUrls.chatApi;\r\n      this.apiSets.markAsReadApi = {\r\n        url: `${chatDomain}/v2/mark-as-read`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.markAsSeenApi = {\r\n        url: `${chatDomain}/v2/mark-as-seen`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.sendMessageApi = {\r\n        url: `${chatDomain}/v2/send-message`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.conversationsApi = {\r\n        url: `${chatDomain}/v2/get-conversations`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.userConversationsApi = {\r\n        url: `${chatDomain}/v2/get-user-conversations`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.getMessagesApi = {\r\n        url: `${chatDomain}/v2/get-messages`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.multiGetLatestMessagesApi = {\r\n        url: `${chatDomain}/v2/multi-get-latest-messages`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.getUnreadConversationCountApi = {\r\n        url: `${chatDomain}/v2/get-unread-conversation-count`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.startOneToOneConversationApi = {\r\n        url: `${chatDomain}/v2/start-one-to-one-conversation`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.startGroupConversationApi = {\r\n        url: `${chatDomain}/v2/start-group-conversation`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.addToConversationApi = {\r\n        url: `${chatDomain}/v2/add-to-conversation`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.removeFromConversationApi = {\r\n        url: `${chatDomain}/v2/remove-from-conversation`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.renameGroupConversationApi = {\r\n        url: `${chatDomain}/v2/rename-group-conversation`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.updateUserTypingStatusApi = {\r\n        url: `${chatDomain}/v2/update-user-typing-status`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      this.apiSets.uiPerformanceTrackingApi = {\r\n        url: `${EnvironmentUrls.metricsApi}/v1/performance/send-measurement`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getMetaData() {\r\n      const params = {};\r\n      return httpService.httpGet(apiParamsInitialization.apiSets.getMetaData, params);\r\n    },\r\n\r\n    getUnreadConversationCount() {\r\n      return httpService.httpGet(this.apiSets.getUnreadConversationCountApi, null);\r\n    },\r\n\r\n    getUserConversations(pageNumberOfConversations, pageSizeOfConversations, friendsDict) {\r\n      const paramsOfConvs = {\r\n        pageNumber: pageNumberOfConversations,\r\n        pageSize: pageSizeOfConversations\r\n      };\r\n\r\n      let localStorageName = storageService.getStorageName(\r\n        storageService.chatDataName.getUserConversations,\r\n        paramsOfConvs\r\n      );\r\n      const cacheData = storageService.getChatDataFromLocalStorage(localStorageName);\r\n      if (cacheData) {\r\n        return getCacheData(cacheData, friendsDict);\r\n      }\r\n      return httpService\r\n        .httpGet(this.apiSets.userConversationsApi, paramsOfConvs)\r\n        .then(function(data) {\r\n          storageService.saveChatDataToLocalStorage(localStorageName, data);\r\n          return data;\r\n        });\r\n    },\r\n\r\n    getConversations,\r\n\r\n    addToConversation(participantUserIds, conversationId) {\r\n      const data = {\r\n        participantUserIds,\r\n        conversationId\r\n      };\r\n      return httpService.httpPost(this.apiSets.addToConversationApi, data);\r\n    },\r\n\r\n    removeFromConversation(participantUserId, conversationId) {\r\n      const data = {\r\n        participantUserId,\r\n        conversationId\r\n      };\r\n      return httpService.httpPost(this.apiSets.removeFromConversationApi, data);\r\n    },\r\n\r\n    startOneToOneConversation(participantUserId) {\r\n      const data = {\r\n        participantUserId\r\n      };\r\n      return httpService\r\n        .httpPost(this.apiSets.startOneToOneConversationApi, data)\r\n        .then(function(data) {\r\n          if (data) {\r\n            const { conversation } = data;\r\n            conversationsUtility.buildPinGameInConversation(conversation);\r\n            return conversation;\r\n          }\r\n        });\r\n    },\r\n\r\n    startGroupConversation(participantUserIds, title) {\r\n      const data = {\r\n        participantUserIds,\r\n        title\r\n      };\r\n      return httpService.httpPost(this.apiSets.startGroupConversationApi, data);\r\n    },\r\n\r\n    getMessages(conversationId, exclusiveStartMessageId, pageSize) {\r\n      const params = {\r\n        conversationId,\r\n        exclusiveStartMessageId,\r\n        pageSize\r\n      };\r\n\r\n      return httpService.httpGet(this.apiSets.getMessagesApi, params);\r\n    },\r\n\r\n    getMessagesByPageSize(\r\n      conversation,\r\n      exclusiveStartMessageId,\r\n      pageSize,\r\n      allData,\r\n      update,\r\n      messageReceiveStartTime\r\n    ) {\r\n      const chatService = this;\r\n      this.getMessages(conversation.id, exclusiveStartMessageId, pageSize).then(function(data) {\r\n        if (data && data.length > 0) {\r\n          const nextPageSize = pageSize * 2;\r\n          data.forEach(function(message) {\r\n            allData.push(message);\r\n          });\r\n\r\n          // repeat if all messages have not been retrieved nor reached max page size\r\n          if (\r\n            shouldRetrieveNextMessages(conversation, data) &&\r\n            nextPageSize <= chatUtility.dialogParams.pageSizeOfGetMessages &&\r\n            data.length === pageSize\r\n          ) {\r\n            chatService.getMessagesByPageSize(\r\n              conversation,\r\n              data[data.length - 1].id,\r\n              nextPageSize,\r\n              allData,\r\n              update,\r\n              messageReceiveStartTime\r\n            );\r\n          } else {\r\n            update(messageReceiveStartTime);\r\n          }\r\n        } else if (data && data.length === 0) {\r\n          update(messageReceiveStartTime);\r\n        }\r\n      });\r\n    },\r\n\r\n    multiGetLatestMessages(conversationIds, pageSize) {\r\n      const params = {\r\n        conversationIds,\r\n        pageSize\r\n      };\r\n      return httpService.httpGet(this.apiSets.multiGetLatestMessagesApi, params);\r\n    },\r\n\r\n    markAsRead(conversationId, endMessageId) {\r\n      const data = {\r\n        conversationId,\r\n        endMessageId\r\n      };\r\n      return httpService.httpPost(this.apiSets.markAsReadApi, data);\r\n    },\r\n\r\n    markAsSeen(conversationIdsToMarkRead) {\r\n      const data = {\r\n        conversationsToMarkSeen: conversationIdsToMarkRead\r\n      };\r\n      return httpService.httpPost(this.apiSets.markAsSeenApi, data);\r\n    },\r\n\r\n    sendMessage(conversationId, message) {\r\n      const data = {\r\n        conversationId,\r\n        message\r\n      };\r\n      return httpService.httpPost(this.apiSets.sendMessageApi, data, true);\r\n    },\r\n\r\n    renameGroupConversation(conversationId, newTitle) {\r\n      const data = {\r\n        conversationId,\r\n        newTitle\r\n      };\r\n      return httpService.httpPost(this.apiSets.renameGroupConversationApi, data);\r\n    },\r\n\r\n    updateUserTypingStatus(conversationId, isTyping) {\r\n      const data = {\r\n        conversationId,\r\n        isTyping\r\n      };\r\n      return httpService.httpPost(this.apiSets.updateUserTypingStatusApi, data);\r\n    },\r\n\r\n    sendPerformanceData(measureName, value) {\r\n      const data = {\r\n        featureName: 'Chat',\r\n        measureName,\r\n        value\r\n      };\r\n      return httpService.httpPost(this.apiSets.uiPerformanceTrackingApi, data);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('chatService', chatService);\r\n\r\nexport default chatService;\r\n","import { Linkify } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction chatUtility(\r\n  $filter,\r\n  $window,\r\n  dialogAttributes,\r\n  notificationsName,\r\n  notificationType,\r\n  presenceLayout,\r\n  callBackTypes,\r\n  httpResponse,\r\n  performanceMarkLabels,\r\n  resources,\r\n  libraryInitialization,\r\n  apiParamsInitialization,\r\n  messageHelper,\r\n  $log\r\n) {\r\n  'ngInject';\r\n\r\n  function getDialogInputMaxHeight(inputHeight, dialogLayout) {\r\n    return dialogLayout.maxHeightOfTextInput < inputHeight\r\n      ? dialogLayout.maxHeightOfInput\r\n      : inputHeight;\r\n  }\r\n\r\n  function linkify(content) {\r\n    if (angular.isDefined(Linkify) && typeof Linkify.String === 'function') {\r\n      return Linkify.String(content.escapeHTML());\r\n    }\r\n    return content;\r\n  }\r\n\r\n  function escapeNewline(message) {\r\n    return message.replace(/\\n/g, '<br>');\r\n  }\r\n\r\n  function htmlEntities(str) {\r\n    return String(str)\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;');\r\n  }\r\n\r\n  function invalidateLinkCardInPieceOfMessage(placeId, messageDictByPlaceIds) {\r\n    const { linkCardMessages } = messageDictByPlaceIds[placeId];\r\n    linkCardMessages.forEach(function(pieceOfMessage) {\r\n      if (placeId === pieceOfMessage.id) {\r\n        pieceOfMessage.isCard = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  function getAssetDetails(value) {\r\n    const privateServer = value.match(messageHelper.gameCardRegexs.privateServerLinkCode);\r\n    if (privateServer && privateServer.length == 2) {\r\n      return { privateServerLinkCode: privateServer[1] };\r\n    }\r\n  }\r\n\r\n  function emojiPiece(content, isEmoji) {\r\n    return {\r\n      content,\r\n      isEmoji\r\n    };\r\n  }\r\n\r\n  return {\r\n    linksLibrary: angular.copy(libraryInitialization.linksLibrary),\r\n\r\n    chatLayout: angular.copy(libraryInitialization.chatLayout),\r\n\r\n    chatApiParams: angular.copy(apiParamsInitialization.chatApiParams),\r\n\r\n    dialogParams: angular.copy(apiParamsInitialization.dialogParams),\r\n\r\n    dialogLayoutResetConstant: angular.copy(dialogAttributes.dialogLayoutResetConstant),\r\n\r\n    dialogLayout: angular.copy(dialogAttributes.dialogLayout),\r\n\r\n    dialogBannerTypes: angular.copy(dialogAttributes.dialogBannerTypes),\r\n\r\n    userPresenceTypes: angular.copy(presenceLayout.userPresenceTypes),\r\n\r\n    dialogType: angular.copy(dialogAttributes.dialogTypes),\r\n\r\n    newGroup: angular.copy(dialogAttributes.newGroup),\r\n\r\n    scrollBarType: angular.copy(dialogAttributes.scrollBarTypes),\r\n\r\n    errorMessages: angular.copy(libraryInitialization.errors),\r\n\r\n    memberStatus: angular.copy(dialogAttributes.memberStatus),\r\n\r\n    dialogInitValue: angular.copy(dialogAttributes.dialogInitValue),\r\n\r\n    dialogStatus: angular.copy(dialogAttributes.dialogStatus),\r\n\r\n    conversationInitStatus: angular.copy(dialogAttributes.conversationInitStatus),\r\n\r\n    conversationType: angular.copy(dialogAttributes.conversationType),\r\n\r\n    participantType: angular.copy(dialogAttributes.participantType),\r\n\r\n    notificationsName,\r\n\r\n    notificationType,\r\n\r\n    activeType: angular.copy(dialogAttributes.activeType),\r\n\r\n    performanceMarkLabels: performanceMarkLabels.chat,\r\n\r\n    resultType: callBackTypes,\r\n\r\n    sendMessageErrorCode: httpResponse.sendMessageErrorCode,\r\n\r\n    linkCardTypes: angular.copy(messageHelper.linkCardTypes),\r\n\r\n    eventStreamParams: angular.copy(resources.eventStreamParams),\r\n\r\n    urlParamNames: angular.copy(resources.urlParamNames),\r\n\r\n    chatEnabledByPrivacySettingTypes: {\r\n      disabled: 0,\r\n      enabled: 1,\r\n      unavailable: 2\r\n    },\r\n\r\n    hashOutContent(message) {\r\n      if (message) {\r\n        return message.replace(/\\S/g, '#');\r\n      }\r\n      return message;\r\n    },\r\n\r\n    buildScrollbar(className) {\r\n      let scrollbarElm = angular.element(document.querySelector(className));\r\n      scrollbarElm.mCustomScrollbar({\r\n        autoExpandScrollbar: false,\r\n        scrollInertia: 1,\r\n        contentTouchScroll: 1,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        }\r\n      });\r\n    },\r\n\r\n    updateScrollbar(selector) {\r\n      let scrollbarElm = angular.element(document.querySelector(selector));\r\n      scrollbarElm.mCustomScrollbar('update');\r\n    },\r\n\r\n    escapeNewline,\r\n\r\n    htmlEntities,\r\n\r\n    getAssetDetails,\r\n\r\n    buildLinkCard(value) {\r\n      let linkContent = linkify(value);\r\n      let pieceOfMsg = {\r\n        content: linkContent,\r\n        isCard: false\r\n      };\r\n      let {messageRegexs} = messageHelper;\r\n      for (let cardType in messageRegexs) {\r\n        if (messageRegexs.hasOwnProperty(cardType)) {\r\n          let reg = messageRegexs[cardType];\r\n          let params = value.match(reg);\r\n          if (params && params.length === 2) {\r\n            pieceOfMsg = {\r\n              id: params[1],\r\n              type: cardType,\r\n              isCard: true,\r\n              content: linkContent,\r\n              assetDetails: getAssetDetails(value)\r\n            };\r\n          }\r\n        }\r\n      }\r\n      this.buildEmojiPieces(pieceOfMsg);\r\n      return pieceOfMsg;\r\n    },\r\n\r\n    buildEmojiPieces(message) {\r\n      message.pieces = [];\r\n      let {content} = message;\r\n      let regex = messageHelper.emojiRegex;\r\n      let {zwjRegex} = messageHelper;\r\n      let {emojiRepRegex} = messageHelper;\r\n      let frag;\r\n      var emojiSequence = '';\r\n      let isZwj = false;\r\n      let prevIndex = 0;\r\n      while ((frag = regex.exec(content)) !== null) {\r\n        let newIndex = frag.index;\r\n        let currentEmoji = frag[0];\r\n        if (prevIndex !== newIndex) {\r\n          if (emojiSequence) {\r\n            message.pieces.push(emojiPiece(emojiSequence, true));\r\n          }\r\n          message.pieces.push(emojiPiece(content.slice(prevIndex, newIndex), false));\r\n          emojiSequence = currentEmoji;\r\n        } else {\r\n          // handle merging zwj emoji sequences\r\n          if (currentEmoji.match(zwjRegex) != null) {\r\n            emojiSequence += '&zwj;';\r\n            isZwj = true;\r\n          } else if (isZwj || currentEmoji.match(emojiRepRegex) != null) {\r\n            emojiSequence += currentEmoji;\r\n            isZwj = false;\r\n          } else {\r\n            if (emojiSequence) {\r\n              message.pieces.push(emojiPiece(emojiSequence, true));\r\n            }\r\n            emojiSequence = currentEmoji;\r\n          }\r\n        }\r\n        prevIndex = regex.lastIndex;\r\n      }\r\n      if (emojiSequence) {\r\n        message.pieces.push(emojiPiece(emojiSequence, true));\r\n      }\r\n      if (prevIndex < content.length) {\r\n        message.pieces.push(emojiPiece(content.slice(prevIndex), false));\r\n      }\r\n    },\r\n\r\n    // sort out linkCardMessages object for link card build next\r\n    buildLinkCardMessages(message) {\r\n      // sets message.linkCardMessages\r\n      // calls buildEmojiPieces on each pieceOfMsg that is not a link card\r\n      let content = message.parsedContent;\r\n      if (content && content.length > 0) {\r\n        let arrayOfMsgs = content.split(messageHelper.urlRegex);\r\n        if (!arrayOfMsgs) {\r\n          message.hasLinkCard = false;\r\n          return false;\r\n        }\r\n        message.linkCardMessages = [];\r\n        for (let i = 0; i < arrayOfMsgs.length; i++) {\r\n          let value = arrayOfMsgs[i];\r\n          let pieceOfMsg = null;\r\n          if (value.match(messageHelper.urlRegex)) {\r\n            pieceOfMsg = this.buildLinkCard(value);\r\n          } else if (value && value.length > 0 && !value.match(messageHelper.onlyNewLineRegex)) {\r\n            value = value.replace(messageHelper.removeNewLineRegex, '');\r\n            value = escapeNewline(value);\r\n            value = linkify(value);\r\n            pieceOfMsg = {\r\n              content: value,\r\n              isCard: false\r\n            };\r\n            this.buildEmojiPieces(pieceOfMsg);\r\n          }\r\n          if (pieceOfMsg) {\r\n            message.linkCardMessages.push(pieceOfMsg);\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n\r\n    sortFriendList(chatLibrary, friends) {\r\n      let orderBy = $filter('orderBy');\r\n      let onlineFriends = [];\r\n      let offlineFriends = [];\r\n      let friendIds = [];\r\n\r\n      chatLibrary.friendIds.forEach(function(friendId) {\r\n        let friend = chatLibrary.friendsDict[friendId];\r\n        var userPresenceType =\r\n          friend && friend.presence ? friend.presence.userPresenceType : friend.userPresenceType;\r\n        if (userPresenceType > 0) {\r\n          onlineFriends.push(friend);\r\n        } else {\r\n          offlineFriends.push(friend);\r\n        }\r\n        friendIds.push(friendId);\r\n      });\r\n      angular.forEach(friends, function(friend) {\r\n        if (friendIds.indexOf(friend.id) < 0) {\r\n          var userPresenceType =\r\n            friend && friend.presence ? friend.presence.userPresenceType : friend.userPresenceType;\r\n          if (userPresenceType > 0) {\r\n            onlineFriends.push(friend);\r\n          } else {\r\n            offlineFriends.push(friend);\r\n          }\r\n        }\r\n        // attached missing friendId\r\n        if (chatLibrary.friendIds.indexOf(friend.id) < 0) {\r\n          chatLibrary.friendIds.push(friend.id);\r\n        }\r\n      });\r\n\r\n      onlineFriends = orderBy(onlineFriends, '+name');\r\n      offlineFriends = orderBy(offlineFriends, '+name');\r\n      friends = onlineFriends.concat(offlineFriends);\r\n      return friends;\r\n    },\r\n\r\n    getScrollBarSelector(conversation, scrollType) {\r\n      let {layoutId} = conversation;\r\n\r\n      if (angular.isUndefined(scrollType)) {\r\n        scrollType = conversation.scrollBarType;\r\n      }\r\n      switch (scrollType) {\r\n        case dialogAttributes.scrollBarTypes.FRIENDSELECTION:\r\n          return '#scrollbar_friend_' + conversation.dialogType + '_' + layoutId;\r\n        case dialogAttributes.scrollBarTypes.MESSAGE:\r\n        default:\r\n          return '#scrollbar_' + conversation.dialogType + '_' + layoutId;\r\n      }\r\n    },\r\n\r\n    hasLinkifyContent(text) {\r\n      return (\r\n        angular.isString(text) &&\r\n        text.search('<a') >= 0 &&\r\n        text.search('href=') >= 0 &&\r\n        text.search('text-link') >= 0\r\n      );\r\n    },\r\n\r\n    sanitizeMessage(message) {\r\n      if (message && message.content) {\r\n        let rawContent = message.content;\r\n        var beforeLinkifyMessage = (message.content = escapeNewline(message.content));\r\n        message.content = linkify(message.content);\r\n\r\n        if (beforeLinkifyMessage !== message.content) {\r\n          message.parsedContent = rawContent;\r\n          message.hasLinkCard = true;\r\n          message.hasLinkifyMessage = this.hasLinkifyContent(message.content);\r\n          this.buildLinkCardMessages(message);\r\n        } else {\r\n          this.buildEmojiPieces(message);\r\n        }\r\n      }\r\n    },\r\n\r\n    sanitizeMessages(messages) {\r\n      if (messages && messages.length > 0) {\r\n        for (let i = 0; i < messages.length; i++) {\r\n          let message = messages[i];\r\n          this.sanitizeMessage(message);\r\n        }\r\n      }\r\n    },\r\n\r\n    getDataForMarkingSeen(chatUserDict) {\r\n      let conversationIds = [];\r\n      if ($window.document.hasFocus && $window.document.hasFocus()) {\r\n        angular.forEach(chatUserDict, function(item) {\r\n          if (item.isConversation) {\r\n            // because friends aren't conversations. They're conversations waiting to happen.\r\n            conversationIds.push(item.id);\r\n          }\r\n        });\r\n      }\r\n      return conversationIds;\r\n    },\r\n\r\n    updateConversationTitle(conversation, newTitle) {\r\n      conversation.title = newTitle;\r\n      // used for rename editor placehoder\r\n      conversation.name = newTitle;\r\n    },\r\n\r\n    updateDialogStyle(dialogData, dialogLayout, chatLibrary) {\r\n      let layout = dialogLayout.defaultStyle;\r\n      if (layout && layout.inputStyle) {\r\n        this.setResizeInputLayout(chatLibrary, layout.inputStyle.height, dialogData, dialogLayout);\r\n      }\r\n    },\r\n\r\n    // dynamically adjust input field height and dialog height\r\n    setResizeInputLayout(chatLibrary, inputHeight, dialogData, dialogLayout) {\r\n      let top; var height;\r\n      let {layout} = chatLibrary;\r\n      let {topBarHeight} = layout;\r\n      let inputMaxHeight = getDialogInputMaxHeight(inputHeight, dialogLayout, chatLibrary);\r\n      let {bannerHeight} = layout;\r\n      if (dialogLayout.renameEditor.isEnabled) {\r\n        top = topBarHeight + layout.renameEditorHeight;\r\n        height = topBarHeight + inputMaxHeight + layout.renameEditorHeight;\r\n      } else {\r\n        top = topBarHeight;\r\n        height = topBarHeight + inputMaxHeight;\r\n      }\r\n      var dialogHeight = layout.dialogHeight - height + 'px';\r\n      let marginTop = dialogAttributes.dialogLayoutResetConstant.paddingOfInput / 2;\r\n      dialogLayout.defaultStyle.dialogStyle = {\r\n        height: dialogHeight\r\n      };\r\n      dialogLayout.defaultStyle.inputStyle = {\r\n        height: inputMaxHeight\r\n      };\r\n      dialogLayout.defaultStyle.inputTextStyle = {\r\n        'padding-top': marginTop\r\n      };\r\n    },\r\n\r\n    calculateRightPosition(library, currentIndex) {\r\n      let widthOfDialog = this.chatLayout.widthOfDialog + this.chatLayout.spaceOfDialog;\r\n      var widthOfCollapsedDialog =\r\n        this.chatLayout.widthOfCollapsedDialog + this.chatLayout.spaceOfDialog;\r\n      let widthOfDialogs = 0;\r\n      for (let i = 0; i < currentIndex; i++) {\r\n        let dialogId = library.dialogIdList[i];\r\n        let dialogLayout = library.dialogsLayout[dialogId];\r\n\r\n        widthOfDialogs += dialogLayout.collapsed ? widthOfCollapsedDialog : widthOfDialog;\r\n      }\r\n      return widthOfDialogs;\r\n    },\r\n\r\n    updateDialogsPosition(library) {\r\n      let {chatLayout} = library;\r\n      let widthOfChatContainer = chatLayout.widthOfChat;\r\n      for (let i = 0; i < library.dialogIdList.length; i++) {\r\n        let dialogId = library.dialogIdList[i];\r\n        var idOfDialog = '#' + dialogId;\r\n        var dialogElm = angular\r\n          .element(document.querySelector(idOfDialog))\r\n          .find(this.dialogLayout.dialogContainerClass);\r\n        let widthOfDialogs = this.calculateRightPosition(library, i);\r\n        let right = +widthOfChatContainer + widthOfDialogs + chatLayout.spaceOfDialog;\r\n        dialogElm.css('right', right);\r\n      }\r\n      if (library.minimizedDialogIdList.length > 0) {\r\n        library.chatLayout.areDialogsUpdated = true;\r\n      }\r\n    },\r\n\r\n    updateFocusedDialog(library, layoutId) {\r\n      $log.debug(' ------ focused layoutId ------ ' + layoutId);\r\n      library.chatLayout.focusedLayoutId = layoutId;\r\n    },\r\n\r\n    invalidateLinkCardsInMessageDict(placeIds, messageDictByPlaceIds) {\r\n      placeIds.forEach(function(placeId) {\r\n        invalidateLinkCardInPieceOfMessage(placeId, messageDictByPlaceIds);\r\n      });\r\n    },\r\n\r\n    invalidatePlaceDetails(chatLibrary, placeIds) {\r\n      placeIds.forEach(function(placeId) {\r\n        if (!chatLibrary.placesLibrary[placeId]) {\r\n          chatLibrary.placesLibrary[placeId] = {};\r\n        }\r\n        chatLibrary.placesLibrary[placeId] = {\r\n          isInvalid: true\r\n        };\r\n      });\r\n    },\r\n\r\n    isPlaceDetailQualifiedInLibrary(placesLibrary, placeId) {\r\n      return placesLibrary[placeId] && placesLibrary[placeId].reasonProhibited;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('chatUtility', chatUtility);\r\n\r\nexport default chatUtility;\r\n","import { CurrentUser, DisplayNames } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction conversationsUtility($log, pinGameService, dialogAttributes) {\r\n  'ngInject';\r\n\r\n  const isUserAvatarInFriendsDict = function(userId, friendsDict) {\r\n    return friendsDict[userId] && angular.isDefined(friendsDict[userId].avatarHeadshot);\r\n  };\r\n\r\n  const isUserPresenceInFriendsDict = function(userId, friendsDict) {\r\n    return friendsDict[userId] && angular.isDefined(friendsDict[userId].userPresenceType);\r\n  };\r\n\r\n  const isUserInfoInFriendsDict = function(userId, friendsDict) {\r\n    return (\r\n      isUserAvatarInFriendsDict(userId, friendsDict) &&\r\n      isUserPresenceInFriendsDict(userId, friendsDict)\r\n    );\r\n  };\r\n\r\n  const buildPinGameInConversation = function(conversation) {\r\n    if (conversation.conversationUniverse) {\r\n      const parameters = {\r\n        rootPlaceId: conversation.conversationUniverse.rootPlaceId,\r\n        universeId: conversation.conversationUniverse.universeId,\r\n        actorUsername: CurrentUser.name,\r\n        userId: parseInt(CurrentUser.userId)\r\n      };\r\n      pinGameService.setPinGameData(conversation, parameters);\r\n    }\r\n    return conversation;\r\n  };\r\n  return {\r\n    buildPinGameInConversation,\r\n\r\n    getUserIdsNotInFriendsDict(conversations, friendsDict) {\r\n      const userIds = [];\r\n      if (conversations && conversations.length > 0) {\r\n        const { conversationType, dialogTypes } = dialogAttributes;\r\n        conversations.forEach(function(conversation) {\r\n          conversation.isGroupChat =\r\n            conversation.conversationType === conversationType.multiUserConversation;\r\n          angular.forEach(conversation.participants, function(user) {\r\n            user.userId = user.targetId;\r\n            const userId = user.targetId;\r\n            if (userIds.indexOf(userId) < 0 && !isUserInfoInFriendsDict(userId, friendsDict)) {\r\n              userIds.push(userId);\r\n            }\r\n\r\n            if (!friendsDict[userId]) {\r\n              const { name, displayName } = user;\r\n              friendsDict[userId] = {\r\n                id: userId,\r\n                name,\r\n                displayName,\r\n                nameForDisplay: DisplayNames?.Enabled() ? displayName : name\r\n              };\r\n            }\r\n          });\r\n          if (!conversation.dialogType) {\r\n            conversation.dialogType = conversation.isGroupChat\r\n              ? dialogTypes.GROUPCHAT\r\n              : dialogTypes.CHAT;\r\n          }\r\n          buildPinGameInConversation(conversation);\r\n        });\r\n      }\r\n      return userIds;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('conversationsUtility', conversationsUtility);\r\n\r\nexport default conversationsUtility;\r\n","var __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction cookieService($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    isCookieDefined(key) {\r\n      return angular.isDefined($.cookie(key)) && $.cookie(key);\r\n    },\r\n\r\n    updateCookie(key, value, cookieOption) {\r\n      $.cookie(key, JSON.stringify(value), cookieOption);\r\n    },\r\n\r\n    retrieveCookie(key) {\r\n      return this.isCookieDefined(key) ? JSON.parse($.cookie(key)) : [];\r\n    },\r\n\r\n    destroyCookie(key, cookieOption) {\r\n      $.cookie(key, null, cookieOption);\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('cookieService', cookieService);\r\n\r\nexport default cookieService;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction dialogAttributes(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  const dialogBannerTypes = {\r\n    default: -1,\r\n    member: 0,\r\n    game: 1\r\n  };\r\n  const dialogStatus = {\r\n    INIT: 0,\r\n    OPEN: 1,\r\n    REPLACE: 2,\r\n    MINIMIZE: 3,\r\n    COLLAPSE: 4,\r\n    REMOVE: 5,\r\n    REFRESH: 6 // data refresh\r\n  };\r\n  const dialogLayoutResetConstant = {\r\n    maxHeightOfTextInput: 16 * 5 - 8 * 2,\r\n    maxHeightOfInput: 16 * 5, // four lines of input text\r\n    paddingOfInput: 16,\r\n    typing: {\r\n      isTypingAsSender: false,\r\n      lastTimeTypingAsSender: null,\r\n      isTypingFromSender: false,\r\n      lastTimeReceiveTypingEvent: null,\r\n      lastTimeReceiveTimer: null,\r\n      userIds: [],\r\n      userTypingDict: {}\r\n    },\r\n    hoverOnCollapsed: false,\r\n    memberDisplay: {\r\n      limitNumber: 3,\r\n      defaultLimit: 3,\r\n      isAll: false,\r\n      linkName: lang.get('Label.SeeMore'),\r\n      seeMoreLink: lang.get('Label.SeeMore'),\r\n      seeLessLink: lang.get('Label.SeeLess'),\r\n      toastText(friendsCount) {\r\n        return lang.get('Message.ToastText', { friendNum: friendsCount });\r\n      },\r\n      timeoutToast: 5000\r\n    },\r\n    playTogetherButton: {\r\n      buttonType: null,\r\n      isPlayButtonDisabled: false\r\n    },\r\n    togglePopoverParams: {\r\n      isOpen: false,\r\n      dialogSelector: '',\r\n      triggerSelector: '',\r\n      dialogSelectorPrefix: '#dialog-container-',\r\n      popoverTriggerSelectorPrefix: '#play-together-',\r\n      pinIconClassName: 'pin-icon',\r\n      dialogTriggerClassSelector: '',\r\n      dialogTriggerClassPrefix: '.chat-friend-',\r\n      isFirstTimeOpen: false\r\n    },\r\n    layoutId: null\r\n  };\r\n  const dialogTypes = {\r\n    FRIEND: -1,\r\n    CHAT: 0,\r\n    GROUPCHAT: 1,\r\n    NEWGROUPCHAT: 2,\r\n    ADDFRIENDS: 6\r\n  };\r\n\r\n  return {\r\n    activeType: {\r\n      NEWMESSAGE: 'New message'\r\n    },\r\n    conversationInitStatus: {\r\n      remove: false\r\n    },\r\n    conversationType: {\r\n      oneToOneConversation: 'OneToOneConversation',\r\n      multiUserConversation: 'MultiUserConversation',\r\n      cloudEditConversation: 'CloudEditConversation'\r\n    },\r\n    dialogBannerTypes,\r\n    dialogInitValue: {\r\n      isUpdated: true,\r\n      updateStatus: dialogStatus.INIT,\r\n      markAsActive: false,\r\n      activeType: null,\r\n      autoOpen: false\r\n    },\r\n    dialogLayout: {\r\n      lookUpMembers: false,\r\n      focusMeEnabled: true,\r\n      hasFocus: false,\r\n      isFocused: false, // focus status for the entire container\r\n      active: false,\r\n      isChatLoading: false,\r\n      collapsed: false,\r\n      isConfirmationOn: false,\r\n      isMembersOverloaded: false,\r\n      scrollToBottom: false,\r\n      IsdialogContainerVisible: false,\r\n      inviteBtnDisabled: true,\r\n      limitMemberDisplay: 6,\r\n      heightOfInput: 32,\r\n      maxHeightOfTextInput: dialogLayoutResetConstant.maxHeightOfTextInput,\r\n      maxHeightOfInput: dialogLayoutResetConstant.maxHeightOfInput,\r\n      paddingOfInput: dialogLayoutResetConstant.paddingOfInput,\r\n      limitCharacterCount: 160,\r\n      heightOfBanner: 40,\r\n      templateUrl: 'chat-dialog',\r\n      scrollbarElm: null,\r\n      listenToScrollInitialized: false,\r\n      isBannerEnabled: false,\r\n      renameEditor: {\r\n        isEnabled: false,\r\n        hasFocus: false\r\n      },\r\n      bannerType: dialogBannerTypes.default,\r\n      confirmDialog: {\r\n        isOpen: false,\r\n        title: '',\r\n        btnName: '',\r\n        type: ''\r\n      },\r\n      typing: dialogLayoutResetConstant.typing,\r\n      dialogContainerClass: '.dialog-container',\r\n      hoverOnCollapsed: false,\r\n      details: {\r\n        isEnabled: false,\r\n        isConversationTitleEditorEnabled: false,\r\n        isAddFriendsEnabled: false,\r\n        isNegativeConfirmationEnabled: false,\r\n        friendMenuAction: {},\r\n        friendIdForMenuOn: null\r\n      },\r\n      memberDisplay: dialogLayoutResetConstant.memberDisplay,\r\n      playTogetherButton: dialogLayoutResetConstant.playTogetherButton,\r\n      togglePopoverParams: dialogLayoutResetConstant.togglePopoverParams\r\n    },\r\n    dialogLayoutResetConstant,\r\n    dialogStatus,\r\n    dialogTypes,\r\n    memberStatus: {\r\n      PENDING: 0,\r\n      MEMBER: 1,\r\n      LEADER: 2\r\n    },\r\n    negativeAction: {\r\n      removeUser: {\r\n        title: lang.get('Heading.RemoveUser'),\r\n        headerTitle: lang.get('Heading.RemoveUser'),\r\n        btnName: lang.get('Action.Remove'),\r\n        cancelBtnName: lang.get('Action.Cancel'),\r\n        type: 'removeUser'\r\n      },\r\n      leaveChatGroup: {\r\n        title: lang.get('Heading.ConfirmLeaving'),\r\n        headerTitle: lang.get('Heading.LeaveChatGroup'),\r\n        btnName: lang.get('Action.Leave'),\r\n        cancelBtnName: lang.get('Action.Stay'),\r\n        type: 'leaveChatGroup'\r\n      }\r\n    },\r\n    newGroup: {\r\n      dialogType: dialogTypes.NEWGROUPCHAT,\r\n      layoutId: 'newGroup',\r\n      title: lang.get('Heading.NewChatGroup')\r\n    },\r\n    participantType: {\r\n      user: 'User'\r\n    },\r\n    scrollBarTypes: {\r\n      MESSAGE: 0,\r\n      FRIENDSELECTION: 1\r\n    },\r\n    systemMessage: {\r\n      isSystemMessage: true,\r\n      isErrorMsg: false\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('dialogAttributes', dialogAttributes);\r\n\r\nexport default dialogAttributes;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction gameLayout(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  function getPlaceName(placeName) {\r\n    return `<span class='font-bold'>${  placeName  }</span>`;\r\n  }\r\n\r\n  function getRobuxPrice(robux) {\r\n    return `<span class='icon-robux-16x16'></span><span class='text-robux'>${  robux  }</span>`;\r\n  }\r\n  return {\r\n    playButtonTypes: {\r\n      play: 'play',\r\n      join: 'join',\r\n      buy: 'buy',\r\n      details: 'details',\r\n      notAvailable: 'notAvailable'\r\n    },\r\n    playButtons: {\r\n      play: {\r\n        type: 'play',\r\n        text: lang.get('Label.PlayButton'), // \"Play\",\r\n        className: 'btn-primary-xs btn-growth-xs',\r\n        isPlayable: true\r\n      },\r\n      join: {\r\n        type: 'join',\r\n        text: lang.get('Label.JoinButton'), // \"Join\",\r\n        className: 'btn-primary-xs btn-growth-xs',\r\n        isPlayable: true\r\n      },\r\n      buy: {\r\n        type: 'buy',\r\n        text: lang.get('Label.BuyButton'), // \"Buy\",\r\n        className: 'btn-control-xs',\r\n        isPlayable: false\r\n      },\r\n      details: {\r\n        type: 'details',\r\n        text: lang.get('Label.ViewDetailsButton'), // \"View Details\",\r\n        className: 'btn-control-xs',\r\n        isPlayable: false\r\n      },\r\n      notAvailable: {\r\n        type: 'notAvailable',\r\n        text: lang.get('Label.GameNotAvailableButton'), // \"Not Available\",\r\n        isPlayable: false\r\n      }\r\n    },\r\n    buyAccess: {\r\n      title: lang.get('Heading.BuyItem'), // \"Buy Item\",\r\n      yesButtonText: lang.get('Action.BuyAccess'), // \"Buy Access\",\r\n      yesButtonClass: 'btn-primary-xs btn-growth-xs',\r\n      noButtonText: lang.get('Action.Cancel'), // \"Cancel\",\r\n      bodyText(placeName, creatorName, robux) {\r\n        let placeNameString = getPlaceName(placeName);\r\n        let robuxString = getRobuxPrice(robux);\r\n        return lang.get('Label.BuyAccessToGameForModal', {\r\n          placeName: placeNameString,\r\n          creatorName: creatorName,\r\n          robux: robuxString\r\n        }); // \"Would you like to buy access to the Place: {placeName} from {creatorName} for {robux}?\"\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('gameLayout', gameLayout);\r\n\r\nexport default gameLayout;\r\n","import { EnvironmentUrls, GameLauncher } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction gameService(\r\n  chatUtility,\r\n  httpService,\r\n  $log,\r\n  $q,\r\n  apiParamsInitialization,\r\n  gameParameters,\r\n  gameLayout,\r\n  urlService,\r\n  $filter\r\n) {\r\n  'ngInject';\r\n\r\n  const apiSets = {};\r\n\r\n  function multiGetPlaceDetails(placeIds) {\r\n    const params = { placeIds };\r\n    return httpService\r\n      .httpGet(apiSets.multiGetPlaceDetails, params)\r\n      .then(function success(placeDetails) {\r\n        const placeDetailDict = {};\r\n        angular.forEach(placeDetails, function(placeDetail) {\r\n          placeDetailDict[placeDetail.placeId] = placeDetail;\r\n        });\r\n        return placeDetailDict;\r\n      });\r\n  }\r\n\r\n  function multiGetPlaceDetailsForLinkCard(placeIds, getPlaceForMessages) {\r\n    const params = { placeIds };\r\n    return httpService.httpGet(apiSets.multiGetPlaceDetails, params).then(function(placeDetails) {\r\n      if (placeDetails && placeDetails.length > 0) {\r\n        const result = {};\r\n\r\n        placeDetails.forEach(function(placeDetail) {\r\n          result[placeDetail.placeId] = placeDetail;\r\n        });\r\n\r\n        const inValidPlaceIds = [];\r\n        placeIds.forEach(function(placeId) {\r\n          if (!result[placeId]) {\r\n            result[placeId] = null;\r\n            inValidPlaceIds.push(placeId);\r\n          }\r\n        });\r\n        getPlaceForMessages.forEach(function(message) {\r\n          if (message && message.linkCardMessages) {\r\n            message.linkCardMessages.forEach(function(pieceOfMessage) {\r\n              if (pieceOfMessage.isCard && inValidPlaceIds.indexOf(pieceOfMessage.id) > -1) {\r\n                pieceOfMessage.isCard = false;\r\n              }\r\n            });\r\n          }\r\n        });\r\n        return result;\r\n      }\r\n    });\r\n  }\r\n\r\n  function addGameIconUrlsToPlacesLibrary(chatLibrary, gameIcons) {\r\n    angular.forEach(gameIcons, function(gameIconUrl, placeId) {\r\n      if (gameIconUrl) {\r\n        chatLibrary.placesLibrary[placeId].gameIconUrl = gameIconUrl;\r\n        const place = chatLibrary.placesLibrary[placeId];\r\n        chatLibrary.universeLibrary[place.universeId] = place;\r\n      }\r\n    });\r\n  }\r\n\r\n  function buildPlacesLibrary(chatLibrary, placeDetailsData, messageDictByPlaceIds) {\r\n    angular.forEach(placeDetailsData, function(placeDetail, placeId) {\r\n      if (placeDetail) {\r\n        let originalPlaceData;\r\n        if (chatLibrary.placesLibrary[placeId]) {\r\n          originalPlaceData = chatLibrary.placesLibrary[placeId];\r\n        }\r\n        const creatorName = placeDetail.creatorName ? placeDetail.creatorName : placeDetail.builder;\r\n        chatLibrary.placesLibrary[placeId] = {\r\n          universeId: placeDetail.universeId,\r\n          placeId,\r\n          rootPlaceId:\r\n            placeDetail.universeRootPlaceId || placeDetail.placeId || placeDetail.rootPlaceId,\r\n          placeName: placeDetail.name,\r\n          encodedPlaceName: chatUtility.htmlEntities(placeDetail.name),\r\n          creatorName,\r\n          encodedCreatorName: chatUtility.htmlEntities(creatorName),\r\n          creatorId: placeDetail.creatorId || placeDetail.builderId,\r\n          gameIconUrl: placeDetail.gameIconUrl,\r\n          placeUrl: placeDetail.url || placeDetail.placeUrl,\r\n          reasonProhibited: placeDetail.reasonProhibited,\r\n          description: placeDetail.description,\r\n          price: placeDetail.price,\r\n          isPlayable: placeDetail.isPlayable,\r\n          gameReferralUrl: placeDetail.gameReferralUrl\r\n        };\r\n\r\n        if (originalPlaceData) {\r\n          // avoid existing place key/value from overriding\r\n          angular.forEach(originalPlaceData, function(value, key) {\r\n            if (!chatLibrary.placesLibrary[placeId][key]) {\r\n              chatLibrary.placesLibrary[placeId][key] = value;\r\n            }\r\n          });\r\n        }\r\n\r\n        if (placeDetail.reasonProhibited) {\r\n          switch (placeDetail.reasonProhibited) {\r\n            case gameParameters.reasonProhibitedMessage.None:\r\n            case gameParameters.reasonProhibitedMessage.Playable:\r\n              chatLibrary.placesLibrary[placeId].buttonLayoutForLinkCard = angular.copy(\r\n                gameLayout.playButtons.play\r\n              );\r\n              break;\r\n            case gameParameters.reasonProhibitedMessage.PurchaseRequired:\r\n              chatLibrary.placesLibrary[placeId].buttonLayoutForLinkCard = angular.copy(\r\n                gameLayout.playButtons.details\r\n              );\r\n              break;\r\n            default:\r\n              chatLibrary.placesLibrary[placeId].buttonLayoutForLinkCard = angular.copy(\r\n                gameLayout.playButtons.details\r\n              );\r\n              break;\r\n          }\r\n        }\r\n        // transfer to use universeLibrary\r\n        chatLibrary.universeLibrary[placeDetail.universeId] = chatLibrary.placesLibrary[placeId];\r\n      } else if (!placeDetail && chatLibrary.placesLibrary[placeId]) {\r\n        chatLibrary.placesLibrary[placeId] = {\r\n          isInvalid: true\r\n        };\r\n        if (messageDictByPlaceIds) {\r\n          chatUtility.invalidateLinkCardInPieceOfMessage(placeId, messageDictByPlaceIds);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  function invalidatePlaceDetails(chatLibrary, placeIds) {\r\n    placeIds.forEach(function(placeId) {\r\n      if (!chatLibrary.placesLibrary[placeId]) {\r\n        chatLibrary.placesLibrary[placeId] = {};\r\n      }\r\n      chatLibrary.placesLibrary[placeId] = {\r\n        isInvalid: true\r\n      };\r\n    });\r\n  }\r\n\r\n  function buildRegularPlaceUrl(place) {\r\n    const gameUrl = urlService.getAbsoluteUrl(gameParameters.gameUrl);\r\n    return $filter('formatString')(gameUrl, { placeId: place.placeId });\r\n  }\r\n\r\n  function buildGameReferralUrl(place, sortName) {\r\n    const urls = urlService.getGameDetailReferralUrls();\r\n    const urlInChatTemplate = urls.chat;\r\n    return $filter('formatString')(urlInChatTemplate, {\r\n      sortName,\r\n      placeId: place.placeId\r\n    });\r\n  }\r\n\r\n  return {\r\n    apiSets,\r\n\r\n    setParams(chatApiDomain, gameApiDomain) {\r\n      apiSets.setConversationUniverse = {\r\n        url: chatApiDomain + apiParamsInitialization.chatUrls.setConversationUniverse,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      apiSets.resetConversationUniverse = {\r\n        url: chatApiDomain + apiParamsInitialization.chatUrls.resetConversationUniverse,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n      apiSets.multiGetPlaceDetails = {\r\n        url: gameApiDomain + apiParamsInitialization.gameUrls.multiGetPlaceDetails,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      apiSets.GetGamesSorts = {\r\n        url: gameApiDomain + apiParamsInitialization.gameUrls.GetGamesSorts,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      apiSets.GetGamesList = {\r\n        url: gameApiDomain + apiParamsInitialization.gameUrls.GetGamesList,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      apiSets.getGamesByUniverseIds = {\r\n        url: apiParamsInitialization.gameUrls.getGamesByUniverseIds,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n      apiSets.multiGetPlayabilityStatus = {\r\n        url: apiParamsInitialization.gameUrls.multiGetPlayabilityStatus,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    setConversationUniverse(conversationId, universeId) {\r\n      const data = {\r\n        conversationId,\r\n        universeId\r\n      };\r\n      return httpService.httpPost(apiSets.setConversationUniverse, data);\r\n    },\r\n\r\n    resetConversationUniverse(conversationId) {\r\n      const data = {\r\n        conversationId\r\n      };\r\n      return httpService.httpPost(apiSets.resetConversationUniverse, data);\r\n    },\r\n\r\n    multiGetPlaceDetailsForLinkCard,\r\n\r\n    multiGetPlaceDetails,\r\n\r\n    playRegularGame(placeId, isPlayTogetherGame) {\r\n      isPlayTogetherGame = isPlayTogetherGame === true;\r\n      GameLauncher.joinMultiplayerGame(placeId, true, isPlayTogetherGame);\r\n    },\r\n\r\n    playTogetherGame(placeId, conversationId) {\r\n      GameLauncher.playTogetherGame(placeId, conversationId);\r\n    },\r\n\r\n    joinGame(placeId, gameInstanceId) {\r\n      GameLauncher.joinGameInstance(placeId, gameInstanceId, true, true);\r\n    },\r\n\r\n    playPrivateServerGame(placeId, privateServerLinkCode) {\r\n      GameLauncher.joinPrivateGame(placeId, null, privateServerLinkCode);\r\n    },\r\n\r\n    fetchDataForLinkCard(messages, chatLibrary) {\r\n      if (!messages) {\r\n        return false;\r\n      }\r\n      const placeIds = []; // placeId does not exist in placesLibrary\r\n      const messageDictByPlaceIds = {};\r\n      const getPlaceForMessages = [];\r\n      messages.forEach(function(message) {\r\n        if (message.hasLinkCard) {\r\n          const { linkCardMessages } = message;\r\n          linkCardMessages.forEach(function(pieceOfMessage) {\r\n            if (pieceOfMessage.isCard) {\r\n              switch (pieceOfMessage.type) {\r\n                case chatUtility.linkCardTypes.gameCard:\r\n                  var placeId = pieceOfMessage.id;\r\n                  if (\r\n                    !chatUtility.isPlaceDetailQualifiedInLibrary(chatLibrary.placesLibrary, placeId)\r\n                  ) {\r\n                    getPlaceForMessages.push(message);\r\n\r\n                    if (placeIds.indexOf(placeId) < 0) {\r\n                      placeIds.push(placeId);\r\n                      messageDictByPlaceIds[placeId] = message;\r\n                    }\r\n                  } else if (\r\n                    chatLibrary.placesLibrary[placeId] &&\r\n                    chatLibrary.placesLibrary[placeId].isInvalid\r\n                  ) {\r\n                    pieceOfMessage.isCard = false;\r\n                  }\r\n                  break;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      if (placeIds.length > 0) {\r\n        multiGetPlaceDetailsForLinkCard(placeIds, getPlaceForMessages).then(\r\n          function(placeDetails) {\r\n            if (!placeDetails) {\r\n              invalidatePlaceDetails(chatLibrary, placeIds);\r\n              chatUtility.invalidateLinkCardsInMessageDict(placeIds, messageDictByPlaceIds);\r\n              return false;\r\n            }\r\n            buildPlacesLibrary(chatLibrary, placeDetails, messageDictByPlaceIds);\r\n          },\r\n          function() {\r\n            invalidatePlaceDetails(chatLibrary, placeIds);\r\n            chatUtility.invalidateLinkCardsInMessageDict(placeIds, messageDictByPlaceIds);\r\n          }\r\n        );\r\n      }\r\n    },\r\n\r\n    updateButtonLayoutPerConversation(conversation, rootPlaceId) {\r\n      if (\r\n        !conversation.placeButtonLayout ||\r\n        (conversation.placeButtonLayout && !conversation.placeButtonLayout[rootPlaceId].isPlayable)\r\n      ) {\r\n        return false;\r\n      }\r\n      if (\r\n        conversation.pinGame &&\r\n        conversation.playTogetherIds &&\r\n        conversation.playTogetherIds.indexOf(rootPlaceId) > -1\r\n      ) {\r\n        conversation.placeButtonLayout[rootPlaceId] = angular.copy(gameLayout.playButtons.join);\r\n      } else {\r\n        conversation.placeButtonLayout[rootPlaceId] = angular.copy(gameLayout.playButtons.play);\r\n      }\r\n    },\r\n\r\n    buildButtonLayoutPerConversation(conversation, placesLibrary) {\r\n      let placeIds = [];\r\n      let rootPlaceIdForPinGame = null;\r\n      let isPinGameAnActiveGame = true;\r\n      if (conversation.playTogetherIds && conversation.playTogetherIds.length > 0) {\r\n        placeIds = angular.copy(conversation.playTogetherIds);\r\n      }\r\n      if (conversation.pinGame) {\r\n        rootPlaceIdForPinGame = conversation.pinGame.rootPlaceId;\r\n        if (placeIds.indexOf(rootPlaceIdForPinGame) < 0) {\r\n          isPinGameAnActiveGame = false;\r\n          placeIds.push(rootPlaceIdForPinGame);\r\n        }\r\n      }\r\n\r\n      if (!conversation.placeButtonLayout) {\r\n        conversation.placeButtonLayout = {};\r\n      }\r\n      angular.forEach(placeIds, function(placeId) {\r\n        const placeDetails = placesLibrary[placeId];\r\n        if (placeDetails) {\r\n          switch (placeDetails.reasonProhibited) {\r\n            case gameParameters.reasonProhibitedMessage.None:\r\n            case gameParameters.reasonProhibitedMessage.Playable:\r\n              if (!isPinGameAnActiveGame && placeId === rootPlaceIdForPinGame) {\r\n                conversation.placeButtonLayout[placeId] = angular.copy(gameLayout.playButtons.play);\r\n              } else {\r\n                conversation.placeButtonLayout[placeId] = angular.copy(gameLayout.playButtons.join);\r\n              }\r\n              break;\r\n            case gameParameters.reasonProhibitedMessage.PurchaseRequired:\r\n              conversation.placeButtonLayout[placeId] = angular.copy(\r\n                gameLayout.playButtons.details\r\n              );\r\n              break;\r\n            default:\r\n              conversation.placeButtonLayout[placeId] = angular.copy(\r\n                gameLayout.playButtons.notAvailable\r\n              );\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    buildPlacesLibrary,\r\n\r\n    getRecentGame() {\r\n      return httpService.httpGet(apiSets.GetGamesSorts).then(function success(result) {\r\n        if (result && result.sorts) {\r\n          const { sorts } = result;\r\n          let sortToken;\r\n          let sortName;\r\n          sorts.forEach(function(sort) {\r\n            if (sort.name === gameParameters.sortNames.myRecent) {\r\n              sortToken = sort.token;\r\n              sortName = sort.name;\r\n              return false;\r\n            }\r\n          });\r\n\r\n          if (sortToken) {\r\n            const params = {\r\n              sortToken,\r\n              maxRows: gameParameters.maxRowsOfMyRecentGames\r\n            };\r\n            return httpService.httpGet(apiSets.GetGamesList, params).then(function success(data) {\r\n              if (data && data.games && data.games.length > 0) {\r\n                const { games } = data;\r\n                const universeIds = [];\r\n                angular.forEach(games, function(place) {\r\n                  place.gameReferralUrl = buildGameReferralUrl(place, sortName);\r\n                  universeIds.push(place.universeId);\r\n                });\r\n                return games;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    getGames(universeIds) {\r\n      const params = {\r\n        universeIds\r\n      };\r\n      const promises = {};\r\n      promises.getGamesInfo = httpService.httpGet(apiSets.getGamesByUniverseIds, params);\r\n      promises.getPlayabilityStatus = httpService.httpGet(\r\n        apiSets.multiGetPlayabilityStatus,\r\n        params\r\n      );\r\n      return $q.all(promises).then(function success(results) {\r\n        if (results && results.getGamesInfo && results.getPlayabilityStatus) {\r\n          const gameInfo = results.getGamesInfo.data;\r\n          const playabilityStatus = results.getPlayabilityStatus;\r\n          const placeLibrary = {};\r\n          const universeLibrary = {};\r\n          angular.forEach(gameInfo, function(game, idx) {\r\n            const placeId = game.rootPlaceId;\r\n            const { universeId } = playabilityStatus[idx];\r\n            placeLibrary[placeId] = game;\r\n            placeLibrary[placeId].universeId = universeId;\r\n            placeLibrary[placeId].placeId = placeId;\r\n            placeLibrary[placeId].isPlayable = playabilityStatus[idx].isPlayable;\r\n            placeLibrary[placeId].reasonProhibited = playabilityStatus[idx].playabilityStatus;\r\n            placeLibrary[placeId].placeUrl = buildRegularPlaceUrl(placeLibrary[placeId]);\r\n            universeLibrary[universeId] = placeLibrary[placeId];\r\n          });\r\n          return placeLibrary;\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('gameService', gameService);\r\n\r\nexport default gameService;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction gameUtility($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    isGameExistedInPlacesLibrary(placesLibrary, universeId) {\r\n      let placeId = null;\r\n      angular.forEach(placesLibrary, function(place) {\r\n        if (place.universeId === universeId) {\r\n          placeId = place.placeId;\r\n          return false;\r\n        }\r\n      });\r\n      return placeId;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('gameUtility', gameUtility);\r\n\r\nexport default gameUtility;\r\n","import { EnvironmentUrls } from 'Roblox';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction libraryInitialization(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  const chatLayout = {\r\n    scrollbarClassName: '#chat-friend-list',\r\n    chatContentSelector: '#chat-main',\r\n    collapsed: true,\r\n    pageInitializing: false,\r\n    pageDataLoading: false,\r\n    chatBarInitialized: false,\r\n    isChatLoading: false,\r\n    widthOfChatCollapsed: 112,\r\n    widthOfChat: 286,\r\n    widthOfDialog: 260,\r\n    widthOfCollapsedDialog: 160,\r\n    spaceOfDialog: 6,\r\n    widthOfDialogMinimize: 200,\r\n    numberOfDialogOpen: 0,\r\n    defaultChatZIndex: 1060,\r\n    errorMaskEnable: false,\r\n    isFriendListEmpty: false,\r\n    isUserConversationEmpty: false,\r\n    chatLandingEnabled: false,\r\n    thresholdMobile: 543,\r\n    thresholdChatBarOpen: 1748, // 970 + 160 * 2 + 24 * 2 + 150 + 260\r\n    resizing: false,\r\n    defaultTitleForMessage: lang.get('Message.DefaultTitleForMsg'),\r\n    urlParseInitialized: false,\r\n    noConnectionMsg: lang.get('Message.NoConnectionMsg'),\r\n    isChatEnabledByPrivacySetting: 1,\r\n    focusedDialogId: null,\r\n    areDialogsUpdated: false,\r\n    maxOpenDialogs: 12,\r\n    conversationTitleChangedText: lang.get('Message.conversationTitleChangedText'),\r\n    abuseReportUrl:\r\n      '/abusereport/chat?id={userId}&redirectUrl={location}&conversationId={conversationId}'\r\n  };\r\n  const errors = {\r\n    default: lang.get('Message.DefaultErrorMsg'),\r\n    conversationTitleModerated: lang.get('Message.ConversationTitleModerated'),\r\n    messageContentModerated: lang.get('Message.MessageContentModerated'),\r\n    messageFilterForReceivers: lang.get('Message.MessageFilterForReceivers'),\r\n    textTooLong: lang.get('Message.TextTooLong'),\r\n    sendingMessagesTooQuickly: lang.get('Message.SendingMessagesTooQuickly'),\r\n    unknownMessageType: lang.get('Message.UnknownMessageType')\r\n  };\r\n  return {\r\n    chatLayout,\r\n    chatLibrary: {\r\n      chatLayout,\r\n      chatLayoutIds: [], // mapping chat bar position\r\n      conversationsDict: {},\r\n      currentTabTitle: null, // will update in controller\r\n      dialogIdList: [],\r\n      dialogDict: {},\r\n      dialogScopeLib: {},\r\n      dialogsLayout: {},\r\n      dialogRequestedToOpenParams: {\r\n        layoutId: null,\r\n        autoPop: false\r\n      },\r\n      errors,\r\n      friendIds: [], // current user friends id\r\n      friendLayoutIds: [],\r\n      friendsDict: {}, // all friend user data including my friends and my group chat friends\r\n      isTakeOverOn: angular.element(document.querySelector('#wrap')).data('gutter-ads-enabled'),\r\n      layout: {\r\n        bannerHeight: 40,\r\n        playTogetherBannerHeight: 102,\r\n        dialogHeight: 360,\r\n        inputHeight: 32,\r\n        renameEditorHeight: 32,\r\n        searchHeight: 32,\r\n        topBarHeight: 32,\r\n        detailsActionHeight: 48,\r\n        detailsInputHeight: 32\r\n      },\r\n      layoutIdList: [], // having all layoutIds\r\n      minimizedDialogIdList: [],\r\n      minimizedDialogData: {},\r\n      userConversationsDict: {}, // used to store 1:1 conversation by userId,\r\n      allConversationLayoutIdsDict: {},\r\n      placesLibrary: {},\r\n      playTogetherLibrary: {},\r\n      layoutIdsDictPerUserId: {},\r\n      gamesPageLink: `${EnvironmentUrls.websiteUrl}/discover`,\r\n      senderTypesForUnknownMessageTypeError: [],\r\n      isInvalidMessageTypeFallbackEnabled: false,\r\n      isMetaDataLoaded: false,\r\n      universeLibrary: {},\r\n      voiceChannelMapToConversation: {}\r\n    },\r\n    chatViewModel: {\r\n      chatDomain: null,\r\n      friendsDict: {},\r\n      friendsHasConversation: [],\r\n      chatUserDict: {}\r\n    },\r\n    dialogLocalStorageNamePrefix: 'dialogLibrary_',\r\n    errors,\r\n    linksLibrary: {\r\n      settingTabName: 'Settings',\r\n      settingLink: '/my/account#!/privacy'\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('libraryInitialization', libraryInitialization);\r\n\r\nexport default libraryInitialization;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction messageService(\r\n  chatService,\r\n  chatUtility,\r\n  $rootScope,\r\n  $filter,\r\n  $log,\r\n  systemMessages,\r\n  $timeout,\r\n  messageHelper,\r\n  gameUtility,\r\n  gameService,\r\n  messageUtility,\r\n  dialogAttributes,\r\n  usersService\r\n) {\r\n  'ngInject';\r\n\r\n  const oneDay = 24 * 60 * 60 * 1000;\r\n  let partyChromeDisplayTimeStampInterval = 30000;\r\n  function parseMessageTimestamp(message) {\r\n    if (message.sent && !message.parsedTimestamp) {\r\n      message.parsedTimestamp = new Date(message.sent).getTime();\r\n    }\r\n  }\r\n\r\n  function formatTimeStamp(message, isBriefVersion, currentDate) {\r\n    const timeStamp = message.parsedTimestamp;\r\n    const now = angular.isDefined(currentDate) ? currentDate : new Date();\r\n    const yesterday = new Date(now - oneDay);\r\n    const messageDateObj = new Date(timeStamp);\r\n    const messageDate = messageDateObj.toDateString();\r\n    const diffDays = Math.round(Math.abs(now.getTime() - messageDateObj.getTime()) / oneDay);\r\n    const messageDay = messageDateObj.getDay();\r\n    const currentYear = now.getFullYear();\r\n    const messageYear = messageDateObj.getFullYear();\r\n    let timeFormat = 'h:mm a';\r\n    // same day\r\n    if (now.toDateString() === messageDate) {\r\n      const displayTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n      if (isBriefVersion) {\r\n        message.briefTimeStamp = displayTimeStamp;\r\n      } else {\r\n        message.displayTimeStamp = displayTimeStamp;\r\n      }\r\n    } else if (yesterday.toDateString() === messageDate) {\r\n      // yesterday\r\n      if (isBriefVersion) {\r\n        message.briefTimeStamp = 'Yesterday';\r\n      } else {\r\n        message.displayTimeStamp = `Yesterday | ${  $filter('date')(timeStamp, timeFormat)}`;\r\n      }\r\n    } else if (diffDays <= messageDay) {\r\n      // with one week\r\n      if (isBriefVersion) {\r\n        timeFormat = 'EEE';\r\n        message.briefTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n      } else {\r\n        timeFormat = `EEE | ${  timeFormat}`;\r\n        message.displayTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n      }\r\n    } else if (currentYear === messageYear) {\r\n      if (isBriefVersion) {\r\n        timeFormat = 'MMM d';\r\n        message.briefTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n      } else {\r\n        timeFormat = `MMM d | ${  timeFormat}`;\r\n        message.displayTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n      }\r\n    } else if (isBriefVersion) {\r\n      timeFormat = 'MMM d, yyyy';\r\n      message.briefTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n    } else {\r\n      timeFormat = 'MMM d, yyyy | ' + timeFormat;\r\n      message.displayTimeStamp = $filter('date')(timeStamp, timeFormat);\r\n    }\r\n  }\r\n\r\n  function categorizeMessageType(chatLibrary, messages, conversation) {\r\n    if (messages && messages.length > 0) {\r\n      const universeIdsNotInPlaceLibrary = [];\r\n      const sizeOfMsg = messages.length;\r\n      for (let i = sizeOfMsg - 1; i >= 0; i--) {\r\n        const message = messages[i];\r\n        message.linkCardMessages = [];\r\n        const { messageTypes } = messageHelper;\r\n        switch (message.messageType) {\r\n          case messageTypes.link.name:\r\n            message.hasLinkCard = true;\r\n            var { universeId } = message.link.game;\r\n            var placeId = gameUtility.isGameExistedInPlacesLibrary(\r\n              chatLibrary.placesLibrary,\r\n              universeId\r\n            );\r\n            if (!placeId) {\r\n              universeIdsNotInPlaceLibrary.push(universeId);\r\n            }\r\n            var pieceOfMsg = {\r\n              universeId,\r\n              isLinkCard: true\r\n            };\r\n            message.linkCardMessages.push(pieceOfMsg);\r\n            break;\r\n          case messageTypes.eventBased.name:\r\n            message.isSystemMessageFromApi = true;\r\n            messageUtility.setSystemMessage(message);\r\n            break;\r\n          case messageTypes.plainText.name:\r\n            chatUtility.sanitizeMessage(message);\r\n            break;\r\n        }\r\n      }\r\n      if (chatLibrary.isRespectingMessageTypeEnabled && universeIdsNotInPlaceLibrary.length > 0) {\r\n        gameService.getGames(universeIdsNotInPlaceLibrary).then(function success(placesData) {\r\n          gameService.buildPlacesLibrary(chatLibrary, placesData);\r\n          const { placesLibrary } = chatLibrary;\r\n          gameService.buildButtonLayoutPerConversation(conversation, placesLibrary);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Use this object to mark messages read...it will queue messages so we don't send frequent calls for the same conversation\r\n  let markMessagesRead = (function() {\r\n    let messagesToMarkRead = {};\r\n    let timer = false;\r\n\r\n    function queueMessageToMarkRead(conversation, latestMessageId) {\r\n      messagesToMarkRead[conversation.id] = {\r\n        conversation,\r\n        latestMessageId\r\n      };\r\n      if (timer === false) {\r\n        timer = true;\r\n        $timeout(doMarkMessagesRead, 1000);\r\n      }\r\n    }\r\n\r\n    function doMarkMessagesRead() {\r\n      for (const conversationId in messagesToMarkRead) {\r\n        var savedData = messagesToMarkRead[conversationId];\r\n        chatService.markAsRead(conversationId, savedData.latestMessageId).then(\r\n          function(data) {\r\n            if (data) {\r\n              let conversation = savedData.conversation;\r\n              conversation.hasUnreadMessages = false;\r\n              conversation.unreadMessageIds = [];\r\n              conversation.unreadMessageTimestamps = [];\r\n              if (savedData.latestMessageId !== null) {\r\n                conversation.pendingUnreadMessageId.splice(savedData.latestMessageId, 1);\r\n              }\r\n              $rootScope.$broadcast('Roblox.Chat.LoadUnreadConversationCount');\r\n            }\r\n          },\r\n          function() {\r\n            $log.debug('----- markAsRead request is failed ! ------');\r\n          }\r\n        );\r\n      }\r\n      messagesToMarkRead = {};\r\n      timer = false;\r\n    }\r\n\r\n    return {\r\n      queueMessageToMarkRead\r\n    };\r\n  })();\r\n\r\n  function isUserInfoExisted(message, friendsDict, alienIds) {\r\n    if (message.senderType !== messageHelper.senderTypes.user) {\r\n      return false;\r\n    }\r\n    return (\r\n      friendsDict &&\r\n      !friendsDict[message.senderTargetId] &&\r\n      alienIds.indexOf(message.senderTargetId) < 0\r\n    );\r\n  }\r\n\r\n  return {\r\n    setParams(data) {\r\n      partyChromeDisplayTimeStampInterval = parseInt(data.partyChromeDisplayTimeStampInterval);\r\n    },\r\n\r\n    setFallbackClusterMaster(conversation, message, isOld) {\r\n      if (angular.isUndefined(conversation.chatMessages)) {\r\n        conversation.chatMessages = [];\r\n      }\r\n      // message is sent by different sender with previous sender\r\n      // message is sent as different timestamp\r\n      let index = conversation.chatMessages.length - 1;\r\n      if (message.displayTimeStamp) {\r\n        message.isClusterMaster = true;\r\n      }\r\n      if (\r\n        conversation.chatMessages.length > 0 &&\r\n        conversation.chatMessages[index].senderTargetId !== message.senderTargetId\r\n      ) {\r\n        conversation.chatMessages[index].isClusterMaster = true;\r\n      }\r\n\r\n      conversation.chatMessages.push(message);\r\n    },\r\n    setClusterMaster(conversation, message) {\r\n      if (angular.isUndefined(conversation.chatMessages)) {\r\n        conversation.chatMessages = [];\r\n      }\r\n      // message is sent by different sender with previous sender\r\n      // message is sent as different timestamp\r\n      if (\r\n        (conversation.chatMessages.length > 0 &&\r\n          conversation.chatMessages[0].senderTargetId !== message.senderTargetId) ||\r\n        message.displayTimeStamp\r\n      ) {\r\n        message.isClusterMaster = true;\r\n      }\r\n\r\n      if (!message.resetClusterMessage) {\r\n        conversation.chatMessages.unshift(message);\r\n      }\r\n    },\r\n\r\n    buildFallbackTimeStamp(message, conversation, currentDate) {\r\n      if (!message.sent) {\r\n        return false;\r\n      }\r\n      parseMessageTimestamp(message);\r\n      let timeStamp = message.parsedTimestamp;\r\n      if (\r\n        !conversation.startTimeStamp ||\r\n        timeStamp + partyChromeDisplayTimeStampInterval < conversation.startTimeStamp\r\n      ) {\r\n        formatTimeStamp(message, false, currentDate);\r\n        conversation.startTimeStamp = timeStamp;\r\n      }\r\n    },\r\n\r\n    buildTimeStamp(message, conversation, currentDate) {\r\n      if (!message.sent) {\r\n        return false;\r\n      }\r\n      parseMessageTimestamp(message);\r\n      let timeStamp = message.parsedTimestamp;\r\n      if (!conversation.previousTimeStamp) {\r\n        conversation.startTimeStamp = timeStamp;\r\n      }\r\n      if (\r\n        !conversation.previousTimeStamp ||\r\n        timeStamp - partyChromeDisplayTimeStampInterval > conversation.previousTimeStamp\r\n      ) {\r\n        formatTimeStamp(message, false, currentDate);\r\n        conversation.previousTimeStamp = timeStamp;\r\n      }\r\n      return true;\r\n    },\r\n\r\n    updateContentForInvalidMessageType(chatLibrary, messages) {\r\n      angular.forEach(messages, function(message) {\r\n        var isMessageTypeInWhiteList = messageUtility.isMessageTypeInWhiteList(\r\n          chatLibrary,\r\n          message\r\n        );\r\n        if (!isMessageTypeInWhiteList) {\r\n          message.content = chatLibrary.errors.unknownMessageType;\r\n        }\r\n      });\r\n    },\r\n\r\n    preProcessMessages(chatLibrary, conversation, messages) {\r\n      this.updateContentForInvalidMessageType(chatLibrary, messages);\r\n      if (chatLibrary.isRespectingMessageTypeEnabled) {\r\n        categorizeMessageType(chatLibrary, messages, conversation);\r\n      } else {\r\n        chatUtility.sanitizeMessages(messages);\r\n      }\r\n    },\r\n\r\n    processMessages(chatLibrary, conversation, messages, friendsDict) {\r\n      this.preProcessMessages(chatLibrary, conversation, messages);\r\n      this.manipulateMessages(conversation, messages, friendsDict);\r\n    },\r\n\r\n    // buid message dictionary and update friends dictionary\r\n    manipulateMessages(conversation, messages, friendsDict) {\r\n      if (!messages) {\r\n        conversation.messagesDict = {};\r\n        conversation.unreadMessageIds = [];\r\n        conversation.unreadMessageTimestamps = [];\r\n      }\r\n\r\n      if (angular.isUndefined(conversation.messagesDict)) {\r\n        conversation.messagesDict = {};\r\n      }\r\n      if (angular.isUndefined(conversation.unreadMessageIds)) {\r\n        conversation.unreadMessageIds = [];\r\n        conversation.unreadMessageTimestamps = [];\r\n      }\r\n\r\n      if (messages && messages.length > 0) {\r\n        let sizeOfMsg = messages.length;\r\n        let alienIds = [];\r\n        conversation.previousTimeStamp = null;\r\n        for (var i = sizeOfMsg - 1; i >= 0; i--) {\r\n          let message = messages[i];\r\n          this.buildTimeStamp(message, conversation);\r\n          if (!conversation.messagesDict[message.id]) {\r\n            // chatUtility.sanitizeMessage(message);\r\n            conversation.messagesDict[message.id] = message;\r\n            this.setClusterMaster(conversation, message);\r\n            if (!message.read) {\r\n              conversation.unreadMessageIds.push(message.id);\r\n              conversation.unreadMessageTimestamps.push(message.parsedTimestamp);\r\n            }\r\n          }\r\n          // check the sender user info\r\n          if (isUserInfoExisted(message, friendsDict, alienIds)) {\r\n            let senderId = message.senderTargetId;\r\n            $log.debug(\r\n              ' ----- new friend information for this message, trying to get now -----' + senderId\r\n            );\r\n            let userIds = [senderId];\r\n            alienIds.push(senderId);\r\n            usersService.getUserInfo(userIds, friendsDict);\r\n          }\r\n        }\r\n        if (conversation.unreadMessageIds.length > 0) {\r\n          $rootScope.$broadcast('Roblox.Chat.LoadUnreadConversationCount');\r\n        }\r\n      }\r\n    },\r\n\r\n    formatTimestampInConversation(conversation) {\r\n      if (!conversation.briefTimeStamp) {\r\n        conversation.parsedTimestamp = new Date(conversation.lastUpdated).getTime();\r\n        formatTimeStamp(conversation, true);\r\n      }\r\n    },\r\n\r\n    // attach message to existing conversation\r\n    appendMessages(chatLibrary, conversation, messages) {\r\n      if (!messages) {\r\n        return false;\r\n      }\r\n      if (angular.isUndefined(conversation.unreadMessageIds)) {\r\n        conversation.unreadMessageIds = [];\r\n        conversation.unreadMessageTimestamps = [];\r\n      }\r\n\r\n      this.updateContentForInvalidMessageType(chatLibrary, messages);\r\n      if (chatLibrary.isRespectingMessageTypeEnabled) {\r\n        categorizeMessageType(chatLibrary, messages, conversation);\r\n      } else {\r\n        chatUtility.sanitizeMessages(messages);\r\n      }\r\n      if (!conversation.chatMessages || conversation.chatMessages.length === 0) {\r\n        // never have message before\r\n        var sizeOfMsg = messages.length;\r\n        for (var i = sizeOfMsg - 1; i >= 0; i--) {\r\n          var message = messages[i];\r\n          this.buildTimeStamp(message, conversation);\r\n          this.setClusterMaster(conversation, message);\r\n        }\r\n        conversation.chatMessages = messages;\r\n      } else if (conversation.chatMessages) {\r\n        let currentLatestMsg = {}; // set default\r\n        for (var i = 0; i < conversation.chatMessages.length; i++) {\r\n          let chatMessage = conversation.chatMessages[i];\r\n          if (\r\n            !chatMessage.isSystemMessage &&\r\n            !chatMessage.sendMessageHasError &&\r\n            !chatMessage.resetClusterMessage\r\n          ) {\r\n            // not system message, not problem message, not sent message\r\n            currentLatestMsg = conversation.chatMessages[i];\r\n            parseMessageTimestamp(currentLatestMsg);\r\n            break;\r\n          }\r\n        }\r\n        var sizeOfMsg = messages.length;\r\n        for (var i = sizeOfMsg - 1; i >= 0; i--) {\r\n          var message = messages[i];\r\n          parseMessageTimestamp(message);\r\n          var isCurrentMessageSameAsTheLatestMessage =\r\n            message.id === currentLatestMsg.id ||\r\n            (currentLatestMsg.id &&\r\n              typeof currentLatestMsg.id !== 'string' &&\r\n              currentLatestMsg.id.toString() === message.id);\r\n          var isMessagePresentInMessagesDict =\r\n            !angular.isUndefined(conversation.messagesDict) &&\r\n            !angular.isUndefined(message.id) &&\r\n            !angular.isUndefined(conversation.messagesDict[message.id]);\r\n          if (\r\n            (angular.equals({}, currentLatestMsg) ||\r\n              message.parsedTimestamp > currentLatestMsg.parsedTimestamp) &&\r\n            !isCurrentMessageSameAsTheLatestMessage &&\r\n            !isMessagePresentInMessagesDict\r\n          ) {\r\n            this.buildTimeStamp(message, conversation);\r\n            this.setClusterMaster(conversation, message);\r\n\r\n            conversation.messagesDict[message.id] = message;\r\n          }\r\n          if (!message.read) {\r\n            conversation.hasUnreadMessages = true;\r\n            conversation.unreadMessageIds.push(message.id);\r\n            conversation.unreadMessageTimestamps.push(message.parsedTimestamp);\r\n          }\r\n        }\r\n      }\r\n\r\n      conversation.displayMessage = this.getDisplayMessageForUser(messages);\r\n      if (conversation.unreadMessageIds.length > 0) {\r\n        $rootScope.$broadcast('Roblox.Chat.LoadUnreadConversationCount');\r\n      }\r\n    },\r\n\r\n    markMessagesAsRead(\r\n      conversation,\r\n      shouldRespectConversationHasUnreadMessageToMarkAsRead\r\n    ) {\r\n      if (conversation.chatMessages && conversation.unreadMessageIds) {\r\n        let messages = conversation.chatMessages;\r\n        let sizeOfMsg = messages.length;\r\n        if (\r\n          conversation.unreadMessageTimestamps.length > 0 &&\r\n          conversation.unreadMessageTimestamps[0] >= messages[sizeOfMsg - 1].parsedTimestamp\r\n        ) {\r\n          let sizeOfUnreadMsg = conversation.unreadMessageIds.length;\r\n          let latestMessageId = conversation.unreadMessageIds[sizeOfUnreadMsg - 1];\r\n          if (angular.isUndefined(conversation.pendingUnreadMessageId)) {\r\n            conversation.pendingUnreadMessageId = [];\r\n          }\r\n          if (conversation.pendingUnreadMessageId.indexOf(latestMessageId) < 0) {\r\n            conversation.pendingUnreadMessageId.push(latestMessageId);\r\n            markMessagesRead.queueMessageToMarkRead(conversation, latestMessageId);\r\n          }\r\n        }\r\n      } else if (\r\n        conversation.unreadMessageIds &&\r\n        conversation.unreadMessageIds.length === 0 &&\r\n        shouldRespectConversationHasUnreadMessageToMarkAsRead &&\r\n        conversation.hasUnreadMessages\r\n      ) {\r\n        markMessagesRead.queueMessageToMarkRead(conversation, null);\r\n      }\r\n    },\r\n\r\n    buildSystemMessage(notificationType, conversation, isErrorMsg) {\r\n      let systemMessage = angular.copy(dialogAttributes.systemMessage);\r\n      messageUtility.setSystemMessage(systemMessage, isErrorMsg);\r\n      switch (notificationType) {\r\n        case chatUtility.notificationType.conversationTitleModerated:\r\n          systemMessage.content = chatUtility.errorMessages.conversationTitleModerated;\r\n          break;\r\n        case chatUtility.notificationType.conversationTitleChanged:\r\n          var conversationTitle = chatUtility.htmlEntities(conversation.title);\r\n          systemMessage.content = $filter('formatString')(\r\n            chatUtility.chatLayout.conversationTitleChangedText,\r\n            { userName: conversation.actorUsername, groupName: conversationTitle }\r\n          );\r\n          break;\r\n        case chatUtility.notificationType.conversationUniverseChanged:\r\n          systemMessage.content = systemMessages.playTogether.pinGameUpdate(\r\n            conversation.pinGame.actorUsername,\r\n            conversation.pinGame.encodedPlaceName\r\n          );\r\n          break;\r\n        case chatUtility.notificationType.presenceOnline:\r\n          systemMessage.content = systemMessages.playTogether.playGameUpdate;\r\n          systemMessage.hasParams = true;\r\n          break;\r\n      }\r\n\r\n      if (angular.isUndefined(conversation.chatMessages)) {\r\n        conversation.chatMessages = [];\r\n      }\r\n      parseMessageTimestamp(systemMessage);\r\n      this.setClusterMaster(conversation, systemMessage);\r\n    },\r\n\r\n    resetConversationUnreadStatus(conversation, messages) {\r\n      if (messages.length === 0 && conversation.hasUnreadMessages) {\r\n        markMessagesRead.queueMessageToMarkRead(conversation, null);\r\n      }\r\n    },\r\n\r\n    getDisplayMessageForUser(messages) {\r\n      let displayMessage = {};\r\n      if (messages) {\r\n        let {length} = messages;\r\n        for (let i = 0; i < length; i++) {\r\n          if (messages[i].senderType === messageHelper.senderTypes.user) {\r\n            displayMessage = messages[i];\r\n            displayMessage = this.buildDisplayMessage(displayMessage);\r\n            return displayMessage;\r\n          }\r\n        }\r\n      }\r\n      return displayMessage;\r\n    },\r\n\r\n    buildDisplayMessage(message, currentDate) {\r\n      parseMessageTimestamp(message);\r\n      formatTimeStamp(message, true, currentDate);\r\n      return message;\r\n    },\r\n\r\n    refreshTypingStatus(conversation, userIdForTyping, status, dialogLayout) {\r\n      if (\r\n        conversation &&\r\n        status &&\r\n        conversation.conversationType === chatUtility.conversationType.multiUserConversation\r\n      ) {\r\n        let messages = conversation.chatMessages;\r\n        if (messages && messages.length > 0) {\r\n          let userTyping = dialogLayout.typing.userTypingDict[userIdForTyping];\r\n          let clusterMessagesMarkedAsTyping = {};\r\n          for (let i = 0; i < messages.length; i++) {\r\n            let message = messages[i];\r\n            if (\r\n              message.isClusterMaster &&\r\n              message.senderTargetId === userIdForTyping &&\r\n              (!clusterMessagesMarkedAsTyping[userIdForTyping] ||\r\n                clusterMessagesMarkedAsTyping[userIdForTyping].messageId !== message.id)\r\n            ) {\r\n              userTyping.messageId = message.id;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    categorizeMessageType\r\n  };\r\n}\r\n\r\nchatModule.factory('messageService', messageService);\r\n\r\nexport default messageService;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction messageUtility($log, messageHelper, dialogAttributes) {\r\n  'ngInject';\r\n\r\n  return {\r\n    isMessageTypeInWhiteList(library, message) {\r\n      return library.validMessageTypesWhiteList.indexOf(message.messageType) > -1;\r\n    },\r\n\r\n    isMessageTypeLegal(message) {\r\n      let isLegal = false;\r\n      angular.forEach(messageHelper.messageTypes, function(messageType) {\r\n        if (messageType.name === message.messageType) {\r\n          isLegal = true;\r\n          return false;\r\n        }\r\n      });\r\n      return isLegal;\r\n    },\r\n\r\n    isSenderTypeLegal(message) {\r\n      let isLegal = false;\r\n      angular.forEach(messageHelper.senderTypes, function(messageType) {\r\n        if (messageType === message.senderType) {\r\n          isLegal = true;\r\n          return false;\r\n        }\r\n      });\r\n      return isLegal;\r\n    },\r\n\r\n    setSystemMessage(systemMessage, isErrorMsg) {\r\n      if (!systemMessage) {\r\n        systemMessage = angular.copy(dialogAttributes.systemMessage);\r\n      } else {\r\n        angular.forEach(dialogAttributes.systemMessage, function(value, key) {\r\n          systemMessage[key] = value;\r\n        });\r\n      }\r\n      if (isErrorMsg) {\r\n        systemMessage.isErrorMsg = true;\r\n      }\r\n      let now = new Date();\r\n      systemMessage.sent = now.toISOString();\r\n    },\r\n\r\n    hasUnreadMessages(conversation, messages) {\r\n      if (!conversation.hasUnreadMessages) {\r\n        messages.some(function(message) {\r\n          return !message.read;\r\n        });\r\n      }\r\n      return conversation.hasUnreadMessages;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('messageUtility', messageUtility);\r\n\r\nexport default messageUtility;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction pinGameLayout(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  return {\r\n    tooltipForPinGame: lang.get('Label.PinGameTooltip'), // \"Pin Game\",\r\n    tooltipForUnPinGame: lang.get('Label.UnpinGameTooltip'),\r\n    titleForPinGame: lang.get('Label.PinnedGame') // \"Pinned Game\"\r\n  };\r\n}\r\n\r\nchatModule.factory('pinGameLayout', pinGameLayout);\r\n\r\nexport default pinGameLayout;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction pinGameService($log, playTogetherService, gameService, eventStreamService, resources) {\r\n  'ngInject';\r\n\r\n  return {\r\n    sendPinGameEvent(eventType, rootPlaceId, conversation) {\r\n      let properties = {\r\n        placeId: rootPlaceId,\r\n        conversationId: conversation.id\r\n      };\r\n      eventStreamService.sendEventWithTarget(\r\n        eventType,\r\n        resources.eventStreamParams.actions.click,\r\n        properties\r\n      );\r\n    },\r\n\r\n    setPinGameData(conversation, parameters) {\r\n      if (parameters && parameters.universeId) {\r\n        let {rootPlaceId} = parameters;\r\n        conversation.pinGame = {\r\n          universeId: parameters.universeId,\r\n          rootPlaceId,\r\n          placeName: parameters.placeName,\r\n          encodedPlaceName: parameters.encodedPlaceName,\r\n          actorUsername: parameters.actorUsername,\r\n          userId: parameters.userId\r\n        };\r\n        playTogetherService.setPlaceForShown(conversation);\r\n      } else {\r\n        conversation.pinGame = null;\r\n        playTogetherService.setPlaceForShown(conversation);\r\n      }\r\n    },\r\n\r\n    pinGame(conversation, universeId) {\r\n      if (conversation && universeId) {\r\n        gameService.setConversationUniverse(conversation.id, universeId);\r\n      }\r\n    },\r\n\r\n    unpinGame(conversation) {\r\n      if (conversation) {\r\n        gameService.resetConversationUniverse(conversation.id);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('pinGameService', pinGameService);\r\n\r\nexport default pinGameService;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction playTogetherLayout(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  return {\r\n    numberOfMembers: {\r\n      inPinnedGame: 3,\r\n      inActiveGame: 4\r\n    },\r\n\r\n    gameListScrollListSelector: '#active-game-list',\r\n\r\n    activeGamesList: {\r\n      maxNumberForFit: 4,\r\n      minNumberForFit: 1,\r\n      limitNumber: 1,\r\n      showMore(count) {\r\n        return lang.get('Label.ShowMoreGames', { count }); // \"Show More (+{count})\",\r\n      },\r\n      showMoreText: '',\r\n      showLess: lang.get('Label.ShowLessGames'), // \"Show Less\",\r\n      toggleMenuText: '',\r\n      isCollapsed: true,\r\n      pinGameIsInActiveGames: false\r\n    },\r\n\r\n    recommendedLabel: lang.get('Label.RecommendedGames') // \"Recommended\",\r\n  };\r\n}\r\n\r\nchatModule.factory('playTogetherLayout', playTogetherLayout);\r\n\r\nexport default playTogetherLayout;\r\n","import { CurrentUser } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction playTogetherService($log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    isPlacePlayersOnlyMe(conversation, rootPlaceId) {\r\n      if (conversation.playTogetherDict && conversation.playTogetherDict[rootPlaceId]) {\r\n        const { playerIds } = conversation.playTogetherDict[rootPlaceId];\r\n        if (playerIds && playerIds.length === 1 && playerIds[0] === parseInt(CurrentUser.userId)) {\r\n          // user will not see the self-play game\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    setPlaceForShown(conversation) {\r\n      // set active game for shown first\r\n      if (conversation.playTogetherIds && conversation.playTogetherIds.length > 0) {\r\n        const latestSeenRootPlaceId = conversation.playTogetherIds[0];\r\n        if (!this.isPlacePlayersOnlyMe(conversation, latestSeenRootPlaceId)) {\r\n          const { universeId } = conversation.playTogetherDict[latestSeenRootPlaceId];\r\n          conversation.placeForShown = {\r\n            rootPlaceId: latestSeenRootPlaceId,\r\n            universeId\r\n          };\r\n        }\r\n      } else if (conversation.pinGame) {\r\n        // then pinned game\r\n        const { rootPlaceId, universeId } = conversation.pinGame;\r\n        conversation.placeForShown = {\r\n          rootPlaceId,\r\n          universeId\r\n        };\r\n      } else {\r\n        conversation.placeForShown = null;\r\n      }\r\n    },\r\n\r\n    sortPlayTogetherIds(conversation, presenceData) {\r\n      if (!conversation || !presenceData || !presenceData.rootPlaceId) {\r\n        return false;\r\n      }\r\n      const rootPlaceId = parseInt(presenceData.rootPlaceId);\r\n      const placeId = parseInt(presenceData.placeId);\r\n      const gameInstanceId = presenceData.gameId;\r\n      const playerId = parseInt(presenceData.userId);\r\n      const universeId = parseInt(presenceData.universeId);\r\n      let lastSeen = presenceData.lastOnline;\r\n      if (lastSeen) {\r\n        lastSeen = new Date(lastSeen).getTime();\r\n      }\r\n      if (!conversation.playTogetherIds) {\r\n        conversation.playTogetherIds = [rootPlaceId];\r\n        conversation.playTogetherDict = {};\r\n        const gameInstancesDict = {};\r\n        gameInstancesDict[gameInstanceId] = {\r\n          lastSeen\r\n        };\r\n        conversation.playTogetherDict[rootPlaceId] = {\r\n          playerIds: [playerId],\r\n          gameInstanceId,\r\n          lastSeen,\r\n          placeId,\r\n          universeId\r\n        };\r\n        return false;\r\n      }\r\n\r\n      if (!conversation.playTogetherDict[rootPlaceId]) {\r\n        conversation.playTogetherDict[rootPlaceId] = {\r\n          playerIds: [playerId],\r\n          gameInstanceId,\r\n          lastSeen,\r\n          placeId,\r\n          universeId\r\n        };\r\n      } else if (conversation.playTogetherDict[rootPlaceId].placeId !== placeId) {\r\n        conversation.playTogetherDict[rootPlaceId].placeId = placeId;\r\n      }\r\n\r\n      // active game id by number of players\r\n      if (conversation.playTogetherDict[rootPlaceId].playerIds.indexOf(playerId) < 0) {\r\n        conversation.playTogetherDict[rootPlaceId].playerIds.push(playerId);\r\n      }\r\n\r\n      if (conversation.playTogetherDict[rootPlaceId]) {\r\n        const numberOfPlayers = conversation.playTogetherDict[rootPlaceId].playerIds.length;\r\n        angular.forEach(conversation.playTogetherIds, function(placeId, idx) {\r\n          const existingPlayerIds = conversation.playTogetherDict[placeId].playerIds;\r\n          if (existingPlayerIds.indexOf(playerId) > -1 && rootPlaceId !== placeId) {\r\n            // means player also existed in other place, should remove\r\n            const position = existingPlayerIds.indexOf(playerId);\r\n            conversation.playTogetherDict[placeId].playerIds.splice(position, 1);\r\n          }\r\n\r\n          const count = conversation.playTogetherDict[placeId].playerIds.length;\r\n          if (count < numberOfPlayers) {\r\n            conversation.playTogetherIds.splice(idx, 0, rootPlaceId);\r\n            return false;\r\n          }\r\n        });\r\n\r\n        if (conversation.playTogetherIds.indexOf(rootPlaceId) < 0) {\r\n          conversation.playTogetherIds.push(rootPlaceId);\r\n        }\r\n      }\r\n\r\n      // if there is multiple game instances happening, sort by last seen\r\n      const existingLastSeen = conversation.playTogetherDict[rootPlaceId].lastSeen;\r\n      if (existingLastSeen < lastSeen) {\r\n        // same game instance there, update last seen and compare other game instance last seen\r\n        conversation.playTogetherDict[rootPlaceId].gameInstanceId = gameInstanceId;\r\n        conversation.playTogetherDict[rootPlaceId].lastSeen = lastSeen;\r\n      }\r\n      conversation.recentPlaceIdFromPresence = presenceData.rootPlaceId;\r\n      conversation.recentUserIdFromPresence = presenceData.userId;\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('playTogetherService', playTogetherService);\r\n\r\nexport default playTogetherService;\r\n","import chatModule from '../chatModule';\r\n\r\nfunction presenceLayout(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  return {\r\n    userPresenceTypes: [\r\n      {\r\n        className: '',\r\n        title: lang.get('Label.Offline') // \"Offline\"\r\n      },\r\n      {\r\n        className: 'online',\r\n        title: lang.get('Label.Online') // \"Online\"\r\n      },\r\n      {\r\n        className: 'game',\r\n        title: lang.get('Label.InGame') // \"In Game\"\r\n      },\r\n      {\r\n        className: 'studio',\r\n        title: lang.get('Label.InStudio') // \"In Studio\"\r\n      }\r\n    ],\r\n    status: {\r\n      offline: 0,\r\n      online: 1,\r\n      inGame: 2,\r\n      inStudio: 3\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('presenceLayout', presenceLayout);\r\n\r\nexport default presenceLayout;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction storageService(resources, $log, localStorageService) {\r\n  'ngInject';\r\n\r\n  let isChatDataFromLocalStorageEnabled = false;\r\n  let chatDataFromLocalStorageExpirationMS = 10000;\r\n\r\n  return {\r\n    chatDataName: {\r\n      getUserConversations: 'getUserConversations',\r\n      getConversations: 'getConversations',\r\n      getMessages: 'getMessages'\r\n    },\r\n\r\n    setStorageParams(data) {\r\n      isChatDataFromLocalStorageEnabled = data.IsChatDataFromLocalStorageEnabled;\r\n      chatDataFromLocalStorageExpirationMS = data.ChatDataFromLocalStorageExpirationSeconds * 1000;\r\n    },\r\n\r\n    getStorageName(name, params) {\r\n      var chatDataLSName = resources.chatDataLSNamePrefix + '.' + name;\r\n      angular.forEach(params, function(param) {\r\n        chatDataLSName = chatDataLSName + '.' + param;\r\n      });\r\n      return chatDataLSName;\r\n    },\r\n\r\n    saveChatDataToLocalStorage(name, data) {\r\n      if (isChatDataFromLocalStorageEnabled) {\r\n        localStorageService.saveDataByTimeStamp(name, data);\r\n      }\r\n    },\r\n\r\n    getChatDataFromLocalStorage(name) {\r\n      if (isChatDataFromLocalStorageEnabled) {\r\n        localStorageService.fetchNonExpiredCachedData(name, chatDataFromLocalStorageExpirationMS);\r\n      }\r\n      return null;\r\n    },\r\n\r\n    clearLocalStorage() {\r\n      let storageData = localStorageService.storage();\r\n      if (storageData) {\r\n        for (let key in storageData) {\r\n          if (key && key.search(resources.chatDataLSNamePrefix) > -1) {\r\n            localStorageService.removeLocalStorage(key);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('storageService', storageService);\r\n\r\nexport default storageService;\r\n","import angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction systemMessages(languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  return {\r\n    playTogether: {\r\n      pinGameUpdate(userName, gameName) {\r\n        return lang.get('Message.PinGameUpdate', { userName: userName, gameName: gameName }); // \"{userName} chose a game to play together: {gameName}\"\r\n      },\r\n      playGameUpdate: lang.get('Message.PlayGameUpdate') // \" is playing the pinned game: \"\r\n    }\r\n  };\r\n}\r\n\r\nchatModule.factory('systemMessages', systemMessages);\r\n\r\nexport default systemMessages;\r\n","import { Endpoints } from 'Roblox';\r\nimport angular from 'angular';\r\nimport chatModule from '../chatModule';\r\n\r\nfunction usersService($q, apiParamsInitialization, httpService) {\r\n  'ngInject';\r\n\r\n  return {\r\n    getAvatarHeadshots(userIds, friendsDict) {\r\n      let avatarMultiGetLimit = 50;\r\n      let avatarUrlConfig = apiParamsInitialization.apiSets.multiGetAvatarHeadshots;\r\n\r\n      return httpService\r\n        .buildBatchPromises(avatarUrlConfig, userIds, avatarMultiGetLimit, 'userIds')\r\n        .then(function(data) {\r\n          if (data && data.length > 0) {\r\n            let avatars = [];\r\n            angular.forEach(data, function(item) {\r\n              avatars = avatars.concat(item.data);\r\n            });\r\n\r\n            angular.forEach(avatars, function(avatar) {\r\n              let userId = avatar.targetId;\r\n              if (!friendsDict[userId]) {\r\n                friendsDict[userId] = {};\r\n              }\r\n              friendsDict[userId].avatarHeadshot = avatar;\r\n            });\r\n            return avatars;\r\n          }\r\n          return null;\r\n        });\r\n    },\r\n\r\n    getUserPresence(userIds, friendsDict) {\r\n      let presenceMultiGetLimit = 100;\r\n      let presenceUrlConfig = apiParamsInitialization.apiSets.multiGetPresence;\r\n\r\n      return httpService\r\n        .buildBatchPromises(presenceUrlConfig, userIds, presenceMultiGetLimit, 'userIds', 'POST')\r\n        .then(function(data) {\r\n          if (data && data.length > 0) {\r\n            let presences = [];\r\n            angular.forEach(data, function(item) {\r\n              let presenceData = item.userPresences;\r\n              presences = presences.concat(presenceData);\r\n            });\r\n            presences.forEach(function(presence) {\r\n              let {userId} = presence;\r\n              if (!friendsDict[userId]) {\r\n                friendsDict[userId] = {};\r\n              }\r\n              friendsDict[userId].presence = presence;\r\n              if (Endpoints) {\r\n                friendsDict[userId]['profileUrl'] = Endpoints.generateAbsoluteUrl(\r\n                  '/users/{id}/profile',\r\n                  { id: userId },\r\n                  true\r\n                );\r\n              }\r\n            });\r\n\r\n            return presences;\r\n          }\r\n          return null;\r\n        });\r\n    },\r\n\r\n    getUserInfo(userIds, friendsDict) {\r\n      let promise = {\r\n        avatarHeadshots: this.getAvatarHeadshots(userIds, friendsDict),\r\n        presences: this.getUserPresence(userIds, friendsDict)\r\n      };\r\n      \r\n      return $q.all(promise).then(function(payload) {\r\n            return payload;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nchatModule.factory('usersService', usersService);\r\n\r\nexport default usersService;\r\n","module.exports = \"<div class=\\\"details-container add-friends-container\\\" ng-class=\\\"{'collapsed': dialogLayout.collapsed}\\\" ng-show=\\\"dialogLayout.details.isAddFriendsEnabled\\\" ng-controller=\\\"friendsController\\\"> <div class=\\\"chat-windows-header\\\" ng-mouseenter=\\\"updateDialogHeader(true)\\\" ng-mouseleave=\\\"updateDialogHeader(false)\\\" ng-class=\\\"{'hover': dialogLayout.hoverOnCollapsed}\\\"> <div class=\\\"chat-header-back\\\" ng-click=\\\"toggleAddFriends()\\\"> <span class=\\\"icon-chat-back\\\"></span> </div> <div class=\\\"chat-header-label chat-header-create-group\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span class=\\\"font-bold font-caption-header\\\" ng-bind=\\\"'Label.AddFriends' | translate\\\"></span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> </div> </div> <div select-friends></div> <div class=\\\"details-btns-fixed select-friends-btns\\\"> <button id=\\\"select-friends-cancel\\\" ng-click=\\\"toggleAddFriends()\\\" ng-bind=\\\"'Action.Cancel' | translate\\\" class=\\\"btn-fixed-width btn-control-sm details-btn-cancel select-friends-cancel\\\"></button> <button id=\\\"select-friends-save\\\" class=\\\"btn-fixed-width btn-secondary-sm btn-cta-sm details-btn-save select-friends-save\\\" ng-bind=\\\"'Action.Add' | translate\\\" ng-disabled=\\\"dialogLayout.inviteBtnDisabled\\\" ng-click=\\\"sendInvite(); toggleAddFriends()\\\"></button> </div> </div>\";","module.exports = \"<div class=\\\"details-confirmation-container\\\" ng-show=\\\"dialogLayout.isConfirmationOn\\\"> <div class=\\\"dialog-report-content\\\"> <div class=\\\"chat-windows-header\\\"> <div class=\\\"chat-header-back\\\" ng-click=\\\"dialogLayout.isConfirmationOn = false\\\"> <span class=\\\"icon-chat-back\\\"></span> </div> <div class=\\\"chat-header-label details-dialog-title\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span ng-bind=\\\"'Action.Report'|translate\\\" class=\\\"font-caption-header\\\">Report</span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> </div> </div> <div class=\\\"details-negative-confirmation-body\\\"> <span ng-bind=\\\"'Heading.ContinueToReport'|translate\\\" class=\\\"small text details-negative-confirmation-text\\\">Continue to report?</span> <div class=\\\"details-btns-fixed select-friends-btns\\\"> <button class=\\\"btn-control-sm details-btn-cancel\\\" ng-bind=\\\"'Action.Cancel'|translate\\\" ng-click=\\\"dialogLayout.isConfirmationOn = false\\\"></button> <button id=\\\"chat-abuse-report-btn\\\" class=\\\"btn-alert-sm details-btn-save\\\" ng-bind=\\\"'Action.Report'|translate\\\" ng-click=\\\"abuseReport(null, true)\\\"></button> </div> </div> </div> </div>\";","module.exports = \"<thumbnail-2d thumbnail-target-id=\\\"userId\\\" thumbnail-type=\\\"layoutLibrary.thumbnailTypes.avatarHeadshot\\\" thumbnail-options=\\\"{size: layoutLibrary.avatarHeadshotSize.size48}\\\" class=\\\"{{className}}\\\" alt-name=\\\"userId\\\" title=\\\"{{userId}}\\\"> </thumbnail-2d>\";","module.exports = \"<div id=\\\"chat-main\\\" class=\\\"chat-main\\\" ng-controller=\\\"chatBarController\\\" ng-class=\\\"{'chat-main-empty': isChatEmpty() }\\\" ng-cloak> <div id=\\\"chat-header\\\" class=\\\"chat-windows-header chat-header\\\"> <div class=\\\"chat-header-label\\\" ng-click=\\\"toggleChatContainer()\\\"> <span class=\\\"font-caption-header chat-header-title\\\" ng-bind=\\\"'Heading.Chat' | translate\\\"></span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"xsmall notification-red notification\\\" ng-show=\\\"chatLibrary.chatLayout.collapsed && chatViewModel.unreadConversationCount > 0\\\" ng-cloak>{{chatViewModel.unreadConversationCount}}</span> <span> <span id=\\\"chat-group-create\\\" class=\\\"icon-chat-group-create\\\" ng-hide=\\\"chatLibrary.chatLayout.collapsed || chatLibrary.chatLayout.errorMaskEnable || chatLibrary.chatLayout.chatLandingEnabled || chatLibrary.chatLayout.pageDataLoading || chatLibrary.chatLayout.isChatDisabledByPrivacySetting\\\" ng-click=\\\"launchDialog(newGroup.layoutId)\\\" uib-tooltip=\\\"{{'Label.SpanTitle.CreateGroupNeeds2More' | translate}}\\\" tooltip-placement=\\\"bottom-right\\\" ng-cloak></span> </span> </div> </div> <div id=\\\"chat-body\\\" class=\\\"chat-body\\\" ng-show=\\\"!chatLibrary.chatLayout.errorMaskEnable && !chatLibrary.chatLayout.pageDataLoading && !chatLibrary.chatLayout.pageInitializing\\\" ng-if=\\\"!(chatLibrary.chatLayout.chatLandingEnabled || chatLibrary.chatLayout.isChatEnabledByPrivacySetting !== chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled)\\\"> <div class=\\\"border-bottom chat-search\\\" ng-class=\\\"{'chat-search-focus': chatLibrary.chatLayout.searchFocus}\\\"> <span> <input type=\\\"text\\\" placeholder=\\\"{{'Label.InputPlaceHolder.SearchForFriends' | translate }}\\\" class=\\\"input-field chat-search-input font-caption-body\\\" ng-model=\\\"chatViewModel.searchTerm\\\" ng-focus=\\\"chatLibrary.chatLayout.searchFocus = true\\\"/> </span> <span class=\\\"icon-chat-search\\\"></span> <span class=\\\"icon-chat-search-cancel\\\" ng-click=\\\"cancelSearch()\\\"></span> </div> <div id=\\\"chat-friend-list\\\" class=\\\"rbx-scrollbar chat-friend-list\\\" lazy-load> <ul id=\\\"chat-friends\\\" class=\\\"chat-friends\\\"> <li ng-repeat=\\\"chatUser in chatUserDict | orderList: chatLibrary.chatLayoutIds | filter : search\\\" class=\\\"chat-friend chat-friend-{{chatUser.id}}\\\"> <div ng-if=\\\"chatUser.dialogType === dialogType.CHAT && chatUser.isConversation\\\" class=\\\"chat-friend-container\\\" ng-click=\\\"launchDialog(chatUser.layoutId)\\\"> <div class=\\\"avatar avatar-headshot-sm card-plain chat-friend-avatar\\\" ng-click=\\\"launchDialog(chatUser.layoutId)\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image chat-avatar\\\" chat-avatar-headshot user-id=\\\"{{chatUser.displayUserId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"avatar-status chat-friend-status\\\" ng-class=\\\"userPresenceTypes[chatLibrary.friendsDict[chatUser.displayUserId].presence.userPresenceType]['className']\\\"> </div> </div> <div user-conversation-info></div> </div> <div ng-if=\\\"chatUser.dialogType === dialogType.GROUPCHAT && chatUser.isConversation\\\" class=\\\"chat-friend-container chat-friend-groups\\\" ng-click=\\\"launchDialog(chatUser.layoutId)\\\"> <div class=\\\"chat-friend-avatar\\\" ng-click=\\\"launchDialog(chatUser.layoutId)\\\"> <ul class=\\\"avatar-group card-plain chat-avatar-groups\\\" ng-class=\\\"{'avatar-double': chatUser.userIds.length === 2,'avatar-triple' : chatUser.userIds.length === 3,'avatar-all' : chatUser.userIds.length>= 4}\\\"> <li ng-repeat=\\\"userId in chatUser.userIds | limitTo : 4\\\" class=\\\"avatar-item chat-avatar\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> </li> </ul> </div> <div user-conversation-info></div> </div> <div ng-if=\\\"!chatUser.isConversation\\\" class=\\\"chat-friend-container\\\" ng-click=\\\"launchDialog(chatUser.layoutId)\\\"> <div class=\\\"avatar avatar-headshot-sm card-plain chat-friend-avatar\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image chat-avatar\\\" chat-avatar-headshot user-id=\\\"{{chatUser.id}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"avatar-status chat-friend-status\\\" ng-class=\\\"userPresenceTypes[chatLibrary.friendsDict[chatUser.id].presence.userPresenceType]['className']\\\"> </div> </div> <div user-conversation-info></div> </div> </li> </ul> <div class=\\\"chat-loading loading-bottom\\\" ng-show=\\\"chatLibrary.chatLayout.isChatLoading\\\"> <span class=\\\"spinner spinner-sm\\\" title=\\\"{{'Label.SpanTitle.Loading' | translate}}\\\"></span> </div> </div> </div> <div id=\\\"chat-disconnect\\\" class=\\\"chat-disconnect\\\" ng-show=\\\"isChatDisconnected()\\\" ng-cloak> <p class=\\\"text-info\\\" ng-show=\\\"chatLibrary.chatLayout.errorMaskEnable\\\">{{chatLibrary.chatLayout.noConnectionMsg}} </p> <span><span class=\\\"spinner spinner-default\\\" title=\\\"{{'Label.SpanTitle.Loading' | translate}}\\\"></span></span> </div> <div id=\\\"chat-empty-list\\\" class=\\\"chat-disconnect\\\" ng-hide=\\\"chatLibrary.chatLayout.errorMaskEnable\\\" ng-if=\\\"isChatEmpty()\\\"> <span class=\\\"icon-chat-friends\\\"></span> <p ng-show=\\\"chatLibrary.chatLayout.isChatEnabledByPrivacySetting === chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled\\\" class=\\\"text-info small font-caption-body text-default\\\" ng-bind=\\\"'Message.MakeFriendsToChatNPlay' | translate\\\"></p> <a id=\\\"find-game\\\" ng-bind=\\\"'Label.PlayGames' | translate\\\" class=\\\"btn-primary-sm btn-cta-sm\\\" ng-show=\\\"chatLibrary.chatLayout.isChatEnabledByPrivacySetting === chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled\\\" ng-href=\\\"{{chatLibrary.gamesPageLink}}\\\"></a> <p ng-show=\\\"chatLibrary.chatLayout.isChatEnabledByPrivacySetting === chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.disabled\\\" class=\\\"text-info small\\\" ng-click=\\\"openSettingsPage()\\\"> <span ng-bind-html=\\\"'Message.ChatPrivacySetting' | translate:{frontLink: '<span class=text-link>', endLink: '</span>'}\\\"></span> </p> <p ng-show=\\\"chatLibrary.chatLayout.isChatEnabledByPrivacySetting === chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.unavailable\\\" class=\\\"text-info small\\\">{{chatLibrary.chatLayout.languageForPrivacySettingUnavailable}}</p> <span class=\\\"icon-logo-tagline logo-tagline-chat\\\"></span> </div> </div>\";","module.exports = \"<div ng-controller=\\\"chatController\\\" ng-class=\\\"{'collapsed': chatLibrary.chatLayout.collapsed}\\\" ng-cloak> <div chat-bar></div> <div id=\\\"dialogs\\\" class=\\\"dialogs\\\" ng-controller=\\\"dialogsController\\\" ng-hide=\\\"chatLibrary.chatLayout.isChatEnabledByPrivacySetting !== chatLibrary.chatLayout.chatEnabledByPrivacySettingTypes.enabled\\\"> <div dialog id=\\\"{{chatLayoutId}}\\\" dialog-data=\\\"chatUserDict[chatLayoutId]\\\" chat-library=\\\"chatLibrary\\\" close-dialog=\\\"closeDialog(chatLayoutId)\\\" send-invite=\\\"sendInvite(chatLayoutId)\\\" ng-repeat=\\\"chatLayoutId in chatLibrary.layoutIdList\\\"></div> <div dialog id=\\\"{{newGroup.layoutId}}\\\" dialog-data=\\\"newGroup\\\" chat-library=\\\"chatLibrary\\\" close-dialog=\\\"closeDialog('newGroup')\\\" send-invite=\\\"sendInvite(newGroup.layoutId)\\\" ng-if=\\\"newGroup\\\"></div> <div id=\\\"dialogs-minimize\\\" class=\\\"dialogs-minimize\\\" dialog-minimize chat-library=\\\"chatLibrary\\\"> </div> <div class=\\\"chat-placeholder\\\" chat-placeholder> </div> </div> </div>\";","module.exports = \"<div id=\\\"dialog-container-{{dialogData.id}}\\\" class=\\\"dialog-container\\\" ng-class=\\\"{'collapsed': dialogLayout.collapsed,'active': dialogLayout.active && dialogData.layoutId !== chatLibrary.chatLayout.focusedLayoutId,'focused': !dialogLayout.collapsed && dialogData.layoutId === chatLibrary.chatLayout.focusedLayoutId}\\\" ng-controller=\\\"dialogController\\\"> <div class=\\\"dialog-main\\\" ng-hide=\\\"isDialogMainContainerHidden()\\\"> <div class=\\\"chat-windows-header dialog-header\\\" ng-mouseenter=\\\"updateDialogHeader(true)\\\" ng-mouseleave=\\\"updateDialogHeader(false)\\\" ng-class=\\\"{'hover': dialogLayout.hoverOnCollapsed}\\\"> <div class=\\\"chat-header-label\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span class=\\\"font-caption-header text-overflow chat-header-title dialog-header-title\\\"> {{dialogData.name}} </span> </div> <div dialog-header></div> </div> <div id=\\\"scrollbar_{{dialogData.dialogType}}_{{dialogData.layoutId}}\\\" class=\\\"rbx-scrollbar dialog-body\\\" ng-style=\\\"dialogLayout.defaultStyle.dialogStyle\\\" focus-model=\\\"toggleDialogFocusStatus(true)\\\" dialog-lazy-load> <ul class=\\\"dialog-messages\\\" ng-controller=\\\"dialogMessagesController\\\"> <li class=\\\"dialog-message-container\\\" ng-repeat=\\\"message in dialogData.chatMessages | reverse\\\" ng-class=\\\"{'message-inbound': message.senderTargetId != chatLibrary.userId && !message.isSystemMessage,'system-message': message.isSystemMessage,'message-cluster-master': message.isClusterMaster}\\\" ng-if=\\\"canRenderMessage(message) || shouldShowInvalidMessageTypePrompt(message)\\\" on-finish-render=\\\"ngRepeatFinished\\\"> <div class=\\\"indicated-message\\\" ng-hide=\\\"!message.displayTimeStamp\\\"> <span class=\\\"font-footer text-muted indicated-message-bubble\\\">{{message.displayTimeStamp}}</span> </div> <a ng-href=\\\"{{chatLibrary.friendsDict[message.senderTargetId].profileUrl}}\\\" ng-hide=\\\"message.isSystemMessage\\\" class=\\\"avatar avatar-headshot-sm dialog-message-avatar-link\\\"> <span ng-if=\\\"message.senderTargetId != chatLibrary.userId\\\" class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image dialog-message-avatar\\\" chat-avatar-headshot user-id=\\\"{{message.senderTargetId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"></span> </a> <div class=\\\"dialog-message-body\\\"> <div class=\\\"dialog-message dialog-message-content dialog-triangle\\\" ng-class=\\\"{'message-is-sending': message.sendingMessage}\\\" ng-hide=\\\"message.isSystemMessage\\\" ng-if=\\\"!message.hasLinkCard && canRenderMessage(message)\\\"> <span class=\\\"message-piece font-caption-body text-emphasis\\\" ng-repeat=\\\"piece in message.pieces\\\" ng-bind-html=\\\"piece.content\\\"></span> <span ng-show=\\\"message.canResend\\\" ng-click=\\\"resendMessage(message)\\\" class=\\\"icon-chat-resend\\\"></span> </div> <div ng-if=\\\"message.hasLinkCard\\\" link-card></div> <div class=\\\"xsmall text-date-hint dialog-sending\\\" ng-show=\\\"message.filteredForReceivers\\\" ng-bind=\\\"chatLibrary.errors.messageFilterForReceivers\\\"></div> <div class=\\\"xsmall text-error dialog-sending\\\" ng-show=\\\"message.sendMessageHasError\\\" ng-bind=\\\"message.error || ('Message.Error' | translate)\\\"></div> </div> <div class=\\\"indicated-message\\\" system-message></div> </li> <li class=\\\"dialog-message-container message-inbound typing-indicator\\\" ng-show=\\\"dialogLayout.typing.isTypingFromSender\\\"> <a ng-href=\\\"{{chatLibrary.friendsDict[dialogLayout.typing.userIds[0]].profileUrl}}\\\" class=\\\"avatar avatar-headshot-sm dialog-message-avatar-link\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image dialog-message-avatar\\\" chat-avatar-headshot user-id=\\\"{{dialogLayout.typing.userIds[0]}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"></span> </a> <div class=\\\"small dialog-message dialog-triangle\\\"> <span class=\\\"typing\\\"></span> </div> </li> </ul> </div> <div class=\\\"chat-loading loading-top\\\" ng-show=\\\"dialogLayout.isChatLoading\\\"> <span class=\\\"spinner spinner-sm\\\" title=\\\"{{'Label.SpanTitle.Loading' | translate}} ...\\\"></span> </div> <div class=\\\"border-top dialog-input-container\\\" ng-class=\\\"{'disabled': chatLibrary.chatLayout.errorMaskEnable}\\\" ng-style=\\\"dialogLayout.defaultStyle.inputStyle\\\"> <textarea id=\\\"dialog-input\\\" msd-elastic dialog-input rows=\\\"1\\\" focus-me=\\\"{{dialogLayout.focusMeEnabled && dialogData.layoutId === chatLibrary.chatLayout.focusedLayoutId}}\\\" placeholder=\\\"{{'Label.InputPlaceHolder.SendMessage' | translate}}\\\" ng-model=\\\"dialogData.messageForSend\\\" enter-escape-shift=\\\"keyPressEnter($event)\\\" ng-keypress=\\\"typing($event, true)\\\" ng-blur=\\\"typing($event, false)\\\" class=\\\"dialog-input\\\" input-max-length=\\\"{{dialogLayout.limitCharacterCount}}\\\" ng-disabled=\\\"chatLibrary.chatLayout.errorMaskEnable\\\" ng-style=\\\"dialogLayout.defaultStyle.inputTextStyle\\\" hinteractive hinteractive-domain=\\\"chat\\\"></textarea> </div> </div> <div abuse-report></div> <div details></div> <div places></div> </div>\";","module.exports = \"<thumbnail-2d class=\\\"{{className}}\\\" thumbnail-target-id=\\\"universeId\\\" thumbnail-type=\\\"layoutLibrary.thumbnailTypes.gameIcon\\\"> </thumbnail-2d>\";","module.exports = \"<div id=\\\"dialog-container-{{dialogData.id}}\\\" class=\\\"dialog-container group-dialog\\\" ng-class=\\\"{'group-has-banner': dialogLayout.renameEditor.isEnabled,'collapsed': dialogLayout.collapsed,'active': dialogLayout.active && dialogData.layoutId !== chatLibrary.chatLayout.focusedLayoutId,'focused': !dialogLayout.collapsed && dialogData.layoutId === chatLibrary.chatLayout.focusedLayoutId}\\\" ng-controller=\\\"dialogController\\\"> <div class=\\\"dialog-main\\\" ng-hide=\\\"dialogLayout.isConfirmationOn || isDialogMainContainerHidden()\\\"> <div class=\\\"chat-windows-header dialog-header\\\" ng-mouseenter=\\\"updateDialogHeader(true)\\\" ng-mouseleave=\\\"updateDialogHeader(false)\\\" ng-class=\\\"{'hover': dialogLayout.hoverOnCollapsed}\\\"> <div class=\\\"chat-header-label\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span id=\\\"group-chat-title\\\" class=\\\"font-caption-header text-overflow dialog-header-title max-width\\\" title=\\\"{{dialogData.title}}\\\">{{dialogData.title}}</span> </div> <div dialog-header></div> </div> <div id=\\\"scrollbar_{{dialogData.dialogType}}_{{dialogData.layoutId}}\\\" ng-style=\\\"dialogLayout.defaultStyle.dialogStyle\\\" class=\\\"rbx-scrollbar dialog-body\\\" dialog-lazy-load focus-model=\\\"toggleDialogFocusStatus(true)\\\"> <ul class=\\\"dialog-messages\\\" ng-controller=\\\"dialogMessagesController\\\"> <li class=\\\"dialog-message-container\\\" ng-repeat=\\\"message in dialogData.chatMessages | reverse\\\" ng-class=\\\"{'message-inbound': message.senderTargetId != chatLibrary.userId && !message.isSystemMessage,'system-message': message.isSystemMessage,'message-cluster-master': message.isClusterMaster}\\\" ng-if=\\\"canRenderMessage(message) || shouldShowInvalidMessageTypePrompt(message)\\\" on-finish-render=\\\"ngRepeatFinished\\\"> <div class=\\\"indicated-message\\\" ng-hide=\\\"!message.displayTimeStamp\\\"> <span class=\\\"font-footer text-muted indicated-message-bubble\\\"> {{message.displayTimeStamp}} </span> </div> <a ng-href=\\\"{{chatLibrary.friendsDict[message.senderTargetId].profileUrl}}\\\" ng-hide=\\\"message.isSystemMessage\\\" class=\\\"avatar avatar-headshot-sm dialog-message-avatar-link\\\"> <span ng-if=\\\"message.senderTargetId != chatLibrary.userId\\\" class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image dialog-message-avatar\\\" chat-avatar-headshot user-id=\\\"{{message.senderTargetId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> </a> <div class=\\\"dialog-message-body\\\" ng-if=\\\"canRenderMessage(message)\\\"> <div ng-if=\\\"chatLibrary.friendsDict[message.senderTargetId]\\\" ng-show=\\\"message.isClusterMaster && message.senderTargetId != chatLibrary.userId\\\" class=\\\"xxsmall dialog-message-author\\\"> <span class=\\\"font-footer text-muted\\\" ng-bind=\\\"chatLibrary.friendsDict[message.senderTargetId].nameForDisplay\\\"></span> <span class=\\\"font-footer text-muted text-overflow\\\" alias=\\\"chatLibrary.friendsDict[message.senderTargetId].contact\\\"></span> <span class=\\\"typing\\\" ng-show=\\\"message.id == dialogLayout.typing.userTypingDict[message.senderTargetId].messageId\\\"></span> </div> <div class=\\\"dialog-message dialog-triangle\\\" ng-class=\\\"{'message-is-sending': message.sendingMessage}\\\" ng-hide=\\\"message.isSystemMessage\\\" ng-if=\\\"!message.hasLinkCard\\\"> <span class=\\\"dialog-message-content\\\"> <span class=\\\"message-piece\\\" ng-repeat=\\\"piece in message.pieces\\\" ng-bind-html=\\\"piece.content\\\"></span> </span> <span ng-show=\\\"message.canResend\\\" ng-click=\\\"resendMessage(message)\\\" class=\\\"icon-chat-resend\\\"></span> </div> <div ng-if=\\\"message.hasLinkCard\\\" link-card></div> <div class=\\\"xsmall text-date-hint dialog-sending\\\" ng-show=\\\"message.filteredForReceivers\\\" ng-bind=\\\"chatLibrary.errors.messageFilterForReceivers\\\"></div> <div class=\\\"text-error dialog-sending\\\" ng-show=\\\"message.sendMessageHasError\\\" ng-bind=\\\"message.error || ('Message.Error'|translate)\\\"></div> </div> <div class=\\\"indicated-message\\\" system-message></div> </li> </ul> </div> <div class=\\\"chat-loading loading-top\\\" ng-show=\\\"dialogLayout.isChatLoading\\\"> <span class=\\\"spinner spinner-sm\\\" title=\\\"{{'Label.SpanTitle.Loading'|translate}}\\\"></span> </div> <div class=\\\"border-top dialog-input-container\\\" ng-class=\\\"{'disabled': chatLibrary.chatLayout.errorMaskEnable}\\\" ng-style=\\\"dialogLayout.defaultStyle.inputStyle\\\"> <textarea msd-elastic focus-me=\\\"{{dialogLayout.focusMeEnabled && dialogData.layoutId === chatLibrary.chatLayout.focusedLayoutId}}\\\" placeholder=\\\"{{'Label.InputPlaceHolder.SendMessage'|translate}}\\\" ng-model=\\\"dialogData.messageForSend\\\" enter-escape-shift=\\\"keyPressEnter($event)\\\" ng-keypress=\\\"typing($event, true)\\\" ng-blur=\\\"typing($event, false)\\\" class=\\\"dialog-input\\\" rows=\\\"1\\\" input-max-length=\\\"{{dialogLayout.limitCharacterCount}}\\\" ng-disabled=\\\"chatLibrary.chatLayout.errorMaskEnable\\\" ng-style=\\\"dialogLayout.defaultStyle.inputTextStyle\\\" hinteractive hinteractive-domain=\\\"chat\\\"></textarea> </div> </div> <div abuse-report></div> <div confirm-negative-action chat-library=\\\"chatLibrary\\\" dialog-layout=\\\"dialogLayout\\\" confirm-callback=\\\"confirmCallBack()\\\"></div> <div details></div> </div>\";","module.exports = \"<div class=\\\"chat-placeholder-container\\\" ng-show=\\\"chatLibrary.chatPlaceholderEnabled\\\"> <div class=\\\"chat-placeholder-header\\\"></div> <span class=\\\"icon-chat-placeholder\\\"></span> </div>\";","module.exports = \"<div class=\\\"confirm-negative-action details-confirmation-container\\\" ng-show=\\\"dialogLayout.confirmDialog.isOpen\\\"> <div class=\\\"confirm-negative-action-container\\\"> <div class=\\\"chat-windows-header\\\"> <div class=\\\"chat-header-back\\\" ng-click=\\\"dialogLayout.confirmDialog.isOpen = false\\\"> <span class=\\\"icon-chat-back\\\"></span> </div> <div class=\\\"chat-header-label details-dialog-title\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span class=\\\"font-caption-header\\\">{{dialogLayout.confirmDialog.headerTitle}}</span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\" data-toggle=\\\"tooltip\\\" title=\\\"{{'Label.Close'|translate}}\\\"></span> </div> </div> <div class=\\\"details-negative-confirmation-body\\\"> <span class=\\\"small text details-negative-confirmation-text\\\">{{dialogLayout.confirmDialog.title}}</span> <div class=\\\"details-btns-fixed select-friends-btns\\\"> <button class=\\\"btn-control-sm details-btn-cancel\\\" ng-click=\\\"dialogLayout.confirmDialog.isOpen = false\\\"> {{dialogLayout.confirmDialog.cancelBtnName}} </button> <button id=\\\"negative-action-confirm-btn\\\" class=\\\"btn-alert-sm details-btn-save\\\" ng-click=\\\"confirmCallback()\\\"> {{dialogLayout.confirmDialog.btnName}} </button> </div> </div> </div> </div>\";","module.exports = \"<div class=\\\"details-header-container conversation-title-container\\\"> <div class=\\\"details-label conversation-title-icon\\\"> <span class=\\\"icon-chat-group-name\\\" ng-show=\\\"dialogData.dialogType === dialogType.NEWGROUPCHAT\\\"></span> <ul class=\\\"avatar-group card-plain chat-avatar-groups\\\" ng-show=\\\"dialogData.dialogType != dialogType.NEWGROUPCHAT\\\" ng-class=\\\"{'avatar-double': dialogData.userIds.length === 2,'avatar-triple' : dialogData.userIds.length === 3,'avatar-all' : dialogData.userIds.length >= 4}\\\"> <li ng-repeat=\\\"userId in dialogData.userIds | limitTo : 4\\\" class=\\\"avatar-item chat-avatar\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> </li> </ul> </div> <div class=\\\"border-bottom small details-input-container\\\" ng-show=\\\"dialogData.dialogType == dialogType.NEWGROUPCHAT\\\"> <input type=\\\"text\\\" focus-me=\\\"{{dialogLayout.focusMeEnabled}}\\\" class=\\\"small details-input conversation-title-input\\\" placeholder=\\\"{{'Label.NameYourChatGroup'|translate}}\\\" ng-model=\\\"dialogData.name\\\" maxlength=\\\"{{chatLibrary.maxConversationTitleLengthInput}}\\\"> </div> <div class=\\\"details-title conversation-title-content\\\" ng-click=\\\"toggleConversationEditor()\\\" ng-show=\\\"dialogData.dialogType != dialogType.NEWGROUPCHAT\\\"> <span class=\\\"small text conversation-title-label text-overflow\\\" ng-bind=\\\"dialogData.title\\\"></span> <span class=\\\"icon-chat-arrow-right\\\"></span> </div> </div>\";","module.exports = \"<div class=\\\"details-container conversation-title-editor-container\\\" ng-show=\\\"dialogLayout.details.isConversationTitleEditorEnabled\\\"> <div class=\\\"chat-windows-header\\\" ng-mouseenter=\\\"updateDialogHeader(true)\\\" ng-mouseleave=\\\"updateDialogHeader(false)\\\" ng-class=\\\"{'hover': dialogLayout.hoverOnCollapsed}\\\"> <div class=\\\"chat-header-back\\\" ng-click=\\\"toggleConversationEditor()\\\"> <span class=\\\"icon-chat-back\\\"></span> </div> <div class=\\\"chat-header-label details-dialog-title\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span class=\\\"font-caption-header\\\" ng-bind=\\\"'Label.ChatGroupName' | translate\\\"></span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> </div> </div> <div class=\\\"details-container conversation-title-editor-body\\\"> <div ng-bind=\\\"'Label.ChangeChatGroupName' | translate\\\" class=\\\"font-caption-body text conversation-title-editor-title\\\"> </div> <div class=\\\"conversation-title-editor-content\\\"> <textarea auto-resize rows=\\\"1\\\" maxlength=\\\"{{chatLibrary.maxConversationTitleLengthInput}}\\\" focus-me=\\\"{{dialogLayout.focusMeEnabled}}\\\" class=\\\"font-caption-body input-field details-input conversation-title-editor-textarea\\\" key-press-enter=\\\"renameTitle()\\\" ng-model=\\\"dialogData.name\\\">\\r\\n            </textarea> <span class=\\\"font-footer text-subheader conversation-title-editor-count\\\">{{dialogData.name.length}}/{{chatLibrary.maxConversationTitleLengthInput}}</span> </div> <div class=\\\"details-btns-fixed select-friends-btns\\\"> <button id=\\\"select-friends-cancel\\\" ng-bind=\\\"'Action.Cancel'|translate\\\" ng-click=\\\"toggleConversationEditor()\\\" class=\\\"btn-fixed-width btn-control-sm details-btn-cancel\\\"></button> <button id=\\\"select-friends-save\\\" ng-bind=\\\"'Action.Save'|translate\\\" class=\\\"btn-fixed-width btn-secondary-sm details-btn-save\\\" ng-click=\\\"renameTitle()\\\"></button> </div> </div> </div>\";","module.exports = \"<div class=\\\"dialog-container create-chat-container\\\" ng-class=\\\"{'collapsed': dialogLayout.collapsed}\\\" ng-controller=\\\"friendsController\\\"> <div class=\\\"chat-windows-header\\\"> <div class=\\\"chat-header-label chat-header-create-group\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span class=\\\"font-caption-header\\\">{{dialogLayout.title}}</span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> </div> </div> <div conversation-title></div> <div select-friends></div> <div class=\\\"details-btns-fixed select-friends-btns\\\"> <button id=\\\"select-friends-cancel\\\" ng-bind=\\\"'Action.Cancel'|translate\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\" class=\\\"btn-fixed-width btn-control-sm details-btn-cancel select-friends-cancel\\\"> </button> <button id=\\\"select-friends-save\\\" ng-bind=\\\"'Action.Create'|translate\\\" class=\\\"btn-fixed-width btn-secondary-sm btn-cta-sm details-btn-save select-friends-save\\\" ng-disabled=\\\"dialogLayout.inviteBtnDisabled\\\" ng-click=\\\"sendInvite()\\\"> </button> </div> </div>\";","module.exports = \"<div class=\\\"details-dialog-container\\\" ng-show=\\\"dialogLayout.details.isEnabled\\\" ng-controller=\\\"detailsController\\\"> <div class=\\\"details-dialog\\\" ng-class=\\\"{'collapsed': dialogLayout.collapsed}\\\" ng-hide=\\\"dialogLayout.details.isAddFriendsEnabled || dialogLayout.details.isConversationTitleEditorEnabled\\\"> <div class=\\\"chat-windows-header\\\" ng-mouseenter=\\\"updateDialogHeader(true)\\\" ng-mouseleave=\\\"updateDialogHeader(false)\\\" ng-class=\\\"{'hover': dialogLayout.hoverOnCollapsed}\\\"> <div class=\\\"chat-header-back\\\" ng-click=\\\"toggleDetails()\\\"> <span class=\\\"icon-chat-back\\\"></span> </div> <div class=\\\"chat-header-label details-dialog-title\\\" ng-click=\\\"toggleDialogContainer()\\\"> <span ng-bind=\\\"'Label.ChatDetails'| translate\\\" class=\\\"font-caption-header\\\"></span> </div> <div class=\\\"chat-header-action\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> </div> </div> <div id=\\\"scrollbar_details_{{dialogData.layoutId}}\\\" class=\\\"rbx-scrollbar details-container details-scrollbar\\\" details-scrollbar> <div class=\\\"xsmall border-bottom text-secondary details-general-label\\\" ng-if=\\\"dialogData.isGroupChat\\\" ng-bind=\\\"'Label.General'|translate\\\"> </div> <div conversation-title ng-if=\\\"dialogData.isGroupChat\\\"></div> <div class=\\\"xsmall border-top border-bottom text-secondary details-members-label font-footer text-muted\\\" ng-bind=\\\"'Label.Members' | translate\\\"></div> <div class=\\\"details-members-container\\\"> <div class=\\\"add-friends-option\\\"> <div class=\\\"add-friends-icon\\\" ng-click=\\\"toggleAddFriends()\\\"> <div class=\\\"add-friends-cirle-container\\\"> <span class=\\\"icon-chat-add-friends\\\"></span> </div> </div> <div class=\\\"small border-bottom text-sec add-friends-label\\\" ng-bind=\\\"'Label.AddFriends' | translate\\\" ng-click=\\\"toggleAddFriends()\\\"> </div> </div> <div id=\\\"group-members\\\" class=\\\"participant-list\\\"> <ul class=\\\"friends-list-container participant-list-container\\\"> <li ng-repeat=\\\"userId in dialogData.userIds | limitTo: dialogLayout.memberDisplay.limitNumber\\\" class=\\\"friend-item\\\" id=\\\"member-list-{{userId}}\\\"> <div class=\\\"friend-container\\\"> <a ng-href=\\\"{{chatLibrary.friendsDict[userId].profileUrl}}\\\" class=\\\"avatar avatar-headshot-sm friend-avatar\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image avatar\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"avatar-status avatar-status\\\" ng-class=\\\"userPresenceTypes[chatLibrary.friendsDict[userId].presence.userPresenceType]['className']\\\"> </div> </a> <div class=\\\"border-bottom friend-info-action\\\"> <div class=\\\"friend-info\\\"> <div class=\\\"friend-username dynamic-overflow-container no-wrap\\\"> <div class=\\\"small text-overflow text-sec friend-name dynamic-ellipsis-item\\\"> {{chatLibrary.friendsDict[userId].nameForDisplay}}</div> <div class=\\\"small text-overflow text-sec friend-alias dynamic-ellipsis-item\\\" alias=\\\"chatLibrary.friendsDict[userId].contact\\\"></div> </div> <div class=\\\"xsmall text-overflow friend-status\\\"> {{userPresenceTypes[chatLibrary.friendsDict[userId].presence.userPresenceType].title}} </div> </div> <div class=\\\"friend-action\\\" ng-show=\\\"userId !== chatLibrary.userId\\\"> <div class=\\\"friend-action-more-option more-options-{{dialogData.layoutId}}\\\" click-outside=\\\"toggleFriendsMenu(userId, true)\\\" ng-click=\\\"toggleFriendsMenu(userId)\\\"> <span class=\\\"icon-chat-more-options\\\"></span> </div> <div class=\\\"friend-menu\\\" ng-class=\\\"{'three-items': canConversationRemoveMember() }\\\" ng-show=\\\"dialogLayout.details.friendIdForMenuOn == userId && dialogLayout.details.friendMenuAction[userId]\\\"> <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\" ng-show=\\\"dialogLayout.details.friendIdForMenuOn == userId && dialogLayout.details.friendMenuAction[userId]\\\"> <li> <a id=\\\"add-friends-{{userId}}\\\" ng-href=\\\"{{chatLibrary.friendsDict[userId].profileUrl}}\\\" ng-click=\\\"toggleFriendsMenu(userId)\\\" ng-bind=\\\"'Label.ViewProfile' | translate\\\" class=\\\"font-caption-header\\\"></a> </li> <li> <a id=\\\"abuse-report-{{userId}}\\\" ng-click=\\\"abuseReport(userId, false); toggleFriendsMenu(userId)\\\" class=\\\"font-caption-header\\\" ng-bind=\\\"'Action.Report' | translate\\\"></a> </li> <li ng-if=\\\"canConversationRemoveMember()\\\"> <a id=\\\"remove-member-{{userId}}\\\" ng-click=\\\"removeMember(userId, false); toggleFriendsMenu(userId)\\\" class=\\\"font-caption-header\\\" ng-bind=\\\"'Action.Remove' | translate\\\"></a> </li> </ul> </div> </div> </div> </div> </li> <li class=\\\"participant-list-action\\\" ng-show=\\\"dialogData.userIds.length > dialogLayout.memberDisplay.defaultLimit\\\"> <a class=\\\"small text-link\\\" ng-click=\\\"toggleMemberList()\\\">{{dialogLayout.memberDisplay.linkName}}</a> </li> </ul> </div> </div> <div class=\\\"details-btns\\\"> <button id=\\\"leave-group\\\" ng-click=\\\"leaveGroupChat(false)\\\" class=\\\"btn-full-width btn-alert-sm select-friends-cancel\\\" ng-if=\\\"dialogData.dialogType !== dialogType.CHAT && dialogData.isGroupChat\\\" ng-bind=\\\"'Label.LeaveChatGroup' | translate\\\"></button> </div> </div> </div> <div add-friends></div> <div conversation-title-editor></div> </div>\";","module.exports = \"<div class=\\\"chat-header-action\\\" ng-controller=\\\"dialogHeaderController\\\"> <span class=\\\"icon-chat-close-white\\\" ng-click=\\\"closeDialog({layoutId: dialogData.layoutId})\\\"></span> <span class=\\\"icon-chat-info-white\\\" id=\\\"dialog-info\\\" uib-tooltip=\\\"{{'Label.ChatDetails'| translate}}\\\" tooltip-placement=\\\"bottom\\\" ng-click=\\\"toggleDetails()\\\" ng-hide=\\\"dialogLayout.collapsed || chatLibrary.chatLayout.errorMaskEnable\\\"></span> <span id=\\\"play-together-{{dialogData.id}}\\\" class=\\\"cursor-pointer dialog-header-active-game\\\" ng-if=\\\"isPinOrActiveGameAvailable()\\\" ng-hide=\\\"dialogLayout.collapsed || chatLibrary.chatLayout.errorMaskEnable\\\" ng-click=\\\"openGameList()\\\" popover-trigger=\\\" 'none' \\\" popover-class=\\\"game-list-in-dialog\\\" popover-placement=\\\"bottom-right\\\" popover-append-to-body=\\\"false\\\" popover-is-open=\\\"dialogLayout.togglePopoverParams.isOpen\\\" uib-popover-template=\\\"'{{gamesListTemplateUrl}}'\\\" toggle-popover> <span chat-game-icon class-name=\\\"dialog-header-active-game-image\\\" ng-if=\\\"dialogData.placeForShown.universeId\\\" universe-id=\\\"{{dialogData.placeForShown.universeId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"></span> </span> <span id=\\\"play-together-{{dialogData.id}}\\\" class=\\\"cursor-pointer dialog-header-active-game\\\" ng-if=\\\"!isPinOrActiveGameAvailable() && isMyRecentGameAvailable()\\\" ng-hide=\\\"dialogLayout.collapsed || chatLibrary.chatLayout.errorMaskEnable\\\" ng-click=\\\"openGameList()\\\" popover-trigger=\\\" 'none' \\\" popover-class=\\\"game-list-in-dialog\\\" popover-placement=\\\"bottom-right\\\" popover-append-to-body=\\\"false\\\" popover-is-open=\\\"dialogLayout.togglePopoverParams.isOpen\\\" uib-popover-template=\\\"'{{gamesListTemplateUrl}}'\\\" toggle-popover> <span chat-game-icon class-name=\\\"dialog-header-active-game-image\\\" ng-if=\\\"chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].universeId\\\" universe-id=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].universeId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"></span> </span> </div>\";","module.exports = \"<div id=\\\"dialogs-minimize-container\\\" class=\\\"dialogs-minimize-container\\\" ng-show=\\\"hasMinimizedDialogs\\\" data-toggle=\\\"popover\\\" data-bind=\\\"dialogs\\\"> <span class=\\\"icon-chat-more-dialogs\\\"></span> <span class=\\\"font-header-2 minimize-count\\\">{{chatLibrary.minimizedDialogIdList.length}}</span> <div class=\\\"rbx-popover-content\\\" data-toggle=\\\"dialogs\\\"> <ul class=\\\"dropdown-menu minimize-list\\\" role=\\\"menu\\\"> <li ng-repeat=\\\"dialogLayoutId in chatLibrary.minimizedDialogIdList\\\" class=\\\"minimize-item\\\" id=\\\"{{dialogLayoutId}}\\\" minimize-item> <a class=\\\"text-overflow minimize-title\\\"> <span> {{chatLibrary.minimizedDialogData[dialogLayoutId].name}} </span> </a> <span class=\\\"icon-chat-close-black minimize-close\\\"></span> </li> </ul> </div> </div>\";","module.exports = \"<div> <span ng-show=\\\"chatUser.displayMessage.messageType === messageHelper.messageTypes.link.name\\\" ng-bind=\\\"chatLibrary.universeLibrary[chatUser.displayMessage.link.game.universeId].placeUrl\\\"> </span> <span ng-show=\\\"chatUser.displayMessage.messageType === messageHelper.messageTypes.plainText.name && !chatUser.displayMessage.hasLinkifyMessage\\\" title=\\\"{{chatUser.displayMessage.messageType}}\\\" ng-bind-html=\\\"chatUser.displayMessage.content\\\"></span> <span ng-show=\\\"chatUser.displayMessage.messageType === messageHelper.messageTypes.plainText.name && chatUser.displayMessage.hasLinkifyMessage\\\" title=\\\"{{chatUser.displayMessage.messageType}}\\\" ng-bind=\\\"chatUser.displayMessage.parsedContent\\\"></span> </div>\";","module.exports = \"<div ng-controller=\\\"playTogetherController\\\"> <div class=\\\"game-item-container pinned-game-container\\\" ng-class=\\\"{'has-active-game': hasPinGameAndActiveGames()}\\\" ng-show=\\\"playTogether.pinGame && playTogether.pinGame.rootPlaceId\\\"> <a ng-href=\\\"{{chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].placeUrl}}\\\" class=\\\"text-title game-link\\\"> <span chat-game-icon class-name=\\\"game-icon\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" ng-if=\\\"chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].universeId\\\" universe-id=\\\"{{chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].universeId}}\\\" title=\\\"{{chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].placeName}}\\\"></span> </a> <div class=\\\"game-details pinned-game-details\\\"> <div class=\\\"pinned-game-header\\\"> <span class=\\\"pin-icon icon-chat-unpin\\\" ng-click=\\\"unPinGame()\\\" uib-tooltip=\\\"{{pinGameLayout.tooltipForUnPinGame}}\\\" tooltip-placement=\\\"bottom-right\\\"></span> </div> <div class=\\\"text-overflow small text-title game-name\\\"> <a ng-href=\\\"{{chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].placeUrl}}\\\" class=\\\"text-title game-link\\\"> {{chatLibrary.placesLibrary[playTogether.pinGame.rootPlaceId].placeName}} </a> </div> <div class=\\\"game-info pinned-game-info\\\"> <ul class=\\\"game-players\\\"> <li ng-repeat=\\\"userId in playTogether.playTogetherDict[playTogether.pinGame.rootPlaceId].playerIds | limitTo: playTogetherLayout.numberOfMembers.inPinnedGame\\\" class=\\\"avatar avatar-headshot-sm card-plain game-player\\\" title=\\\"{{chatLibrary.friendsDict[userId].nameForDisplay}}\\\"> <span uib-tooltip=\\\"{{chatLibrary.friendsDict[userId].nameForDisplay}}\\\" tooltip-placement=\\\"bottom\\\" tooltip-append-to-body=\\\"true\\\" class=\\\"avatar-card-image game-player-avatar\\\" class=\\\"chat-avatar-headshot\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"avatar-status game-player-presence\\\" ng-class=\\\"userPresenceTypes[chatLibrary.friendsDict[userId].presence.userPresenceType]['className']\\\"> </div> </li> <li ng-show=\\\"playTogether.playTogetherDict[playTogether.pinGame.rootPlaceId].playerIds.length > playTogetherLayout.numberOfMembers.inPinnedGame\\\" class=\\\"font-caption-body text-secondary game-player-plus\\\" ng-cloak> +{{playTogether.playTogetherDict[playTogether.pinGame.rootPlaceId].playerIds.length - playTogetherLayout.numberOfMembers.inPinnedGame}} </li> </ul> <button type=\\\"button\\\" class=\\\"{{playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId].className}} game-btn\\\" ng-class=\\\"{'invisible' : !playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId]}\\\" ng-click=\\\"joinGameFromPlayTogether(playTogether.pinGame.rootPlaceId)\\\" ng-if=\\\"playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId].type != gameLayout.playButtonTypes.notAvailable\\\"> {{playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId].text}} </button> <span class=\\\"xsmall text-label game-non-available\\\" ng-if=\\\"playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId].type == gameLayout.playButtonTypes.notAvailable\\\"> {{playTogether.placeButtonLayout[playTogether.pinGame.rootPlaceId].text}} </span> </div> </div> </div> <div class=\\\"game-list-container\\\" ng-class=\\\"{'has-pin-game-above': hasPinGameAndActiveGames(),'overflow': (playTogetherLayout.activeGamesList.limitNumber >= playTogetherLayout.activeGamesList.maxNumberForFit)}\\\" ng-show=\\\"hasActiveGames()\\\"> <ul id=\\\"active-game-list\\\" ng-class=\\\"{'rbx-scrollbar': playTogether.inDialog}\\\" class=\\\"active-game-list\\\"> <li ng-repeat=\\\"placeId in playTogether.playTogetherIds | limitTo: playTogetherLayout.activeGamesList.limitNumber\\\" ng-if=\\\"placeId != playTogether.pinGame.rootPlaceId\\\" repeat-done class=\\\"game-item-container active-game-container\\\"> <a ng-href=\\\"{{chatLibrary.placesLibrary[placeId].placeUrl}}\\\" class=\\\"text-title game-link\\\"> <div chat-game-icon class=\\\"chat-game-icon\\\" class-name=\\\"game-icon\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" ng-if=\\\"chatLibrary.placesLibrary[placeId].universeId\\\" universe-id=\\\"{{chatLibrary.placesLibrary[placeId].universeId}}\\\" title=\\\"{{chatLibrary.placesLibrary[placeId].placeName}}\\\"></div> </a> <div class=\\\"border-bottom game-details active-game-details\\\"> <div class=\\\"game-title-container\\\"> <div class=\\\"text-overflow small text-title game-name\\\"> <a ng-href=\\\"{{chatLibrary.placesLibrary[placeId].placeUrl}}\\\"> {{chatLibrary.placesLibrary[placeId].placeName}} </a> </div> <span class=\\\"pin-icon active-game-pin-icon icon-chat-pin\\\" ng-click=\\\"pinGame(chatLibrary.placesLibrary[placeId].universeId, chatLibrary.placesLibrary[placeId].rootPlaceId)\\\" uib-tooltip=\\\"Pin Game\\\" tooltip-placement=\\\"bottom-right\\\"></span> </div> <div class=\\\"game-info active-game-info\\\"> <ul class=\\\"game-players\\\"> <li ng-repeat=\\\"userId in playTogether.playTogetherDict[placeId].playerIds | limitTo: playTogetherLayout.numberOfMembers.inActiveGame\\\" class=\\\"avatar avatar-headshot-sm card-plain game-player\\\" title=\\\"{{chatLibrary.friendsDict[userId].nameForDisplay}}\\\"> <div uib-tooltip=\\\"{{chatLibrary.friendsDict[userId].nameForDisplay}}\\\" tooltip-placement=\\\"bottom\\\" tooltip-append-to-body=\\\"true\\\" class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image game-player-avatar\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </div> <div class=\\\"avatar-status game-player-presence\\\" ng-class=\\\"userPresenceTypes[chatLibrary.friendsDict[userId].presence.userPresenceType]['className']\\\"> </div> </li> <li ng-show=\\\"playTogether.playTogetherDict[placeId].playerIds.length > playTogetherLayout.numberOfMembers.inActiveGame\\\" class=\\\"font-caption-body text-secondary game-player-plus\\\" ng-cloak> +{{playTogether.playTogetherDict[placeId].playerIds.length - playTogetherLayout.numberOfMembers.inActiveGame}} </li> </ul> <button type=\\\"button\\\" class=\\\"{{playTogether.placeButtonLayout[placeId].className}} game-btn\\\" ng-class=\\\"{'invisible' : !playTogether.placeButtonLayout[placeId]}\\\" ng-if=\\\"playTogether.placeButtonLayout[placeId].type != gameLayout.playButtonTypes.notAvailable\\\" ng-click=\\\"joinGameFromPlayTogether(placeId)\\\"> {{playTogether.placeButtonLayout[placeId].text}} </button> <span class=\\\"xsmall text-label game-non-available\\\" ng-if=\\\"playTogether.placeButtonLayout[placeId].type == gameLayout.playButtonTypes.notAvailable\\\"> {{playTogether.placeButtonLayout[placeId].text}} </span> </div> </div> </li> </ul> <div class=\\\"cursor-pointer border-top is-exclusive-click active-game-toggle-menu\\\" ng-click=\\\"toggleActiveGameList()\\\" ng-if=\\\"playTogetherLayout.numberOfActiveGames > 1\\\" ng-class=\\\"{'collapsed': playTogetherLayout.activeGamesList.isCollapsed}\\\"> <span class=\\\"xsmall text is-exclusive-click toggle-menu-text\\\">{{playTogetherLayout.activeGamesList.toggleMenuText}}</span> </div> </div> <div class=\\\"game-list-container\\\" ng-show=\\\"isMyRecentAvaliable()\\\"> <div class=\\\"game-item-container recommended-game-container\\\"> <a ng-href=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].gameReferralUrl}}\\\" class=\\\"text-title game-link\\\"> <span chat-game-icon class-name=\\\"game-icon\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" ng-if=\\\"chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].universeId\\\" universe-id=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].universeId}}\\\" title=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].placeName}}\\\"></span> </a> <div class=\\\"game-details recommended-game-details\\\"> <div class=\\\"game-title-container\\\"> <a class=\\\"text-overflow small text-title game-name\\\" ng-href=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].gameReferralUrl}}\\\"> {{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].placeName}} </a> <span class=\\\"small text-label font-caption-body\\\">{{playTogetherLayout.recommendedLabel}}</span> </div> <div class=\\\"game-info recommended-game-info\\\"> <button type=\\\"button\\\" class=\\\"{{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].buttonLayoutForMe.className}} game-btn\\\" ng-class=\\\"{'invisible' : !chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].buttonLayoutForMe}\\\" ng-click=\\\"playGame(chatLibrary.myRecentPlaceId)\\\"> {{chatLibrary.placesLibrary[chatLibrary.myRecentPlaceId].buttonLayoutForMe.text}} </button> </div> </div> </div> </div> </div>\";","module.exports = \"<div id=\\\"link-card\\\" ng-controller=\\\"linkCardMessagesController\\\"> <div class=\\\"link-card-msg-wrap\\\" ng-repeat=\\\"pieceOfMessage in linkCardMessages\\\" ng-controller=\\\"linkCardController\\\" ng-init=\\\"sendLoadLinkCardEvent(pieceOfMessage.id)\\\"> <div class=\\\"dialog-message dialog-message-content dialog-triangle\\\" ng-class=\\\"{'message-is-sending': message.sendingMessage}\\\" ng-hide=\\\"pieceOfMessage.isLinkCard\\\" ng-if=\\\"!pieceOfMessage.isCard || (pieceOfMessage.isCard && chatLibrary.placesLibrary[pieceOfMessage.id].isInvalid)\\\"> <span class=\\\"message-piece font-caption-body text-emphasis\\\" ng-repeat=\\\"piece in pieceOfMessage.pieces\\\" ng-bind-html=\\\"piece.content\\\"></span> </div> <div class=\\\"cursor-pointer border dialog-triangle link-card-container\\\" ng-if=\\\"isLinkCardAvailableAndParsedByClientSide(pieceOfMessage) && (chatLibrary.placesLibrary[pieceOfMessage.id] || !chatLibrary.placesLibrary[pieceOfMessage.id].isInvalid)\\\"> <div class=\\\"link-card-top-container\\\"> <div class=\\\"small font-caption-header text-title text-overflow link-card-title\\\" title=\\\"{{chatLibrary.placesLibrary[pieceOfMessage.id].placeName}}\\\" ng-bind=\\\"chatLibrary.placesLibrary[pieceOfMessage.id].placeName\\\" ng-click=\\\"goToPlaceDetails(pieceOfMessage.id, chatLibrary.eventStreamParams.clickLinkCardInChat)\\\"> </div> <span class=\\\"link-card-pin-icon icon-chat-pin\\\" ng-class=\\\"{'on': pieceOfMessage.id == dialogData.pinGame.rootPlaceId}\\\" ng-click=\\\"pinGame(chatLibrary.placesLibrary[pieceOfMessage.id].universeId, pieceOfMessage.id)\\\" uib-tooltip=\\\"{{pinGameLayout.tooltipForPinGame}}\\\" tooltip-placement=\\\"bottom-right\\\"></span> </div> <div class=\\\"link-card-details\\\" ng-click=\\\"goToPlaceDetails(pieceOfMessage.id, chatLibrary.eventStreamParams.clickLinkCardInChat)\\\"> <span chat-game-icon class=\\\"chat-game-icon link-card-thumb\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" universe-id=\\\"{{chatLibrary.placesLibrary[pieceOfMessage.id].universeId}}\\\" ng-if=\\\"chatLibrary.placesLibrary[pieceOfMessage.id].universeId\\\"></span> <p class=\\\"xsmall text-secondary link-card-description\\\" ng-bind=\\\"chatLibrary.placesLibrary[pieceOfMessage.id].description\\\"></p> </div> <button class=\\\"{{chatLibrary.placesLibrary[pieceOfMessage.id].buttonLayoutForLinkCard.className}} btn-full-width link-card-btn\\\" ng-class=\\\"{'invisible' : !chatLibrary.placesLibrary[pieceOfMessage.id].buttonLayoutForLinkCard}\\\" ng-click=\\\"play(pieceOfMessage.id, chatLibrary.eventStreamParams.clickPlayFromLinkCardInChat, pieceOfMessage.assetDetails)\\\" ng-disabled=\\\"dialogLayout.playTogetherButton.isPlayButtonDisabled\\\"> {{chatLibrary.placesLibrary[pieceOfMessage.id].buttonLayoutForLinkCard.text}} </button> </div> <div class=\\\"cursor-pointer border dialog-triangle link-card-container\\\" ng-if=\\\"pieceOfMessage.isLinkCard && chatLibrary.universeLibrary[pieceOfMessage.universeId]\\\"> <div class=\\\"link-card-top-container\\\"> <div class=\\\"small font-caption-header text-title text-overflow link-card-title\\\" title=\\\"{{chatLibrary.universeLibrary[pieceOfMessage.universeId].placeName}}\\\" ng-bind=\\\"chatLibrary.universeLibrary[pieceOfMessage.universeId].placeName\\\" ng-click=\\\"goToPlaceDetails(chatLibrary.universeLibrary[pieceOfMessage.universeId].placeId, chatLibrary.eventStreamParams.clickLinkCardInChat)\\\"> </div> <span class=\\\"link-card-pin-icon icon-chat-pin\\\" ng-class=\\\"{'on': chatLibrary.universeLibrary[pieceOfMessage.universeId].placeId == dialogData.pinGame.rootPlaceId}\\\" ng-click=\\\"pinGame(pieceOfMessage.universeId, chatLibrary.universeLibrary[pieceOfMessage.universeId].placeId)\\\" uib-tooltip=\\\"{{pinGameLayout.tooltipForPinGame}}\\\" tooltip-placement=\\\"bottom-right\\\"></span> </div> <div class=\\\"link-card-details\\\" ng-click=\\\"goToPlaceDetails(chatLibrary.universeLibrary[pieceOfMessage.universeId].placeId, chatLibrary.eventStreamParams.clickLinkCardInChat)\\\"> <span chat-game-icon class=\\\"chat-game-icon link-card-thumb\\\" ng-if=\\\"pieceOfMessage.universeId\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" universe-id=\\\"{{pieceOfMessage.universeId}}\\\"></span> <p class=\\\"xsmall text-secondary link-card-description\\\" ng-bind=\\\"chatLibrary.universeLibrary[pieceOfMessage.universeId].description\\\"></p> </div> <button class=\\\"{{chatLibrary.universeLibrary[pieceOfMessage.universeId].buttonLayoutForLinkCard.className}} btn-full-width link-card-btn\\\" ng-class=\\\"{'invisible' : !chatLibrary.universeLibrary[pieceOfMessage.universeId].buttonLayoutForLinkCard}\\\" ng-click=\\\"play(chatLibrary.universeLibrary[pieceOfMessage.universeId].placeId, chatLibrary.eventStreamParams.clickPlayFromLinkCardInChat)\\\" ng-disabled=\\\"dialogLayout.playTogetherButton.isPlayButtonDisabled\\\"> {{chatLibrary.universeLibrary[pieceOfMessage.universeId].buttonLayoutForLinkCard.text}} </button> </div> </div> </div>\";","module.exports = \"<div class=\\\"select-friends-container\\\"> <div class=\\\"border-bottom details-header-container select-friends-header\\\"> <div class=\\\"details-label select-friends-label\\\"> <span class=\\\"icon-chat-group-label\\\"></span> </div> <div class=\\\"small details-input-container select-friends-search\\\" ng-class=\\\"{'group-select-container' : dialogData.selectedUserIds.length > 0}\\\" select-friends-resize> <ul class=\\\"friends-selected-list\\\" ng-show=\\\"dialogData.selectedUserIds.length > 0\\\"> <li class=\\\"friends-selected-item friends-selected-placeholder invisible\\\"> </li> <li class=\\\"avatar avatar-headshot-sm card-plain friends-selected-item\\\" ng-repeat=\\\"userId in dialogData.selectedUserIds\\\" ng-click=\\\"selectFriends(userId)\\\" ng-hide=\\\"dialogData.selectedUsersDict[userId].hiddenFromSelection\\\" title=\\\"{{dialogData.selectedUsersDict[userId].nameForDisplay}}\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image avatar\\\" chat-avatar-headshot user-id=\\\"{{userId}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"friends-selected-mask\\\"> <span class=\\\"icon-chat-close-white\\\"></span> </div> </li> </ul> <input type=\\\"text\\\" placeholder=\\\"{{'Label.InputPlaceHolder.SearchForFriends'|translate}}\\\" class=\\\"small details-input select-friends-input\\\" ng-model=\\\"dialogData.searchTerm\\\"/> <span class=\\\"xsmall text-secondary select-friends-count\\\" ng-if=\\\"dialogData.dialogType === dialogType.GROUPCHAT\\\"> ({{(dialogData.selectedUserIds.length)}}/{{chatLibrary.quotaOfGroupChatMembers - dialogData.userIds.length + 1}}) </span> <span class=\\\"xsmall text-secondary select-friends-count\\\" ng-if=\\\"dialogData.dialogType === dialogType.NEWGROUPCHAT || dialogData.dialogType === dialogType.CHAT\\\"> ({{(dialogData.selectedUserIds.length)}}/{{chatLibrary.quotaOfGroupChatMembers - dialogData.userIds.length}}) </span> </div> </div> <div> <div id=\\\"scrollbar_friend_{{dialogData.dialogType}}_{{dialogData.layoutId}}\\\" class=\\\"rbx-scrollbar select-friends-list\\\" friends-lazy-load> <ul class=\\\"friends-list-container\\\"> <li ng-repeat=\\\"friend in chatLibrary.friendsDict | orderList: dialogData.friendIds  | filter: search\\\" class=\\\"friend-item\\\" id=\\\"friend-{{friend.id}}\\\"> <div class=\\\"friend-container chat-friend-select\\\"> <div class=\\\"avatar avatar-headshot-sm card-plain friend-avatar\\\" ng-click=\\\"toggleFriendSelection(friend.id)\\\"> <span class=\\\"chat-avatar-headshot\\\" class-name=\\\"avatar-card-image avatar\\\" chat-avatar-headshot user-id=\\\"{{friend.id}}\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\"> </span> <div class=\\\"avatar-status avatar-status\\\" ng-class=\\\"userPresenceTypes[friend.presence.userPresenceType]['className']\\\"></div> </div> <div class=\\\"border-bottom friend-info-action\\\" ng-click=\\\"toggleFriendSelection(friend.id)\\\"> <div class=\\\"text-overflow friend-info\\\"> <div class=\\\"dynamic-overflow-container no-wrap\\\"> <div class=\\\"small text-overflow text-sec friend-name dynamic-ellipsis-item\\\"> {{friend.nameForDisplay}}</div> <div class=\\\"small text-overflow text-sec friend-alias dynamic-ellipsis-item\\\" alias=\\\"friend.contact\\\"></div> </div> <div class=\\\"xsmall text-overflow text-secondary friend-status\\\"> {{userPresenceTypes[friend.presence.userPresenceType].title}}</div> </div> <div class=\\\"checkbox friend-action\\\"> <input id=\\\"checkbox-select-{{dialogData.layoutId}}-{{friend.id}}\\\" type=\\\"checkbox\\\" ng-click=\\\"toggleFriendSelection(friend.id, $event)\\\" ng-checked=\\\"dialogData.selectedUsersDict[friend.id]\\\"> <label for=\\\"checkbox-select-{{dialogData.layoutId}}-{{friend.id}}\\\"> </label> </div> </div> </div> </li> </ul> </div> <div toast toast-layout=\\\"toastLayout\\\"></div> </div> </div>\";","module.exports = \"<div> <span class=\\\"indicated-message-bubble system-message-content\\\" ng-show=\\\"message.isSystemMessageFromApi\\\"> <div class=\\\"font-footer text-muted\\\" ng-if=\\\"message.eventBased.type === messageHelper.messageTypes.eventBased.setConversationUniverse\\\" ng-bind=\\\"'Message.PinGameUpdate' | translate:{userName: chatLibrary.friendsDict[message.eventBased.setConversationUniverse.actorUserId].nameForDisplay, \\r\\n                                                                    gameName: chatLibrary.universeLibrary[message.eventBased.setConversationUniverse.universeId].placeName}\\\"> </div> </span> <div ng-hide=\\\"message.isSystemMessageFromApi\\\"> <span class=\\\"font-footer text-muted indicated-message-bubble system-message-content\\\" ng-show=\\\"message.isSystemMessage && !message.hasParams\\\" ng-bind-html=\\\"message.content\\\"></span> <span class=\\\"font-footer text-muted indicated-message-bubble system-message-content\\\" ng-show=\\\"message.isSystemMessage && message.hasParams\\\">{{chatLibrary.friendsDict[dialogData.recentUserIdFromPresence].name}}{{message.content}}{{chatLibrary.placesLibrary[dialogData.recentPlaceIdFromPresence].placeName}}</span> </div> </div>\";","module.exports = \"<div ng-controller=\\\"userConversationInfoController\\\"> <div class=\\\"border-bottom chat-friend-info\\\" ng-class=\\\"{'has-universe': isGameAvailableInChat()}\\\"> <div class=\\\"chat-friend-info-top dynamic-overflow-container\\\"> <span class=\\\"small text-title text-overflow font-caption-header chat-friend-name dynamic-ellipsis-item\\\" ng-class=\\\"{'unread': chatUser.hasUnreadMessages, 'read': !chatUser.hasUnreadMessages}\\\" ng-bind=\\\"chatUser.title  || chatUser.name \\\"></span> <span class=\\\"text-overflow chat-alias-name dynamic-ellipsis-item\\\" ng-class=\\\"{'unread': chatUser.hasUnreadMessages, 'read': !chatUser.hasUnreadMessages}\\\" alias=\\\"chatLibrary.friendsDict[chatUser.displayUserId].contact\\\"></span> </div> <span class=\\\"xsmall text-info chat-brief-timestamp\\\" ng-class=\\\"{'font-bold secondary unread': chatUser.hasUnreadMessages, 'read': !chatUser.hasUnreadMessages}\\\" ng-if=\\\"!isGameAvailableInChat()\\\" ng-bind=\\\"chatUser.displayMessage.briefTimeStamp || chatUser.briefTimeStamp\\\"></span> <span class=\\\"xsmall text-overflow text-info font-caption-body chat-friend-message\\\" ng-class=\\\"{'unread': chatUser.hasUnreadMessages, 'read': !chatUser.hasUnreadMessages}\\\" display-message ng-if=\\\"chatUser.isConversation && chatUser.displayMessage\\\"></span> <span class=\\\"xsmall text-overflow text-info font-caption-body chat-friend-message\\\" ng-if=\\\"!chatUser.isConversation\\\">{{userPresenceTypes[chatUser.presence.userPresenceType].title}}</span> </div> <div class=\\\"border-bottom chat-conversation-universe\\\" ng-if=\\\"isGameAvailableInChat()\\\" title=\\\"{{chatLibrary.placesLibrary[chatUser.placeForShown.rootPlaceId].placeName}}\\\" ng-class=\\\"{'album': hasGameAlbum()}\\\" ng-mouseover=\\\"openGameList()\\\" popover-trigger=\\\" 'none' \\\" popover-class=\\\"game-list-per-conversation game-list-{{chatUser.id}}\\\" popover-placement=\\\"left-bottom\\\" popover-append-to-body=\\\"true\\\" popover-is-open=\\\"hoverPopoverParams.isOpen\\\" hover-popover-params=\\\"hoverPopoverParams\\\" hover-popover uib-popover-template=\\\"'{{gamesListTemplateUrl}}'\\\"> <span chat-game-icon class-name=\\\"universe-image\\\" layout-library=\\\"chatLibrary.layoutLibrary\\\" ng-if=\\\"chatUser.placeForShown.universeId\\\" universe-id=\\\"{{chatUser.placeForShown.universeId}}\\\"></span> </div> </div>\";","module.exports = Roblox;","module.exports = angular;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import angular from 'angular';\r\nimport { importFilesUnderPath, templateCacheGenerator } from 'roblox-es6-migration-helper';\r\n\r\nimport '../../../css/chat/chat.scss';\r\n\r\n// import main module definition.\r\nimport chatModule from './chatModule';\r\n\r\nimportFilesUnderPath(require.context('./constants/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./directives/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./controllers/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./services/', true, /\\.js$/));\r\n\r\nconst chatTemplateContext = require.context('./', true, /\\.html$/);\r\n\r\nconst templates = templateCacheGenerator(angular, 'chatAppTemplates', chatTemplateContext);\r\n\r\n// self manual initialization\r\nangular.element(function() {\r\n  angular.bootstrap('#chat-container', [chatModule.name, templates.name]);\r\n});\r\n"],"sourceRoot":""}