{"version":3,"sources":["webpack:///./js/angular/captcha/components|sync|/.js$","webpack:///./js/angular/captcha/constants|sync|/.js$","webpack:///./js/angular/captcha/controllers|sync|/.js$","webpack:///./js/angular/captcha/services|sync|/.js$","webpack:///./js/angular/captcha/values|sync|/.js$","webpack:///./js/angular/captcha|sync|/.html$","webpack:///../Roblox.App.Configuration/Roblox_modules/roblox-es6-migration-helper/index.js","webpack:///./js/angular/captcha/captchaV2Module.js","webpack:///./js/angular/captcha/components/captchaComponent.js","webpack:///./js/angular/captcha/constants/captchaV2Constants.js","webpack:///./js/angular/captcha/controllers/captchaV2Controller.js","webpack:///./js/angular/captcha/services/captchaV2Service.js","webpack:///./js/angular/captcha/services/funCaptchaService.js","webpack:///./js/angular/captcha/values/captchaIdValue.js","webpack:///./js/jquery/captcha/appCaptcha.js","webpack:///./js/jquery/captcha/services/captchaService.js","webpack:///./js/jquery/captcha/appCaptchaEntry.js","webpack:///./js/jquery/captcha/constants/captchaConstants.js","webpack:///./js/jquery/captcha/services/captchaLogger.js","webpack:///./js/jquery/captcha/services/funCaptchaService.js","webpack:///./js/angular/captcha/components/templates/captcha.html","webpack:///external \"Roblox\"","webpack:///external \"angular\"","webpack:///external \"jQuery\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./js/angular/captcha/captchaV2Entry.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","camelToKebab","str","replace","toLowerCase","extractHtmlFileName","split","pop","ES6MigrationHelper","importFilesUnderPath","ctx","forEach","templateCacheGenerator","angular","moduleName","mainTplCtx","commonTplCtx","run","tc","key","name","put","captchaV2","captchaV2Component","templateUrl","bindings","controller","captchaV2Constants","urls","getMetadata","EnvironmentUrls","funCaptchaRedeem","WebSignup","AppSignup","WebLogin","AppLogin","WebResetPassword","UserAction","WebGamecardRedemption","captchaActionTypes","login","appLogin","signup","appSignup","groupJoin","groupWallPost","resetPassword","toyCodeRedeem","supportRequest","followUser","funCaptchaCaptchaTypes","funCaptchaPublicKeyMap","Login","Signup","JoinGroup","GroupWallPost","ResetPassword","ToyCodeRedeem","SupportRequest","FollowUser","funCaptchaEvents","reject","shown","captchaProviders","arkoseLabs","errorCodes","internal","unknown","missingPrivateKey","missingActionType","failedToLoadProviderScript","failedToVerify","captchaV2Controller","captchaV2Service","funCaptchaService","$scope","ctrl","this","active","lastActivated","captchaEnded","activated","captchaShown","$apply","hideCaptcha","captchaDismissed","getCaptchaClasses","$onInit","returnTokenInSuccessCb","successCb","getCaptchaId","eventData","captchaId","captchaData","constructor","String","token","unifiedCaptchaId","captchaToken","captchaProvider","captchaPassed","render","captchaActionType","inputParams","extraValidationParams","then","errorCode","captchaFailed","$doCheck","bind","$q","httpService","captchaIdCounter","metadataCache","urlConfig","url","httpGet","response","$log","$window","fireEvent","funCaptchaType","eventName","data","events","hasOwnProperty","event","handle","addEvent","handler","push","clearEvents","metadata","publicKeys","funCaptchaPublicKeys","captchaTypes","publicKeyType","Type","ApiUrl","PublicKey","warn","debug","FunCaptcha","elementId","shownEvent","captchaInfo","fcToken","cType","shownCb","errorCb","exception","error","externalErrorCode","funcaptchaErrorCode","CaptchaConstants","mapFunCaptchaErrorCodeToCaptchaV2ErrorCode","captchaParams","hasMadeShownNativeCall","changeEvent","containerElemId","mainCaptchaId","userStartedCaptchaTime","captchaType","captchaSuccessCb","captchaErrorCb","onResponse","endpoints","modes","serviceData","AppCaptcha","shownElement","Hybrid","feature","document","getElementById","value","dispatchEvent","captchaDataPayload","successElement","JSON","stringify","displayErrorMessage","dataExchange","createEvent","initEvent","Promise","$","method","success","err","deCapitalize","console","triggerCaptcha","credentialsType","unifiedCaptchaIdValue","UrlParser","credentialsValue","dataExchangeValue","setCaptchaType","fetchLanguageResources","dataType","resources","text","show","val","charAt","slice","capitalize","toUpperCase","timestamp","Date","valueOf","captchaCallback","captchaResponse","userSolveCaptchaTime","userTimeBucketSuffix","solvedPrefix","captchaSolvedPrefix","timeIntervals","captchaSolveTimeIntervals","i","length","currentInterval","seconds","suffix","captchaSolveTimeLarge","getUserTimeBucketSuffix","window","EventTracker","verify","logDataToEventStream","solveDuration","isSuccessful","EventStream","provider","invisible","successSuffix","empty","failSuffix","BootstrapWidgets","ids","types","setEndpoint","getEndpoint","setInvisibleMode","isInvisible","getInvisibleMode","setSiteKey","sitekey","reset","responseCb","grecaptcha","execute","elemId","setting","badgePosition","size","displayedSuffix","setMultipleEndpoints","type","Roblox","Captcha","CaptchaLogger","CaptchaV2ServiceCaptchaIdBase","sendMessage","addFriend","follow","joinGroup","postComment","clothingUpload","favorite","logConstants","maxFailSuffix","retrySuffix","triggeredSuffix","initializedSuffix","suppressedSuffix","providerErrorSuffix","metadataErrorSuffix","completedTimeSequenceSuffix","solveTimeIntervals","solveTimeLarge","eventStreamCaptchaEventName","eventStreamCaptchaInitiatedEventName","eventStreamCaptchaTokenReceivedEventName","captchaInitiatedChallengeTypes","visible","hidden","gameCardRedeem","defaultCaptcha","friends","groups","profile","playerSearch","appCaptcha","messageElementIds","defaultError","eventElementIds","hybridEvents","messages","funCaptchaError","translationRequestParams","localeToFunCaptchaLanguageCodeMap","appTypes","appType","constants","perAppTypeLoggingEnabled","appendAppTypeIfEnabled","setPerAppTypeLoggingEnabled","enabled","queryAppType","forceSetAppTypeValue","undefined","setAppType","DeviceMeta","isInApp","startStatisticsSequence","start","endStatisticsSequenceWithSuccess","endSuccess","endStatisticsSequenceWithFailure","endFailure","logSuccess","logFail","logMaxFail","logRetried","logTriggered","logInitialized","logSuppressed","logDisplayed","logProviderError","logMetadataError","logCaptchaShownEventToEventStream","sessionToken","logCaptchaInitiatedEventToEventStream","logCaptchaSuppressedEventToEventStream","logCaptchaErrorEventToEventStream","toString","captchaChallengeType","message","context","eventParams","session","ucid","logCaptchaTokenReceivedEventToEventStream","logCaptchaEventToEventStream","userStartedFunCaptchaTime","funCaptchaTokenElem","funCaptchaIFrameElem","funCaptchaIFrameFocusTimeout","retryQueued","maxRetriesOnValidationFailure","minRetryInterval","maxRetryInterval","logger","captchaTypeDedupe","dataExchangeBlob","captchaInstances","defaultParams","jqFunCaptchaService","tokenValidationRetries","solvedCb","loadedCb","supressCb","fcInstance","setMaxRetriesOnTokenValidationFailure","setRetryIntervalRange","min","max","resetFunCaptcha","renderFunCaptcha","addCaptchaTypes","camelCaseTypes","dedupeKey","showFunCaptchaInModal","Dialog","bodyContent","allowHtmlContentInBody","showAccept","showDecline","xToCancel","onCloseCallback","dismissFunCaptchaModal","captchaElm","removeClass","detach","append","loggerInstance","getCaptcha","refresh_session","params","blob","fcParams","newParams","makeInstance","captchaTypeInfo","public_key","target_html","language","Intl","intl","locale","getFunCaptchaLanguageCodeFromCurrentLocale","callback","userSolveFunCaptchaTime","getSessionToken","setTimeout","Math","floor","random","loaded_callback","focus","onsuppress","suppressCb","onshown","addClass","jQuery","__webpack_module_cache__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","obj","prop","prototype","call","r","Symbol","toStringTag","require","captchaV2TemplateContext"],"mappings":"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","file":"captcha.bundle.min.js","sourcesContent":["var map = {\n\t\"./captchaComponent.js\": 533\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5;","var map = {\n\t\"./captchaV2Constants.js\": 731\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 37;","var map = {\n\t\"./captchaV2Controller.js\": 72\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 354;","var map = {\n\t\"./captchaV2Service.js\": 803,\n\t\"./funCaptchaService.js\": 630\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 772;","var map = {\n\t\"./captchaIdValue.js\": 607\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 111;","var map = {\n\t\"./components/templates/captcha.html\": 704\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 871;","\r\nfunction camelToKebab(str) {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nfunction extractHtmlFileName(str) {\r\n    let file = str.split('/').pop();\r\n    return file.replace('.html', '');\r\n}\r\n\r\n//we don't touch common template code is it might break other consumers\r\n//so we just remove the surrounding script tags.\r\nfunction removeScriptTag(str) {\r\n    var scriptTagReg = /<\\/?script[^>]*>/gi;\r\n    return str.replace(scriptTagReg, '');\r\n}\r\n\r\nconst ES6MigrationHelper = {\r\n\r\n    importFilesUnderPath: (ctx) => {\r\n        ctx.keys().forEach(ctx);\r\n    },\r\n\r\n    templateCacheGenerator: (angular, moduleName, mainTplCtx, commonTplCtx) => {\r\n        return angular.module(moduleName, [])\r\n            .run(['$templateCache', function (tc) {\r\n                if (mainTplCtx) {\r\n                    mainTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, mainTplCtx(key));\r\n                    });\r\n                }\r\n                if (commonTplCtx) {\r\n                    commonTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, removeScriptTag(commonTplCtx(key)));\r\n                    });\r\n                }\r\n            }]);\r\n    }\r\n};\r\n\r\nmodule.exports = ES6MigrationHelper;","\"use strict\";\r\nimport angular from 'angular';\r\n\r\nlet captchaV2 = angular\r\n    .module(\"captchaV2\", [\"captchaV2Templates\"]);\r\n\r\nexport default captchaV2;","\"use strict\";\r\nimport captchaV2 from '../captchaV2Module';\r\n\r\nconst captchaV2Component = {\r\n    templateUrl: \"captcha\",\r\n    bindings: {\r\n        \"activated\": \"=\",\r\n        \"captchaActionType\": \"<\",\r\n        \"extraValidationParams\": \"<\",\r\n        \"returnTokenInSuccessCb\": \"<\",\r\n        \"inputParams\": \"<\",\r\n        \"captchaPassed\": \"&\",\r\n        \"captchaFailed\": \"&\",\r\n        \"captchaDismissed\": \"&?\"\r\n    },\r\n    controller: \"captchaV2Controller\"\r\n};\r\n\r\n\r\ncaptchaV2.component(\"captcha\", captchaV2Component);\r\n\r\nexport default captchaV2Component;\r\n","\"use strict\";\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport captchaV2 from '../captchaV2Module';\r\n\r\nconst captchaV2Constants = {\r\n    urls: {\r\n        getMetadata: EnvironmentUrls.apiGatewayCdnUrl + \"/captcha/v1/metadata\",\r\n\r\n        funCaptchaRedeem: {\r\n            WebSignup: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/signup/web\",\r\n            AppSignup: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/signup/app\",\r\n            WebLogin: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/login/web\",\r\n            AppLogin: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/login/app\",\r\n            WebResetPassword: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/resetpassword/web\",\r\n            UserAction: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/user\",\r\n            WebGamecardRedemption: EnvironmentUrls.captchaApi + \"/v1/funcaptcha/gamecardredemption/web\"\r\n        }\r\n    },\r\n\r\n    captchaActionTypes: {\r\n        login: \"login\",\r\n        appLogin: \"appLogin\",\r\n        signup: \"signup\",\r\n        appSignup: \"appSignup\",\r\n        groupJoin: \"groupJoin\",\r\n        groupWallPost: \"groupWallPost\",\r\n        resetPassword: \"resetPassword\",\r\n        toyCodeRedeem: \"toyCodeRedeem\",\r\n        supportRequest: \"supportRequest\",\r\n        followUser: \"followUser\"\r\n    },\r\n\r\n    // Keys should map to captchaActionTypes.\r\n    funCaptchaCaptchaTypes: {\r\n        login: \"Login\",\r\n        appLogin: \"AppLogin\",\r\n        signup: \"Signup\",\r\n        appSignup: \"AppSignup\",\r\n        groupJoin: \"JoinGroup\",\r\n        groupWallPost: \"GroupWallPost\",\r\n        resetPassword: \"ResetPassword\",\r\n        toyCodeRedeem: \"ToyCodeRedeem\",\r\n        supportRequest: \"SupportRequest\",\r\n        followUser: \"FollowUser\"\r\n    },\r\n\r\n    // There must be a key for each value in funCaptchaCaptchaTypes\r\n    funCaptchaPublicKeyMap: {\r\n        Login: \"ACTION_TYPE_WEB_LOGIN\",\r\n        AppLogin: \"ACTION_TYPE_WEB_LOGIN\",\r\n        Signup: \"ACTION_TYPE_WEB_SIGNUP\",\r\n        AppSignup: \"ACTION_TYPE_WEB_SIGNUP\",\r\n        JoinGroup: \"ACTION_TYPE_GROUP_JOIN\",\r\n        GroupWallPost: \"ACTION_TYPE_GROUP_WALL_POST\",\r\n        ResetPassword: \"ACTION_TYPE_WEB_RESET_PASSWORD\",\r\n        ToyCodeRedeem: \"ACTION_TYPE_WEB_GAMECARD_REDEMPTION\",\r\n        SupportRequest: \"ACTION_TYPE_SUPPORT_REQUEST\",\r\n        FollowUser: 'ACTION_TYPE_FOLLOW_USER'\r\n    },\r\n\r\n    funCaptchaEvents: {\r\n        resolve: \"resolve\",\r\n        reject: \"reject\",\r\n        shown: \"shown\"\r\n    },\r\n\r\n    captchaProviders: {\r\n        arkoseLabs: \"PROVIDER_ARKOSE_LABS\"\r\n    },\r\n\r\n    errorCodes: {\r\n        internal: {\r\n            unknown: 0,\r\n            missingPrivateKey: 1,\r\n            missingActionType: 2,\r\n            failedToLoadProviderScript: 3,\r\n            failedToVerify: 4\r\n        }\r\n    }\r\n};\r\n\r\ncaptchaV2.constant('captchaV2Constants', captchaV2Constants);\r\n\r\nexport default captchaV2Constants;\r\n","import captchaV2 from '../captchaV2Module';\r\n\r\nfunction captchaV2Controller(captchaV2Service, captchaV2Constants, funCaptchaService, $scope) {\r\n  'ngInject';\r\n\r\n  const ctrl = this;\r\n  let active = false;\r\n  let lastActivated = false;\r\n\r\n  ctrl.id = null;\r\n  ctrl.captchaEnded = function () {\r\n    ctrl.activated = false;\r\n    ctrl.shown = false;\r\n    active = false;\r\n  };\r\n\r\n  ctrl.captchaShown = function () {\r\n    ctrl.shown = true;\r\n    $scope.$apply();\r\n  };\r\n\r\n  ctrl.hideCaptcha = function () {\r\n    ctrl.activated = false;\r\n    if (ctrl.captchaDismissed) {\r\n      ctrl.captchaDismissed()();\r\n    }\r\n  };\r\n\r\n  ctrl.getCaptchaClasses = function () {\r\n    return {\r\n      'captcha-activated': ctrl.shown && ctrl.activated\r\n    };\r\n  };\r\n\r\n  const init = function () {\r\n    if (ctrl.id === null) {\r\n      ctrl.id = captchaV2Service.getCaptchaId();\r\n    }\r\n\r\n    if (!ctrl.activated || active) {\r\n      return;\r\n    }\r\n\r\n    active = true;\r\n\r\n    const returnTokenInSuccessCb = ctrl.returnTokenInSuccessCb === true;\r\n    let successCb;\r\n    if (returnTokenInSuccessCb) {\r\n      successCb = function (eventData) {\r\n        if (ctrl.activated) {\r\n          let token;\r\n          let captchaId = '';\r\n          if (eventData.constructor === String) {\r\n            token = eventData;\r\n          } else {\r\n            token = eventData.token;\r\n            captchaId = eventData.unifiedCaptchaId;\r\n          }\r\n          const captchaData = {\r\n            captchaId,\r\n            captchaToken: token,\r\n            captchaProvider: captchaV2Constants.captchaProviders.arkoseLabs\r\n          };\r\n          ctrl.captchaPassed()(captchaData);\r\n        }\r\n\r\n        ctrl.captchaEnded();\r\n      };\r\n    } else {\r\n      successCb = function () {\r\n        if (ctrl.activated) {\r\n          ctrl.captchaPassed()();\r\n        }\r\n\r\n        ctrl.captchaEnded();\r\n      };\r\n    }\r\n\r\n    funCaptchaService\r\n      .render(\r\n        ctrl.id,\r\n        ctrl.captchaActionType,\r\n        ctrl.captchaShown,\r\n        returnTokenInSuccessCb,\r\n        ctrl.inputParams,\r\n        ctrl.extraValidationParams\r\n      )\r\n      .then(successCb, function (errorCode) {\r\n        if (ctrl.activated) {\r\n          ctrl.captchaFailed()(errorCode);\r\n        }\r\n\r\n        ctrl.captchaEnded();\r\n      });\r\n  };\r\n\r\n  // doCheck required for two way binding change detection: https://stackoverflow.com/a/41978174/1663648\r\n  const doCheck = function () {\r\n    if (lastActivated !== ctrl.activated) {\r\n      lastActivated = ctrl.activated;\r\n      ctrl.$onInit();\r\n    }\r\n  };\r\n\r\n  ctrl.$onInit = init;\r\n  ctrl.$doCheck = doCheck.bind(ctrl);\r\n}\r\n\r\ncaptchaV2.controller('captchaV2Controller', captchaV2Controller);\r\n\r\nexport default captchaV2Controller;\r\n","\"use strict\";\r\n\r\nimport captchaV2 from '../captchaV2Module';\r\n\r\nfunction captchaV2Service($q, httpService, captchaV2Constants, captchaIdCounter) {\r\n    \"ngInject\";\r\n    var metadataCache = null;\r\n\r\n    var getMetadata = function () {\r\n        return $q(function (resolve, reject) {\r\n            if (metadataCache) {\r\n                resolve(metadataCache);\r\n            } else {\r\n                var urlConfig = {\r\n                    url: captchaV2Constants.urls.getMetadata\r\n                };\r\n\r\n                httpService.httpGet(urlConfig).then(function (response) {\r\n                    metadataCache = response;\r\n                    resolve(response);\r\n                }, reject);\r\n            }\r\n        });\r\n    };\r\n\r\n    var getCaptchaId = function () {\r\n        ++captchaIdCounter.id;\r\n        return \"captchaV2-\" + captchaIdCounter.id;\r\n    };\r\n    \r\n    return {\r\n        getMetadata: getMetadata,\r\n        getCaptchaId: getCaptchaId\r\n    };\r\n}\r\n\r\ncaptchaV2.factory('captchaV2Service', captchaV2Service);\r\nexport default captchaV2Service;\r\n","import CaptchaConstants from '../../../jquery/captcha/constants/captchaConstants';\r\nimport FunCaptcha from '../../../jquery/captcha/services/funCaptchaService';\r\nimport captchaV2 from '../captchaV2Module';\r\n\r\nfunction funCaptchaService($q, $log, $window, captchaV2Constants, captchaV2Service) {\r\n  'ngInject';\r\n\r\n  const events = {};\r\n\r\n  const fireEvent = function (funCaptchaType, eventName, data) {\r\n    if (!events.hasOwnProperty(funCaptchaType)) {\r\n      return;\r\n    }\r\n\r\n    events[funCaptchaType].forEach(function (event) {\r\n      if (event.name === eventName) {\r\n        event.handle(data);\r\n      }\r\n    });\r\n  };\r\n\r\n  const addEvent = function (funCaptchaType, eventName, handler) {\r\n    if (handler) {\r\n      events[funCaptchaType] = events[funCaptchaType] || [];\r\n      events[funCaptchaType].push({\r\n        name: eventName,\r\n        handle: handler\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearEvents = function (funCaptchaType) {\r\n    events[funCaptchaType] = [];\r\n  };\r\n\r\n  const mapFunCaptchaErrorCodeToCaptchaV2ErrorCode = function (funcaptchaErrorCode) {\r\n    switch (funcaptchaErrorCode) {\r\n      case CaptchaConstants.errorCodes.failedToLoadProviderScript:\r\n        return captchaV2Constants.errorCodes.internal.failedToLoadProviderScript;\r\n      case CaptchaConstants.errorCodes.failedToVerify:\r\n        return captchaV2Constants.errorCodes.internal.failedToVerify;\r\n      default:\r\n        return captchaV2Constants.errorCodes.internal.unknown;\r\n    }\r\n  };\r\n\r\n  const render = function (\r\n    elementId,\r\n    captchaActionType,\r\n    shownEvent,\r\n    returnTokenInSuccessCb,\r\n    inputParams,\r\n    extraValidationParams\r\n  ) {\r\n    return $q(function (resolve, reject) {\r\n      const funCaptchaType = captchaV2Constants.funCaptchaCaptchaTypes[captchaActionType];\r\n      let captchaInfo = `\\n\\telementId: ${elementId}\\n\\tcaptchaActionType: ${captchaActionType}\\n\\tfunCaptchaType: ${funCaptchaType}`;\r\n\r\n      $log.debug(`Render captcha${captchaInfo}`);\r\n\r\n      if (!funCaptchaType) {\r\n        $log.warn(`Missing funCaptchaType for ${captchaActionType}`);\r\n        reject(captchaV2Constants.errorCodes.internal.missingActionType);\r\n        return;\r\n      }\r\n\r\n      addEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.resolve, resolve);\r\n      addEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.reject, reject);\r\n      addEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.shown, shownEvent);\r\n\r\n      let successCb;\r\n      if (returnTokenInSuccessCb) {\r\n        successCb = function (fcToken, unifiedCaptchaId) {\r\n          captchaInfo += `\\ntoken: ${fcToken}`;\r\n          $log.debug(`Passed captcha${captchaInfo}`);\r\n          // Keep the backward compatibility with existing version of code.\r\n          if (unifiedCaptchaId === null || unifiedCaptchaId === '') {\r\n            fireEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.resolve, fcToken);\r\n          } else {\r\n            fireEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.resolve, {\r\n              token: fcToken,\r\n              unifiedCaptchaId\r\n            });\r\n          }\r\n          clearEvents(funCaptchaType);\r\n        };\r\n      } else {\r\n        successCb = function () {\r\n          $log.debug(`Passed captcha${captchaInfo}`);\r\n          fireEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.resolve);\r\n          clearEvents(funCaptchaType);\r\n        };\r\n      }\r\n\r\n      FunCaptcha.render(elementId, {\r\n        cType: funCaptchaType,\r\n\r\n        inputParams,\r\n\r\n        returnTokenInSuccessCb,\r\n\r\n        // These methods are thrown away on subsequent calls.\r\n        successCb,\r\n\r\n        shownCb() {\r\n          $log.debug(`Captcha shown${captchaInfo}`);\r\n          fireEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.shown);\r\n        },\r\n\r\n        errorCb(errorCode, exception) {\r\n          if (exception) {\r\n            $log.error(`Failed captcha (${errorCode}:) ${exception}${captchaInfo}`);\r\n          } else {\r\n            $log.debug(`Failed captcha (${errorCode})${captchaInfo}`);\r\n          }\r\n\r\n          const externalErrorCode = mapFunCaptchaErrorCodeToCaptchaV2ErrorCode(errorCode);\r\n\r\n          fireEvent(funCaptchaType, captchaV2Constants.funCaptchaEvents.reject, externalErrorCode);\r\n          clearEvents(funCaptchaType);\r\n        },\r\n\r\n        extraValidationParams: extraValidationParams || {}\r\n      });\r\n    });\r\n  };\r\n\r\n  captchaV2Service.getMetadata().then(\r\n    function (metadata) {\r\n      const publicKeys = metadata.funCaptchaPublicKeys;\r\n      const captchaTypes = [];\r\n\r\n      for (const funCaptchaType in captchaV2Constants.funCaptchaPublicKeyMap) {\r\n        if (!captchaV2Constants.funCaptchaPublicKeyMap.hasOwnProperty(funCaptchaType)) {\r\n          return;\r\n        }\r\n\r\n        const publicKeyType = captchaV2Constants.funCaptchaPublicKeyMap[funCaptchaType];\r\n        if (publicKeyType && publicKeys.hasOwnProperty(publicKeyType)) {\r\n          captchaTypes.push({\r\n            Type: funCaptchaType,\r\n            ApiUrl: captchaV2Constants.urls.funCaptchaRedeem[publicKeyType], // this does not need to be defined for BEDEV2\r\n            PublicKey: publicKeys[publicKeyType]\r\n          });\r\n        } else {\r\n          $log.warn(`Missing public key for: ${funCaptchaType}\\n\\tpublicKeyType: ${publicKeyType}`);\r\n        }\r\n      }\r\n\r\n      $log.debug('Add captcha types from new webapp:', captchaTypes);\r\n\r\n      FunCaptcha.addCaptchaTypes(captchaTypes, false);\r\n    },\r\n    function () {\r\n      $log.debug(\r\n        'Failed to load captcha metadata for funCaptchaService. FunCaptcha will not work properly.'\r\n      );\r\n    }\r\n  );\r\n\r\n  return {\r\n    render\r\n  };\r\n}\r\n\r\ncaptchaV2.factory('funCaptchaService', funCaptchaService);\r\n\r\nexport default funCaptchaService;\r\n","\"use strict\";\r\n\r\nimport captchaV2 from '../captchaV2Module';\r\n\r\ncaptchaV2.value('captchaIdCounter', {id:0});\r\n\r\n","import $ from 'jquery';\r\n\r\nimport { Hybrid, UrlParser } from 'Roblox';\r\nimport FunCaptcha from './services/funCaptchaService';\r\nimport CaptchaConstants from './constants/captchaConstants';\r\n\r\nconst AppCaptcha = (function () {\r\n  const credentialsTypeParameterName = 'credentialstype';\r\n  const credentialsValueParameterName = 'credentialsvalue';\r\n  const hybridReturnTokenName = 'hybrid-return-token';\r\n  const hybridReturnCaptchaIdName = 'hybrid-return-captcha-id';\r\n  const dataExchangeBlobName = 'data-exchange-blob';\r\n\r\n  const captchaParams = {\r\n    shownCb: captchaShown,\r\n    successCb: captchaSuccess,\r\n    errorCb: displayErrorMessage,\r\n    returnTokenInSuccessCb: false,\r\n    inputParams: {\r\n      dataExchange: '',\r\n      unifiedCaptchaId: ''\r\n    },\r\n    extraValidationParams: {}\r\n  };\r\n\r\n  // To ensure that we only make the \"shown\" native call\r\n  // once\r\n  let hasMadeShownNativeCall = false;\r\n  const changeEvent = createChangeEvent();\r\n\r\n  function triggerCaptcha() {\r\n    if (FunCaptcha) {\r\n      if (UrlParser) {\r\n        const credentialsType = UrlParser.getParameterValueByName(\r\n          credentialsTypeParameterName,\r\n          false\r\n        );\r\n        const credentialsValue = UrlParser.getParameterValueByName(\r\n          credentialsValueParameterName,\r\n          false\r\n        );\r\n        if (credentialsType !== null && credentialsValue !== null) {\r\n          captchaParams.extraValidationParams.credentialsType = credentialsType;\r\n          captchaParams.extraValidationParams.credentialsValue = credentialsValue;\r\n        }\r\n        captchaParams.returnTokenInSuccessCb =\r\n          UrlParser.getParameterValueByName(hybridReturnTokenName, false) === '1';\r\n\r\n        const dataExchangeValue = UrlParser.getParameterValueByName(dataExchangeBlobName, false);\r\n        if (dataExchangeValue !== null) {\r\n          captchaParams.inputParams.dataExchange = dataExchangeValue;\r\n        }\r\n\r\n        const unifiedCaptchaIdValue = UrlParser.getParameterValueByName(\r\n          hybridReturnCaptchaIdName,\r\n          false\r\n        );\r\n        if (unifiedCaptchaIdValue !== null) {\r\n          captchaParams.inputParams.unifiedCaptchaId = unifiedCaptchaIdValue;\r\n        }\r\n      }\r\n\r\n      FunCaptcha.render(CaptchaConstants.ids.appCaptcha, captchaParams);\r\n    } else {\r\n      displayErrorMessage();\r\n    }\r\n  }\r\n\r\n  let metadataCache = null;\r\n  function loadMetaData() {\r\n    return new Promise((resolve, reject) => {\r\n      if (metadataCache) {\r\n        resolve(metadataCache);\r\n      }\r\n      $.ajax({\r\n        method: 'GET',\r\n        url: CaptchaConstants.urls.getMetadata,\r\n        success: function success(response) {\r\n          metadataCache = response;\r\n          resolve(response);\r\n        },\r\n        error: function error(err) {\r\n          reject(err);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  loadMetaData().then(\r\n    metadata => {\r\n      const publicKeys = metadata.funCaptchaPublicKeys;\r\n      const captchaTypes = [];\r\n      for (const funCaptchaType in CaptchaConstants.funCaptchaPublicKeyMap) {\r\n        if (!CaptchaConstants.funCaptchaPublicKeyMap.hasOwnProperty(funCaptchaType)) {\r\n          return;\r\n        }\r\n        const publicKeyType = CaptchaConstants.funCaptchaPublicKeyMap[funCaptchaType];\r\n        if (publicKeyType && publicKeys.hasOwnProperty(publicKeyType)) {\r\n          captchaTypes.push({\r\n            Type: deCapitalize(funCaptchaType),\r\n            ApiUrl: CaptchaConstants.urls.funCaptchaRedeem[publicKeyType],\r\n            PublicKey: publicKeys[publicKeyType]\r\n          });\r\n        } else {\r\n          console.warn(\r\n            `Missing public key for: ${funCaptchaType}\\n\\tpublicKeyType: ${publicKeyType}`\r\n          );\r\n        }\r\n      }\r\n      console.debug('Add captcha types from new app:', captchaTypes);\r\n      FunCaptcha.addCaptchaTypes(captchaTypes, false);\r\n    },\r\n    err => {\r\n      console.debug(\r\n        'Failed to load captcha metadata for funCaptchaService. FunCaptcha will not work properly.'\r\n      );\r\n    }\r\n  );\r\n\r\n  function setCaptchaType(captchaType) {\r\n    captchaParams.cType = deCapitalize(captchaType);\r\n  }\r\n\r\n  function fetchLanguageResources(url) {\r\n    $.ajax({\r\n      method: 'GET',\r\n      url,\r\n      dataType: 'json',\r\n      data: CaptchaConstants.translationRequestParams,\r\n      success: function success(resources) {\r\n        $(`#${CaptchaConstants.messageElementIds.defaultError}`).text(\r\n          resources['Response.CaptchaErrorFailedToVerify']\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  function captchaSuccess(captchaToken, captchaId) {\r\n    let captchaDataPayload = null;\r\n    if (captchaToken != null && captchaToken != '') {\r\n      captchaDataPayload = {\r\n        captchaId,\r\n        captchaToken,\r\n        captchaProvider: CaptchaConstants.captchaProviders.arkoseLabs\r\n      };\r\n    }\r\n\r\n    if (Hybrid && Hybrid.Navigation) {\r\n      if (captchaDataPayload !== null) {\r\n        Hybrid.Navigation.navigateToFeature({\r\n          feature: CaptchaConstants.hybridEvents.success,\r\n          captchaData: captchaDataPayload\r\n        });\r\n      } else {\r\n        Hybrid.Navigation.navigateToFeature({\r\n          feature: CaptchaConstants.hybridEvents.success\r\n        });\r\n      }\r\n    }\r\n\r\n    // For Roblox Studio\r\n    const successElement = document.getElementById(CaptchaConstants.eventElementIds.token);\r\n    if (successElement != null) {\r\n      if (captchaDataPayload !== null) {\r\n        successElement.value = JSON.stringify(captchaDataPayload);\r\n      }\r\n      successElement.dispatchEvent(changeEvent);\r\n    }\r\n  }\r\n\r\n  function captchaShown() {\r\n    if (!hasMadeShownNativeCall) {\r\n      if (Hybrid && Hybrid.Navigation) {\r\n        Hybrid.Navigation.navigateToFeature({\r\n          feature: CaptchaConstants.hybridEvents.shown\r\n        });\r\n      }\r\n\r\n      const shownElement = document.getElementById(CaptchaConstants.eventElementIds.shown);\r\n      if (shownElement !== null) {\r\n        shownElement.value = CaptchaConstants.hybridEvents.shown;\r\n        shownElement.dispatchEvent(changeEvent);\r\n      }\r\n\r\n      hasMadeShownNativeCall = true;\r\n    }\r\n  }\r\n\r\n  function createChangeEvent() {\r\n    const changeEvent = document.createEvent('HTMLEvents');\r\n    changeEvent.initEvent('change', false, false);\r\n    return changeEvent;\r\n  }\r\n\r\n  function displayErrorMessage() {\r\n    $(`#${CaptchaConstants.messageElementIds.defaultError}`).show();\r\n  }\r\n\r\n  function deCapitalize(val) {\r\n    return val.charAt(0).toLowerCase() + val.slice(1);\r\n  }\r\n\r\n  return {\r\n    triggerCaptcha,\r\n\r\n    setCaptchaType,\r\n\r\n    displayErrorMessage,\r\n\r\n    fetchLanguageResources,\r\n\r\n    // exposed for unit testing\r\n    captchaParams\r\n  };\r\n})();\r\n\r\n// Need to expose this function to funCaptcha element to call once FunCaptcha loads\r\nfunction triggerCaptcha() {\r\n  AppCaptcha.triggerCaptcha();\r\n}\r\n\r\nexport { triggerCaptcha, AppCaptcha };\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\n\r\nimport { BootstrapWidgets, EventStream } from 'Roblox';\r\nimport CaptchaConstants from '../constants/captchaConstants';\r\n\r\n\r\nvar Captcha = (function () {\r\n    function capitalize(val) {\r\n        return val.charAt(0).toUpperCase() + val.slice(1);\r\n    }\r\n\r\n    function deCapitalize(val) {\r\n        return val.charAt(0).toLowerCase() + val.slice(1);\r\n    }\r\n\r\n    function timestamp() {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    //this should have properties equal to the values of types\r\n    //note: there might just be one endpoint for all verification in the future so this will be removed.\r\n    var endpoints = CaptchaConstants.endpoints;\r\n\r\n    var containerElemId, mainCaptchaId;\r\n\r\n    var modes = {\r\n        invisible: false\r\n    };\r\n\r\n    //relevant internal data to this service.\r\n    var serviceData = CaptchaConstants.serviceData;\r\n\r\n    var userStartedCaptchaTime;\r\n\r\n    var captchaType;\r\n    var captchaSuccessCb, captchaErrorCb, onResponse;\r\n\r\n    var captchaCallback = function (captchaResponse) {\r\n        if (typeof onResponse === \"function\") {\r\n            onResponse();\r\n        }\r\n\r\n        var userSolveCaptchaTime = null;\r\n        if (userStartedCaptchaTime) {\r\n            userSolveCaptchaTime = timestamp() - userStartedCaptchaTime;\r\n            logUserCaptchaSolveTime(userSolveCaptchaTime);\r\n            userStartedCaptchaTime = null;\r\n        }\r\n        \r\n        verify(captchaType, captchaResponse, userSolveCaptchaTime);\r\n    }\r\n\r\n    function getUserTimeBucketSuffix(userSolveCaptchaTime) {\r\n        var milliseconds = 1000;\r\n        var solvedPrefix = serviceData.captchaSolvedPrefix;\r\n        var timeIntervals = serviceData.captchaSolveTimeIntervals;\r\n\r\n        // find user's captcha solve time interval\r\n        for (var i = 0; i < timeIntervals.length; i++) {\r\n            var currentInterval = timeIntervals[i];\r\n            if (userSolveCaptchaTime <= currentInterval.seconds * milliseconds) {\r\n                return solvedPrefix + currentInterval.suffix;\r\n            }\r\n        }\r\n\r\n        // solve time larger than all time intervals\r\n        return solvedPrefix + serviceData.captchaSolveTimeLarge;\r\n    }\r\n\r\n    function logUserCaptchaSolveTime(userSolveCaptchaTime) {\r\n        var userTimeBucketSuffix = getUserTimeBucketSuffix(userSolveCaptchaTime);\r\n        window.EventTracker && window.EventTracker.fireEvent(capitalize(captchaType + userTimeBucketSuffix));\r\n    }\r\n\r\n    function logDataToEventStream(captchaType, solveDuration, isSuccessful) {\r\n        if (EventStream) {\r\n            solveDuration = solveDuration || 0;\r\n            var success = isSuccessful ? \"true\" : \"false\";\r\n            var context = captchaType;\r\n            EventStream.SendEventWithTarget(\"captcha\",\r\n                context,\r\n                { solveDuration: solveDuration, success: success, provider: \"Google\" },\r\n                EventStream.TargetTypes.WWW);\r\n        }\r\n    }\r\n\r\n    function verify(captchaType, captchaResponse, solveDuration) {\r\n        var data = {\r\n            'g-Recaptcha-Response': captchaResponse,\r\n            'isInvisible': modes.invisible\r\n        };\r\n\r\n        $.ajax({\r\n            method: 'POST',\r\n            data: data,\r\n            success: function success() {\r\n                window.EventTracker && window.EventTracker.fireEvent(capitalize(captchaType + serviceData.successSuffix));\r\n                logDataToEventStream(captchaType, solveDuration, true);\r\n                if (captchaSuccessCb) {\r\n                    captchaSuccessCb();\r\n                    $(\"#\" + containerElemId).empty();\r\n                }\r\n            },\r\n            error: function error() {\r\n                window.EventTracker && window.EventTracker.fireEvent(capitalize(captchaType + serviceData.failSuffix));\r\n                logDataToEventStream(captchaType, solveDuration, false);\r\n                if (captchaErrorCb) {\r\n                    captchaErrorCb();\r\n                }\r\n                if (BootstrapWidgets) {\r\n                    BootstrapWidgets.ToggleSystemMessage($(\".alert-warning\"), 100, 2000, CaptchaConstants.messages.error);\r\n                }\r\n            },\r\n            url: endpoints[captchaType]\r\n        });\r\n    }\r\n\r\n    return {\r\n        ids: CaptchaConstants.ids,\r\n\r\n        //currently supported.\r\n        types: CaptchaConstants.types,\r\n\r\n        setEndpoint: function setEndpoint(key, val) {\r\n            endpoints[key] = val;\r\n        },\r\n\r\n        getEndpoint: function getEndpoint(key) {\r\n            return endpoints[key];\r\n        },\r\n\r\n        setInvisibleMode: function (isInvisible) {\r\n            modes.invisible = isInvisible;\r\n        },\r\n\r\n        getInvisibleMode: function () {\r\n            return modes.invisible;\r\n        },\r\n\r\n        setSiteKey: function (sitekey) {\r\n            serviceData.sitekey = sitekey;\r\n        },\r\n\r\n        verify: verify,\r\n\r\n        reset: function reset(cType, successCb, errorCb, responseCb) {\r\n            captchaType = cType;\r\n            captchaSuccessCb = successCb;\r\n            captchaErrorCb = errorCb;\r\n            onResponse = responseCb;\r\n\r\n            if (window.grecaptcha) {\r\n                window.grecaptcha.reset(mainCaptchaId);\r\n                if (modes.invisible) {\r\n                    window.grecaptcha.execute(mainCaptchaId);\r\n                }\r\n            }\r\n        },\r\n\r\n        render: function (elemId, cType, successCb, errorCb, responseCb) {\r\n            captchaType = cType;\r\n            captchaSuccessCb = successCb;\r\n            captchaErrorCb = errorCb;\r\n            onResponse = responseCb;\r\n            containerElemId = elemId;\r\n            if (window.grecaptcha) {\r\n                var setting = {\r\n                    'sitekey': serviceData.sitekey,\r\n                    'callback': captchaCallback,\r\n                    'badge': serviceData.badgePosition\r\n                }\r\n                if (modes.invisible) {\r\n                    setting.size = 'invisible';\r\n                }\r\n                mainCaptchaId = window.grecaptcha.render(elemId, setting);\r\n                window.EventTracker && window.EventTracker.fireEvent(capitalize(captchaType + serviceData.displayedSuffix));\r\n                userStartedCaptchaTime = timestamp();\r\n            }\r\n        },\r\n\r\n        execute: function () {\r\n            if (window.grecaptcha && modes.invisible) {\r\n                window.grecaptcha.execute(mainCaptchaId);\r\n            }\r\n        },\r\n\r\n        //the goal is that this is not even needed in the future since there\r\n        //should be one endpoint for all types, but for now we need to be able to \r\n        //set an endpoint for multiple types.\r\n        setMultipleEndpoints: function (types, url) {\r\n            if (!types || !url) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < types.length; i++) {\r\n                var type = deCapitalize(types[i]);\r\n                endpoints[type] = url;\r\n            }\r\n        }\r\n    };\r\n}());\r\n\r\n\r\nexport default Captcha ;\r\n","\"use strict\";\r\n\r\nimport '../../../css/appCaptchaBundle.scss';\r\nimport { triggerCaptcha, AppCaptcha } from './appCaptcha';\r\nimport Captcha from './services/captchaService';\r\nimport CaptchaConstants from './constants/captchaConstants';\r\nimport CaptchaLogger from './services/captchaLogger';\r\nimport FunCaptcha from './services/funCaptchaService';\r\n\r\n\r\n/**\r\n *  Please refer to https://github.rbx.com/Roblox/web-platform/blob/7f8f347dd34bea64a2aab52f7c0f178b2615a954/WebApps/Roblox.Captcha.WebApp/Roblox.Captcha.WebApp/js/angular/services/captchaV2Service.js#L24\r\n * in the old web-platform version of this code. The below constant was initialized in the Roblox object\r\n * at the call-site. This is to ensure that multiple instances of the captcha modal have distinct IDs for\r\n * use with the third-party API (Arkos/FunCaptcha): it is necessary to have a single incremental ID spanning\r\n * multiple instances.\r\n */\r\nwindow.Roblox.triggerCaptcha = triggerCaptcha;\r\nwindow.Roblox.Captcha = Captcha;\r\nwindow.Roblox.AppCaptcha = AppCaptcha;\r\nwindow.Roblox.CaptchaLogger = CaptchaLogger;\r\nwindow.Roblox.FunCaptcha = FunCaptcha;\r\nwindow.Roblox.CaptchaV2ServiceCaptchaIdBase = 0;\r\nwindow.Roblox.CaptchaConstants = CaptchaConstants;\r\nwindow.triggerCaptcha = triggerCaptcha;\r\n\r\nexport {\r\n    triggerCaptcha,\r\n    AppCaptcha,\r\n    Captcha,\r\n    CaptchaConstants,\r\n    CaptchaLogger,\r\n    FunCaptcha,\r\n};","\"use strict\";\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\n\r\nRoblox.EnvironmentUrls = Roblox.EnvironmentUrls || {};\r\n\r\nconst CaptchaConstants = {\r\n    urls: {\r\n        getMetadata: `${EnvironmentUrls.apiGatewayCdnUrl}/captcha/v1/metadata`,\r\n\r\n        funCaptchaRedeem: {\r\n            WebSignup: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/signup/web`,\r\n            AppSignup: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/signup/app`,\r\n            WebLogin: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/login/web`,\r\n            AppLogin: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/login/app`,\r\n            WebResetPassword: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/resetpassword/web`,\r\n            UserAction: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/user`,\r\n            WebGamecardRedemption: `${EnvironmentUrls.captchaApi}/v1/funcaptcha/gamecardredemption/web`\r\n        }\r\n    },\r\n    // There must be a key for each value in funCaptchaCaptchaTypes\r\n    funCaptchaPublicKeyMap: {\r\n        Login: 'ACTION_TYPE_WEB_LOGIN',\r\n        AppLogin: 'ACTION_TYPE_WEB_LOGIN',\r\n        Signup: 'ACTION_TYPE_WEB_SIGNUP',\r\n        AppSignup: 'ACTION_TYPE_WEB_SIGNUP',\r\n        JoinGroup: 'ACTION_TYPE_GROUP_JOIN',\r\n        GroupWallPost: 'ACTION_TYPE_GROUP_WALL_POST',\r\n        ResetPassword: 'ACTION_TYPE_WEB_RESET_PASSWORD',\r\n        ToyCodeRedeem: 'ACTION_TYPE_WEB_GAMECARD_REDEMPTION',\r\n        SupportRequest: 'ACTION_TYPE_SUPPORT_REQUEST',\r\n        FollowUser: 'ACTION_TYPE_FOLLOW_USER'\r\n    },\r\n\r\n    endpoints: {\r\n        sendMessage: '',\r\n        addFriend: '',\r\n        follow: '',\r\n        signup: '',\r\n        joinGroup: '',\r\n        login: '',\r\n        postComment: '',\r\n        clothingUpload: '',\r\n        favorite: '',\r\n        appSignup: '',\r\n        appLogin: '',\r\n        resetPassword: ''\r\n    },\r\n\r\n    serviceData: {\r\n        sitekey: '',\r\n        successSuffix: \"Captcha_Success\",\r\n        failSuffix: \"Captcha_Failed\",\r\n        displayedSuffix: \"Captcha_Displayed\",\r\n        captchaSolvedPrefix: \"Captcha_User_Solved_InSeconds_\",\r\n        captchaSolveTimeIntervals: [\r\n            { seconds: 1, suffix: \"Less_Than_1\" },\r\n            { seconds: 3, suffix: \"1_To_3\" },\r\n            { seconds: 10, suffix: \"4_To_10\" },\r\n            { seconds: 20, suffix: \"11_To_20\" },\r\n            { seconds: 30, suffix: \"21_To_30\" },\r\n            { seconds: 40, suffix: \"31_To_40\" },\r\n            { seconds: 50, suffix: \"41_To_50\" }\r\n        ],\r\n        captchaSolveTimeLarge: \"Greater_Than_50\",\r\n        badgePosition: \"bottomright\",\r\n        //later, we will refactor to just use the object below. So some things are duplicated.\r\n        logConstants: {\r\n            successSuffix: \"_Success\",\r\n            failSuffix: \"_Failed\",\r\n            maxFailSuffix: \"_MaxFailed\",\r\n            retrySuffix: \"_Retried\",\r\n            displayedSuffix: \"_Displayed\",\r\n            triggeredSuffix: \"_Triggered\",\r\n            initializedSuffix: \"_Initialized\",\r\n            suppressedSuffix: \"_Suppressed\",\r\n            providerErrorSuffix: \"_FailedToLoad\",\r\n            metadataErrorSuffix: \"_FailedToLoadMetadata\",\r\n            completedTimeSequenceSuffix: \"_SolveTime\",\r\n            solvedPrefix: \"_User_Solved_InSeconds_\",\r\n            solveTimeIntervals: [\r\n                { seconds: 1, suffix: \"Less_Than_1\" },\r\n                { seconds: 3, suffix: \"1_To_3\" },\r\n                { seconds: 10, suffix: \"4_To_10\" },\r\n                { seconds: 20, suffix: \"11_To_20\" },\r\n                { seconds: 30, suffix: \"21_To_30\" },\r\n                { seconds: 40, suffix: \"31_To_40\" },\r\n                { seconds: 50, suffix: \"41_To_50\" }\r\n            ],\r\n            solveTimeLarge: \"Greater_Than_50\",\r\n            eventStreamCaptchaEventName: \"captcha\",\r\n            eventStreamCaptchaInitiatedEventName: \"captchaInitiated\",\r\n            eventStreamCaptchaTokenReceivedEventName: \"captchaTokenReceived\",\r\n            captchaInitiatedChallengeTypes: {\r\n                visible: \"visible\",\r\n                hidden: \"hidden\",\r\n                error: \"error\"\r\n            }\r\n        }\r\n    },\r\n\r\n    types: {\r\n        signup: 'signup',\r\n        sendMessage: 'sendMessage',\r\n        addFriend: 'addFriend',\r\n        follow: 'follow',\r\n        joinGroup: 'joinGroup',\r\n        login: \"login\",\r\n        postComment: \"postComment\",\r\n        clothingUpload: \"clothingUpload\",\r\n        favorite: \"favorite\",\r\n        appSignup: 'appSignup',\r\n        appLogin: 'appLogin',\r\n        gameCardRedeem: 'gameCardRedeem',\r\n        resetPassword: 'resetPassword'\r\n    },\r\n\r\n    ids: {\r\n        defaultCaptcha: \"captcha-container\",\r\n        signup: \"signup-captcha\",\r\n        login: \"login-captcha\",\r\n        friends: \"friends-captcha\",\r\n        groups: \"groups-captcha\",\r\n        profile: \"profile-captcha\",\r\n        playerSearch: \"player-search-captcha\",\r\n        appCaptcha: \"app-captcha\",\r\n        gameCardRedeem: 'game-card-redeem-captcha',\r\n        resetPassword: 'reset-password-captcha'\r\n    },\r\n\r\n    messageElementIds: {\r\n        defaultError: \"captcha-error\"\r\n    },\r\n\r\n    // Used as a substitute for hybrid events when they\r\n    // are not supported and the consumer has access to the\r\n    // webview DOM (i.e. studio)\r\n    eventElementIds: {\r\n        shown: \"captcha-event-shown\",\r\n        token: \"captcha-event-token\",\r\n        provider: \"captcha-event-provider\",\r\n    },\r\n\r\n    hybridEvents: {\r\n        shown: \"CaptchaShown\",\r\n        success: \"CaptchaSuccess\"\r\n    },\r\n\r\n    //Note: we should translate the notes later\r\n    messages: {\r\n        error: \"We currently cannot verify CAPTCHA, please try again later.\",\r\n        funCaptchaError: \"We currently cannot verify FunCaptcha, please try again later.\"\r\n    },\r\n\r\n    translationRequestParams: {\r\n        'consumerType': 'Web',\r\n        'contentNamespace': 'Common.Captcha',\r\n        'Keys': ['Response.CaptchaErrorFailedToVerify']\r\n    },\r\n\r\n    errorCodes: {\r\n        failedToLoadProviderScript: 0,\r\n        failedToVerify: 1\r\n    },\r\n\r\n    localeToFunCaptchaLanguageCodeMap: {\r\n        \"de-de\": \"de\",\r\n        \"en-us\": \"en\",\r\n        \"es-es\": \"es\",\r\n        \"fr-fr\": \"fr\",\r\n        \"pt-br\": \"pt-br\",\r\n        \"ko-kr\": \"ko\",\r\n        \"zh-cn\": \"zh\",\r\n        \"zh-tw\": \"zh-tw\",\r\n        \"ja-jp\": \"ja\"\r\n    },\r\n    appTypes: {\r\n        \"android\": \"android\",\r\n        \"ios\": \"ios\",\r\n        \"xbox\": \"xbox\",\r\n        \"uwp\": \"uwp\",\r\n        \"studio-windows\": \"studio-windows\",\r\n        \"studio-mac\": \"studio-mac\",\r\n        \"studio-luobu-windows\": \"studio-luobu-windows\",\r\n        \"studio-luobu-mac\": \"studio-luobu-mac\",\r\n        \"unknown\": \"unknown\"\r\n    },\r\n    captchaProviders: {\r\n        arkoseLabs: \"PROVIDER_ARKOSE_LABS\"\r\n    }\r\n};\r\n\r\nexport default CaptchaConstants;","import $ from 'jquery';\r\nimport { DeviceMeta, EventStream, UrlParser } from 'Roblox';\r\nimport CaptchaConstants from '../constants/captchaConstants';\r\n\r\n/*\r\n * This should be the logging service used by Captcha related code.\r\n * Google's recaptcha will be refactored to use this later.\r\n * Usage: logger = new Roblox.CaptchaLogger(\"FunCaptcha\");\r\n */\r\nfunction CaptchaLogger(provider) {\r\n  const constants = CaptchaConstants;\r\n  const serviceData = $.extend({}, constants.serviceData);\r\n  const { logConstants } = serviceData;\r\n  let perAppTypeLoggingEnabled = false;\r\n  let appType;\r\n\r\n  this.provider = provider;\r\n\r\n  this.setPerAppTypeLoggingEnabled = function (enabled, forceSetAppTypeValue = undefined) {\r\n    // Only enable logging if we find a valid device type through a URL query\r\n    // parameter or the device type meta tag\r\n    let setAppType = null;\r\n    if (forceSetAppTypeValue !== undefined) {\r\n      appType = forceSetAppTypeValue;\r\n      return;\r\n    }\r\n    if (UrlParser) {\r\n      const queryAppType = UrlParser.getParameterValueByName('appType');\r\n      if (constants && constants.appTypes && constants.appTypes.hasOwnProperty(queryAppType)) {\r\n        setAppType = queryAppType;\r\n      }\r\n    }\r\n    if (setAppType == null && DeviceMeta && DeviceMeta().isInApp) {\r\n      setAppType = DeviceMeta().appType;\r\n    }\r\n    if (setAppType !== null) {\r\n      perAppTypeLoggingEnabled = enabled;\r\n      appType = setAppType;\r\n    }\r\n  };\r\n\r\n  // exposed for unit testing\r\n  this.fireEvent = function (cType, eventName) {\r\n    eventName = capitalize(cType + this.provider + eventName);\r\n    if (window.EventTracker) {\r\n      window.EventTracker.fireEvent(appendAppTypeIfEnabled(eventName));\r\n    }\r\n  };\r\n\r\n  this.startStatisticsSequence = function (eventName) {\r\n    if (window.EventTracker) {\r\n      // This will not log to an ephemeral statistics sequence until one of the\r\n      // \"end\" functions is called\r\n      window.EventTracker.start(appendAppTypeIfEnabled(eventName));\r\n    }\r\n  };\r\n\r\n  this.endStatisticsSequenceWithSuccess = function (eventName) {\r\n    if (window.EventTracker) {\r\n      window.EventTracker.endSuccess(appendAppTypeIfEnabled(eventName));\r\n    }\r\n  };\r\n\r\n  this.endStatisticsSequenceWithFailure = function (eventName) {\r\n    if (window.EventTracker) {\r\n      window.EventTracker.endFailure(appendAppTypeIfEnabled(eventName));\r\n    }\r\n  };\r\n\r\n  this.logSuccess = function (cType) {\r\n    this.fireEvent(cType, logConstants.successSuffix);\r\n    this.endStatisticsSequenceWithSuccess(\r\n      capitalize(cType + this.provider + logConstants.completedTimeSequenceSuffix)\r\n    );\r\n  };\r\n\r\n  this.logFail = function (cType) {\r\n    this.fireEvent(cType, logConstants.failSuffix);\r\n  };\r\n\r\n  this.logMaxFail = function (cType) {\r\n    this.fireEvent(cType, logConstants.maxFailSuffix);\r\n    this.endStatisticsSequenceWithFailure(\r\n      capitalize(cType + this.provider + logConstants.completedTimeSequenceSuffix)\r\n    );\r\n  };\r\n\r\n  this.logRetried = function (cType) {\r\n    this.fireEvent(cType, logConstants.retrySuffix);\r\n  };\r\n\r\n  this.logTriggered = function (cType) {\r\n    this.fireEvent(cType, logConstants.triggeredSuffix);\r\n    this.startStatisticsSequence(\r\n      capitalize(cType + this.provider + logConstants.completedTimeSequenceSuffix)\r\n    );\r\n  };\r\n\r\n  this.logInitialized = function (cType) {\r\n    this.fireEvent(cType, logConstants.initializedSuffix);\r\n  };\r\n\r\n  this.logSuppressed = function (cType) {\r\n    this.fireEvent(cType, logConstants.suppressedSuffix);\r\n  };\r\n\r\n  this.logDisplayed = function (cType) {\r\n    this.fireEvent(cType, logConstants.displayedSuffix);\r\n  };\r\n\r\n  this.logProviderError = function (cType) {\r\n    this.fireEvent(cType, logConstants.providerErrorSuffix);\r\n  };\r\n\r\n  this.logMetadataError = function (cType) {\r\n    this.fireEvent(cType, logConstants.metadataErrorSuffix);\r\n  };\r\n\r\n  this.logCaptchaShownEventToEventStream = function (cType, sessionToken, captchaId) {\r\n    this.logCaptchaInitiatedEventToEventStream(\r\n      cType,\r\n      logConstants.captchaInitiatedChallengeTypes.visible,\r\n      sessionToken,\r\n      captchaId\r\n    );\r\n  };\r\n\r\n  this.logCaptchaSuppressedEventToEventStream = function (cType, sessionToken, captchaId) {\r\n    this.logCaptchaInitiatedEventToEventStream(\r\n      cType,\r\n      logConstants.captchaInitiatedChallengeTypes.hidden,\r\n      sessionToken,\r\n      captchaId\r\n    );\r\n  };\r\n\r\n  this.logCaptchaErrorEventToEventStream = function (cType, sessionToken, captchaId, exception) {\r\n    this.logCaptchaInitiatedEventToEventStream(\r\n      cType,\r\n      logConstants.captchaInitiatedChallengeTypes.error,\r\n      sessionToken,\r\n      captchaId,\r\n      exception.toString(),\r\n    );\r\n  };\r\n\r\n  this.logCaptchaInitiatedEventToEventStream = function (\r\n    cType,\r\n    captchaChallengeType,\r\n    sessionToken,\r\n    captchaId,\r\n    message\r\n  ) {\r\n    if (EventStream) {\r\n      const context = cType;\r\n      const eventParams = { type: captchaChallengeType, provider: this.provider };\r\n\r\n      if (sessionToken !== '' && typeof sessionToken !== 'undefined') {\r\n        eventParams.session = sessionToken;\r\n      }\r\n\r\n      if (captchaId !== '' && typeof captchaId !== 'undefined') {\r\n        eventParams.ucid = captchaId;\r\n      }\r\n\r\n      if (message !== '' && typeof message !== 'undefined') {\r\n        eventParams.message = message;\r\n      }\r\n\r\n      EventStream.SendEventWithTarget(\r\n        logConstants.eventStreamCaptchaInitiatedEventName,\r\n        context,\r\n        eventParams,\r\n        EventStream.TargetTypes.WWW\r\n      );\r\n    }\r\n  };\r\n\r\n  this.logCaptchaTokenReceivedEventToEventStream = function (cType, sessionToken, captchaId) {\r\n    if (EventStream) {\r\n      const context = cType;\r\n      EventStream.SendEventWithTarget(\r\n        logConstants.eventStreamCaptchaTokenReceivedEventName,\r\n        context,\r\n        { provider: this.provider, session: sessionToken, ucid: captchaId || '' },\r\n        EventStream.TargetTypes.WWW\r\n      );\r\n    }\r\n  };\r\n\r\n  this.logCaptchaEventToEventStream = function (\r\n    cType,\r\n    solveDuration,\r\n    isSuccessful,\r\n    sessionToken,\r\n    captchaId\r\n  ) {\r\n    if (EventStream) {\r\n      solveDuration = solveDuration || 0;\r\n      const success = isSuccessful ? 'true' : 'false';\r\n      const context = cType;\r\n      EventStream.SendEventWithTarget(\r\n        logConstants.eventStreamCaptchaEventName,\r\n        context,\r\n        {\r\n          solveDuration,\r\n          success,\r\n          provider: this.provider,\r\n          session: sessionToken || '',\r\n          ucid: captchaId || ''\r\n        },\r\n        EventStream.TargetTypes.WWW\r\n      );\r\n    }\r\n  };\r\n\r\n  function appendAppTypeIfEnabled(eventName) {\r\n    if (perAppTypeLoggingEnabled && typeof appType !== 'undefined') {\r\n      return `${eventName}_${appType}`;\r\n    }\r\n\r\n    return eventName;\r\n  }\r\n\r\n  function capitalize(val) {\r\n    return val.charAt(0).toUpperCase() + val.slice(1);\r\n  }\r\n}\r\n\r\nexport default CaptchaLogger;\r\n","import $ from 'jquery';\r\nimport { Dialog, Intl } from 'Roblox';\r\nimport CaptchaConstants from '../constants/captchaConstants';\r\nimport CaptchaLogger from './captchaLogger';\r\n\r\nconst jqFunCaptchaService = (function () {\r\n  const captchaTypes = [];\r\n  const messages = $.extend({}, CaptchaConstants.messages);\r\n  const funCaptchaTokenElem = '#FunCaptcha-Token';\r\n  const funCaptchaIFrameElem = '#fc-iframe-wrap';\r\n  const funCaptchaIFrameFocusTimeout = 500;\r\n  let retryQueued = false;\r\n  let maxRetriesOnValidationFailure = 0;\r\n  let minRetryInterval = 500; // defined in milliseconds\r\n  let maxRetryInterval = 1500; // defined in milliseconds\r\n  const logger = new CaptchaLogger('FunCaptcha');\r\n  const captchaTypeDedupe = {};\r\n\r\n  let unifiedCaptchaId = '';\r\n  let dataExchangeBlob = '';\r\n  const captchaInstances = {};\r\n  const defaultParams = {\r\n    cType: null,\r\n    tokenValidationRetries: 0,\r\n    extraValidationParams: {},\r\n    returnTokenInSuccessCb: false,\r\n    inputParams: {\r\n      dataExchange: '',\r\n      unifiedCaptchaId\r\n    },\r\n    solvedCb: $.noop,\r\n    loadedCb: $.noop,\r\n    supressCb: $.noop,\r\n    shownCb: $.noop,\r\n    successCb: $.noop,\r\n    errorCb: $.noop,\r\n    fcInstance: null\r\n  };\r\n  let userStartedFunCaptchaTime;\r\n\r\n  function getCaptcha(type) {\r\n    for (let i = 0; i < captchaTypes.length; i++) {\r\n      if (captchaTypes[i].Type === type) {\r\n        return captchaTypes[i];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // resets the funcaptcha instance associated with supplied id.\r\n  function resetFunCaptcha(id) {\r\n    if (captchaInstances[id]) {\r\n      captchaInstances[id].fcInstance.refresh_session();\r\n    }\r\n  }\r\n\r\n  /*\r\n       elemId - Id of element to render FC on.\r\n       Values inside params\r\n          cType**: captcha action type to perform\r\n          solvedCb: triggered when users solved FC\r\n          loadedCb: triggered when users solved FC\r\n          suppressCb: triggered when FC doesn't challenge user\r\n          shownCb: triggered when FC shows challenge to user\r\n          successCb**: when user is successful at passing all of Captcha flow\r\n          returnTokenInSuccessCb: return captcha token and provider info if set to true\r\n          inputParams: parameters are required for captcha, e.g. data exchange blob.\r\n          errorCb: when there's an error with the captcha flow\r\n          ** = required.\r\n       */\r\n  function renderFunCaptcha(elemId, params) {\r\n    retryQueued = false;\r\n    logger.logTriggered(params.cType);\r\n    if (params.inputParams) {\r\n      dataExchangeBlob =\r\n        params.inputParams.dataExchange == null ? '' : params.inputParams.dataExchange;\r\n      unifiedCaptchaId =\r\n        params.inputParams.unifiedCaptchaId == null ? '' : params.inputParams.unifiedCaptchaId;\r\n    }\r\n    if (captchaInstances[elemId] && captchaInstances[elemId].fcInstance) {\r\n      // if we already rendered this before, just trigger again.\r\n      captchaInstances[elemId].fcInstance.data = { blob: dataExchangeBlob };\r\n      resetFunCaptcha(elemId);\r\n      return elemId;\r\n    }\r\n    const fcParams = makeInstance(elemId, params);\r\n    userStartedFunCaptchaTime = timestamp();\r\n    logger.logInitialized(fcParams.cType);\r\n    const captchaTypeInfo = getCaptcha(fcParams.cType);\r\n    if (captchaTypeInfo == null) {\r\n      logger.logMetadataError(fcParams.cType);\r\n      if (fcParams.errorCb) {\r\n        fcParams.errorCb(CaptchaConstants.errorCodes.failedToLoadProviderScript);\r\n      }\r\n      return elemId;\r\n    }\r\n    try {\r\n      fcParams.fcInstance = new FunCaptcha({\r\n        public_key: captchaTypeInfo.PublicKey,\r\n        target_html: elemId,\r\n        language: getFunCaptchaLanguageCodeFromCurrentLocale(),\r\n        data: { blob: dataExchangeBlob },\r\n        callback() {\r\n          // this is where we do verification with server\r\n          let userSolveFunCaptchaTime = null;\r\n          if (userStartedFunCaptchaTime) {\r\n            userSolveFunCaptchaTime = timestamp() - userStartedFunCaptchaTime;\r\n            userStartedFunCaptchaTime = null;\r\n          }\r\n\r\n          const token = getSessionToken();\r\n          logger.logCaptchaTokenReceivedEventToEventStream(fcParams.cType, token, unifiedCaptchaId);\r\n\r\n          if (fcParams.returnTokenInSuccessCb === true) {\r\n            logger.logSuccess(fcParams.cType);\r\n            logger.logCaptchaEventToEventStream(\r\n              fcParams.cType,\r\n              userSolveFunCaptchaTime,\r\n              true,\r\n              token\r\n            );\r\n            fcParams.successCb(token, unifiedCaptchaId);\r\n          } else {\r\n            verifyWithServer(fcParams, elemId, token, userSolveFunCaptchaTime, unifiedCaptchaId);\r\n            fcParams.solvedCb();\r\n          }\r\n        },\r\n        loaded_callback() {\r\n          fcLoaded(fcParams.cType);\r\n          fcParams.loadedCb();\r\n        },\r\n        onsuppress() {\r\n          fcSuppressed(fcParams.cType, unifiedCaptchaId);\r\n          fcParams.suppressCb();\r\n        },\r\n        onshown() {\r\n          fcShown(fcParams.cType, unifiedCaptchaId);\r\n          fcParams.shownCb();\r\n        }\r\n      });\r\n    } catch (e) {\r\n      logger.logProviderError(fcParams.cType);\r\n      logger.logCaptchaErrorEventToEventStream(\r\n        fcParams.cType,\r\n        getSessionToken(),\r\n        unifiedCaptchaId,\r\n        e\r\n      );\r\n\r\n      if (fcParams.errorCb) {\r\n        fcParams.errorCb(CaptchaConstants.errorCodes.failedToLoadProviderScript, e);\r\n      }\r\n    }\r\n    return elemId;\r\n  }\r\n\r\n  function showFunCaptchaInModal() {\r\n    Dialog.open({\r\n      bodyContent: '<div id=\"funcaptcha-modal-body\" class=\"funcaptcha-modal-body\"></div>',\r\n      allowHtmlContentInBody: true,\r\n      showAccept: false,\r\n      showDecline: false,\r\n      xToCancel: true,\r\n      onCloseCallback: dismissFunCaptchaModal\r\n    });\r\n    const captchaElm = $('#game-card-redeem-captcha').removeClass('hidden').detach();\r\n    $('#funcaptcha-modal-body').append(captchaElm);\r\n  }\r\n\r\n  function dismissFunCaptchaModal() {\r\n    const captchaElm = $('#game-card-redeem-captcha').addClass('hidden').detach();\r\n    $('#redeem-card-wrapper').append(captchaElm);\r\n    Dialog.close();\r\n  }\r\n\r\n  function makeInstance(id, params) {\r\n    const newParams = $.extend({}, defaultParams, params);\r\n    captchaInstances[id] = newParams;\r\n    return newParams;\r\n  }\r\n\r\n  // returns the FunCaptcha session token stored in an element\r\n  // that is modified by Arkose Labs' JS API\r\n  function getSessionToken() {\r\n    return $(funCaptchaTokenElem).val();\r\n  }\r\n\r\n  function verifyWithServer(fcParams, elemId, token, solveDuration, captchaId) {\r\n    let data = {\r\n      fcToken: token\r\n    };\r\n    data = $.extend({}, data, fcParams.extraValidationParams);\r\n    $.ajax({\r\n      method: 'POST',\r\n      data,\r\n      url: getCaptcha(fcParams.cType).ApiUrl,\r\n      success: function success() {\r\n        logger.logSuccess(fcParams.cType);\r\n        logger.logCaptchaEventToEventStream(fcParams.cType, solveDuration, true, token, captchaId);\r\n        fcParams.successCb();\r\n      },\r\n      error: function error() {\r\n        logger.logFail(fcParams.cType);\r\n\r\n        if (fcParams.tokenValidationRetries < maxRetriesOnValidationFailure) {\r\n          if (!retryQueued) {\r\n            retryQueued = true;\r\n            setTimeout(function () {\r\n              retryFunCaptcha(fcParams, elemId);\r\n            }, getRetryInterval());\r\n          }\r\n        } else {\r\n          logger.logMaxFail(fcParams.cType);\r\n          logger.logCaptchaEventToEventStream(\r\n            fcParams.cType,\r\n            solveDuration,\r\n            false,\r\n            token,\r\n            captchaId\r\n          );\r\n          if (fcParams.errorCb) {\r\n            fcParams.errorCb(CaptchaConstants.errorCodes.failedToVerify, null);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  function retryFunCaptcha(fcParams, elemId) {\r\n    if (retryQueued) {\r\n      fcParams.tokenValidationRetries += 1;\r\n      logger.logRetried(fcParams.cType);\r\n      renderFunCaptcha(elemId, fcParams);\r\n    }\r\n  }\r\n\r\n  function getRetryInterval() {\r\n    return minRetryInterval + Math.floor(Math.random() * (maxRetryInterval - minRetryInterval));\r\n  }\r\n\r\n  function timestamp() {\r\n    return new Date().valueOf();\r\n  }\r\n\r\n  function fcSuppressed(cType, captchaId) {\r\n    logger.logSuppressed(cType);\r\n    logger.logCaptchaSuppressedEventToEventStream(cType, getSessionToken(), captchaId);\r\n  }\r\n\r\n  function fcShown(cType, captchaId) {\r\n    logger.logDisplayed(cType);\r\n    logger.logCaptchaShownEventToEventStream(cType, getSessionToken(), captchaId);\r\n  }\r\n\r\n  function fcLoaded(cType) {\r\n    // This is a fix specifically for iOS8 devices\r\n    // There are several UI issues with forms and selection in iOS 8 Safari\r\n    // FunCaptcha will not function properly if it is rendered immediately after\r\n    // a text form input\r\n    setTimeout(function () {\r\n      $(funCaptchaIFrameElem).focus();\r\n    }, funCaptchaIFrameFocusTimeout);\r\n  }\r\n\r\n  function deCapitalize(val) {\r\n    return val.charAt(0).toLowerCase() + val.slice(1);\r\n  }\r\n\r\n  function getFunCaptchaLanguageCodeFromCurrentLocale() {\r\n    if (Intl) {\r\n      const intl = new Intl();\r\n      if (CaptchaConstants.localeToFunCaptchaLanguageCodeMap.hasOwnProperty(intl.locale)) {\r\n        return CaptchaConstants.localeToFunCaptchaLanguageCodeMap[intl.locale];\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  return {\r\n    types: $.extend({}, CaptchaConstants.types),\r\n\r\n    setMaxRetriesOnTokenValidationFailure(value) {\r\n      maxRetriesOnValidationFailure = value;\r\n    },\r\n\r\n    setRetryIntervalRange(min, max) {\r\n      minRetryInterval = min;\r\n      maxRetryInterval = max;\r\n    },\r\n\r\n    reset: resetFunCaptcha,\r\n\r\n    render: renderFunCaptcha,\r\n\r\n    addCaptchaTypes(types, camelCaseTypes) {\r\n      if (!types) {\r\n        return;\r\n      }\r\n\r\n      types.forEach(function (type) {\r\n        const captchaType = {\r\n          Type: camelCaseTypes ? deCapitalize(type.Type) : type.Type,\r\n          ApiUrl: type.ApiUrl,\r\n          PublicKey: type.PublicKey\r\n        };\r\n\r\n        const dedupeKey = JSON.stringify(captchaType);\r\n        if (!captchaTypeDedupe.hasOwnProperty(dedupeKey)) {\r\n          captchaTypeDedupe[dedupeKey] = captchaType;\r\n          captchaTypes.push(captchaType);\r\n        }\r\n      });\r\n    },\r\n\r\n    setPerAppTypeLoggingEnabled(enabled, forceSetAppTypeValue = undefined) {\r\n      logger.setPerAppTypeLoggingEnabled(enabled, forceSetAppTypeValue);\r\n    },\r\n\r\n    showFunCaptchaInModal,\r\n\r\n    dismissFunCaptchaModal,\r\n\r\n    // exposed for unit testing purpose.\r\n    captchaInstances,\r\n    loggerInstance: logger\r\n  };\r\n})();\r\n\r\nexport default jqFunCaptchaService;\r\n","module.exports = \"<div class=\\\"captcha-container\\\" ng-controller=\\\"captchaV2Controller\\\"> <div class=\\\"modal\\\" ng-class=\\\"$ctrl.getCaptchaClasses()\\\" ng-click=\\\"$ctrl.hideCaptcha()\\\"> <div class=\\\"modal-dialog\\\"> <div class=\\\"modal-content\\\"> <div class=\\\"modal-body\\\" ng-click=\\\"$event.stopPropagation()\\\"> <button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"$ctrl.hideCaptcha()\\\"> <span aria-hidden=\\\"true\\\"><span class=\\\"icon-close\\\"></span></span><span class=\\\"sr-only\\\">Close</span> </button> <div id=\\\"{{ $ctrl.id }}\\\" class=\\\"captchav2-funcaptcha-modal-body\\\"></div> </div> </div> </div> </div> </div>\";","module.exports = Roblox;","module.exports = angular;","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import angular from \"angular\";\r\nimport { importFilesUnderPath, templateCacheGenerator } from \"roblox-es6-migration-helper\";\r\n\r\nimport \"../../../css/captchaV2Bundle.scss\";\r\n\r\nimport captchaV2Module from \"./captchaV2Module\";\r\n\r\nimport {Captcha, CaptchaConstants, CaptchaLogger, FunCaptcha, triggerCaptcha} from \"../../jquery/captcha/appCaptchaEntry\";\r\n\r\nimportFilesUnderPath(require.context(\"./constants/\", true, /\\.js$/));\r\nimportFilesUnderPath(require.context(\"./values/\", true, /\\.js$/));\r\nimportFilesUnderPath(require.context(\"./services/\", true, /\\.js$/));\r\nimportFilesUnderPath(require.context(\"./controllers/\", true, /\\.js$/));\r\nimportFilesUnderPath(require.context(\"./components/\", true, /\\.js$/));\r\n\r\nlet captchaV2TemplateContext = require.context(\"./\", true, /\\.html$/);\r\n\r\ntemplateCacheGenerator(angular, \"captchaV2Templates\", captchaV2TemplateContext);\r\nwindow.Roblox.CaptchaLogger = CaptchaLogger;\r\nwindow.Roblox.FunCaptcha = FunCaptcha;\r\nwindow.Roblox.CaptchaConstants = CaptchaConstants;\r\nwindow.Roblox.triggerCaptcha = triggerCaptcha\r\nwindow.Roblox.Captcha = Captcha;\r\n\r\nexport default captchaV2Module ;"],"sourceRoot":""}