{"version":3,"sources":["webpack:///../node_modules/classnames/index.js","webpack:///./html/navigation.html","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external \"React\"","webpack:///external \"CoreUtilities\"","webpack:///external \"HeaderScripts\"","webpack:///external \"ReactDOM\"","webpack:///external \"ReactUtilities\"","webpack:///./js/react/navigation/constants/layoutConstants.js","webpack:///./js/react/navigation/translation.config.js","webpack:///external \"PropTypes\"","webpack:///external \"ReactStyleGuide\"","webpack:///external \"RobloxThumbnails\"","webpack:///external \"Roblox\"","webpack:///./js/react/navigation/constants/linkConstants.js","webpack:///./js/react/navigation/constants/urlConstants.js","webpack:///./js/react/navigation/services/navigationService.js","webpack:///./js/react/navigation/components/LeftNavItem.jsx","webpack:///external \"CoreRobloxUtilities\"","webpack:///./js/react/navigation/components/SponsoredEvents.jsx","webpack:///./js/react/navigation/containers/SponsoredEventsContainer.jsx","webpack:///external \"angular\"","webpack:///./js/react/navigation/util/navigationUtil.js","webpack:///./js/react/navigation/components/ScrollList.jsx","webpack:///./js/react/navigation/containers/ScrollListContainer.jsx","webpack:///./js/react/navigation/util/userUtil.js","webpack:///./js/react/navigation/components/LeftNavigation.jsx","webpack:///./js/react/navigation/containers/LeftNavigation.jsx","webpack:///./js/react/navigation/constants/searchConstants.ts","webpack:///./js/react/navigation/services/searchService.ts","webpack:///./js/react/navigation/util/searchUtil.js","webpack:///./js/react/navigation/constants/searchEventStreamConstants.js","webpack:///./js/react/navigation/components/SearchLinks.jsx","webpack:///./js/react/navigation/components/SearchLink.jsx","webpack:///./js/react/navigation/components/NewSearchLinks.jsx","webpack:///./js/react/navigation/components/SearchInput.jsx","webpack:///./js/react/navigation/containers/UniversalSearch.jsx","webpack:///./js/react/navigation/containers/LoginForm.jsx","webpack:///./js/react/navigation/containers/NotificationStreamIcon.jsx","webpack:///./js/react/navigation/containers/NotificationStreamBase.jsx","webpack:///./js/react/navigation/components/NotificationStreamPopover.jsx","webpack:///./js/react/navigation/components/SettingsIcon.jsx","webpack:///./js/react/navigation/components/SettingsMenu.jsx","webpack:///./js/react/navigation/components/SettingsPopover.jsx","webpack:///./js/react/navigation/components/BuyRobuxIcon.jsx","webpack:///./js/react/navigation/components/RobuxMenu.jsx","webpack:///./js/react/navigation/components/BuyRobuxPopover.jsx","webpack:///./js/react/navigation/components/UniverseSearchIcon.jsx","webpack:///./js/react/navigation/components/AgeBracketDisplay.jsx","webpack:///./js/react/navigation/containers/HeaderIconsGroup.jsx","webpack:///./js/react/navigation/components/HeaderSignupLink.jsx","webpack:///./js/react/navigation/components/HeaderRightNav.jsx","webpack:///./js/react/navigation/containers/NavigationRightHeader.jsx","webpack:///./js/react/navigation/containers/MenuIcon.jsx","webpack:///./js/react/navigation/navigationEntry.jsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","React","CoreUtilities","HeaderScripts","ReactDOM","ReactUtilities","arrowUp","arrowDown","tab","enter","name","clickMerchandise","goToAmazonStore","friendshipNotifications","requestCountChanged","friendshipCreated","friendshipDestroyed","friendshipDeclined","friendshipRequested","quickLogin","logout","settings","translationConfig","common","feature","PropTypes","ReactStyleGuide","RobloxThumbnails","Roblox","getAbsoluteUrl","Endpoints","authApi","EnvironmentUrls","gameSearchLink","url","label","pageSort","icon","miscSearchLink","scrollListItems","home","idSelector","iconClass","labelTranslationKey","profile","authenticatedUser","messages","urlForNotification","friends","avatar","inventory","trade","groups","feeds","blog","shop","isModal","giftcards","upgradeButton","sponsorEvents","events","universalSearchUrls","newUniversalSearchUrls","settingsUrl","help","buyRobuxUrl","robuxBalance","buyRobux","userDataUrl","quickLoginUrl","accountSettingsApi","websiteUrl","adsApi","economyApi","privateMessagesApi","tradesApi","friendsApi","pageType","toLowerCase","getCurrentPasswordStatusUrl","getEmailStatusUrl","getLogoutUrl","getSponsoredPageUrl","getUnreadPrivateMessagesCountUrl","getUserCurrencyUrl","userId","getTradeStatusCountUrl","getFriendsRequestCountUrl","urlConfig","withCredentials","httpService","then","result","data","catch","e","console","error","LeftNavItem","translate","onClickShopLink","friendsData","messagesData","tradeData","notificationItem","links","hrefUrl","count","id","type","onClick","className","Link","title","numberFormat","abbreviateNumber","defaultProps","propTypes","CoreRobloxUtilities","eventTypes","eventStreamService","getSponsoredEventUrl","urlConstants","sponsoredEvent","pageLoad","context","SponsoredEvent","sponsoredPages","sponsoredPagesData","map","logoImageUrl","ng-non-bindable","href","sponsoredPageName","src","alt","props","isAuthenticated","useState","setSponsoredPagesData","useEffect","navigationService","filteredEvents","filter","event","includes","debug","SponsoredEvents","angular","logoutAndRedirect","window","location","getRootUrl","getQueryParam","urlService","parseUrl","composeQueryString","getSignupRedirUrl","getWebsiteUrl","unverifiedEmailGracePeriodInDaysBeforeNotification","layoutConstants","logoutEvent","isGuest","created","Promise","all","isEmailVerified","verified","isPasswordValid","valid","userCreatedDate","now","Date","returnUrl","signupUrl","websiteHost","host","websiteHostName","hostname","stopPropagation","preventDefault","document","dispatchEvent","CustomEvent","scope","$digest","$broadcast","EmailVerificationService","emailAddress","eventName","EventStream","handleFriendsEvent","RealTime","addEventListener","realTimeClient","Subscribe","removeEventListener","Unsubscribe","handleMessagesEvent","innerWidth","pathname","currentPath","startsWith","linksCopy","sort","reduce","r","keyword","indexOf","urls","relevantUrls","some","unRelevantUrls","every","getElementById","queryString","query","substr","split","forEach","pair","value","decodeURIComponent","shopEvents","ScrollList","isShopModalOpen","setShopModalOpen","useCallback","isOpen","navigationUtil","closeShopModel","listNavItems","values","item","upgradeBtn","modalBody","shopModal","SimpleModal","body","show","actionButtonShow","actionButtonText","neutralButtonText","onAction","decodedUrl","open","onNeutral","onClose","setFriendsData","setMessagesData","setTradeData","unsubscribeToFriendsNotifications","unsubscribeToMessagessNotifications","friendsRequestCountData","unreadPrivateMessageData","tradeCountData","displayName","nameForDisplay","DisplayNames","nameForHeader","concatTexts","LeftNavigation","isLeftNavOpen","ClassNames","role","Thumbnail2d","containerClass","targetId","ThumbnailTypes","altName","userUtil","ScrollBar","headerMenuIconClickEvent","layoutConstant","getNavigationContainer","GamesAutocompleteSuggestionEntryType","withTranslations","setIsLeftNavOpen","onClickMenuIcon","debounceTimeout","debouncedSearchInputMaxLength","expiryTimeout","variationId","trendingVariationId","requestSuggestionUrl","isSpecialTreatmentAutocompleteRestricted","parseInt","dataset","numberOfAutocompleteSuggestions","linkConstants","acc","link","isSpecialTreatment","numberOfSpecialTreatmentAutocompleteSuggestions","isAutocompleteSuggestionsIXPTestEnabled","cancelToken","isAutocompleteSuggestion","suggestion","undefined","getAutocompleteSearchType","Error","JSON","stringify","getDefaultSearchType","search","params","prefix","searchConstants","trendingSearchId","cancel","timeout","token","fullError","encodeURIComponent","searchQuery","target","suggestions","searchInput","searchAutocompleteContext","eventStreamCriterias","actionTypes","submit","close","generateSessionInfo","uuidService","searchTextTrim","kwd","resultingKwd","searchType","sessionInfo","formInteraction","searchClear","searchSuggestionClicked","suggestionPosition","suggestionClicked","suggestionType","searchAutocomplete","previousKwd","fromLocalCache","algorithm","latency","timeoutDelayMs","actionType","SearchLinks","locationLabel","indexOfSelectedOption","autocompleteSessionInfo","resetAutocompleteSessionInfo","universalSearchLinks","entries","listClass","searchUtil","phrase","AutocompleteSearchLink","selected","universeId","isThumbnailVisible","setIsThumbnailVisible","size","DefaultThumbnailSize","format","ThumbnailFormat","onLoad","SearchLink","NewSearchLinks","index","searchSuggestions","score","canonicalTitle","thumbnailUrl","trendingSearchStartDateTime","isRequired","SearchInput","isMenuOpen","openMenu","closeMenu","handleSearch","setIsMenuHover","onSubmit","onKeyDown","onKeyUp","isUniverseSearchShown","inputRef","createRef","dropdownRef","clearSearch","current","focus","menuClassName","shown","useOnClickOutside","data-testid","ref","onChange","placeholder","maxLength","onFocus","autoComplete","autoCorrect","autoCapitalize","spellCheck","tabIndex","aria-label","onMouseEnter","onMouseLeave","UniversalSearch","constructSearchSuggestions","additionalSuggestions","showGameSearchLink","findIndex","debouncedSearchInput","splicedSuggestions","slice","gameSearchLinkIndex","setSearchInput","useDebounce","previousDebouncedSearchInput","usePrevious","autocompleteSuggestions","setAutocompleteSuggestions","setAutocompleteSessionInfo","setIsMenuOpen","isMenuHover","setSelectedListOptions","keyCodes","layout","useMemo","searchSuggestionLength","start","searchService","end","seenSuggestions","algorithmName","getAutocompleteSuggestion","newAutoCompleteSessionInfo","currentCursor","keyCode","suggestionUrl","UniversalSearchContainer","html","this","container","err","log","c","dangerouslySetInnerHTML","__html","notification-stream-indicator","themeFontClass","streamClass","notification-stream-base-view","NotificationStreamPopover","Popover","trigger","placement","closeOnClick","SettingsIcon","accountNotificationCount","notificationClasses","hidden","logoutUser","SettingsMenu","isCrossDeviceLoginCodeValidationDisplayed","urlKey","cssClasses","SettingsPopover","setCrossDeviceLoginCodeValidationDisplayed","containerPadding","BuyRobuxIcon","robuxAmount","isGetCurrencyCallDone","robuxError","robuxAmountValue","Tooltip","content","containerClassName","RobuxMenu","robuxValue","BuyRobuxPopover","UniverseSearchIcon","toggleUniverseSearch","onKeyPress","AgeBracketDisplay","isUnder13","getAccountNotificationCount","HeaderIconsGroup","setAccountNotificationCount","setGetCurrencyCallDone","setRobuxAmount","setRobuxError","usercurrencyData","robux","finally","notificationStream","handleSignupClick","getSignupUrl","HeaderSignupLink","isLoginPopoverAvailable","HeaderRightNav","isCurrentMobileSize","isInMobileSize","setMobileSize","setUniverseSearchShown","resizeEventHandler","isCurrentWindowMobileSize","isShown","MenuIcon","rightNavigationHeaderContainerId","leftNavigationContainerId","menuIconContainerId","ready","render"],"mappings":"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","file":"navigation.bundle.min.js","sourcesContent":["/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","module.exports = \"module.exports = __webpack_public_path__ + \\\"../html/navigation.html\\\";\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var __WEBPACK_NAMESPACE_OBJECT__ = React;","var __WEBPACK_NAMESPACE_OBJECT__ = CoreUtilities;","var __WEBPACK_NAMESPACE_OBJECT__ = HeaderScripts;","var __WEBPACK_NAMESPACE_OBJECT__ = ReactDOM;","var __WEBPACK_NAMESPACE_OBJECT__ = ReactUtilities;","export default {\n  displayTypes: {\n    large: 'large',\n    small: 'small'\n  },\n\n  classNamesForHeaderLink: {\n    large: 'hidden-xs hidden-sm col-md-5 col-lg-4',\n    small: 'hidden-md hidden-lg col-xs-12'\n  },\n\n  keyCodes: {\n    arrowUp: 38,\n    arrowDown: 40,\n    tab: 9,\n    enter: 13\n  },\n\n  logoutEvent: {\n    name: 'Roblox.Logout'\n  },\n\n  // this is a setting on the server\n  unverifiedEmailGracePeriodInDaysBeforeNotification: 1,\n\n  shopEvents: {\n    clickMerchandise: 'clickMerchandiseInLeftNav',\n    goToAmazonStore: 'clickContinueToAmazonStore'\n  },\n  friendEvents: {\n    friendshipNotifications: 'FriendshipNotifications',\n    requestCountChanged: 'Roblox.Friends.CountChanged',\n    friendshipCreated: 'FriendshipCreated',\n    friendshipDestroyed: 'FriendshipDestroyed',\n    friendshipDeclined: 'FriendshipDeclined',\n    friendshipRequested: 'FriendshipRequested'\n  },\n  messagesCountChangeEvent: {\n    name: 'Roblox.Messages.CountChanged'\n  },\n  robuxOnEconomySystemOutage: '?',\n  headerMenuIconClickEvent: {\n    name: 'headerMenuIconClick'\n  },\n  menuKeys: {\n    quickLogin: 'quickLogin',\n    logout: 'logout',\n    settings: 'settings'\n  }\n};\n","export const translationConfig = {\n  common: ['CommonUI.Features', 'Common.AlertsAndOptions'],\n  feature: 'Feature.ShopDialog'\n};\n\nexport default translationConfig;\n","var __WEBPACK_NAMESPACE_OBJECT__ = PropTypes;","var __WEBPACK_NAMESPACE_OBJECT__ = ReactStyleGuide;","var __WEBPACK_NAMESPACE_OBJECT__ = RobloxThumbnails;","var __WEBPACK_NAMESPACE_OBJECT__ = Roblox;","import { Endpoints, EnvironmentUrls } from 'Roblox';\nimport { authenticatedUser } from 'header-scripts';\n\nconst { getAbsoluteUrl } = Endpoints;\nconst { authApi } = EnvironmentUrls;\nconst gameSearchLink = {\n  url: getAbsoluteUrl('/discover/?Keyword='),\n  label: 'Label.Experience',\n  pageSort: ['home', 'games', 'discover'],\n  icon: 'icon-menu-games-off'\n};\n\nconst miscSearchLink = [\n  {\n    url: getAbsoluteUrl('/search/users?keyword='),\n    label: 'Label.Players',\n    pageSort: ['users'],\n    icon: 'icon-menu-profile'\n  },\n  {\n    url: getAbsoluteUrl('/catalog?CatalogContext=1&Keyword='),\n    label: 'Label.AvatarShop',\n    pageSort: ['catalog', 'inventory', 'bundles', 'my/avatar'],\n    icon: 'icon-menu-shop'\n  },\n  {\n    url: getAbsoluteUrl('/search/groups?keyword='),\n    label: 'Label.sGroups',\n    pageSort: ['groups'],\n    icon: 'icon-menu-groups'\n  },\n  {\n    url: getAbsoluteUrl('/develop/library?CatalogContext=2&Category=6&Keyword='),\n    label: 'Label.Library',\n    pageSort: ['develop'],\n    icon: 'icon-menu-library'\n  }\n];\n\nexport default {\n  scrollListItems: {\n    home: {\n      url: getAbsoluteUrl('/'),\n      idSelector: 'nav-home',\n      iconClass: 'icon-nav-home',\n      name: 'home',\n      labelTranslationKey: 'Label.sHome'\n    },\n    profile: {\n      url: getAbsoluteUrl(`/users/${authenticatedUser.id}/profile`),\n      idSelector: 'nav-profile',\n      iconClass: 'icon-nav-profile',\n      name: 'profile',\n      labelTranslationKey: 'Label.sProfile'\n    },\n    messages: {\n      url: getAbsoluteUrl('/my/messages/#!/inbox'),\n      urlForNotification: getAbsoluteUrl('/my/messages/#!/inbox'),\n      idSelector: 'nav-message',\n      iconClass: 'icon-nav-message',\n      name: 'messages',\n      labelTranslationKey: 'Label.sMessages'\n    },\n    friends: {\n      url: getAbsoluteUrl('/users/friends'),\n      urlForNotification: getAbsoluteUrl('/users/friends#!/friend-requests'),\n      idSelector: 'nav-friends',\n      iconClass: 'icon-nav-friends',\n      name: 'friends',\n      labelTranslationKey: 'Label.sFriends'\n    },\n    avatar: {\n      url: getAbsoluteUrl('/my/avatar'),\n      idSelector: 'nav-character',\n      iconClass: 'icon-nav-charactercustomizer',\n      name: 'avatar',\n      labelTranslationKey: 'Label.sAvatar'\n    },\n    inventory: {\n      url: getAbsoluteUrl(`/users/${authenticatedUser.id}/inventory`),\n      idSelector: 'nav-inventory',\n      iconClass: 'icon-nav-inventory',\n      name: 'inventory',\n      labelTranslationKey: 'Label.sInventory'\n    },\n    trade: {\n      url: getAbsoluteUrl('/trades'),\n      urlForNotification: getAbsoluteUrl('/trades'),\n      idSelector: 'nav-trade',\n      iconClass: 'icon-nav-trade',\n      name: 'trade',\n      labelTranslationKey: 'Label.sTrade'\n    },\n    groups: {\n      url: getAbsoluteUrl('/my/groups'),\n      idSelector: 'nav-group',\n      iconClass: 'icon-nav-group',\n      name: 'groups',\n      labelTranslationKey: 'Label.sGroups'\n    },\n    feeds: {\n      url: getAbsoluteUrl('/feeds/'),\n      idSelector: 'nav-my-feed',\n      iconClass: 'icon-nav-my-feed',\n      name: 'feeds',\n      labelTranslationKey: 'Label.Feeds'\n    },\n    blog: {\n      url: getAbsoluteUrl('https://blog.roblox.com'),\n      idSelector: 'nav-blog',\n      iconClass: 'icon-nav-blog',\n      name: 'blog',\n      labelTranslationKey: 'Label.sBlog'\n    },\n    shop: {\n      isModal: true,\n      idSelector: 'nav-shop',\n      iconClass: 'icon-nav-shop',\n      name: 'shop',\n      labelTranslationKey: 'Label.OfficialStore'\n    },\n    giftcards: {\n      url: getAbsoluteUrl('/giftcards-us'),\n      idSelector: 'nav-giftcards',\n      iconClass: 'icon-nav-giftcards',\n      name: 'giftcards',\n      labelTranslationKey: 'Label.GiftCards'\n    }\n  },\n  upgradeButton: {\n    url: getAbsoluteUrl('/premium/membership?ctx=leftnav'),\n    labelTranslationKey: authenticatedUser.isPremiumUser ? 'ActionsPremium' : 'ActionsGetPremium'\n  },\n  sponsorEvents: {\n    label: {\n      labelTranslationKey: 'Label.sEvents'\n    },\n    events: {\n      // TODO: dynamical generate from ads.roblox.com/v1/sponsored-page\n    }\n  },\n  gameSearchLink,\n  miscSearchLink,\n  universalSearchUrls: [\n    {\n      url: getAbsoluteUrl('/search/users?keyword='),\n      label: 'Label.Players',\n      pageSort: []\n    },\n    {\n      url: getAbsoluteUrl('/discover/?Keyword='),\n      label: 'Label.Experience',\n      pageSort: ['home', 'games', 'discover']\n    },\n    {\n      url: getAbsoluteUrl('/catalog/browse.aspx?CatalogContext=1&Keyword='),\n      label: 'Label.sCatalog',\n      pageSort: ['catalog', 'inventory', 'bundles']\n    },\n    {\n      url: getAbsoluteUrl('/search/groups?keyword='),\n      label: 'Label.sGroups',\n      pageSort: ['groups']\n    },\n    {\n      url: getAbsoluteUrl('/develop/library?CatalogContext=2&Category=6&Keyword='),\n      label: 'Label.Library',\n      pageSort: ['develop']\n    }\n  ],\n  newUniversalSearchUrls: [gameSearchLink, ...miscSearchLink],\n  settingsUrl: {\n    settings: { url: getAbsoluteUrl('/my/account'), label: 'Label.sSettings' },\n    quickLogin: { url: getAbsoluteUrl('/home'), label: 'Label.sQuickLogin' },\n    help: { url: getAbsoluteUrl('/info/help?locale='), label: 'Label.sHelp' },\n    logout: { url: `${authApi}/v2/logout`, label: 'Label.sLogout' }\n  },\n  buyRobuxUrl: {\n    robuxBalance: {\n      url: getAbsoluteUrl('/transactions'),\n      label: 'Label.sRobuxMessage'\n    },\n    buyRobux: { url: getAbsoluteUrl('/upgrades/robux?ctx=navpopover'), label: 'Label.sBuyRobux' }\n  },\n  userDataUrl: getAbsoluteUrl('/navigation/userData'),\n  quickLoginUrl: getAbsoluteUrl('/crossdevicelogin/ConfirmCode')\n};\n","import { Endpoints, EnvironmentUrls } from 'Roblox';\n\nconst { getAbsoluteUrl } = Endpoints;\nconst {\n  authApi,\n  accountSettingsApi,\n  websiteUrl,\n  adsApi,\n  economyApi,\n  privateMessagesApi,\n  tradesApi,\n  friendsApi,\n  apiGatewayUrl\n} = EnvironmentUrls;\nexport default {\n  getCurrentPasswordStatusUrl: () => `${authApi}/v2/passwords/current-status`,\n  getEmailStatusUrl: () => `${accountSettingsApi}/v1/email`,\n  getSignupRedirUrl: () => getAbsoluteUrl('/account/signupredir'),\n  getWebsiteUrl: () => websiteUrl,\n  getLogoutUrl: () => `${authApi}/v2/logout`,\n  getRootUrl: () => getAbsoluteUrl('/'),\n  getSponsoredPageUrl: () => `${adsApi}/v1/sponsored-pages`,\n  getSponsoredEventUrl: (pageType, name) => getAbsoluteUrl(`/${pageType.toLowerCase()}/${name}`),\n  getUnreadPrivateMessagesCountUrl: () => `${privateMessagesApi}/v1/messages/unread/count`,\n  getUserCurrencyUrl: userId => `${economyApi}/v1/users/${userId}/currency`,\n  getTradeStatusCountUrl: () => `${tradesApi}/v1/trades/inbound/count`,\n  getFriendsRequestCountUrl: () => `${friendsApi}/v1/user/friend-requests/count`,\n  getAuthTokenMetaUrl: () => `${apiGatewayUrl}/auth-token-service/v1/login/metadata`\n};\n","import { httpService } from 'core-utilities';\nimport urlConstants from '../constants/urlConstants';\n\nconst {\n  getCurrentPasswordStatusUrl,\n  getEmailStatusUrl,\n  getLogoutUrl,\n  getSponsoredPageUrl,\n  getUnreadPrivateMessagesCountUrl,\n  getUserCurrencyUrl,\n  getTradeStatusCountUrl,\n  getFriendsRequestCountUrl,\n  getAuthTokenMetaUrl\n} = urlConstants;\n\nexport default {\n  getUnreadPrivateMessagesCount() {\n    const urlConfig = { url: getUnreadPrivateMessagesCountUrl(), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n\n  getUserCurrency(userId) {\n    const urlConfig = { url: getUserCurrencyUrl(userId), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n\n  getTradeStatusCount() {\n    const urlConfig = { url: getTradeStatusCountUrl(), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n\n  getFriendsRequestCount() {\n    const urlConfig = { url: getFriendsRequestCountUrl(), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n\n  getCurrentPasswordStatus() {\n    const urlConfig = { url: getCurrentPasswordStatusUrl(), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n  getEmailStatus() {\n    const urlConfig = { url: getEmailStatusUrl(), withCredentials: true };\n    return httpService.get(urlConfig);\n  },\n\n  getSponsoredPages() {\n    const urlConfig = { url: getSponsoredPageUrl(), withCredentials: true };\n    return httpService\n      .get(urlConfig)\n      .then(result => result?.data)\n      .catch(e => {\n        console.error(e);\n      });\n  },\n  getAuthTokenMetadata() {\n    const urlConfig = { url: getAuthTokenMetaUrl(), withCredentials: true };\n    return httpService\n      .get(urlConfig)\n      .then(result => result?.data)\n      .catch(e => {\n        console.error(e);\n      });\n  },\n  logout() {\n    const urlConfig = { url: getLogoutUrl(), withCredentials: true };\n    return httpService.post(urlConfig);\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-style-guide';\nimport { abbreviateNumber, numberFormat } from 'core-utilities';\nimport links from '../constants/linkConstants';\n\nfunction LeftNavItem({\n  translate,\n  idSelector,\n  isModal,\n  name,\n  iconClass,\n  labelTranslationKey,\n  url,\n  urlForNotification,\n  onClickShopLink,\n  friendsData,\n  messagesData,\n  tradeData\n}) {\n  const notificationItems = {\n    [links.scrollListItems.friends.name]: friendsData,\n    [links.scrollListItems.messages.name]: messagesData,\n    [links.scrollListItems.trade.name]: tradeData\n  };\n\n  const notificationItem = notificationItems[name];\n\n  const hrefUrl = notificationItem?.count ? urlForNotification : url;\n\n  if (isModal)\n    return (\n      <li key={name}>\n        <button\n          id={idSelector}\n          type='button'\n          onClick={onClickShopLink}\n          className='dynamic-overflow-container text-nav'>\n          <div>\n            <span className={iconClass} />\n          </div>\n          <span className='font-header-2 dynamic-ellipsis-item'>\n            {translate(labelTranslationKey)}\n          </span>\n        </button>\n      </li>\n    );\n  return (\n    <li key={name}>\n      <Link url={hrefUrl} id={idSelector} className='dynamic-overflow-container text-nav'>\n        <div>\n          <span className={iconClass} />\n        </div>\n        <span className='font-header-2 dynamic-ellipsis-item'>\n          {translate(labelTranslationKey)}\n        </span>\n        {notificationItem && notificationItem.count > 0 && (\n          <div className='dynamic-width-item align-right'>\n            <span\n              className='notification-blue notification'\n              title={numberFormat.getNumberFormat(notificationItem.count)}>\n              {abbreviateNumber.getTruncValue(notificationItem.count, 1000)}\n            </span>\n          </div>\n        )}\n      </Link>\n    </li>\n  );\n}\nLeftNavItem.defaultProps = {\n  idSelector: '',\n  url: '',\n  urlForNotification: '',\n  isModal: false,\n  friendsData: {\n    count: 0\n  },\n  messagesData: {\n    count: 0\n  },\n  tradeData: {\n    count: 0\n  }\n};\n\nLeftNavItem.propTypes = {\n  idSelector: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  isModal: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  iconClass: PropTypes.string.isRequired,\n  labelTranslationKey: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  urlForNotification: PropTypes.string,\n  onClickShopLink: PropTypes.func.isRequired,\n  friendsData: PropTypes.shape({\n    count: PropTypes.number\n  }),\n  messagesData: PropTypes.shape({\n    count: PropTypes.number\n  }),\n  tradeData: PropTypes.shape({\n    count: PropTypes.number\n  })\n};\n\nexport default LeftNavItem;\n","var __WEBPACK_NAMESPACE_OBJECT__ = CoreRobloxUtilities;","import { eventStreamService } from 'core-roblox-utilities';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport urlConstants from '../constants/urlConstants';\n\nconst { eventTypes } = eventStreamService;\nconst { getSponsoredEventUrl } = urlConstants;\n\nconst sponsoredEvent = {\n  name: 'sponsoredEventClicked',\n  type: eventTypes.pageLoad,\n  context: 'click'\n};\n\nfunction sendSponsoredEventClick(sponsoredPageName) {\n  if (eventStreamService) {\n    eventStreamService.sendEvent(sponsoredEvent, { sponsoredPageName });\n  }\n}\n\nfunction SponsoredEvent({ translate, sponsoredPagesData }) {\n  const sponsoredPages = sponsoredPagesData.map(({ title, name, pageType, logoImageUrl }) => {\n    if (logoImageUrl) {\n      return (\n        <li key={name} className='rbx-nav-sponsor' ng-non-bindable='true'>\n          <a\n            className='text-nav menu-item'\n            href={getSponsoredEventUrl(pageType, name)}\n            title={title}\n            onClick={() => sendSponsoredEventClick(title)}>\n            {logoImageUrl ? <img src={logoImageUrl} alt='' /> : <span>{title}</span>}\n          </a>\n        </li>\n      );\n    }\n    return null;\n  });\n  return (\n    <React.Fragment>\n      <li className='font-bold small text-nav'> {translate('Label.sEvents')}</li>\n      {sponsoredPages}\n    </React.Fragment>\n  );\n}\n\nSponsoredEvent.defaultProps = {\n  sponsoredPagesData: []\n};\nSponsoredEvent.propTypes = {\n  translate: PropTypes.func.isRequired,\n  sponsoredPagesData: PropTypes.instanceOf(Array)\n};\n\nexport default SponsoredEvent;\n","import { authenticatedUser } from 'header-scripts';\nimport React, { useState, useEffect } from 'react';\nimport navigationService from '../services/navigationService';\nimport SponsoredEvents from '../components/SponsoredEvents';\n\nfunction SponsoredEventsContainer(props) {\n  const { isAuthenticated } = authenticatedUser;\n  const [sponsoredPagesData, setSponsoredPagesData] = useState([]);\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigationService.getSponsoredPages().then(\n        result => {\n          const events = result?.data ?? [];\n          const filteredEvents = events.filter(event => {\n            return !event?.name?.includes('giftcards') && !event?.title?.includes('giftcards');\n          });\n          setSponsoredPagesData(filteredEvents);\n        },\n        error => {\n          console.debug(error);\n        }\n      );\n    }\n  }, [isAuthenticated]);\n\n  return <SponsoredEvents {...{ sponsoredPagesData, ...props }} />;\n}\n\nexport default SponsoredEventsContainer;\n","var __WEBPACK_NAMESPACE_OBJECT__ = angular;","import angular from 'angular';\nimport { EventStream, RealTime, EmailVerificationService } from 'Roblox';\nimport { urlService } from 'core-utilities';\nimport { authenticatedUser } from 'header-scripts';\nimport navigationService from '../services/navigationService';\nimport layoutConstants from '../constants/layoutConstants';\nimport urlConstants from '../constants/urlConstants';\nimport links from '../constants/linkConstants';\n\nconst { universalSearchUrls, newUniversalSearchUrls } = links;\n\nconst { getQueryParam, parseUrl, composeQueryString } = urlService;\nconst { getSignupRedirUrl, getWebsiteUrl, getRootUrl } = urlConstants;\n\nconst { unverifiedEmailGracePeriodInDaysBeforeNotification, logoutEvent } = layoutConstants;\nconst isGuest = !authenticatedUser.isAuthenticated;\n\nconst isEmailNotificationEnabled = (userCreatedDate, isEmailVerified) => {\n  const now = new Date();\n  const created = new Date(userCreatedDate);\n  const diffInDays = (now - created) / (1000 * 60 * 60 * 24);\n  return diffInDays > unverifiedEmailGracePeriodInDaysBeforeNotification && !isEmailVerified;\n};\n\nconst getAccountNotificationCount = () => {\n  const { created } = authenticatedUser;\n  return Promise.all([\n    navigationService.getEmailStatus(),\n    navigationService.getCurrentPasswordStatus()\n  ])\n    .then(\n      ([\n        {\n          data: { verified: isEmailVerified }\n        },\n        {\n          data: { valid: isPasswordValid }\n        }\n      ]) => {\n        return +isEmailNotificationEnabled(created, isEmailVerified) + +!isPasswordValid;\n      }\n    )\n    .catch(error => {\n      console.debug(error);\n    });\n};\n\n// returnUrl must be from the same domain as current\n// it could be absolute or relative\nconst getSignupUrl = () => {\n  // return from the current page if there is no returnUrl param\n  const returnUrl = getQueryParam('returnUrl') || window.location.href;\n  const signupUrl = getSignupRedirUrl();\n  const { host: websiteHost, hostname: websiteHostName } = parseUrl(getWebsiteUrl());\n  const { host, hostname } = parseUrl(returnUrl, false, true);\n  if (\n    (returnUrl && host && host === websiteHost) ||\n    (hostname && hostname === websiteHostName) ||\n    (!host && !hostname)\n  ) {\n    return `${signupUrl}?${composeQueryString({ returnUrl })}`;\n  }\n  return signupUrl;\n};\n\nconst logoutAndRedirect = () => {\n  return navigationService.logout().then(() => {\n    window.location.href = getRootUrl();\n  });\n};\n\nconst logoutUser = e => {\n  e.stopPropagation();\n  e.preventDefault();\n  document.dispatchEvent(new CustomEvent(logoutEvent.name));\n\n  if (!angular.isUndefined(angular.element('#chat-container').scope())) {\n    const scope = angular.element('#chat-container').scope();\n    scope.$digest(scope.$broadcast('Roblox.Chat.destroyChatCookie'));\n  }\n  EmailVerificationService?.handleUserEmailUpsellAtLogout(logoutAndRedirect).then(data => {\n    // if user is not in test group or has email on file already, logout directly\n    if (!data || data.emailAddress) {\n      logoutAndRedirect();\n    }\n  });\n};\n\nconst sendClickEvent = eventName => {\n  if (EventStream) {\n    EventStream.SendEventWithTarget(eventName, 'click', {}, EventStream.TargetTypes.WWW);\n  }\n};\n\nconst subscribeToFriendsNotifications = handleFriendsEvent => {\n  if (isGuest || !RealTime) {\n    return () => {};\n  }\n  document.addEventListener(layoutConstants.friendEvents.requestCountChanged, handleFriendsEvent);\n  const realTimeClient = RealTime.Factory.GetClient();\n  realTimeClient.Subscribe(\n    layoutConstants.friendEvents.friendshipNotifications,\n    handleFriendsEvent\n  );\n  return () => {\n    document.removeEventListener(\n      layoutConstants.friendEvents.requestCountChanged,\n      handleFriendsEvent\n    );\n    realTimeClient.Unsubscribe(\n      layoutConstants.friendEvents.friendshipNotifications,\n      handleFriendsEvent\n    );\n  };\n};\n\nconst subscribeToMessagesNotifications = handleMessagesEvent => {\n  if (isGuest || !RealTime) {\n    return () => {};\n  }\n  document.addEventListener(layoutConstants.messagesCountChangeEvent, handleMessagesEvent);\n  return () => {\n    document.removeEventListener(layoutConstants.messagesCountChangeEvent, handleMessagesEvent);\n  };\n};\n\nconst isInMobileSize = () => {\n  return window?.innerWidth < 543 ?? false; // breakpoint for mobile size\n};\n\nconst isLoginPopoverAvailable = () => {\n  const { pathname } = window?.location;\n  const currentPath = pathname?.toLowerCase() ?? '';\n\n  return !currentPath.startsWith('/login') && !currentPath.startsWith('/newlogin');\n};\n\nconst getUniversalSearchLinks = () => {\n  const linksCopy = [...universalSearchUrls];\n  linksCopy.sort(({ pageSort }) => {\n    const isRelevant = pageSort.reduce((r, keyword) => {\n      return r || window.location.href.indexOf(keyword) > -1;\n    }, false);\n    if (isRelevant) {\n      return -1;\n    }\n    return 1;\n  });\n  return linksCopy;\n};\n\nconst getNewUniversalSearchLinks = () => {\n  const urls = [...newUniversalSearchUrls];\n  const relevantUrls = urls.filter(({ pageSort }) =>\n    pageSort.some(keyword => window.location.pathname.indexOf(keyword) > -1)\n  );\n  const unRelevantUrls = urls.filter(({ pageSort }) =>\n    pageSort.every(keyword => window.location.pathname.indexOf(keyword) === -1)\n  );\n  return [...relevantUrls, ...unRelevantUrls];\n};\n\nconst getThemeClass = () => {\n  return (\n    document.getElementById('navigation-container') &&\n    document.getElementById('navigation-container').className\n  );\n};\n\nconst parseQuery = queryString => {\n  const query = {};\n  const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n  pairs.forEach(pair => {\n    if (pair.includes('=')) {\n      const [key, value] = pair.split('=');\n      query[decodeURIComponent(key)?.toLowerCase()] = decodeURIComponent(value);\n    }\n  });\n  return query;\n};\n\nexport default {\n  getAccountNotificationCount,\n  getSignupUrl,\n  logoutUser,\n  sendClickEvent,\n  subscribeToFriendsNotifications,\n  subscribeToMessagesNotifications,\n  isInMobileSize,\n  isLoginPopoverAvailable,\n  getUniversalSearchLinks,\n  getNewUniversalSearchLinks,\n  getThemeClass,\n  parseQuery\n};\n","import { EnvironmentUrls } from 'Roblox';\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SimpleModal } from 'react-style-guide';\nimport links from '../constants/linkConstants';\nimport layoutConstants from '../constants/layoutConstants';\nimport LeftNavItem from './LeftNavItem';\nimport SponsoredEventsContainer from '../containers/SponsoredEventsContainer';\nimport navigationUtil from '../util/navigationUtil';\n\nconst { shopEvents } = layoutConstants;\n\nfunction ScrollList({ translate, ...props }) {\n  const [isShopModalOpen, setShopModalOpen] = useState(false);\n\n  const onClickShopLink = useCallback(() => {\n    setShopModalOpen(isOpen => !isOpen);\n    navigationUtil.sendClickEvent(shopEvents.clickMerchandise);\n  }, []);\n\n  const closeShopModel = () => {\n    setShopModalOpen(false);\n  };\n\n  const goToAmazonStop = () => {\n    const decodedUrl = decodeURIComponent(EnvironmentUrls.amazonWebStoreLink);\n    window.open(decodedUrl, '_blank');\n    navigationUtil.sendClickEvent(shopEvents.goToAmazonStore);\n  };\n\n  const listNavItems = Object.values(links.scrollListItems).map(item => (\n    <LeftNavItem key={item.name} {...{ translate, onClickShopLink, ...item, ...props }} />\n  ));\n\n  const upgradeBtn = (\n    <li className='rbx-upgrade-now'>\n      <a\n        href={links.upgradeButton.url}\n        className='btn-growth-md btn-secondary-md'\n        id='upgrade-now-button'>\n        {translate(links.upgradeButton.labelTranslationKey)}\n      </a>\n    </li>\n  );\n\n  const modalBody = (\n    <React.Fragment>\n      <p className='shop-description'>{translate('Description.RetailWebsiteRedirect')}</p>\n      <p className='shop-warning'>{translate('Description.PurchaseAgeWarning')}</p>\n    </React.Fragment>\n  );\n  const shopModal = (\n    <SimpleModal\n      title={translate('Heading.LeavingRoblox')}\n      body={modalBody}\n      show={isShopModalOpen}\n      actionButtonShow\n      actionButtonText={translate('Action.Continue')}\n      neutralButtonText={translate('Action.Cancel')}\n      onAction={goToAmazonStop}\n      onNeutral={closeShopModel}\n      onClose={closeShopModel}\n    />\n  );\n\n  return (\n    <ul className='left-col-list'>\n      {listNavItems}\n      {upgradeBtn}\n      <SponsoredEventsContainer translate={translate} />\n      {shopModal}\n    </ul>\n  );\n}\n\nScrollList.defaultProps = {\n  sponsoredPagesData: []\n};\n\nScrollList.propTypes = {\n  sponsoredPagesData: PropTypes.instanceOf(Array),\n  translate: PropTypes.func.isRequired\n};\n\nexport default ScrollList;\n","import { authenticatedUser } from 'header-scripts';\nimport React, { useState, useEffect } from 'react';\nimport navigationService from '../services/navigationService';\nimport ScrollList from '../components/ScrollList';\nimport navigationUtil from '../util/navigationUtil';\n\nfunction ScrollListContainer(props) {\n  const { isAuthenticated } = authenticatedUser;\n  const [friendsData, setFriendsData] = useState({});\n  const [messagesData, setMessagesData] = useState({});\n  const [tradeData, setTradeData] = useState({});\n\n  useEffect(() => {\n    const handleFriendsEvent = () => {\n      navigationService.getFriendsRequestCount().then(\n        ({ data: friendsRequestCountData }) => {\n          setFriendsData(friendsRequestCountData);\n        },\n        error => {\n          console.debug(error);\n        }\n      );\n    };\n    const handleMessagesEvent = () => {\n      navigationService\n        .getUnreadPrivateMessagesCount()\n        .then(({ data: unreadPrivateMessageData }) => {\n          setMessagesData(unreadPrivateMessageData);\n        });\n    };\n    let unsubscribeToFriendsNotifications = () => {};\n    let unsubscribeToMessagessNotifications = () => {};\n    if (isAuthenticated) {\n      unsubscribeToFriendsNotifications = navigationUtil.subscribeToFriendsNotifications(\n        handleFriendsEvent\n      );\n      unsubscribeToMessagessNotifications = navigationUtil.subscribeToMessagesNotifications(\n        handleMessagesEvent\n      );\n      navigationService.getFriendsRequestCount().then(\n        ({ data: friendsRequestCountData }) => {\n          setFriendsData(friendsRequestCountData);\n        },\n        error => {\n          console.debug(error);\n        }\n      );\n      navigationService.getUnreadPrivateMessagesCount().then(\n        ({ data: unreadPrivateMessageData }) => {\n          setMessagesData(unreadPrivateMessageData);\n        },\n        error => {\n          console.debug(error);\n        }\n      );\n      navigationService.getTradeStatusCount().then(\n        ({ data: tradeCountData }) => {\n          setTradeData(tradeCountData);\n        },\n        error => {\n          console.debug(error);\n        }\n      );\n    }\n    return () => {\n      unsubscribeToFriendsNotifications();\n      unsubscribeToMessagessNotifications();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <ScrollList {...{ friendsData, messagesData, tradeData, ...props }} />;\n}\n\nexport default ScrollListContainer;\n","import { DisplayNames } from 'Roblox';\nimport { authenticatedUser } from 'header-scripts';\nimport { concatTexts } from 'core-utilities';\n\nconst { name, displayName } = authenticatedUser;\nconst getNameForDisplay = () => {\n  return DisplayNames?.Enabled() ? displayName : name;\n};\n\nconst getUserNameForHeader = () => {\n  return DisplayNames?.Enabled() ? concatTexts.concat(['', name]) : name;\n};\n\nexport default {\n  nameForDisplay: getNameForDisplay(),\n  nameForHeader: getUserNameForHeader()\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { Link, ScrollBar } from 'react-style-guide';\nimport { Thumbnail2d, ThumbnailTypes } from 'roblox-thumbnails';\nimport { authenticatedUser } from 'header-scripts';\nimport links from '../constants/linkConstants';\nimport ScrollListContainer from '../containers/ScrollListContainer';\nimport userUtil from '../util/userUtil';\n\nfunction LeftNavigation({ isLeftNavOpen, ...props }) {\n  const classNames = ClassNames('rbx-left-col', {\n    'nav-show': isLeftNavOpen\n  });\n  return (\n    <div id='navigation' className={classNames}>\n      <ul>\n        <li key='username'>\n          <Link\n            className='dynamic-overflow-container text-nav'\n            role='link'\n            url={links.scrollListItems.profile.url}>\n            <span className='avatar avatar-headshot-xs'>\n              <Thumbnail2d\n                containerClass='avatar-card-image'\n                targetId={authenticatedUser.id}\n                type={ThumbnailTypes.avatarHeadshot}\n                altName={authenticatedUser.name}\n              />\n            </span>\n            <div className='font-header-2 dynamic-ellipsis-item'>{userUtil.nameForDisplay}</div>\n          </Link>\n        </li>\n        <li key='divider' className='rbx-divider' />\n      </ul>\n      <ScrollBar className='rbx-scrollbar'>\n        <ScrollListContainer {...props} />\n      </ScrollBar>\n    </div>\n  );\n}\n\nLeftNavigation.propTypes = {\n  isLeftNavOpen: PropTypes.bool.isRequired\n};\n\nexport default LeftNavigation;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { authenticatedUser } from 'header-scripts';\nimport { withTranslations } from 'react-utilities';\nimport layoutConstant from '../constants/layoutConstants';\nimport { translationConfig } from '../translation.config';\nimport LeftNavigationComponent from '../components/LeftNavigation';\n\nconst { headerMenuIconClickEvent } = layoutConstant;\n\nfunction LeftNavigation(props) {\n  const { isAuthenticated } = authenticatedUser;\n  const [isLeftNavOpen, setIsLeftNavOpen] = useState(false);\n\n  const onClickMenuIcon = useCallback(() => {\n    setIsLeftNavOpen(!isLeftNavOpen);\n  }, [isLeftNavOpen]);\n\n  useEffect(() => {\n    document.addEventListener(headerMenuIconClickEvent.name, onClickMenuIcon);\n    return () => {\n      document.removeEventListener(headerMenuIconClickEvent.name, onClickMenuIcon);\n    };\n  }, [onClickMenuIcon]);\n\n  return isAuthenticated ? <LeftNavigationComponent {...{ isLeftNavOpen, ...props }} /> : null;\n}\n\nexport default withTranslations(LeftNavigation, translationConfig);\n","import { EnvironmentUrls } from 'Roblox';\nimport linkConstants from './linkConstants';\n\nconst { apiGatewayUrl } = EnvironmentUrls;\nconst getNavigationContainer = () => document.getElementById('navigation-container');\nexport default {\n  debounceTimeout: 100,\n  debouncedSearchInputMaxLength: 35,\n  expiryTimeout: 5000,\n  variationId: 1,\n  trendingVariationId: 0,\n  requestSuggestionUrl: {\n    url: `${apiGatewayUrl}/games-autocomplete/v1/request-suggestion`,\n    withCredentials: true\n  },\n  isSpecialTreatmentAutocompleteRestricted: (): boolean =>\n    parseInt(getNavigationContainer().dataset.numberOfAutocompleteSuggestions, 10) === 7 &&\n    (linkConstants.miscSearchLink as {\n      pageSort: string[];\n    }[])\n      .reduce<string[]>((acc, link) => {\n        acc.push(...link.pageSort);\n        return acc;\n      }, [])\n      .reduce((r, keyword) => {\n        return r || window.location.pathname.indexOf(keyword) > -1;\n      }, false),\n  isSpecialTreatment: (): boolean =>\n    parseInt(getNavigationContainer()?.dataset.numberOfAutocompleteSuggestions, 10) === 7,\n  numberOfSpecialTreatmentAutocompleteSuggestions: 3,\n  isAutocompleteSuggestionsIXPTestEnabled: (): boolean =>\n    parseInt(getNavigationContainer()?.dataset.numberOfAutocompleteSuggestions, 10) > 0,\n  numberOfAutocompleteSuggestions: (): number =>\n    parseInt(getNavigationContainer()?.dataset.numberOfAutocompleteSuggestions, 10) || 0\n};\n","import { httpService } from 'core-utilities';\nimport searchConstants from '../constants/searchConstants';\n\nlet cancelToken = httpService.createCancelToken();\n\nexport enum GamesAutocompleteSuggestionEntryType {\n  GameSuggestion = 0,\n  QuerySuggestion = 1,\n  TrendingQuerySuggestion = 2\n}\n\nexport type TGamesAutocompleteSuggestionEntry = {\n  type: GamesAutocompleteSuggestionEntryType;\n  score: number;\n  universeId: number;\n  canonicalTitle: string;\n  thumbnailUrl: string;\n  searchQuery: string;\n  trendingSearchStartDateTime: string;\n};\n\nexport type TGamesAutocompleteSuggestion = {\n  prefix: string;\n  algorithmName: string;\n  entries: TGamesAutocompleteSuggestionEntry[];\n};\n\nexport const postRequestSuggestion = async (\n  search: string\n): Promise<TGamesAutocompleteSuggestion> => {\n  const params = {\n    prefix: search.toLowerCase(),\n    variationId: searchConstants.variationId,\n    trendingSearchId: searchConstants.trendingVariationId\n  };\n\n  // Cancels any previous requests that are stil dangling\n  cancelToken.cancel();\n  cancelToken = httpService.createCancelToken();\n\n  const { data } = await httpService.post<TGamesAutocompleteSuggestion>(\n    {\n      ...searchConstants.requestSuggestionUrl,\n      timeout: searchConstants.expiryTimeout,\n      cancelToken: cancelToken.token,\n      fullError: true\n    },\n    params\n  );\n\n  return data;\n};\n\nexport default { postRequestSuggestion };\n","import links from '../constants/linkConstants';\nimport { GamesAutocompleteSuggestionEntryType } from '../services/searchService';\n\nconst isAutocompleteSuggestion = suggestion => suggestion?.label === undefined;\nconst isKeywordSuggestion = suggestion =>\n  isAutocompleteSuggestion(suggestion) &&\n  suggestion.type === GamesAutocompleteSuggestionEntryType.QuerySuggestion;\nconst isGameSuggestion = suggestion =>\n  isAutocompleteSuggestion(suggestion) &&\n  suggestion.type === GamesAutocompleteSuggestionEntryType.GameSuggestion;\n\nconst getAutocompleteSearchType = suggestion => {\n  switch (suggestion.type) {\n    case GamesAutocompleteSuggestionEntryType.QuerySuggestion: {\n      return 'keyword';\n    }\n    case GamesAutocompleteSuggestionEntryType.GameSuggestion: {\n      return 'game';\n    }\n    default: {\n      throw Error(`Unrecognized autocomplete suggestion, ${JSON.stringify(suggestion)}`);\n    }\n  }\n};\n\nconst getDefaultSearchType = suggestion => {\n  switch (suggestion.label) {\n    case 'Label.Players': {\n      return 'defaultPlayers';\n    }\n    case 'Label.AvatarShop':\n    case 'Label.sCatalog': {\n      return 'defaultShops';\n    }\n    case 'Label.sGroups': {\n      return 'defaultGroups';\n    }\n    case 'Label.Library': {\n      return 'defaultLibrary';\n    }\n    case 'Label.Experience': {\n      return 'defaultGames';\n    }\n    default: {\n      throw Error(`Unrecognized default suggestion, ${JSON.stringify(suggestion)}`);\n    }\n  }\n};\n\nconst getSuggestionUrl = (suggestion, event) => {\n  if (isAutocompleteSuggestion(suggestion)) {\n    return links.gameSearchLink.url + encodeURIComponent(suggestion.searchQuery);\n  }\n  if (event?.target?.value) {\n    return suggestion.url + encodeURIComponent(event.target.value);\n  }\n\n  return '';\n};\n\nconst serializeSuggestions = (suggestions, searchInput) =>\n  suggestions\n    .map(suggestion => {\n      if (isAutocompleteSuggestion(suggestion)) {\n        return `${getAutocompleteSearchType(suggestion)}|${suggestion.searchQuery}`;\n      }\n      return `${getDefaultSearchType(suggestion)}|${searchInput}`;\n    })\n    .join(',');\n\nexport default {\n  isAutocompleteSuggestion,\n  isGameSuggestion,\n  isKeywordSuggestion,\n  getAutocompleteSearchType,\n  getDefaultSearchType,\n  getSuggestionUrl,\n  serializeSuggestions\n};\n","import { uuidService } from 'core-utilities';\nimport { eventStreamService } from 'core-roblox-utilities';\n\nconst { eventTypes } = eventStreamService;\nconst searchAutocompleteContext = 'searchAutocomplete';\nconst actionTypes = { open: 'open', submit: 'submit', close: 'close' };\nconst { generateRandomUuid: generateSessionInfo } = uuidService;\n\nconst eventStreamCriterias = {\n  actionTypes,\n  generateSessionInfo,\n  searchTextTrim: (kwd, resultingKwd, searchType, sessionInfo) => [\n    {\n      name: 'searchTextTrim',\n      type: eventTypes.formInteraction,\n      context: searchAutocompleteContext\n    },\n    {\n      kwd,\n      resultingKwd,\n      searchType,\n      sessionInfo\n    }\n  ],\n  searchClear: (kwd, searchType, sessionInfo) => [\n    {\n      name: 'searchClear',\n      type: eventTypes.formInteraction,\n      context: searchAutocompleteContext\n    },\n    {\n      kwd,\n      searchType,\n      sessionInfo\n    }\n  ],\n  searchSuggestionClicked: (\n    kwd,\n    searchType,\n    suggestionPosition,\n    suggestionClicked,\n    suggestionType,\n    suggestions,\n    sessionInfo\n  ) => [\n    {\n      name: 'searchSuggestionClicked',\n      type: eventTypes.formInteraction,\n      context: searchAutocompleteContext\n    },\n    {\n      kwd,\n      searchType,\n      suggestionPosition,\n      suggestionClicked,\n      suggestionType,\n      suggestions,\n      sessionInfo\n    }\n  ],\n  searchAutocomplete: (\n    kwd,\n    previousKwd,\n    fromLocalCache,\n    suggestions,\n    algorithm,\n    latency,\n    timeoutDelayMs,\n    sessionInfo\n  ) => [\n    {\n      name: 'searchAutocomplete',\n      type: eventTypes.formInteraction,\n      context: searchAutocompleteContext\n    },\n    {\n      kwd,\n      previousKwd,\n      fromLocalCache,\n      suggestions,\n      algorithm,\n      latency,\n      timeoutDelayMs,\n      sessionInfo\n    }\n  ],\n  search: (kwd, actionType, sessionInfo) => [\n    {\n      name: 'search',\n      type: eventTypes.formInteraction,\n      context: searchAutocompleteContext\n    },\n    {\n      kwd,\n      actionType,\n      sessionInfo\n    }\n  ]\n};\n\nexport { eventStreamCriterias as default };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { eventStreamService } from 'core-roblox-utilities';\nimport { Link } from 'react-style-guide';\nimport navigationUtil from '../util/navigationUtil';\nimport searchUtil from '../util/searchUtil';\nimport events from '../constants/searchEventStreamConstants';\n\nfunction SearchLinks({\n  translate,\n  searchInput,\n  indexOfSelectedOption,\n  autocompleteSessionInfo,\n  resetAutocompleteSessionInfo\n}) {\n  const universalSearchLinks = navigationUtil.getUniversalSearchLinks();\n  let locationLabel;\n  return (\n    <React.Fragment>\n      {Object.entries(universalSearchLinks).map(([key, suggestion]) => {\n        const { url, label } = suggestion;\n        locationLabel = label;\n        if (locationLabel === 'Label.sCatalog') {\n          locationLabel = 'Label.AvatarShop';\n        }\n        const listClass = ClassNames(\n          'navbar-search-option rbx-clickable-li',\n          parseInt(key, 10) === indexOfSelectedOption ? ' selected' : ''\n        );\n        return (\n          <li key={key} className={listClass}>\n            <Link\n              className='navbar-search-anchor'\n              url={url + searchInput}\n              onClick={() => {\n                eventStreamService.sendEvent(\n                  ...events.searchSuggestionClicked(\n                    searchInput,\n                    undefined,\n                    key,\n                    searchInput,\n                    searchUtil.getDefaultSearchType(suggestion),\n                    searchUtil.serializeSuggestions(universalSearchLinks, searchInput),\n                    autocompleteSessionInfo\n                  )\n                );\n                resetAutocompleteSessionInfo();\n              }}>\n              {translate('Label.sSearchPhrase', {\n                phrase: searchInput,\n                location: translate(locationLabel)\n              })}\n            </Link>\n          </li>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n\nSearchLinks.propTypes = {\n  translate: PropTypes.func.isRequired,\n  searchInput: PropTypes.string.isRequired,\n  indexOfSelectedOption: PropTypes.number.isRequired,\n  autocompleteSessionInfo: PropTypes.string.isRequired,\n  resetAutocompleteSessionInfo: PropTypes.func.isRequired\n};\n\nexport default SearchLinks;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { Link } from 'react-style-guide';\nimport {\n  Thumbnail2d,\n  ThumbnailTypes,\n  DefaultThumbnailSize,\n  ThumbnailFormat\n} from 'roblox-thumbnails';\nimport { GamesAutocompleteSuggestionEntryType } from '../services/searchService';\nimport links from '../constants/linkConstants';\n\nconst { gameSearchLink } = links;\n\nexport function AutocompleteSearchLink({ translate, selected, suggestion, onClick }) {\n  const listClass = ClassNames('navbar-search-option rbx-clickable-li', {\n    'new-selected': selected\n  });\n  const { type, universeId, searchQuery } = suggestion;\n  const [isThumbnailVisible, setIsThumbnailVisible] = useState(false);\n\n  if (type === GamesAutocompleteSuggestionEntryType.GameSuggestion) {\n    return (\n      <li className={listClass}>\n        <Link\n          className='new-navbar-search-anchor'\n          url={gameSearchLink.url + encodeURIComponent(searchQuery)}\n          onClick={onClick}>\n          <span className={ClassNames(gameSearchLink.icon, 'navbar-list-option-icon')} />\n          <span className='navbar-list-option-text'>{searchQuery}</span>\n          <span className='navbar-list-option-suffix'>\n            {translate('Label.sSearchPhraseV2', {\n              location: translate(gameSearchLink.label)\n            })}\n          </span>\n          <span\n            className={ClassNames('navbar-list-option-thumbnail', {\n              'navbar-list-option-thumbnail-visible': isThumbnailVisible\n            })}>\n            <span className='background-icon' />\n            <Thumbnail2d\n              type={ThumbnailTypes.gameIcon}\n              size={DefaultThumbnailSize}\n              targetId={universeId}\n              containerClass='thumbnail-icon'\n              format={ThumbnailFormat.jpeg}\n              onLoad={() => {\n                setIsThumbnailVisible(true);\n              }}\n            />\n          </span>\n        </Link>\n      </li>\n    );\n  }\n\n  return (\n    <li className={listClass}>\n      <Link\n        className='new-navbar-search-anchor'\n        url={gameSearchLink.url + encodeURIComponent(searchQuery)}\n        onClick={onClick}>\n        <span className={ClassNames(gameSearchLink.icon, 'navbar-list-option-icon')} />\n        <span className='navbar-list-option-text'>{searchQuery}</span>\n        <span className='navbar-list-option-suffix'>\n          {translate('Label.sSearchPhraseV2', {\n            location: translate(gameSearchLink.label)\n          })}\n        </span>\n      </Link>\n    </li>\n  );\n}\n\nAutocompleteSearchLink.propTypes = {\n  translate: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  suggestion: PropTypes.shape({\n    type: PropTypes.number.isRequired,\n    score: PropTypes.number.isRequired,\n    universeId: PropTypes.number,\n    canonicalTitle: PropTypes.string,\n    thumbnailUrl: PropTypes.string,\n    searchQuery: PropTypes.string.isRequired,\n    trendingSearchStartDateTime: PropTypes.string\n  }).isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport function SearchLink({ translate, selected, searchInput, suggestion, onClick }) {\n  const { url, label, icon } = suggestion;\n  const listClass = ClassNames('navbar-search-option rbx-clickable-li', {\n    'new-selected': selected\n  });\n  return (\n    <li className={listClass}>\n      <Link\n        className='new-navbar-search-anchor'\n        url={url + encodeURIComponent(searchInput)}\n        onClick={onClick}>\n        <span className={ClassNames(icon, 'navbar-list-option-icon')} />\n        <span className='navbar-list-option-text'>{searchInput.toLowerCase()}</span>\n        <span className='navbar-list-option-suffix'>\n          {translate('Label.sSearchPhraseV2', {\n            location: translate(label)\n          })}\n        </span>\n      </Link>\n    </li>\n  );\n}\n\nSearchLink.propTypes = {\n  translate: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  searchInput: PropTypes.string.isRequired,\n  suggestion: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    pageSort: PropTypes.arrayOf(PropTypes.string).isRequired,\n    icon: PropTypes.string.isRequired\n  }).isRequired,\n  onClick: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { eventStreamService } from 'core-roblox-utilities';\nimport searchUtil from '../util/searchUtil';\nimport { AutocompleteSearchLink, SearchLink } from './SearchLink';\nimport events from '../constants/searchEventStreamConstants';\n\nfunction NewSearchLinks({\n  translate,\n  searchInput,\n  indexOfSelectedOption,\n  searchSuggestions,\n  autocompleteSessionInfo,\n  resetAutocompleteSessionInfo\n}) {\n  const onClick = (suggestionType, index) => () => {\n    const suggestion = searchSuggestions[index];\n    eventStreamService.sendEvent(\n      ...events.searchSuggestionClicked(\n        searchInput,\n        undefined,\n        index,\n        searchUtil.isAutocompleteSuggestion(suggestion) ? suggestion.searchQuery : searchInput,\n        suggestionType,\n        searchUtil.serializeSuggestions(searchSuggestions, searchInput),\n        autocompleteSessionInfo\n      )\n    );\n    resetAutocompleteSessionInfo();\n  };\n\n  return searchSuggestions.map((suggestion, index) => {\n    const selected = parseInt(index, 10) === indexOfSelectedOption;\n    return searchUtil.isAutocompleteSuggestion(suggestion) ? (\n      <AutocompleteSearchLink\n        key={suggestion.searchQuery}\n        translate={translate}\n        selected={selected}\n        suggestion={suggestion}\n        onClick={onClick(searchUtil.getAutocompleteSearchType(suggestion), index)}\n      />\n    ) : (\n      <SearchLink\n        key={suggestion.url}\n        translate={translate}\n        selected={selected}\n        suggestion={suggestion}\n        searchInput={searchInput}\n        onClick={onClick(searchUtil.getDefaultSearchType(suggestion), index)}\n      />\n    );\n  });\n}\n\nNewSearchLinks.propTypes = {\n  translate: PropTypes.func.isRequired,\n  searchInput: PropTypes.string.isRequired,\n  indexOfSelectedOption: PropTypes.number.isRequired,\n  searchSuggestions: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.shape({\n        type: PropTypes.number.isRequired,\n        score: PropTypes.number.isRequired,\n        universeId: PropTypes.number.isRequired,\n        canonicalTitle: PropTypes.string,\n        thumbnailUrl: PropTypes.string,\n        searchQuery: PropTypes.string.isRequired,\n        trendingSearchStartDateTime: PropTypes.string\n      }),\n      PropTypes.shape({\n        url: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        pageSort: PropTypes.arrayOf(PropTypes.string).isRequired,\n        icon: PropTypes.string.isRequired\n      })\n    ])\n  ).isRequired,\n  autocompleteSessionInfo: PropTypes.string.isRequired,\n  resetAutocompleteSessionInfo: PropTypes.func.isRequired\n};\n\nexport default NewSearchLinks;\n","import React, { createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { eventStreamService } from 'core-roblox-utilities';\nimport { useOnClickOutside } from 'react-utilities';\nimport SearchLinks from './SearchLinks';\nimport events from '../constants/searchEventStreamConstants';\nimport searchConstants from '../constants/searchConstants';\nimport NewSearchLinks from './NewSearchLinks';\n\nfunction SearchInput({\n  translate,\n  searchInput,\n  isMenuOpen,\n  openMenu,\n  closeMenu,\n  handleSearch,\n  setIsMenuHover,\n  indexOfSelectedOption,\n  onSubmit,\n  onKeyDown,\n  onKeyUp,\n  isUniverseSearchShown,\n  searchSuggestions,\n  autocompleteSessionInfo,\n  resetAutocompleteSessionInfo\n}) {\n  const inputRef = createRef();\n  const dropdownRef = createRef();\n\n  const clearSearch = () => {\n    eventStreamService.sendEvent(\n      ...events.searchClear(searchInput, undefined, autocompleteSessionInfo)\n    );\n    inputRef?.current?.focus();\n    handleSearch({ target: { value: '' } });\n  };\n  const menuClassName = classNames(\n    'navbar-left navbar-search col-xs-5 col-sm-6 col-md-2 col-lg-3',\n    {\n      'navbar-search-open': isMenuOpen,\n      shown: isUniverseSearchShown\n    }\n  );\n\n  useOnClickOutside([inputRef, dropdownRef], closeMenu);\n\n  return (\n    <div data-testid='navigation-search-input' className={menuClassName} role='search'>\n      <div className='input-group'>\n        <form onSubmit={onSubmit}>\n          {searchConstants.isAutocompleteSuggestionsIXPTestEnabled() ? (\n            <div className='form-has-feedback'>\n              <input\n                ref={inputRef}\n                id='navbar-search-input'\n                data-testid='navigation-search-input-field'\n                className='form-control input-field new-input-field'\n                value={searchInput}\n                onChange={handleSearch}\n                placeholder={translate('Label.sSearch')}\n                maxLength='120'\n                onFocus={openMenu}\n                onKeyDown={onKeyDown}\n                onKeyUp={onKeyUp}\n                autoComplete='off'\n                autoCorrect='off'\n                autoCapitalize='off'\n                spellCheck='false'\n              />\n              {searchInput.length > 0 && (\n                <span\n                  data-testid='navigation-search-input-clear-button'\n                  tabIndex={0}\n                  role='button'\n                  aria-label='Clear Search'\n                  onClick={clearSearch}\n                  onKeyDown={clearSearch}\n                  className='clear-search icon-actions-clear-sm'>\n                  <span />\n                </span>\n              )}\n            </div>\n          ) : (\n            <input\n              ref={inputRef}\n              id='navbar-search-input'\n              data-testid='navigation-search-input-field'\n              className='form-control input-field'\n              type='text'\n              value={searchInput}\n              onChange={handleSearch}\n              placeholder={translate('Label.sSearch')}\n              maxLength='120'\n              onFocus={openMenu}\n              onKeyDown={onKeyDown}\n              onKeyUp={onKeyUp}\n              autoComplete='off'\n            />\n          )}\n        </form>\n        <div className='input-group-btn'>\n          <button\n            data-testid='navigation-search-input-search-button'\n            className='input-addon-btn'\n            type='submit'>\n            <span className='icon-common-search-sm' />\n          </button>\n        </div>\n      </div>\n      <ul\n        ref={dropdownRef}\n        className={classNames('dropdown-menu', {\n          'new-dropdown-menu': searchConstants.isAutocompleteSuggestionsIXPTestEnabled()\n        })}\n        role='menu'\n        onMouseEnter={() => {\n          setIsMenuHover(true);\n        }}\n        onMouseLeave={() => {\n          setIsMenuHover(false);\n        }}>\n        {searchConstants.isAutocompleteSuggestionsIXPTestEnabled() ? (\n          <NewSearchLinks\n            translate={translate}\n            searchInput={searchInput}\n            indexOfSelectedOption={indexOfSelectedOption}\n            searchSuggestions={searchSuggestions}\n            autocompleteSessionInfo={autocompleteSessionInfo}\n            resetAutocompleteSessionInfo={resetAutocompleteSessionInfo}\n          />\n        ) : (\n          <SearchLinks\n            translate={translate}\n            searchInput={searchInput}\n            indexOfSelectedOption={indexOfSelectedOption}\n            autocompleteSessionInfo={autocompleteSessionInfo}\n            resetAutocompleteSessionInfo={resetAutocompleteSessionInfo}\n          />\n        )}\n      </ul>\n    </div>\n  );\n}\n\nSearchInput.defaultProps = {\n  isUniverseSearchShown: true\n};\n\nSearchInput.propTypes = {\n  translate: PropTypes.func.isRequired,\n  searchInput: PropTypes.string.isRequired,\n  isMenuOpen: PropTypes.bool.isRequired,\n  openMenu: PropTypes.func.isRequired,\n  closeMenu: PropTypes.func.isRequired,\n  handleSearch: PropTypes.func.isRequired,\n  setIsMenuHover: PropTypes.func.isRequired,\n  indexOfSelectedOption: PropTypes.number.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onKeyDown: PropTypes.func.isRequired,\n  onKeyUp: PropTypes.func.isRequired,\n  isUniverseSearchShown: PropTypes.bool,\n  searchSuggestions: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.shape({\n        type: PropTypes.number.isRequired,\n        score: PropTypes.number.isRequired,\n        universeId: PropTypes.number.isRequired,\n        canonicalTitle: PropTypes.string,\n        thumbnailUrl: PropTypes.string,\n        searchQuery: PropTypes.string.isRequired,\n        trendingSearchStartDateTime: PropTypes.string\n      }),\n      PropTypes.shape({\n        url: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        pageSort: PropTypes.arrayOf(PropTypes.string).isRequired,\n        icon: PropTypes.string\n      })\n    ])\n  ).isRequired,\n  autocompleteSessionInfo: PropTypes.string.isRequired,\n  resetAutocompleteSessionInfo: PropTypes.func.isRequired\n};\n\nexport default SearchInput;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslations, usePrevious, useDebounce } from 'react-utilities';\nimport { httpService } from 'core-utilities';\nimport { eventStreamService } from 'core-roblox-utilities';\nimport { translationConfig } from '../translation.config';\nimport SearchInput from '../components/SearchInput';\nimport layout from '../constants/layoutConstants';\nimport linkConstants from '../constants/linkConstants';\nimport search from '../constants/searchConstants';\nimport searchService, { GamesAutocompleteSuggestionEntryType } from '../services/searchService';\nimport events from '../constants/searchEventStreamConstants';\nimport navigationUtil from '../util/navigationUtil';\nimport searchUtil from '../util/searchUtil';\n\nexport function UniversalSearch({ translate, isUniverseSearchShown }) {\n  const [searchInput, setSearchInput] = useState(\n    navigationUtil.parseQuery(window.location.search).keyword || ''\n  );\n\n  const debouncedSearchInput = useDebounce(searchInput, search.debounceTimeout);\n  const previousDebouncedSearchInput = usePrevious(debouncedSearchInput);\n  const [autocompleteSuggestions, setAutocompleteSuggestions] = useState(null);\n  const [autocompleteSessionInfo, setAutocompleteSessionInfo] = useState(\n    events.generateSessionInfo()\n  );\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isMenuHover, setIsMenuHover] = useState(false);\n  const [indexOfSelectedOption, setSelectedListOptions] = useState(0);\n  const { keyCodes } = layout;\n\n  const universalSearchLinks = search.isAutocompleteSuggestionsIXPTestEnabled()\n    ? navigationUtil.getNewUniversalSearchLinks()\n    : navigationUtil.getUniversalSearchLinks();\n  const gameSearchLinkIndex = universalSearchLinks.findIndex(\n    ({ label }) => label === linkConstants.gameSearchLink.label\n  );\n\n  const constructSearchSuggestions = additionalSuggestions => {\n    if (additionalSuggestions) {\n      if (search.isSpecialTreatmentAutocompleteRestricted()) {\n        return universalSearchLinks;\n      }\n      const showGameSearchLink =\n        additionalSuggestions.findIndex(\n          suggestion =>\n            suggestion.searchQuery === debouncedSearchInput.toLowerCase() &&\n            suggestion.type === GamesAutocompleteSuggestionEntryType.GameSuggestion\n        ) === -1;\n      const splicedSuggestions = additionalSuggestions\n        .filter(\n          suggestion =>\n            suggestion.searchQuery !== debouncedSearchInput.toLowerCase() ||\n            suggestion.type === GamesAutocompleteSuggestionEntryType.GameSuggestion\n        )\n        .slice(\n          0,\n          search.isSpecialTreatment()\n            ? search.numberOfSpecialTreatmentAutocompleteSuggestions\n            : search.numberOfAutocompleteSuggestions()\n        );\n      return [\n        ...universalSearchLinks.slice(\n          0,\n          showGameSearchLink ? gameSearchLinkIndex + 1 : gameSearchLinkIndex\n        ),\n        ...splicedSuggestions,\n        ...universalSearchLinks.slice(gameSearchLinkIndex + 1)\n      ];\n    }\n    return universalSearchLinks;\n  };\n\n  const searchSuggestions = useMemo(() => {\n    return constructSearchSuggestions(autocompleteSuggestions);\n  }, [autocompleteSuggestions]);\n\n  const searchSuggestionLength = searchSuggestions.length;\n\n  useEffect(() => {\n    eventStreamService.sendEvent(\n      ...events.search(searchInput, events.actionTypes.submit, autocompleteSessionInfo)\n    );\n    const getAutocompleteSuggestion = async () => {\n      if (\n        search.isAutocompleteSuggestionsIXPTestEnabled() &&\n        debouncedSearchInput !== '' &&\n        debouncedSearchInput.length <= search.debouncedSearchInputMaxLength\n      ) {\n        setAutocompleteSuggestions(null);\n        const start = Date.now();\n        try {\n          const data = await searchService.postRequestSuggestion(debouncedSearchInput);\n          const end = Date.now();\n          const seenSuggestions = constructSearchSuggestions(data.entries);\n          eventStreamService.sendEvent(\n            ...events.searchAutocomplete(\n              debouncedSearchInput,\n              previousDebouncedSearchInput,\n              false,\n              searchUtil.serializeSuggestions(seenSuggestions, debouncedSearchInput),\n              data.algorithmName,\n              end - start,\n              search.debounceTimeout,\n              autocompleteSessionInfo\n            )\n          );\n          setAutocompleteSuggestions(data.entries);\n        } catch (error) {\n          if (!httpService.isCancelled(error)) {\n            setAutocompleteSuggestions([]);\n          }\n        }\n      }\n    };\n    getAutocompleteSuggestion();\n  }, [debouncedSearchInput]);\n\n  const resetAutocompleteSessionInfo = () => {\n    setAutocompleteSessionInfo(events.generateSessionInfo());\n  };\n\n  const handleSearch = ({ target: { value } }) => {\n    if (value.length < searchInput.length) {\n      eventStreamService.sendEvent(\n        ...events.searchTextTrim(searchInput, value, undefined, autocompleteSessionInfo)\n      );\n    }\n\n    if (value.length === 0) {\n      resetAutocompleteSessionInfo();\n    }\n\n    setSelectedListOptions(0);\n    setIsMenuOpen(value.length > 0);\n    setSearchInput(value);\n  };\n\n  const openMenu = () => {\n    const newAutoCompleteSessionInfo = events.generateSessionInfo();\n    eventStreamService.sendEvent(\n      ...events.search(searchInput, events.actionTypes.open, newAutoCompleteSessionInfo)\n    );\n    setAutocompleteSessionInfo(newAutoCompleteSessionInfo);\n\n    if (searchInput.length === 0 || isMenuHover) return;\n    setIsMenuOpen(true);\n  };\n\n  const closeMenu = () => {\n    if (!isMenuOpen) {\n      return;\n    }\n\n    eventStreamService.sendEvent(\n      ...events.search(searchInput, events.actionTypes.close, autocompleteSessionInfo)\n    );\n\n    setIsMenuOpen(false);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const onKeyDown = e => {\n    let currentCursor = indexOfSelectedOption;\n    if (\n      isMenuOpen &&\n      (e.keyCode === keyCodes.arrowUp ||\n        e.keyCode === keyCodes.arrowDown ||\n        e.keyCode === keyCodes.tab)\n    ) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (e.keyCode === keyCodes.arrowUp) {\n        currentCursor -= 1;\n      } else {\n        currentCursor += 1;\n      }\n\n      currentCursor %= searchSuggestionLength;\n      if (currentCursor < 0) {\n        currentCursor = searchSuggestionLength + currentCursor;\n      }\n      setSelectedListOptions(currentCursor);\n    }\n  };\n\n  const onKeyUp = e => {\n    if (e.keyCode === keyCodes.enter) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      const suggestion = searchSuggestions[indexOfSelectedOption];\n\n      if (searchUtil.isAutocompleteSuggestion(suggestion)) {\n        eventStreamService.sendEvent(\n          ...events.searchSuggestionClicked(\n            debouncedSearchInput,\n            undefined,\n            indexOfSelectedOption,\n            suggestion.searchQuery,\n            searchUtil.getAutocompleteSearchType(suggestion),\n            searchUtil.serializeSuggestions(searchSuggestions, searchInput),\n            autocompleteSessionInfo\n          )\n        );\n      } else {\n        eventStreamService.sendEvent(\n          ...events.searchSuggestionClicked(\n            debouncedSearchInput,\n            undefined,\n            indexOfSelectedOption,\n            debouncedSearchInput,\n            searchUtil.getDefaultSearchType(suggestion),\n            searchUtil.serializeSuggestions(searchSuggestions, searchInput),\n            autocompleteSessionInfo\n          )\n        );\n      }\n      resetAutocompleteSessionInfo();\n      const suggestionUrl = searchUtil.getSuggestionUrl(suggestion, e);\n      if (suggestionUrl) {\n        window.location = suggestionUrl;\n      }\n    }\n  };\n\n  return (\n    <SearchInput\n      {...{\n        searchInput,\n        handleSearch,\n        openMenu,\n        closeMenu,\n        setIsMenuHover,\n        isMenuOpen,\n        indexOfSelectedOption,\n        onSubmit,\n        onKeyDown,\n        onKeyUp,\n        isUniverseSearchShown,\n        translate,\n        searchSuggestions,\n        autocompleteSessionInfo,\n        resetAutocompleteSessionInfo\n      }}\n    />\n  );\n}\n\nUniversalSearch.defaultProps = {\n  isUniverseSearchShown: true\n};\n\nUniversalSearch.propTypes = {\n  translate: PropTypes.func.isRequired,\n  isUniverseSearchShown: PropTypes.bool\n};\n\nexport const UniversalSearchContainer = withTranslations(UniversalSearch, translationConfig);\n","import React from 'react';\nimport angular from 'angular';\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    // TODO: double check these values are true across environments\n    this.html = `\n            <div login-form\n                context='loginDropdown'\n                is-facebook-sign-in-enabled='true'\n                use-facebook-redirect='true'\n                redirect-to-login-page-when-username-is-required='true'\n            ></div>`;\n  }\n\n  componentDidMount() {\n    try {\n      angular.module('login');\n      angular.bootstrap(this.container, ['login', 'loginAppTemplates']);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        id='login-container'\n        className='login-container'\n        ref={c => {\n          this.container = c;\n        }}\n        dangerouslySetInnerHTML={{\n          __html: this.html\n        }}\n      />\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport angular from 'angular';\n\nclass NotificationStreamIcon extends React.Component {\n  componentDidMount() {\n    try {\n      angular.module('notificationStreamIcon');\n      angular.bootstrap(this.container, ['notificationStreamIcon']);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return (\n      <span\n        ref={c => {\n          this.container = c;\n        }}\n        className='nav-robux-icon rbx-menu-item'>\n        <span id='notification-stream-icon-container' notification-stream-indicator='true' />\n      </span>\n    );\n  }\n}\n\nexport default NotificationStreamIcon;\n","import React from 'react';\nimport angular from 'angular';\nimport ClassNames from 'classnames';\nimport navigationUtil from '../util/navigationUtil';\n\nclass NotificationStreamBase extends React.Component {\n  componentDidMount() {\n    try {\n      angular.module('notificationStream');\n      angular.bootstrap(this.container, ['notificationStream']);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const themeFontClass = navigationUtil.getThemeClass();\n    const streamClass = ClassNames('notification-stream-base', themeFontClass);\n    return (\n      <div\n        ref={c => {\n          this.container = c;\n        }}\n        className={streamClass}\n        notification-stream-base-view='true'\n      />\n    );\n  }\n}\n\nexport default NotificationStreamBase;\n","import React from 'react';\nimport { Popover } from 'react-style-guide';\nimport NotificationStreamIcon from '../containers/NotificationStreamIcon';\nimport NotificationStreamBase from '../containers/NotificationStreamBase';\n\nfunction NotificationStreamPopover() {\n  return (\n    <Popover\n      id='notification-stream-popover'\n      trigger='click'\n      placement='bottom'\n      closeOnClick={false}\n      icon={\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n        <li id='navbar-stream' className='navbar-icon-item navbar-stream'>\n          <NotificationStreamIcon />\n        </li>\n      }\n      role='menu'>\n      <NotificationStreamBase />\n    </Popover>\n  );\n}\n\nNotificationStreamPopover.propTypes = {};\n\nexport default NotificationStreamPopover;\n","import React from 'react';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nfunction SettingsIcon({ accountNotificationCount }) {\n  const notificationClasses = ClassNames('notification-red notification nav-setting-highlight', {\n    hidden: accountNotificationCount === 0\n  });\n  return (\n    <span id='settings-icon' className='nav-settings-icon rbx-menu-item'>\n      <span className='icon-nav-settings roblox-popover-close' id='nav-settings' />\n      <span className={notificationClasses}>{accountNotificationCount}</span>\n    </span>\n  );\n}\n\nSettingsIcon.defaultProps = {\n  accountNotificationCount: 0\n};\nSettingsIcon.propTypes = {\n  accountNotificationCount: PropTypes.number\n};\nexport default SettingsIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { Link } from 'react-style-guide';\nimport links from '../constants/linkConstants';\nimport navigationUtil from '../util/navigationUtil';\nimport layoutConstants from '../constants/layoutConstants';\n\nconst { settingsUrl, quickLoginUrl } = links;\nconst { logoutUser } = navigationUtil;\nconst { quickLogin, settings, logout } = layoutConstants.menuKeys;\nfunction SettingsMenu({\n  translate,\n  accountNotificationCount,\n  isCrossDeviceLoginCodeValidationDisplayed\n}) {\n  const notificationClasses = ClassNames('notification-blue notification nav-setting-highlight', {\n    hidden: accountNotificationCount === 0\n  });\n\n  return Object.entries(settingsUrl).map(([urlKey, { url, label }]) => (\n    <li>\n      {urlKey === logout && (\n        <Link className='rbx-menu-item logout-menu-item' key={urlKey} onClick={logoutUser} url='#'>\n          {translate(label)}\n        </Link>\n      )}\n      {urlKey === quickLogin && isCrossDeviceLoginCodeValidationDisplayed && (\n        <Link className='rbx-menu-item' key={urlKey} url={quickLoginUrl}>\n          {translate(label)}\n        </Link>\n      )}\n      {urlKey !== logout && urlKey !== quickLogin && (\n        <Link cssClasses='rbx-menu-item' key={urlKey} url={url}>\n          {translate(label)}\n          {urlKey === settings && (\n            <span className={notificationClasses}>{accountNotificationCount}</span>\n          )}\n        </Link>\n      )}\n    </li>\n  ));\n}\nSettingsMenu.defaultProps = {\n  accountNotificationCount: 0,\n  isCrossDeviceLoginCodeValidationDisplayed: false\n};\nSettingsMenu.propTypes = {\n  translate: PropTypes.func.isRequired,\n  accountNotificationCount: PropTypes.number,\n  isCrossDeviceLoginCodeValidationDisplayed: PropTypes.bool\n};\n\nexport default SettingsMenu;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover } from 'react-style-guide';\nimport SettingsIcon from './SettingsIcon';\nimport SettingsMenu from './SettingsMenu';\nimport navigationUtil from '../util/navigationUtil';\n// disabling the metadata call since this is fully released.\n// this will also reduce the traffic. ticket to remove comments: WEBGROW-10026\n// import navigationService from '../services/navigationService';\n\nfunction SettingsPopover({ translate, accountNotificationCount }) {\n  const [\n    isCrossDeviceLoginCodeValidationDisplayed,\n    setCrossDeviceLoginCodeValidationDisplayed\n  ] = useState(false);\n  useEffect(() => {\n    setCrossDeviceLoginCodeValidationDisplayed(true);\n    // navigationService.getAuthTokenMetadata().then(\n    //   data => {\n    //     if (data?.IsCodeValidationDisplayed) {\n    //       setCrossDeviceLoginCodeValidationDisplayed(true);\n    //     }\n    //   },\n    //   e => {\n    //     console.debug('e: ', e);\n    //   }\n    // );\n  }, []);\n  return (\n    <Popover\n      id='settings-popover'\n      trigger='click'\n      placement='bottom'\n      className={navigationUtil.getThemeClass()}\n      containerPadding={20}\n      icon={\n        <li id='navbar-settings' className='cursor-pointer navbar-icon-item'>\n          <SettingsIcon accountNotificationCount={accountNotificationCount} />\n        </li>\n      }\n      role='menu'>\n      <div className={navigationUtil.getThemeClass()}>\n        <ul id='settings-popover-menu' className='dropdown-menu'>\n          <SettingsMenu\n            isCrossDeviceLoginCodeValidationDisplayed={isCrossDeviceLoginCodeValidationDisplayed}\n            translate={translate}\n            accountNotificationCount={accountNotificationCount}\n          />\n        </ul>\n      </div>\n    </Popover>\n  );\n}\n\nSettingsPopover.defaultProps = {\n  accountNotificationCount: 0\n};\n\nSettingsPopover.propTypes = {\n  translate: PropTypes.func.isRequired,\n  accountNotificationCount: PropTypes.number\n};\n\nexport default SettingsPopover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'react-style-guide';\nimport { abbreviateNumber } from 'core-utilities';\nimport layoutConstant from '../constants/layoutConstants';\n\nfunction BuyRobuxIcon({ robuxAmount, isGetCurrencyCallDone, robuxError }) {\n  const robuxAmountValue = robuxError\n    ? layoutConstant.robuxOnEconomySystemOutage\n    : abbreviateNumber.getTruncValue(robuxAmount);\n  const icon = (\n    <span>\n      <span className='icon-robux-28x28 roblox-popover-close' id='nav-robux' />\n      <span className='rbx-text-navbar-right text-header' id='nav-robux-amount'>\n        {isGetCurrencyCallDone && robuxAmountValue}\n      </span>\n    </span>\n  );\n\n  return (\n    <span id='nav-robux-icon' className='nav-robux-icon rbx-menu-item'>\n      {robuxError ? (\n        <Tooltip\n          id='current-error'\n          content={robuxError}\n          placement='bottom'\n          containerClassName='nav-buy-robux-icon-tooltip-container'>\n          {icon}\n        </Tooltip>\n      ) : (\n        icon\n      )}\n    </span>\n  );\n}\n\nBuyRobuxIcon.defaultProps = {\n  robuxAmount: 0,\n  robuxError: ''\n};\n\nBuyRobuxIcon.propTypes = {\n  robuxAmount: PropTypes.number,\n  robuxError: PropTypes.string,\n  isGetCurrencyCallDone: PropTypes.bool.isRequired\n};\n\nexport default BuyRobuxIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { numberFormat } from 'core-utilities';\nimport { Link } from 'react-style-guide';\nimport links from '../constants/linkConstants';\nimport layoutConstant from '../constants/layoutConstants';\n\nconst { buyRobuxUrl } = links;\n\nfunction RobuxMenu({ translate, robuxAmount, isGetCurrencyCallDone, robuxError }) {\n  const robuxAmountValue = robuxError\n    ? layoutConstant.robuxOnEconomySystemOutage\n    : numberFormat.getNumberFormat(robuxAmount);\n\n  return (\n    <React.Fragment>\n      <li>\n        <Link cssClasses='rbx-menu-item' id='nav-robux-balance' url={buyRobuxUrl.robuxBalance.url}>\n          {isGetCurrencyCallDone &&\n            translate('Label.sRobuxMessage', {\n              robuxValue: robuxAmountValue\n            })}\n        </Link>\n      </li>\n      <li>\n        <Link cssClasses='rbx-menu-item' url={buyRobuxUrl.buyRobux.url}>\n          {translate(buyRobuxUrl.buyRobux.label)}\n        </Link>\n      </li>\n    </React.Fragment>\n  );\n}\n\nRobuxMenu.defaultProps = {\n  robuxAmount: 0,\n  robuxError: ''\n};\n\nRobuxMenu.propTypes = {\n  translate: PropTypes.func.isRequired,\n  robuxAmount: PropTypes.number,\n  robuxError: PropTypes.string,\n  isGetCurrencyCallDone: PropTypes.bool.isRequired\n};\n\nexport default RobuxMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover } from 'react-style-guide';\nimport BuyRobuxIcon from './BuyRobuxIcon';\nimport RobuxMenu from './RobuxMenu';\nimport navigationUtil from '../util/navigationUtil';\n\nfunction BuyRobuxPopover({ translate, robuxAmount, isGetCurrencyCallDone, robuxError }) {\n  return (\n    <Popover\n      id='buy-robux-popover'\n      trigger='click'\n      placement='bottom'\n      icon={\n        <li id='navbar-robux' className='cursor-pointer navbar-icon-item'>\n          <BuyRobuxIcon {...{ robuxAmount, isGetCurrencyCallDone, robuxError }} />\n        </li>\n      }\n      role='menu'>\n      <div className={navigationUtil.getThemeClass()}>\n        <ul id='buy-robux-popover-menu' className='dropdown-menu'>\n          <RobuxMenu {...{ translate, robuxAmount, isGetCurrencyCallDone, robuxError }} />\n        </ul>\n      </div>\n    </Popover>\n  );\n}\n\nBuyRobuxPopover.defaultProps = {\n  robuxAmount: 0,\n  robuxError: ''\n};\n\nBuyRobuxPopover.propTypes = {\n  translate: PropTypes.func.isRequired,\n  robuxAmount: PropTypes.number,\n  robuxError: PropTypes.string,\n  isGetCurrencyCallDone: PropTypes.bool.isRequired\n};\n\nexport default BuyRobuxPopover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UniverseSearchIcon({ toggleUniverseSearch }) {\n  return (\n    <li\n      className='cursor-pointer rbx-navbar-right-search'\n      onClick={toggleUniverseSearch}\n      onKeyPress={toggleUniverseSearch}\n      role='menuitem'>\n      <span className='rbx-menu-icon rbx-menu-item'>\n        <span className='icon-nav-search-white' />\n      </span>\n    </li>\n  );\n}\n\nUniverseSearchIcon.propTypes = {\n  toggleUniverseSearch: PropTypes.func.isRequired\n};\nexport default UniverseSearchIcon;\n","import React from 'react';\nimport { authenticatedUser } from 'header-scripts';\nimport { Link } from 'react-style-guide';\nimport { Thumbnail2d, ThumbnailTypes } from 'roblox-thumbnails';\nimport links from '../constants/linkConstants';\nimport userUtil from '../util/userUtil';\n\nfunction AgeBracketDisplay() {\n  const { isUnder13 } = authenticatedUser;\n\n  return (\n    <div className='age-bracket-label text-header'>\n      <Link\n        className='text-link dynamic-overflow-container'\n        url={links.scrollListItems.profile.url}>\n        <span className='avatar avatar-headshot-xs'>\n          <Thumbnail2d\n            containerClass='avatar-card-image'\n            targetId={authenticatedUser.id}\n            type={ThumbnailTypes.avatarHeadshot}\n            altName={authenticatedUser.name}\n          />\n        </span>\n        <span className='text-overflow age-bracket-label-username font-caption-header'>\n          {userUtil.nameForHeader}\n        </span>\n      </Link>\n      <span className='xsmall age-bracket-label-age text-secondary'>\n        {isUnder13 ? '<13' : '13+'}\n      </span>\n    </div>\n  );\n}\n\nAgeBracketDisplay.propTypes = {};\n\nexport default AgeBracketDisplay;\n","import React, { useState, useEffect } from 'react';\nimport angular from 'angular';\nimport PropTypes from 'prop-types';\nimport { authenticatedUser } from 'header-scripts';\nimport navigationService from '../services/navigationService';\nimport NotificationStreamPopover from '../components/NotificationStreamPopover';\nimport SettingsPopover from '../components/SettingsPopover';\nimport BuyRobuxPopover from '../components/BuyRobuxPopover';\nimport UniverseSearchIcon from '../components/UniverseSearchIcon';\nimport navigationUtil from '../util/navigationUtil';\nimport AgeBracketDisplay from '../components/AgeBracketDisplay';\n\nconst { getAccountNotificationCount } = navigationUtil;\n\nfunction HeaderIconsGroup({ translate, toggleUniverseSearch }) {\n  const { isAuthenticated, id: userId } = authenticatedUser;\n  const [accountNotificationCount, setAccountNotificationCount] = useState(0);\n  const [isGetCurrencyCallDone, setGetCurrencyCallDone] = useState(false);\n  const [robuxAmount, setRobuxAmount] = useState(0);\n  const [robuxError, setRobuxError] = useState('');\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      getAccountNotificationCount().then(setAccountNotificationCount);\n      navigationService\n        .getUserCurrency(userId)\n        .then(\n          ({ data: usercurrencyData }) => {\n            setRobuxAmount(usercurrencyData.robux);\n          },\n          () => {\n            setRobuxError('Currency service unavailable');\n          }\n        )\n        .finally(() => {\n          setGetCurrencyCallDone(true);\n        });\n    }\n  }, [isAuthenticated, userId]);\n\n  let notificationStream = (\n    <li id='navbar-stream' className='navbar-icon-item navbar-stream'>\n      <span className='nav-robux-icon rbx-menu-item'>\n        <span id='notification-stream-icon-container' notification-stream-indicator='true' />\n      </span>\n    </li>\n  );\n  try {\n    angular.module('notificationStreamIcon');\n    angular.module('notificationStream');\n    notificationStream = <NotificationStreamPopover />;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return (\n    <ul className='nav navbar-right rbx-navbar-icon-group'>\n      <AgeBracketDisplay />\n      <UniverseSearchIcon {...{ translate, toggleUniverseSearch }} />\n      {notificationStream}\n      <BuyRobuxPopover {...{ translate, robuxAmount, isGetCurrencyCallDone, robuxError }} />\n      <SettingsPopover {...{ translate, accountNotificationCount }} />\n    </ul>\n  );\n}\n\nHeaderIconsGroup.defaultProps = {\n  accountNotificationCount: 0\n};\n\nHeaderIconsGroup.propTypes = {\n  translate: PropTypes.func.isRequired,\n  accountNotificationCount: PropTypes.number,\n  toggleUniverseSearch: PropTypes.func.isRequired\n};\n\nexport default HeaderIconsGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-style-guide';\nimport navigationUtil from '../util/navigationUtil';\n\nconst { getSignupUrl } = navigationUtil;\nconst handleSignupClick = () => {\n  window.location.href = getSignupUrl();\n};\n\nfunction HeaderSignupLink({ translate }) {\n  return (\n    <li className='signup-button-container'>\n      <Link\n        onClick={handleSignupClick}\n        url={getSignupUrl()}\n        id='sign-up-button'\n        className='rbx-navbar-signup btn-growth-sm nav-menu-title signup-button'>\n        {translate('Label.sSignUp')}\n      </Link>\n    </li>\n  );\n}\nHeaderSignupLink.propTypes = {\n  translate: PropTypes.func.isRequired\n};\n\nexport default HeaderSignupLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { authenticatedUser } from 'header-scripts';\nimport { Popover } from 'react-style-guide';\nimport LoginForm from '../containers/LoginForm';\nimport HeaderIconsGroup from '../containers/HeaderIconsGroup';\nimport navigationUtil from '../util/navigationUtil';\nimport UniverseSearchIcon from './UniverseSearchIcon';\nimport HeaderSignupLink from './HeaderSignupLink';\n\nconst { isLoginPopoverAvailable } = navigationUtil;\n\nfunction HeaderRightNav({ translate, toggleUniverseSearch, ...props }) {\n  const { isAuthenticated } = authenticatedUser;\n  if (isAuthenticated) {\n    return (\n      <div className='navbar-right rbx-navbar-right'>\n        <HeaderIconsGroup\n          translate={translate}\n          toggleUniverseSearch={toggleUniverseSearch}\n          {...props}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className='navbar-right rbx-navbar-right'>\n      <ul className='nav navbar-right rbx-navbar-right-nav'>\n        <HeaderSignupLink translate={translate} />\n        <li className='login-action'>\n          {isLoginPopoverAvailable() && (\n            <Popover\n              id='login-popover'\n              trigger='click'\n              placement='bottom'\n              closeOnClick={false}\n              icon={\n                <span>\n                  {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                  <a className='font-header-2 rbx-navbar-login nav-menu-title rbx-menu-item'>\n                    {translate('Label.sLogin')}\n                  </a>\n                </span>\n              }\n              role='menu'>\n              <LoginForm />\n            </Popover>\n          )}\n        </li>\n        <UniverseSearchIcon translate={translate} toggleUniverseSearch={toggleUniverseSearch} />\n      </ul>\n    </div>\n  );\n}\n\nHeaderRightNav.propTypes = {\n  translate: PropTypes.func.isRequired,\n  toggleUniverseSearch: PropTypes.func.isRequired\n};\n\nexport default HeaderRightNav;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { withTranslations } from 'react-utilities';\nimport { translationConfig } from '../translation.config';\nimport { UniversalSearchContainer } from './UniversalSearch';\nimport HeaderRightNav from '../components/HeaderRightNav';\nimport navigationUtil from '../util/navigationUtil';\n\nfunction NavigationRightHeader(props) {\n  const isCurrentMobileSize = navigationUtil.isInMobileSize();\n  const [isInMobileSize, setMobileSize] = useState(isCurrentMobileSize);\n  const [isUniverseSearchShown, setUniverseSearchShown] = useState(!isCurrentMobileSize);\n\n  const toggleUniverseSearch = () => {\n    setUniverseSearchShown(isShown => !isShown);\n  };\n\n  const resizeEventHandler = useCallback(() => {\n    const isCurrentWindowMobileSize = navigationUtil.isInMobileSize();\n    if (isInMobileSize !== isCurrentWindowMobileSize) {\n      setMobileSize(isCurrentWindowMobileSize);\n      setUniverseSearchShown(!isCurrentWindowMobileSize);\n    }\n  }, [isInMobileSize]);\n\n  useEffect(() => {\n    window.addEventListener('resize', resizeEventHandler);\n\n    return () => {\n      window.removeEventListener('resize', resizeEventHandler);\n    };\n  }, [resizeEventHandler]);\n\n  return (\n    <React.Fragment>\n      <UniversalSearchContainer isUniverseSearchShown={isUniverseSearchShown} {...props} />\n      <HeaderRightNav toggleUniverseSearch={toggleUniverseSearch} {...props} />\n    </React.Fragment>\n  );\n}\n\nexport default withTranslations(NavigationRightHeader, translationConfig);\n","import React from 'react';\n\nimport layoutConstant from '../constants/layoutConstants';\n\nconst { headerMenuIconClickEvent } = layoutConstant;\n\nfunction MenuIcon() {\n  const onClickMenuIcon = () => {\n    document.dispatchEvent(new CustomEvent(headerMenuIconClickEvent.name));\n  };\n\n  // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n  return <span onClick={onClickMenuIcon} onKeyPress={onClickMenuIcon} className='icon-nav-menu' />;\n}\n\nMenuIcon.propTypes = {};\n\nexport default MenuIcon;\n","import React from 'react';\nimport { ready } from 'core-utilities';\nimport { authenticatedUser } from 'header-scripts';\nimport { render } from 'react-dom';\nimport LeftNavigation from './containers/LeftNavigation';\nimport NavigationRightHeader from './containers/NavigationRightHeader';\nimport MenuIcon from './containers/MenuIcon';\n\nimport '../../../css/navigation/navigation.scss';\nimport '../../../html/navigation.html';\n\nconst rightNavigationHeaderContainerId = 'right-navigation-header';\nconst leftNavigationContainerId = 'left-navigation-container';\nconst menuIconContainerId = 'header-menu-icon';\nconst { isAuthenticated } = authenticatedUser;\n\n// The anchor html elements lives in navigation.html\n// Mounting components seperatly to avoid hydrating\n// components that do not need to be server rendered.\nready(() => {\n  if (document.getElementById(menuIconContainerId) && isAuthenticated) {\n    render(<MenuIcon />, document.getElementById(menuIconContainerId));\n  }\n\n  if (document.getElementById(rightNavigationHeaderContainerId)) {\n    render(<NavigationRightHeader />, document.getElementById(rightNavigationHeaderContainerId));\n  }\n\n  if (document.getElementById(leftNavigationContainerId)) {\n    render(<LeftNavigation />, document.getElementById(leftNavigationContainerId));\n  }\n});\n"],"sourceRoot":""}