{"version":3,"sources":["webpack:///../node_modules/axios/index.js","webpack:///../node_modules/axios/lib/adapters/xhr.js","webpack:///../node_modules/axios/lib/axios.js","webpack:///../node_modules/axios/lib/cancel/Cancel.js","webpack:///../node_modules/axios/lib/cancel/CancelToken.js","webpack:///../node_modules/axios/lib/cancel/isCancel.js","webpack:///../node_modules/axios/lib/core/Axios.js","webpack:///../node_modules/axios/lib/core/InterceptorManager.js","webpack:///../node_modules/axios/lib/core/createError.js","webpack:///../node_modules/axios/lib/core/dispatchRequest.js","webpack:///../node_modules/axios/lib/core/enhanceError.js","webpack:///../node_modules/axios/lib/core/settle.js","webpack:///../node_modules/axios/lib/core/transformData.js","webpack:///../node_modules/axios/lib/defaults.js","webpack:///../node_modules/axios/lib/helpers/bind.js","webpack:///../node_modules/axios/lib/helpers/buildURL.js","webpack:///../node_modules/axios/lib/helpers/combineURLs.js","webpack:///../node_modules/axios/lib/helpers/cookies.js","webpack:///../node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///../node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///../node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///../node_modules/axios/lib/helpers/parseHeaders.js","webpack:///../node_modules/axios/lib/helpers/spread.js","webpack:///../node_modules/axios/lib/utils.js","webpack:///../node_modules/decode-uri-component/index.js","webpack:///../node_modules/is-buffer/index.js","webpack:///../node_modules/punycode/punycode.js","webpack:///../node_modules/query-string/index.js","webpack:///../node_modules/querystring/decode.js","webpack:///../node_modules/querystring/encode.js","webpack:///../node_modules/querystring/index.js","webpack:///../node_modules/split-on-first/index.js","webpack:///../node_modules/strict-uri-encode/index.js","webpack:///../node_modules/url/url.js","webpack:///../node_modules/url/util.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/amd options","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/node module decorator","webpack:///external \"Roblox\"","webpack:///external \"RobloxTracer\"","webpack:///./js/core/http/implementations/httpResponseCodes.ts","webpack:///./js/core/http/implementations/httpRequestMethods.ts","webpack:///./js/core/http/implementations/httpClient.ts","webpack:///./js/core/http/implementations/httpService.ts","webpack:///./js/core/dataStoreManagement/providers/catalog/base.ts","webpack:///./js/core/dataStoreManagement/providers/catalog/catalogProvider.ts","webpack:///./js/core/dataStoreManagement/stores/catalog/catalogDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/gameInternationalization/base.ts","webpack:///./js/core/dataStoreManagement/providers/gameInternationalization/gameInternationalizationProvider.ts","webpack:///./js/core/dataStoreManagement/providers/localizationTables/base.ts","webpack:///./js/core/dataStoreManagement/providers/localizationTables/common.ts","webpack:///./js/core/dataStoreManagement/providers/localizationTables/localizationTablesProvider.ts","webpack:///./js/core/dataStoreManagement/stores/gameAutoLocalization/gameAutoLocalizationDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/gameInternationalizationV2/base.ts","webpack:///./js/core/dataStoreManagement/stores/gameAutomaticTranslation/gameAutomaticTranslationDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/gameInternationalizationV2/gameInternationalizationV2Provider.ts","webpack:///./js/core/dataStoreManagement/stores/gameLanguages/gameLanguagesDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/thumbnails/base.ts","webpack:///./js/core/dataStoreManagement/stores/gameSourceLanguage/gameSourceLanguageDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/thumbnails/common.ts","webpack:///./js/core/dataStoreManagement/providers/thumbnails/thumbnailsProvider.ts","webpack:///./js/core/dataStoreManagement/stores/thumbnails/gameThumbnailsDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/games/base.ts","webpack:///./js/core/dataStoreManagement/stores/gameTranslationAnalytics/gameTranslationAnalyticsDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/games/gamesProvider.ts","webpack:///./js/core/dataStoreManagement/providers/gamesV2/base.ts","webpack:///./js/core/dataStoreManagement/providers/gamesV2/common.ts","webpack:///./js/core/dataStoreManagement/providers/gamesV2/gamesV2Provider.ts","webpack:///./js/core/dataStoreManagement/stores/games/gamesDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/inventory/base.ts","webpack:///./js/core/dataStoreManagement/providers/inventory/inventoryProvider.ts","webpack:///./js/core/dataStoreManagement/stores/inventory/inventoryDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/locale/base.ts","webpack:///./js/core/services/localStorageService/localStorageService.js","webpack:///./js/core/dataStoreManagement/providers/locale/localeProvider.ts","webpack:///./js/core/dataStoreManagement/stores/locale/localeDataStore.ts","webpack:///./js/core/dataStoreManagement/stores/translationProgress/translationProgressDataStore.ts","webpack:///./js/core/dataStoreManagement/stores/thumbnails/thumbnailsDataStore.ts","webpack:///./js/core/dataStoreManagement/providers/translationRoles/base.ts","webpack:///./js/core/dataStoreManagement/providers/translationRoles/translationRolesProvider.ts","webpack:///./js/core/dataStoreManagement/stores/translationRoles/translationRolesDataStore.ts","webpack:///./js/core/services/batchRequestService/batchRequestConstants.ts","webpack:///./js/core/services/batchRequestService/batchRequestUtil.ts","webpack:///./js/core/services/batchRequestService/cacheStore.ts","webpack:///./js/core/services/batchRequestService/batchRequestProcessor.ts","webpack:///./js/core/services/batchRequestService/batchRequestFactory.ts","webpack:///./js/core/dataStoreManagement/stores/userData/userDataConstants.ts","webpack:///./js/core/dataStoreManagement/stores/userData/userStoreUtil.ts","webpack:///./js/core/dataStoreManagement/stores/userData/userDataStore.ts","webpack:///./js/core/services/urlService.js","webpack:///./js/core/dataStoreManagement/stores/userData/userBatchRequestProcessor.ts","webpack:///./js/core/dataStoreManagement/stores/dataStores.ts","webpack:///./js/core/utils/entityUrl/implementations/EntityUrl.ts","webpack:///./js/core/utils/entityUrl/implementations/entities/GameUrl.ts","webpack:///./js/core/utils/entityUrl/implementations/entities/GroupUrl.ts","webpack:///./js/core/utils/entityUrl/implementations/entities/UserUrl.ts","webpack:///./js/core/services/eventStreamService/eventStreamService.js","webpack:///./js/core/utils/entityUrl/entityUrl.ts","webpack:///./js/core/services/eventStreamService/eventStreamConstants.js","webpack:///./js/core/services/hybridService.js","webpack:///./js/core/services/playGames/playGameService.js","webpack:///./js/core/services/localStorageService/localStorageNames.js","webpack:///./js/core/services/userInfoService/userInfoConstants.js","webpack:///./js/core/utils/userInfoUtil.js","webpack:///./js/core/services/userInfoService/userInfoService.js","webpack:///./js/core/services/metricsService/metricsConstants.ts","webpack:///./js/core/services/metricsService/metricsMetaData.ts","webpack:///./js/core/services/metricsService/metricsService.ts","webpack:///./js/core/coreRobloxUtilitiesEntry.js"],"names":["module","utils","require","settle","buildURL","parseHeaders","isURLSameOrigin","createError","exports","config","Promise","resolve","reject","requestData","data","requestHeaders","headers","isFormData","username","xsrfValue","request","XMLHttpRequest","auth","password","Authorization","btoa","open","method","toUpperCase","url","params","paramsSerializer","timeout","onreadystatechange","response","readyState","status","responseURL","indexOf","responseHeaders","getAllResponseHeaders","responseType","responseText","statusText","onerror","ontimeout","isStandardBrowserEnv","cookies","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","forEach","val","key","toLowerCase","setRequestHeader","e","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","bind","Axios","defaults","createInstance","defaultConfig","context","instance","prototype","extend","axios","create","instanceConfig","merge","Cancel","CancelToken","isCancel","all","promises","spread","message","this","toString","__CANCEL__","executor","TypeError","resolvePromise","token","reason","throwIfRequested","source","c","value","InterceptorManager","dispatchRequest","interceptors","arguments","chain","interceptor","unshift","fulfilled","rejected","push","length","shift","handlers","use","eject","id","fn","h","enhanceError","code","error","Error","transformData","isAbsoluteURL","combineURLs","throwIfCancellationRequested","baseURL","transformRequest","common","adapter","transformResponse","validateStatus","fns","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","isUndefined","process","isArrayBuffer","isBuffer","isStream","isFile","isBlob","isArrayBufferView","buffer","isURLSearchParams","isObject","JSON","stringify","parse","maxContentLength","thisArg","args","Array","i","apply","encode","encodeURIComponent","replace","parts","serializedParams","isArray","v","isDate","toISOString","join","relativeURL","write","name","expires","path","domain","secure","cookie","isNumber","Date","toGMTString","isString","document","match","RegExp","decodeURIComponent","remove","now","test","originURL","msie","urlParsingNode","resolveURL","setAttribute","href","protocol","host","search","hash","hostname","port","pathname","charAt","navigator","userAgent","createElement","window","location","requestURL","parsed","normalizedName","ignoreDuplicateOf","split","line","trim","substr","concat","callback","arr","Object","call","isFunction","obj","l","hasOwnProperty","FormData","result","ArrayBuffer","isView","pipe","URLSearchParams","product","assignValue","a","b","str","singleMatcher","multiMatcher","decode","input","err","tokens","decodeComponents","components","left","slice","right","encodedURI","replaceMap","exec","entries","keys","customDecodeURIComponent","constructor","root","freeExports","nodeType","freeModule","freeGlobal","global","self","punycode","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","type","RangeError","map","array","mapDomain","string","ucs2decode","extra","output","counter","charCodeAt","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","out","j","index","oldi","w","codePoint","inputLength","n","bias","basic","lastIndexOf","t","baseMinusT","splice","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","define","strictUriEncode","decodeComponent","splitOnFirst","validateArrayFormatSeparator","options","strict","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","Number","isNaN","parseBooleans","query","assign","sort","arrayFormat","arrayFormatSeparator","formatter","accumulator","includes","isEncodedArray","newValue","item","parserForArrayFormat","ret","param","reduce","Boolean","keysSorter","object","skipNull","skipEmptyString","encoderForArrayFormat","objectCopy","filter","x","url_","parseFragmentIdentifier","fragmentIdentifier","queryFromUrl","parsedQueryFromUrl","queryString","qs","sep","eq","regexp","maxKeys","len","kstr","idx","vstr","prop","stringifyPrimitive","isFinite","ks","separator","separatorIndex","util","Url","slashes","urlParse","relative","format","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","parseQueryString","slashesDenoteHost","u","queryIndex","splitter","uSplit","rest","simplePath","proto","lowerProto","hostEnd","hec","atSign","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","toASCII","p","esc","ae","escape","s","qm","resolveObject","rel","tkeys","tk","tkey","rkeys","rk","rkey","relPath","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","isAbsolute","arg","__webpack_module_cache__","__webpack_require__","moduleId","loaded","__webpack_modules__","amdO","getter","__esModule","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","nmd","paths","children","Roblox","RobloxTracer","HttpResponseCodes","freeze","HttpRequestMethods","CSRF_TOKEN_HEADER","CSRF_INVALID_RESPONSE_CODE","currentToken","XsrfToken","noCache","newConfig","Pragma","Expires","isTracerEnabled","apiSiteRequestValidator","requestSpan","instrumentation","tracerConstants","tags","component","logs","inject","tracerConfig","responseConfig","newToken","fullError","buildRequest","urlConfig","httpClient","authBearerToken","buildGetRequest","buildPostRequest","methods","post","delete","patch","buildBatchPromises","arrayNeedsBatch","cutOff","isPost","paramsKey","startIndex","subArray","createCancelToken","isCancelled","BASE_PATH","EnvironmentUrls","COLLECTION_FORMATS","configuration","basePath","field","msg","BundleApiAxiosParamCreator","v1AssetsAssetIdBundlesGet","assetId","sortOrder","limit","cursor","RequiredError","localVarPath","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","v1BundlesBundleIdDetailsGet","bundleId","v1BundlesBundleIdRecommendationsGet","numItems","v1BundlesBundleIdUnpackPost","v1BundlesDetailsGet","bundleIds","v1UsersUserIdBundlesBundleTypeGet","userId","bundleType","v1UsersUserIdBundlesGet","BundleApiFp","localVarAxiosArgs","axiosRequestArgs","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultGearSubcategoryEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryIdForRecommendedSearchEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCreatorEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCurrencyEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortTypeEnum","RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortAggregationEnum","RobloxCatalogApiCatalogMenuItemsResponseModelCategoriesWithCreatorEnum","RobloxCatalogApiCatalogMenuItemsResponseModelGearSubcategoryEnum","RobloxCatalogApiCatalogMenuItemsResponseModelAllCategoriesEnum","RobloxCatalogApiCatalogMenuItemsResponseModelFreeFilterEnum","RobloxCatalogApiCatalogMenuItemsResponseModelCustomRobuxFilterEnum","RobloxCatalogApiCatalogMenuItemsResponseModelRobuxFilterEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemTypeEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemAssetTypeEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemBundleTypeEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemGenresEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemStatusEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemRestrictionsEnum","RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemCreatorTypeEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemItemTypeEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemAssetTypeEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemBundleTypeEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemGenresEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemItemStatusEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemItemRestrictionsEnum","RobloxCatalogApiCatalogSearchDetailedResponseItemCreatorTypeEnum","RobloxCatalogApiCatalogSearchRequestModelCategoryEnum","RobloxCatalogApiCatalogSearchRequestModelSubcategoryEnum","RobloxCatalogApiCatalogSearchRequestModelSortAggregationEnum","RobloxCatalogApiCatalogSearchRequestModelSortCurrencyEnum","RobloxCatalogApiCatalogSearchRequestModelGenresEnum","RobloxCatalogApiCatalogSearchRequestModelSortTypeEnum","RobloxCatalogApiCatalogSearchRequestModelCreatorTypeEnum","RobloxCatalogApiCatalogSearchResponseItemItemTypeEnum","RobloxCatalogApiCategoryModelCategoryEnum","RobloxCatalogApiGenreModelGenreEnum","RobloxCatalogApiMultigetItemDetailsRequestItemItemTypeEnum","RobloxCatalogApiPriceFilterModelCurrencyTypeEnum","RobloxCatalogApiSortAggregationModelSortAggregationEnum","RobloxCatalogApiSortOptionModelSortTypeEnum","RobloxCatalogApiSortOptionModelSortOrderEnum","RobloxCatalogApiSubcategoryModelSubcategoryEnum","RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64SortOrderEnum","RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64PagingDirectionEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstanceSortOrderEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstancePagingDirectionEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32SortOrderEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32PagingDirectionEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum","RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum","BaseAPI","CatalogApiAxiosParamCreator","v1CatalogItemsDetailsPost","model","needsSerialization","v1CatalogItemsItemIdDetailsGet","itemId","itemType","v1CatalogMetadataGet","v1CatalogSortsGet","CatalogApiFp","CategoryApiAxiosParamCreator","v1AssetToCategoryGet","v1AssetToSubcategoryGet","v1CategoriesGet","v1SubcategoriesGet","CategoryApiFp","ExclusiveItemsApiFp","v1ExclusiveItemsAppStoreTypeBundlesGet","appStoreType","ExclusiveItemsApiAxiosParamCreator","FavoritesApiAxiosParamCreator","v1FavoritesAssetsAssetIdCountGet","v1FavoritesBundlesBundleIdCountGet","v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete","v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet","v1FavoritesUsersUserIdAssetsAssetIdFavoritePost","v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete","v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet","v1FavoritesUsersUserIdBundlesBundleIdFavoritePost","FavoritesApiFp","RecommendationsApiAxiosParamCreator","v1RecommendationsAssetAssetTypeIdGet","assetTypeId","contextAssetId","v1RecommendationsMetadataGet","page","RecommendationsApiFp","SearchApiAxiosParamCreator","v1SearchItemsDetailsGet","modelCategory","modelSubcategory","modelSortAggregation","modelSortCurrency","modelGenres","modelSortType","modelCreatorType","modelCreatorTargetId","modelCreatorName","modelMaxPrice","modelMinPrice","modelKeyword","modelIncludeNotForSale","modelTagNames","v1SearchItemsGet","v1SearchNavigationMenuItemsGet","SearchApiFp","bundleApiInstance","catalogApiInstance","recommendationsApiInstance","getAssetRecommendations","getBundleRecommendations","postItemDetails","RobloxGameInternationalizationApiPatchLanguageLanguageCodeTypeEnum","AutolocalizationApiAxiosParamCreator","v1AutolocalizationGamesGameIdAutolocalizationtablePatch","gameId","v1AutolocalizationGamesGameIdAutolocalizationtablePost","v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost","v1AutolocalizationGamesGameIdGet","v1AutolocalizationGamesGameIdPatch","v1AutolocalizationGamesGameIdSettingsPatch","v1AutolocalizationMetadataGet","AutolocalizationApiFp","RobloxGameInternationalizationApiCreateTableRequestOwnerTypeEnum","RobloxGameInternationalizationApiCursorEntryIdentifierSortOrderEnum","RobloxGameInternationalizationApiGetBadgeIconResponseStateEnum","RobloxGameInternationalizationApiGetDeveloperProductIconResponseStateEnum","RobloxGameInternationalizationApiGetGameIconResponseStateEnum","RobloxGameInternationalizationApiGetGamePassIconResponseStateEnum","RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestRequestTypeEnum","RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestSortOrderEnum","RobloxGameInternationalizationApiGetTableResponseOwnerTypeEnum","RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponseLanguageOrLocaleTypeEnum","RobloxGameInternationalizationApiLanguageOrLocaleLanguageCodeTypeEnum","RobloxGameInternationalizationApiLanguageOrLocaleSettingsLanguageCodeTypeEnum","RobloxGameInternationalizationApiMediaAssetResponseStateEnum","RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequestReportTypeEnum","RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponseReportGenerationStatusEnum","RobloxGameInternationalizationApiTranslationCountTranslatorTypeEnum","RobloxGameInternationalizationApiTranslationCountGameInfoResponseStatusEnum","RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseStatusEnum","RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseLanguageCodeTypeEnum","RobloxGameInternationalizationApiTranslatorAgentTypeEnum","AutomaticTranslationApiAxiosParamCreator","v1AutomaticTranslationGamesGameIdFeatureStatusGet","v1AutomaticTranslationGamesGameIdQuotaGet","v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet","languageCode","targetLanguages","AutomaticTranslationApiFp","BadgeApiAxiosParamCreator","v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch","badgeId","v1BadgesBadgeIdIconsGet","width","height","v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete","v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost","requestFiles","localVarFormParams","append","v1BadgesBadgeIdNameDescriptionGet","v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete","v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch","v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch","BadgeApiFp","DeveloperProductApiAxiosParamCreator","v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch","developerProductId","v1DeveloperProductsDeveloperProductIdIconsGet","v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete","v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost","v1DeveloperProductsDeveloperProductIdNameDescriptionGet","v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete","v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch","v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch","DeveloperProductApiFp","GameIconApiAxiosParamCreator","v1GameIconGamesGameIdGet","v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete","v1GameIconGamesGameIdLanguageCodesLanguageCodePost","GameIconApiFp","GameLocalizationStatusApiAxiosParamCreator","v1GameLocalizationStatusGameIdTranslationCountsGet","v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet","gameIds","languageOrLocaleCode","languageOrLocaleType","GameLocalizationStatusApiFp","GamePassApiAxiosParamCreator","v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch","gamePassId","v1GamePassesGamePassIdIconsGet","v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete","v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost","v1GamePassesGamePassIdNameDescriptionGet","v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete","v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch","v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch","GamePassApiFp","GameThumbnailsApiAxiosParamCreator","v1GameThumbnailsGamesGameIdImagesGet","v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost","gameThumbnailRequestFiles","v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete","imageId","v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost","GameThumbnailsApiFp","LocalizationTableApiAxiosParamCreator","v1LocalizationtableAvailableLanguagesGet","v1LocalizationtableGamesGameIdAssetsGenerationRequestPost","v1LocalizationtableGametablesGameIdPatch","v1LocalizationtableTablesGet","v1LocalizationtableTablesPost","v1LocalizationtableTablesTableIdEntriesGet","tableId","v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost","v1LocalizationtableTablesTableIdEntryCountGet","v1LocalizationtableTablesTableIdGet","v1LocalizationtableTablesTableIdPatch","LocalizationTableApiFp","NameDescriptionApiAxiosParamCreator","v1NameDescriptionGamesGameIdGet","v1NameDescriptionGamesGameIdHistoryPost","v1NameDescriptionGamesGameIdPatch","v1NameDescriptionMetadataGet","NameDescriptionApiFp","PlayerPolicyApiAxiosParamCreator","v1PlayerPoliciesAllValuesGet","v1PlayerPoliciesClientGet","v1PlayerPoliciesRccGet","ipAddress","PlayerPolicyApiFp","SourceLanguageApiAxiosParamCreator","v1SourceLanguageGamesGameIdGet","v1SourceLanguageGamesGameIdPatch","SourceLanguageApiFp","SupportedLanguagesApiAxiosParamCreator","v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet","v1SupportedLanguagesGamesGameIdGet","v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch","enableAutomaticTranslation","v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch","enableUniverseDisplayInfoAutomaticTranslation","v1SupportedLanguagesGamesGameIdPatch","languages","v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet","v1SupportedLanguagesMetadataGet","SupportedLanguagesApiFp","TranslationAnalyticsApiAxiosParamCreator","v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet","startDateTime","endDateTime","reportType","reportSubjectTargetId","v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost","v1TranslationAnalyticsMetadataGet","TranslationAnalyticsApiFp","UiConfigurationsApiFp","v1UiConfigurationsGet","UiConfigurationsApiAxiosParamCreator","assertParamExists","functionName","paramName","paramValue","setSearchParams","searchParams","objects","set","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","toPathString","createRequestFunction","axiosArgs","globalAxios","DUMMY_BASE_URL","AutoLocalizationTableApiFp","localVarAxiosParamCreator","v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost","URL","v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost","v1AutoLocalizationTableGamesGameIdPatch","robloxGameId","AutoLocalizationTableApiAxiosParamCreator","RobloxLocalizationTablesApiCreateTableRequestOwnerTypeEnum","RobloxLocalizationTablesApiCursorEntryIdentifierSortOrderEnum","RobloxLocalizationTablesApiGetTableResponseOwnerTypeEnum","RobloxLocalizationTablesApiTranslatorAgentTypeEnum","v1LocalizationTableAvailableLanguagesGet","v1LocalizationTableLimitsGet","v1LocalizationTableMetadataGet","v1LocalizationTableTablesAssetIdGet","v1LocalizationTableTablesPost","v1LocalizationTableTablesTableIdEntriesGet","v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost","v1LocalizationTableTablesTableIdEntryCountGet","v1LocalizationTableTablesTableIdGet","v1LocalizationTableTablesTableIdLanguageTranslationCountsGet","locales","v1LocalizationTableTablesTableIdPatch","autoLocalizationApiInstance","localizationTablesApiInstance","getAutolocalizationConfiguration","setAutolocalizationConfiguration","isAutolocalizationEnabled","patchPayload","setUseAutoLocalizationTable","shouldUseLocalizationTable","flushAutoLocalizationTable","maxAgeForFlush","cleanupRequest","getMetadata","automaticTranslationApiInstance","getGameFeatureStatus","getTargetLanguages","sourceLanguageCode","targetLanguageCodes","getGameAutoLocalizationQuota","SupportedLanguagesV2ApiFp","v2SupportedLanguagesGamesGameIdGet","SupportedLanguagesV2ApiAxiosParamCreator","RobloxLocalizationClientSupportedLocaleLocaleEnum","supportedLanguagesApiInstance","supportedLanguagesV2ApiInstance","localizationTableApiInstance","getGameLanguageRolloutSettings","getGameLanguages","getGameLanguagesV2","addLanguages","languageCodesToAdd","languagesToAdd","languageCodeType","deleteLanguages","languageCodesToDelete","languageToDelete","getAvailableLanguages","getAutomaticTranslationStatus","setAutomaticTranslationStatus","getAutomaticTranslationSwitchesValues","setAutomaticTranslationSwitchesValue","sourceLanguageApiInstance","getSourceLanguage","updateSourceLanguage","AssetsApiFp","v1AssetsGet","assetIds","returnPolicy","size","isCircular","v1AssetsThumbnail3dGet","AssetsApiAxiosParamCreator","RobloxThumbnailsApisModelsThumbnailBatchRequestTypeEnum","RobloxWebResponsesThumbnailsThumbnailBatchResponseStateEnum","RobloxWebResponsesThumbnailsThumbnailResponseStateEnum","AvatarApiFp","v1UsersAvatar3dGet","v1UsersAvatarBustGet","userIds","v1UsersAvatarGet","v1UsersAvatarHeadshotGet","AvatarApiAxiosParamCreator","BadgesApiFp","v1BadgesIconsGet","badgeIds","BadgesApiAxiosParamCreator","BatchApiAxiosParamCreator","v1BatchPost","requests","BatchApiFp","BundlesApiFp","v1BundlesThumbnailsGet","BundlesApiAxiosParamCreator","DeveloperProductsApiFp","v1DeveloperProductsIconsGet","developerProductIds","DeveloperProductsApiAxiosParamCreator","GamePassesApiFp","v1GamePassesGet","gamePassIds","GamePassesApiAxiosParamCreator","GamesApiFp","v1GamesIconsGet","universeIds","v1GamesMultigetThumbnailsGet","countPerUniverse","v1GamesUniverseIdThumbnailsGet","universeId","thumbnailIds","GamesApiAxiosParamCreator","GroupEmblemApiFp","v1GroupsIconsGet","groupIds","GroupEmblemApiAxiosParamCreator","MetaDataApiFp","v1MetadataGet","MetaDataApiAxiosParamCreator","OutfitsApiFp","v1UsersOutfitsGet","userOutfitIds","OutfitsApiAxiosParamCreator","PlacesApiFp","v1PlacesGameiconsGet","placeIds","PlacesApiAxiosParamCreator","thumbnailsApi","gameThumbnailsApiInstance","gamePassesApiInstance","ReturnPolicy","Size","GameThumbnailSize","FileType","getIcons","getUniverseThumbnails","thumbnail","thumbnails","targetId","state","imageUrl","getAllUniverseThumbnails","getGamePassIcons","getThumbnailsByThumbnailIds","getPlacesGameIcons","retryable","httpService","translationAnalyticsApiInstance","requestReport","requestPayload","downloadReport","reportSubjectTargetid","v1GamesUniverseIdFavoritesCountGet","v1GamesUniverseIdFavoritesGet","v1GamesUniverseIdFavoritesPost","v1GamesUniverseIdGamePassesGet","RobloxGamesApiModelsRequestGameSortsRequestGameSortsContextEnum","RobloxGamesApiModelsResponseGameDetailResponseUniverseAvatarTypeEnum","RobloxGamesApiModelsResponsePlayabilityStatusResponsePlayabilityStatusEnum","RobloxGamesApiSocialLinkResponseTypeEnum","v1GamesGameThumbnailGet","imageToken","v1GamesGameThumbnailsGet","imageTokens","v1GamesGamesProductInfoGet","v1GamesGet","v1GamesListGet","modelSortToken","modelGameFilter","modelTimeFilter","modelGenreFilter","modelExclusiveStartId","modelSortOrder","modelGameSetTargetId","modelStartRows","modelMaxRows","modelIsKeywordSuggestionEnabled","modelContextCountryRegionId","modelContextUniverseId","modelPageId","modelSortPosition","v1GamesMultigetPlaceDetailsGet","v1GamesMultigetPlayabilityStatusGet","v1GamesPlaceIdServersServerTypeGet","placeId","serverType","v1GamesPlacesPlaceIdMetadataPost","v1GamesRecommendationsAlgorithmAlgorithmNameGet","algorithmName","modelPaginationKey","v1GamesRecommendationsGameUniverseIdGet","v1GamesSortsGet","modelGameSortsContext","v1GamesUniverseIdIconGet","v1GamesUniverseIdMediaGet","SocialLinksApiFp","v1GamesUniverseIdSocialLinksListGet","SocialLinksApiAxiosParamCreator","VipServersApiAxiosParamCreator","v1GamesVipServersUniverseIdPost","requestBody","v1VipServersIdGet","v1VipServersIdPatch","v1VipServersIdPermissionsPatch","v1VipServersIdSubscriptionPatch","VipServersApiFp","VotesApiAxiosParamCreator","v1GamesUniverseIdUserVotesPatch","v1GamesUniverseIdVotesGet","v1GamesUniverseIdVotesUserGet","v1GamesVotesGet","VotesApiFp","v2GamesUniverseIdMediaGet","v2GroupsGroupIdGamesGet","groupId","accessFilter","v2GroupsGroupIdGamesV2Get","v2UsersUserIdFavoriteGamesGet","v2UsersUserIdGamesGet","RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetTypeTypeEnum","RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorTypeTypeEnum","gamesApiInstance","gamesV2ApiInstance","getUniverseMedia","getPlayabilityStatus","getPlaceDetails","getProductInfo","getGameDetails","getGamePasses","getGamesSorts","getGamesList","v2AssetsAssetIdOwnersGet","v2RecommendationsAssetTypeIdGet","thumbWidth","thumbHeight","IExclusiveStartKeyInfoInt64SortOrderEnum","IExclusiveStartKeyInfoInt64PagingDirectionEnum","RelatedEntityTypeResponseAgentTypeTypeEnum","UserModelBuildersClubMembershipTypeEnum","InventoryApiFp","v2UsersUserIdInventoryAssetTypeIdGet","InventoryApiAxiosParamCreator","assetsApiInstance","getRecommendations","getUserKey","storage","LocalStorage","localStorage","getLength","getKey","setLocalStorage","setItem","getLocalStorage","getItem","listenLocalStorage","handlerCallback","attachEvent","removeLocalStorage","removeItem","saveDataByTimeStamp","currentTime","getTime","existingData","fetchNonExpiredCachedData","expirationMS","currentTimeStamp","cachedData","CountryRegionsApiAxiosParamCreator","v1CountryRegionsGet","v1CountryRegionsUserCountryRegionGet","v1CountryRegionsUserCountryRegionPatch","userRequest","CountryRegionsApiFp","LanguageApiAxiosParamCreator","v1LanguagesGet","v1LanguagesUserGeneratedContentGet","LanguageApiFp","LocaleApiAxiosParamCreator","v1LocalesGet","v1LocalesSetUserSupportedLocalePost","v1LocalesSupportedLocalesGet","v1LocalesUserLocaleGet","v1LocalesUserLocalizationLocusSupportedLocalesGet","LocaleApiFp","localeStorageCacheKeys","localeApiInstance","getLocales","LanguageOrLocaleTypeEnum","getUserLocale","setUserLocale","localeCode","payload","supportedLocaleCode","getLocalesWithCache","cacheDurationInMs","networkCaller","localeStorageKey","localStorageData","localStorageService","bundlesApiInstance","avatarApiInstance","groupEmblemApiInstance","badgesApiInstance","developerProductsApiInstance","outfitApiInstance","batchApiInstance","getAssets","getAvatars","getAvatarHeadshots","getGroupIcons","getBadgeIcons","getDeveloperProductIcons","getBundles","getUserOutfits","getBatchThumbnails","gameLocalizationStatusApiInstance","getTranslationProgress","Language","GameLocalizationRolesApiAxiosParamCreator","v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet","v1GameLocalizationRolesGamesGameIdPatch","v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet","role","v1GameLocalizationRolesRolesRoleCurrentUserGet","exclusiveStartKey","pageSize","GameLocalizationRolesApiFp","RobloxGameLocalizationClientGameLocalizationRolesAssigneeAssigneeTypeEnum","RobloxTranslationRolesApiAssigneeTypeEnum","RobloxTranslationRolesApiUpdateRoleRequestAssigneeTypeEnum","LocalizationRoles","rolesApiInstance","BatchRequestError","getGamesListForTranslator","Translator","DefaultCacheProperties","useCache","expirationWindowMS","createExponentialBackoffCooldown","minimumCooldown","maximumCooldown","attempts","exponentialCooldown","pow","min","store","Map","storeKeyPrefix","CacheStorePrefix","getCacheKey","has","storeKey","cache","clear","keysToRemove","localStorageKey","itemsProcessor","itemsSerializer","properties","requestQueue","concurrentRequestCount","isQueueActive","debug","cacheProperties","processBatchWaitTime","batchSize","maxRetryAttempts","getItemExpiration","getFailureCooldown","debugMode","completeItems","processorId","handleBatchResult","batch","currentDate","itemCooldown","requestCompleteTime","performance","duration","startTime","unretriableFailure","retryAttempts","queueAfter","maxAttemptsReached","console","processEndTime","processStartTime","setTimeout","processQueue","batchKeys","requeueRequests","timeSinceLastStart","saveCompleteItem","processFailure","queueItem","invalidateItem","clearCache","createRequestProcessor","itemSerializer","MethodType","friendsApi","presenceApi","usersApi","getFriendsUrlConfig","methodName","Requests","getPresenceUrlConfig","getItemProcessor","userDataRequest","isGuest","friendsRes","results","userData","friendsData","prevCursor","nextCursor","friend","profileUrl","presence","presenceUrlConfig","parseInt","presenceData","userPresences","userPresence","catch","searchString","composeQueryString","queryParams","getAbsoluteUrl","targetUrl","Endpoints","BatchRequestFactory","items","excludeBannedUsers","users","user","processors","generateUserDataStoreMethod","userDataProcessor","itemProcessor","idSerializer","processor","getUserDataRequestProcessor","requestKey","refreshCache","CoreRobloxUtilities","dataStores","userDataStoreV2","getFriends","Friends","getFollowers","Followers","getFollowings","Followings","getFriendsRequests","getUser","clearUserDataStoreCache","catalogDataStore","gameAutoLocalizationDataStore","gameAutomaticTranslationDataStore","gameLanguagesDataStore","gameSourceLanguageDataStore","gameThumbnailsDataStore","gameTranslationAnalyticsDataStore","gamesDataStore","inventoryDataStore","localeDataStore","thumbnailsDataStore","translationProgressDataStore","translationRolesDataStore","userDataStore","getQueryParam","formatUrl","resolveUrl","parseUrl","parseUrlAndQueryString","extractQueryString","getGameDetailReferralUrls","getUrlWithQueries","baseUrl","relativePath","urlService","getRelativePath","navigateTo","getReferralPath","isEventStreamValid","EventStream","sendEventWithTarget","eventName","additionalProperties","targetType","validatedTargetType","values","targetTypes","WWW","game","group","DEFAULT","STUDIO","DIAGNOSTIC","eventTypes","formInteraction","modalAction","pageLoad","sendEvent","event","additionalParams","requiredParams","eventParams","btn","requiredParam","info","sendGamePlayEvent","referrerId","GamePlayEvents","Chat","Hybrid","Navigation","Overlay","Game","Localization","getCallback","sendEventStream","eventStreamProperties","ctx","eventStreamService","sendGamePlayIntentEvent","rootPlaceId","startChatConversation","startWebChatConversation","navigateToFeature","openUserProfile","close","launchGame","localization","languageChangeTrigger","CurrentUser","USER_TYPE_KEY","friends","followers","followings","friendsDict","buildPlayGameProperties","gameInstanceId","playerId","playGameProperties","currentESProperties","GameLauncher","gamePlayIntentEventCtx","websiteUrl","getUserProfileUrl","getUsersPresenceUrl","BATCH_LIMIT","URL_MAP","friendrequests","fetchFromNetwork","cacheEnabled","presences","localStorageNames","fetchUsersList","cacheCriteria","isEnabled","cacheData","userInfoService","callbacks","Set","isValidCallback","add","func","TYPE","FRIENDS","FOLLOWERS","FOLLOWINGS","FRIENDREQUESTS","metricsApi","metaElement","getElementsByName","performanceMetricsBatchWaitTime","timeSpan","timeSpanFormat","getTimeSpanFromString","getAttribute","performanceMetricsBatchSize","idCounter","metricsMetaData","metricsBatchRequestProcessor","measures","otherKeys","taskId","logMeasurement","measure","entityUrl","hybridService","playGameService","metricsService"],"mappings":"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,qCACA,yBACA,uBACA,+BACA,qCACA,iBACA,uBACA,uCACA,eACA,qCACA,eACA,iBACA,qCACA,iBACA,mBACA,6CACA,qBACA,uCACA,qBACA,uCACA,qCACA,2CACA,iBACA,mBACA,yBACA,qBACA,2BACA,qBACA,mBACA,uBACA,yBACA,qBACA,8BAMUC,GAA8D,IACxE,0BACA,aACA,uCACA,yBACA,uBACA,+BACA,uBACA,eACA,2CACA,qBACA,8BAMUC,EAA2D,IACrE,UACA,gBACA,oBACA,4BACA,gCACA,eAMUC,GAAkE,IAC5E,UACA,iBACA,qBACA,6BACA,iCACA,gBAMUC,GAA4D,IACtE,UACA,iBACA,qBACA,6BACA,iCACA,gBAoOUC,GAAqE,IAC/E,cACA,oBAMUC,GAAsE,IAChF,cACA,mBACA,iBACA,eACA,aACA,eACA,eACA,aACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,eACA,eACA,eACA,iBACA,6BACA,yBACA,eACA,eACA,iBACA,uBACA,qBACA,qBACA,uBACA,qBACA,+BACA,uBACA,aACA,eACA,mBACA,2BACA,uBACA,iCACA,iCACA,iCACA,yCACA,mCACA,iCACA,mCACA,mCACA,mCACA,iCACA,iCACA,iCACA,+BACA,iCACA,iCACA,iCACA,yDACA,+DACA,mCACA,iBACA,8BAMUC,EAAuE,IACjF,sBACA,uCAMUC,EAAmE,IAC7E,UACA,sBACA,gBACA,4BACA,YACA,gBACA,oBACA,wBACA,gBACA,kBACA,YACA,YACA,kBACA,gBACA,uBAMUC,EAAuE,IACjF,UACA,cACA,gCACA,oCACA,4CACA,8BACA,yBAMUC,EAA6E,IACvF,4BACA,gCACA,oBACA,8BACA,wCACA,kDACA,iBAMUC,GAAwE,IAClF,YACA,kBA6IUC,GAA6D,IACvE,cACA,oBAMUC,GAA8D,IACxE,cACA,mBACA,iBACA,eACA,aACA,eACA,eACA,aACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,eACA,eACA,eACA,iBACA,6BACA,yBACA,eACA,eACA,iBACA,uBACA,qBACA,qBACA,uBACA,qBACA,+BACA,uBACA,aACA,eACA,mBACA,2BACA,uBACA,iCACA,iCACA,iCACA,yCACA,mCACA,iCACA,mCACA,mCACA,mCACA,iCACA,iCACA,iCACA,+BACA,iCACA,iCACA,iCACA,yDACA,+DACA,mCACA,iBACA,8BAMUC,GAA+D,IACzE,sBACA,wCAMUC,GAA2D,IACrE,UACA,uBACA,iBACA,6BACA,aACA,iBACA,qBACA,yBACA,iBACA,mBACA,aACA,aACA,mBACA,iBACA,wBAMUC,GAA+D,IACzE,UACA,eACA,iCACA,qCACA,6CACA,+BACA,0BAMUC,GAAqE,IAC/E,4BACA,iCACA,qBACA,+BACA,yCACA,mDACA,kBAMUC,GAAgE,IAC1E,YACA,kBAiKUC,EAAqD,IAC/D,0BACA,YACA,sCACA,wBACA,sBACA,8BACA,sBACA,cACA,0CACA,oBACA,6BAMUC,GAAwD,IAClE,0BACA,aACA,uCACA,qCACA,yBACA,uBACA,+BACA,qCACA,iBACA,uBACA,uCACA,eACA,qCACA,eACA,iBACA,qCACA,iBACA,mBACA,6CACA,qBACA,uCACA,qBACA,uCACA,qCACA,2CACA,iBACA,mBACA,yBACA,qBACA,2BACA,qBACA,mBACA,uBACA,yBACA,qBACA,8BAMUC,GAA4D,IACtE,0BACA,qBACA,yBACA,uBACA,yBACA,sBAMUC,GAAyD,IACnE,UACA,iBACA,qBACA,6BACA,iCACA,gBAMUC,GAAmD,IAC7D,0BACA,uBACA,iBACA,uBACA,mBACA,iBACA,yBACA,mBACA,mBACA,qBACA,uBACA,uBACA,aACA,cAMUC,EAAqD,IAC/D,sBACA,wBACA,gBACA,oBACA,sBACA,yBAMUC,EAAwD,IAClE,YACA,iBA2BUC,EAAqD,IAC/D,cACA,mBA+FUC,EAAyC,IACnD,0BACA,YACA,sCACA,wBACA,sBACA,8BACA,sBACA,cACA,0CACA,oBACA,6BAyFUC,GAAmC,IAC7C,0BACA,uBACA,iBACA,uBACA,mBACA,iBACA,yBACA,mBACA,mBACA,qBACA,uBACA,uBACA,aACA,cAsEUC,GAA0D,IACpE,cACA,oBAgGUC,GAAgD,IAC1D,UACA,iBACA,qBACA,6BACA,iCACA,gBA0OUC,GAAuD,IACjE,0BACA,qBACA,yBACA,uBACA,yBACA,sBAsEUC,GAA2C,IACrD,sBACA,yBACA,iBACA,qBACA,uBACA,0BAMUC,GAA4C,IACtD,UACA,gBAuCUC,GAA+C,IACzD,0BACA,aACA,uCACA,qCACA,yBACA,uBACA,+BACA,qCACA,iBACA,uBACA,uCACA,eACA,qCACA,eACA,iBACA,qCACA,iBACA,mBACA,6CACA,qBACA,uCACA,qBACA,uCACA,qCACA,2CACA,iBACA,mBACA,yBACA,qBACA,2BACA,qBACA,mBACA,uBACA,yBACA,qBACA,8BAmDUC,GAAyE,IACnF,UACA,gBAMUC,EAA+E,IACzF,kBACA,uBAiCUC,GAAiH,IAC3H,UACA,gBAMUC,GAAuH,IACjI,kBACA,wBAiCUC,GAAoF,IAC9F,UACA,gBAMUC,GAA0F,IACpG,kBACA,wBAiCUC,EAAoF,IAC9F,UACA,eAMUC,EAA0F,IACpG,kBACA,sBAmLK,IA63BP,KAA+B,IAA/B,EAA+BC,GAYtB,YAAA9E,0BAAP,SACEC,EACAC,EACAC,EACAC,EACA5M,GALF,WAOE,OAAOgO,EAAY3c,KAAK8a,eACrBK,0BAA0BC,EAASC,EAAWC,EAAOC,EAAQ5M,GAC7DnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWvC,YAAAiB,4BAAP,SAAmCC,EAAkBtN,GAArD,WACE,OAAOgO,EAAY3c,KAAK8a,eACrBkB,4BAA4BC,EAAUtN,GACtCnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAAmB,oCAAP,SAA2CD,EAAkBE,EAAmBxN,GAAhF,WACE,OAAOgO,EAAY3c,KAAK8a,eACrBoB,oCAAoCD,EAAUE,EAAUxN,GACxDnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWvC,YAAAqB,4BAAP,SAAmCH,EAAkBtN,GAArD,WACE,OAAOgO,EAAY3c,KAAK8a,eACrBsB,4BAA4BH,EAAUtN,GACtCnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWvC,YAAAsB,oBAAP,SAA2BC,EAA0B3N,GAArD,WACE,OAAOgO,EAAY3c,KAAK8a,eACrBuB,oBAAoBC,EAAW3N,GAC/BnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAcvC,YAAAwB,kCAAP,SACEC,EACAC,EACAnB,EACAC,EACAF,EACA1M,GANF,WAQE,OAAOgO,EAAY3c,KAAK8a,eACrByB,kCAAkCC,EAAQC,EAAYnB,EAAOC,EAAQF,EAAW1M,GAChFnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAcvC,YAAA2B,wBAAP,SACEF,EACAnB,EACAC,EACAC,EACA5M,GALF,WAOE,OAAOgO,EAAY3c,KAAK8a,eACrB4B,wBAAwBF,EAAQnB,EAAWC,EAAOC,EAAQ5M,GAC1DnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEhD,GA/HA,a,+CAqI2C,SAA9BmF,EAAuCpF,GAAT,WACzC,MAAO,CAQLqF,0BAA2B,SACzBC,EACAzR,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAImlB,QACF,MAAM,IAAI5E,EACR,QACA,0FAmCJ,OA/BME,EAAiB,KADF,6BACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAGR,gBAAkB,mBAE1CH,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAEP8kB,EACa,iBAAVD,GAC4C,qBAAnDxE,EAAuBrgB,QAAQ,gBACjCqgB,EAAuBvgB,KAAOglB,EAC1B1c,KAAKC,eAAoBlG,IAAV0iB,EAAsBA,EAAQ,IAC7CA,GAAS,GAEN,CAAP,EAAO,CACLhkB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWb0E,+BAAgC,SAC9BC,EACAC,EACA7R,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIslB,QACF,MAAM,IAAI/E,EACR,SACA,gGAIJ,GAAIgF,QACF,MAAM,IAAIhF,EACR,WACA,kGAkCJ,OA/BMC,EAAe,qCAAqCnX,QACxD,WACAD,mBAAmBsH,OAAO4U,KAEtB7E,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEdpe,IAAb8iB,IACF1E,EAAuB0E,SAAWA,GAGpC9E,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASb6E,qBAAsB,SAAO9R,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBtD,OAvBMygB,EAAiB,KADF,wBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASb8E,kBAAmB,SAAO/R,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBnD,OAvBMygB,EAAiB,KADF,qBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUW,SAAf+E,EAAwB7F,GACnC,MAAO,CAQCqF,0BAAN,SACEC,EACAzR,G,qBACC1T,QAAO,W,uDAQkB,SAAMilB,EAC9BpF,GACAqF,0BAA0BC,EAAOzR,I,OACnC,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnByD,+BAAN,SACEC,EACAC,EACA7R,G,qBACC1T,QAAO,W,uDAMkB,SAAMilB,EAC9BpF,GACAwF,+BAA+BC,EAAQC,EAAU7R,I,OACnD,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnB4D,qBAAN,SACE9R,G,qBACC1T,QAAO,W,uDAMkB,SAAMilB,EAC9BpF,GACA2F,qBAAqB9R,I,OACvB,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnB6D,kBAAN,SACE/R,G,qBACC1T,QAAO,W,uDAMkB,SAAMilB,EAA4BpF,GAAe4F,kBACzE/R,I,OAEF,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YAlTtB,IA0bP,EAgaA,EA2MA,EA86BA,EAzhDA,GAAgC,IAAhC,EAAgCoD,GASvB,YAAAE,0BAAP,SACEC,EACAzR,GAFF,WAIE,OAAOgS,EAAa3gB,KAAK8a,eACtBqF,0BAA0BC,EAAOzR,GACjCnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAAuF,+BAAP,SAAsCC,EAAgBC,EAAkB7R,GAAxE,WACE,OAAOgS,EAAa3gB,KAAK8a,eACtBwF,+BAA+BC,EAAQC,EAAU7R,GACjDnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,YAAA0F,qBAAP,SAA4B9R,GAA5B,WACE,OAAOgS,EAAa3gB,KAAK8a,eACtB2F,qBAAqB9R,GACrBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,YAAA2F,kBAAP,SAAyB/R,GAAzB,WACE,OAAOgS,EAAa3gB,KAAK8a,eACtB4F,kBAAkB/R,GAClBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEhD,GA1DA,a,+CAgE4C,SAA/B6F,EAAwC9F,GAAT,WAC1C,MAAO,CAOL+F,qBAAsB,SAAOlS,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBtD,OAvBMygB,EAAiB,KADF,yBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASbkF,wBAAyB,SAAOnS,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBzD,OAvBMygB,EAAiB,KADF,4BACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASbmF,gBAAiB,SAAOpS,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBjD,OAvBMygB,EAAiB,KADF,kBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASboF,mBAAoB,SAAOrS,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBpD,OAvBMygB,EAAiB,KADF,qBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUY,SAAhBqF,EAAyBnG,GACpC,MAAO,CAOC+F,qBAAN,SACElS,G,qBACC1T,QAAO,W,uDAGkB,SAAM2lB,EAC9B9F,GACA+F,qBAAqBlS,I,OACvB,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnBiE,wBAAN,SACEnS,G,qBACC1T,QAAO,W,uDAGkB,SAAM2lB,EAC9B9F,GACAgG,wBAAwBnS,I,OAC1B,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnBkE,gBAAN,SACEpS,G,qBACC1T,QAAO,W,uDAGkB,SAAM2lB,EAA6B9F,GAAeiG,gBAC1EpS,I,OAEF,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnBmE,mBAAN,SACErS,G,qBACC1T,QAAO,W,uDAGkB,SAAM2lB,EAC9B9F,GACAkG,mBAAmBrS,I,OACrB,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YAgH7B,a,+CAqHmC,SAAtBqE,EAA+BpG,GAC1C,MAAO,CAQCqG,uCAAN,SACEC,EACAzS,G,qBACC1T,QAAO,W,uDAMkB,SA7EkB,SAAS6f,GAAT,WAChD,MAAO,CAQLqG,uCAAwC,SACtCC,EACAzS,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAImmB,QACF,MAAM,IAAI5F,EACR,eACA,8GA8BJ,OA3BMC,EAAe,6CAA6CnX,QAChE,iBACAD,mBAAmBsH,OAAOyV,KAEtB1F,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UA4BqByF,CAC9BvG,GACAqG,uCAAuCC,EAAczS,I,OACvD,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YA4D7B,a,+CAuB6C,SAAhCyE,EAAyCxG,GAAT,WAC3C,MAAO,CAQLyG,iCAAkC,SAChCnG,EACAzM,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAImgB,QACF,MAAM,IAAII,EACR,UACA,mGA8BJ,OA3BMC,EAAe,uCAAuCnX,QAC1D,YACAD,mBAAmBsH,OAAOyP,KAEtBM,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUb4F,mCAAoC,SAClCvF,EACAtN,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIghB,QACF,MAAM,IAAIT,EACR,WACA,sGA8BJ,OA3BMC,EAAe,yCAAyCnX,QAC5D,aACAD,mBAAmBsH,OAAOsQ,KAEtBP,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWb6F,kDAAmD,SACjDjF,EACApB,EACAzM,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,mHAIJ,GAAIJ,QACF,MAAM,IAAII,EACR,UACA,oHA6BJ,OA1BMC,EAAe,yDAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,YAAkBD,mBAAmBsH,OAAOyP,KACjDM,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWb8F,+CAAgD,SAC9ClF,EACApB,EACAzM,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,gHAIJ,GAAIJ,QACF,MAAM,IAAII,EACR,UACA,iHA6BJ,OA1BMC,EAAe,yDAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,YAAkBD,mBAAmBsH,OAAOyP,KACjDM,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWb+F,gDAAiD,SAC/CnF,EACApB,EACAzM,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,iHAIJ,GAAIJ,QACF,MAAM,IAAII,EACR,UACA,kHA6BJ,OA1BMC,EAAe,yDAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,YAAkBD,mBAAmBsH,OAAOyP,KACjDM,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWbgG,oDAAqD,SACnDpF,EACAP,EACAtN,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,qHAIJ,GAAIS,QACF,MAAM,IAAIT,EACR,WACA,uHA6BJ,OA1BMC,EAAe,2DAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,aAAmBD,mBAAmBsH,OAAOsQ,KAClDP,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWbiG,iDAAkD,SAChDrF,EACAP,EACAtN,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,kHAIJ,GAAIS,QACF,MAAM,IAAIT,EACR,WACA,oHA6BJ,OA1BMC,EAAe,2DAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,aAAmBD,mBAAmBsH,OAAOsQ,KAClDP,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWbkG,kDAAmD,SACjDtF,EACAP,EACAtN,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIuhB,QACF,MAAM,IAAIhB,EACR,SACA,mHAIJ,GAAIS,QACF,MAAM,IAAIT,EACR,WACA,qHA6BJ,OA1BMC,EAAe,2DAClBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,aAAmBD,mBAAmBsH,OAAOsQ,KAClDP,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUa,SAAjBmG,EAA0BjH,GACrC,MAAO,CAQCyG,iCAAN,SACEnG,EACAzM,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACAyG,iCAAiCnG,EAASzM,I,OAC5C,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAUnB2E,mCAAN,SACEvF,EACAtN,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACA0G,mCAAmCvF,EAAUtN,I,OAC/C,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnB4E,kDAAN,SACEjF,EACApB,EACAzM,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACA2G,kDAAkDjF,EAAQpB,EAASzM,I,OACrE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnB6E,+CAAN,SACElF,EACApB,EACAzM,G,qBACC1T,QAAO,W,uDAGkB,SAAMqmB,EAC9BxG,GACA4G,+CAA+ClF,EAAQpB,EAASzM,I,OAClE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnB8E,gDAAN,SACEnF,EACApB,EACAzM,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACA6G,gDAAgDnF,EAAQpB,EAASzM,I,OACnE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnB+E,oDAAN,SACEpF,EACAP,EACAtN,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACA8G,oDAAoDpF,EAAQP,EAAUtN,I,OACxE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnBgF,iDAAN,SACErF,EACAP,EACAtN,G,qBACC1T,QAAO,W,uDAMkB,SAAMqmB,EAC9BxG,GACA+G,iDAAiDrF,EAAQP,EAAUtN,I,OACrE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAWnBiF,kDAAN,SACEtF,EACAP,EACAtN,G,qBACC1T,QAAO,W,uDACkB,SAAMqmB,EAC9BxG,GACAgH,kDAAkDtF,EAAQP,EAAUtN,I,OACtE,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YA4Q7B,a,+CAoJmD,SAAtCmF,EAA+ClH,GAAT,WACjD,MAAO,CAULmH,qCAAsC,SACpCC,EACA/F,EACAgG,EACAxT,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCAER,GAAIinB,QACF,MAAM,IAAI1G,EACR,cACA,2GAsCJ,OAnCMC,EAAe,0CAA0CnX,QAC7D,gBACAD,mBAAmBsH,OAAOuW,KAEtBxG,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEdpe,IAAbye,IACFL,EAAuBK,SAAWA,QAGbze,IAAnBykB,IACFrG,EAAuBqG,eAAiBA,GAG1CzG,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUbwG,6BAA8B,SAC5BC,EACA1T,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCA6BR,OA3BMygB,EAAiB,KADF,gCACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAElBpe,IAAT2kB,IACFvG,EAAuBuG,KAAOA,GAGhC3G,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUmB,SAAvB0G,EAAgCxH,GAC3C,MAAO,CAUCmH,qCAAN,SACEC,EACA/F,EACAgG,EACAxT,G,qBACC1T,QAAO,W,uDAQkB,SAAM+mB,EAC9BlH,GACAmH,qCAAqCC,EAAa/F,EAAUgG,EAAgBxT,I,OAC9E,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WAUnBuF,6BAAN,SACEC,EACA1T,G,qBACC1T,QAAO,W,uDAMkB,SAAM+mB,EAC9BlH,GACAsH,6BAA6BC,EAAM1T,I,OACrC,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YA37CI,IAAjC,EAAiCoD,GAQxB,YAAAY,qBAAP,SAA4BlS,GAA5B,WACE,OAAOsS,EAAcjhB,KAAK8a,eACvB+F,qBAAqBlS,GACrBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,YAAA+F,wBAAP,SAA+BnS,GAA/B,WACE,OAAOsS,EAAcjhB,KAAK8a,eACvBgG,wBAAwBnS,GACxBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,YAAAgG,gBAAP,SAAuBpS,GAAvB,WACE,OAAOsS,EAAcjhB,KAAK8a,eACvBiG,gBAAgBpS,GAChBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,YAAAiG,mBAAP,SAA0BrS,GAA1B,WACE,OAAOsS,EAAcjhB,KAAK8a,eACvBkG,mBAAmBrS,GACnBnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAyJT,IAAvC,EAAuCkF,GAS9B,YAAAkB,uCAAP,SACEC,EACAzS,GAFF,WAIE,OAAOuS,EAAoBlhB,KAAK8a,eAC7BqG,uCAAuCC,EAAczS,GACrDnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aA+5Bd,IAAlC,EAAkCkF,GASzB,YAAAsB,iCAAP,SAAwCnG,EAAiBzM,GAAzD,WACE,OAAOoT,EAAe/hB,KAAK8a,eACxByG,iCAAiCnG,EAASzM,GAC1CnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWvC,YAAAyG,mCAAP,SAA0CvF,EAAkBtN,GAA5D,WACE,OAAOoT,EAAe/hB,KAAK8a,eACxB0G,mCAAmCvF,EAAUtN,GAC7CnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA0G,kDAAP,SACEjF,EACApB,EACAzM,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxB2G,kDAAkDjF,EAAQpB,EAASzM,GACnEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA2G,+CAAP,SACElF,EACApB,EACAzM,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxB4G,+CAA+ClF,EAAQpB,EAASzM,GAChEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA4G,gDAAP,SACEnF,EACApB,EACAzM,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxB6G,gDAAgDnF,EAAQpB,EAASzM,GACjEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA6G,oDAAP,SACEpF,EACAP,EACAtN,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxB8G,oDAAoDpF,EAAQP,EAAUtN,GACtEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA8G,iDAAP,SACErF,EACAP,EACAtN,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxB+G,iDAAiDrF,EAAQP,EAAUtN,GACnEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvC,YAAA+G,kDAAP,SACEtF,EACAP,EACAtN,GAHF,WAKE,OAAOoT,EAAe/hB,KAAK8a,eACxBgH,kDAAkDtF,EAAQP,EAAUtN,GACpEnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAQzC,IAkRP,EA0uCA,GA1uCA,IAAwC,KAAxC,EAAwCkF,GAW/B,aAAAgC,qCAAP,SACEC,EACA/F,EACAgG,EACAxT,GAJF,WAME,OAAO2T,EAAqBtiB,KAAK8a,eAC9BmH,qCAAqCC,EAAa/F,EAAUgG,EAAgBxT,GAC5EnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWvC,aAAAqH,6BAAP,SAAoCC,EAAe1T,GAAnD,WACE,OAAO2T,EAAqBtiB,KAAK8a,eAC9BsH,6BAA6BC,EAAM1T,GACnCnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEhD,IAnCA,c,+CAyC0C,SAA7BwH,GAAsCzH,GAAT,WACxC,MAAO,CAwBL0H,wBAAyB,SACvBC,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCA6FR,OA3FMygB,EAAiB,KADF,4BACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAETpe,IAAlB+kB,IACF3G,EAAuB,kBAAoB2G,QAGpB/kB,IAArBglB,IACF5G,EAAuB,qBAAuB4G,QAGnBhlB,IAAzBilB,IACF7G,EAAuB,yBAA2B6G,QAG1BjlB,IAAtBklB,IACF9G,EAAuB,sBAAwB8G,GAG7CC,IACF/G,EAAuB,gBAAkB+G,QAGrBnlB,IAAlBolB,IACFhH,EAAuB,kBAAoBgH,QAGpBplB,IAArBqlB,IACFjH,EAAuB,qBAAuBiH,QAGnBrlB,IAAzBslB,IACFlH,EAAuB,yBAA2BkH,QAG3BtlB,IAArBulB,IACFnH,EAAuB,qBAAuBmH,QAG1BvlB,IAAlBwlB,IACFpH,EAAuB,kBAAoBoH,QAGvBxlB,IAAlBylB,IACFrH,EAAuB,kBAAoBqH,QAGxBzlB,IAAjB0lB,IACFtH,EAAuB,iBAAmBsH,QAGb1lB,IAA3B2lB,IACFvH,EAAuB,2BAA6BuH,GAGlDC,IACFxH,EAAuB,kBAAoBwH,QAG3B5lB,IAAd2d,IACFS,EAAuBT,UAAYA,QAGvB3d,IAAV4d,IACFQ,EAAuBR,MAAQA,QAGlB5d,IAAX6d,IACFO,EAAuBP,OAASA,GAGlCG,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SA0Bb2H,iBAAkB,SAChBd,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,G,YAAA,IAAAA,MAAA,I,WACC1T,QAAO,W,wCA6FR,OA3FMygB,EAAiB,KADF,oBACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAETpe,IAAlB+kB,IACF3G,EAAuB,kBAAoB2G,QAGpB/kB,IAArBglB,IACF5G,EAAuB,qBAAuB4G,QAGnBhlB,IAAzBilB,IACF7G,EAAuB,yBAA2B6G,QAG1BjlB,IAAtBklB,IACF9G,EAAuB,sBAAwB8G,GAG7CC,IACF/G,EAAuB,gBAAkB+G,QAGrBnlB,IAAlBolB,IACFhH,EAAuB,kBAAoBgH,QAGpBplB,IAArBqlB,IACFjH,EAAuB,qBAAuBiH,QAGnBrlB,IAAzBslB,IACFlH,EAAuB,yBAA2BkH,QAG3BtlB,IAArBulB,IACFnH,EAAuB,qBAAuBmH,QAG1BvlB,IAAlBwlB,IACFpH,EAAuB,kBAAoBoH,QAGvBxlB,IAAlBylB,IACFrH,EAAuB,kBAAoBqH,QAGxBzlB,IAAjB0lB,IACFtH,EAAuB,iBAAmBsH,QAGb1lB,IAA3B2lB,IACFvH,EAAuB,2BAA6BuH,GAGlDC,IACFxH,EAAuB,kBAAoBwH,QAG3B5lB,IAAd2d,IACFS,EAAuBT,UAAYA,QAGvB3d,IAAV4d,IACFQ,EAAuBR,MAAQA,QAGlB5d,IAAX6d,IACFO,EAAuBP,OAASA,GAGlCG,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASb4H,+BAAgC,SAAO7U,G,YAAA,IAAAA,MAAA,I,WAAoB1T,QAAO,W,wCAyBhE,OAvBMygB,EAAiB,KADF,oCACsC,GAEvDZ,IACFa,EAAcb,EAAca,aAExBC,EAAyB,KAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,SAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,SAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUU,SAAd6H,GAAuB3I,GAClC,MAAO,CAwBC0H,wBAAN,SACEC,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,G,qBACC1T,QAAO,W,uDAQkB,SAAMsnB,GAC9BzH,GACA0H,wBACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,I,OAEF,OAtBMiO,EAAoB,SAsBnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WA0BnB0G,iBAAN,SACEd,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,G,qBACC1T,QAAO,W,uDAQkB,SAAMsnB,GAA2BzH,GAAeyI,iBACxEd,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,I,OAEF,OApBMiO,EAAoB,SAoBnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,WASnB2G,+BAAN,SACE7U,G,qBACC1T,QAAO,W,uDAMkB,SAAMsnB,GAC9BzH,GACA0I,+BAA+B7U,I,OACjC,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GACpC8B,EAAmB,OACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,YAkf7B,c,iDAA+B,KAA/B,GAA+BoD,GAyBtB,aAAAuC,wBAAP,SACEC,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,GAvEF,WAyEE,OAAO8U,GAAYzjB,KAAK8a,eACrB0H,wBACCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,GAEDnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aA2BvC,aAAAwI,iBAAP,SACEd,EAYAC,EAqCAC,EAOAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,GAvEF,WAyEE,OAAO8U,GAAYzjB,KAAK8a,eACrByI,iBACCd,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjI,EACAC,EACAC,EACA5M,GAEDnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvC,aAAAyI,+BAAP,SAAsC7U,GAAtC,WACE,OAAO8U,GAAYzjB,KAAK8a,eACrB0I,+BAA+B7U,GAC/BnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aCx/OhD,I,GC4DA,GD5DM2I,GAAoB,IAAI,EACxBC,GAAqB,IAAI,EACzBC,GAA6B,IAAI,GA6BvC,IACEC,wBA5B8B,SAC9B3B,EACA/F,EACAgG,GAEA,OAAOyB,GAA2B3B,qCAChCC,EACA/F,EACAgG,IAqBF2B,yBAjB+B,SAC/B7H,EACAE,GAEA,OAAOuH,GAAkBxH,oCAAoCD,EAAUE,EAAU,CAC/E5e,iBAAiB,KAanBwmB,gBATsB,SACtB3D,GAEA,OAAOuD,GAAmBxD,0BAA0BC,EAAO,CAAE7iB,iBAAiB,M,scCbnE,GAAY,EAAAqd,gBAAA,oCAAoD,OAAQ,IA4BrF,GAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,UAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,SCuwChBgf,G,49DAo/BwC,SAAvCC,GAAiDnJ,GAAV,WAChD,MAAO,CAQHoJ,wDAAyD,SAAOC,EAAgBxoB,EAAkFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEzL,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,yHAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,0HAyBtC,OAvBM8f,EAAe,4DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjBwI,uDAAwD,SAAOD,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEtG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,wHAqBrC,OAnBM1I,EAAe,4DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjByI,0DAA2D,SAAOF,EAAgBxoB,EAAyFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElM,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,2HAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,4HAyBtC,OAvBM8f,EAAe,iEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjB0I,iCAAkC,SAAOH,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEhF,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,kGAqBrC,OAnBM1I,EAAe,sCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB2I,mCAAoC,SAAOJ,EAAgBxoB,EAAkFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpK,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,oGAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,qGAyBtC,OAvBM8f,EAAe,sCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB4I,2CAA4C,SAAOL,EAAgBxoB,EAAqFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE/K,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,4GAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,6GAyBtC,OAvBM8f,EAAe,+CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjB6I,8BAA+B,SAAO9V,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmB7D,OAjBMygB,EAAiB,KADF,iCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUY,SAAxB8I,GAAiC5J,GAC1C,MAAO,CAQGoJ,wDAAN,SAA8DC,EAAgBxoB,EAAkFgT,G,sBAAgB1T,QAAO,W,wDACzJ,SAAMgpB,GAAqCnJ,GAAeoJ,wDAAwDC,EAAQxoB,EAASgT,I,OAC7J,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBuH,uDAAN,SAA6DD,EAAgBxV,G,sBAAgB1T,QAAO,W,wDACtE,SAAMgpB,GAAqCnJ,GAAesJ,uDAAuDD,EAAQxV,I,OACnJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBwH,0DAAN,SAAgEF,EAAgBxoB,EAAyFgT,G,sBAAgB1T,QAAO,W,wDAClK,SAAMgpB,GAAqCnJ,GAAeuJ,0DAA0DF,EAAQxoB,EAASgT,I,OAC/J,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvByH,iCAAN,SAAuCH,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAChD,SAAMgpB,GAAqCnJ,GAAewJ,iCAAiCH,EAAQxV,I,OAC7H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB0H,mCAAN,SAAyCJ,EAAgBxoB,EAAkFgT,G,sBAAgB1T,QAAO,W,wDACpI,SAAMgpB,GAAqCnJ,GAAeyJ,mCAAmCJ,EAAQxoB,EAASgT,I,OACxI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB2H,2CAAN,SAAiDL,EAAgBxoB,EAAqFgT,G,sBAAgB1T,QAAO,W,wDAC/I,SAAMgpB,GAAqCnJ,GAAe0J,2CAA2CL,EAAQxoB,EAASgT,I,OAChJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvB4H,8BAAN,SAAoC9V,G,sBAAgB1T,QAAO,W,wDAC7B,SAAMgpB,GAAqCnJ,GAAe2J,8BAA8B9V,I,OAClH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,aA3iFzB8H,GAAgE,IACxE,YACA,kBA0DQC,GAAmE,IAC3E,UACA,gBA0VQC,GAA8D,IACtE,oBACA,iCACA,6BACA,uBACA,kBAuCQC,EAAyE,IACjF,oBACA,gCACA,4BACA,sBACA,iBAuCQC,GAA6D,IACrE,oBACA,iCACA,6BACA,uBACA,kBAuCQC,GAAiE,IACzE,oBACA,iCACA,6BACA,uBACA,kBAgEQC,GAAgF,IACxF,YACA,8BAMQC,GAA8E,IACtF,UACA,gBA6LQC,EAA8D,IACtE,YACA,iBAoDQC,EAAwG,IAChH,oBACA,mBAsGQC,EAAqE,IAC7E,oBACA,mBAiCQC,EAA6E,IACrF,oBACA,mBAoDQC,EAA4D,IACpE,oBACA,gCACA,4BACA,sBACA,iBAkJQvB,SAAkE,IAC1E,oBACA,mBAgGQwB,GAAuF,IAC/F,8CACA,qFACA,2EACA,gBAqBQC,GAAoG,IAC5G,wBACA,iBACA,8BA4KQC,GAAmE,IAC3E,wBACA,gBAmEQC,GAA2E,IACnF,oEACA,6EACA,uDACA,mDACA,uCACA,+CACA,gCA6CQC,GAAmF,IAC3F,kBACA,8EAMQC,EAA6F,IACrG,oBACA,mBAoDQC,GAAwD,IAChE,YACA,2BAihBG,IA0iBP,OAAyC,MAAzC,GAAyC,IAS9B,aAAA5B,wDAAP,SAA+DC,EAAgBxoB,EAAkFgT,GAAjK,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAeoJ,wDAAwDC,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU3K,aAAAqJ,uDAAP,SAA8DD,EAAgBxV,GAA9E,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAesJ,uDAAuDD,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYjK,aAAAsJ,0DAAP,SAAiEF,EAAgBxoB,EAAyFgT,GAA1K,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAeuJ,0DAA0DF,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU7K,aAAAuJ,iCAAP,SAAwCH,EAAgBxV,GAAxD,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAewJ,iCAAiCH,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY3I,aAAAwJ,mCAAP,SAA0CJ,EAAgBxoB,EAAkFgT,GAA5I,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAeyJ,mCAAmCJ,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYtJ,aAAAyJ,2CAAP,SAAkDL,EAAgBxoB,EAAqFgT,GAAvJ,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAe0J,2CAA2CL,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU9J,aAAA0J,8BAAP,SAAqC9V,GAArC,WACI,OAAO+V,GAAsB1kB,KAAK8a,eAAe2J,8BAA8B9V,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAG3I,IArFA,c,iDA4FwD,SAA3CgL,GAAqDjL,GAAV,WACpD,MAAO,CAQHkL,kDAAmD,SAAO7B,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEjG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,mHAqBrC,OAnBM1I,EAAe,0DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBqK,0CAA2C,SAAO9B,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEzF,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,2GAqBrC,OAnBM1I,EAAe,iDAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBsK,8DAA+D,SAAOC,EAAsBC,EAAiCzX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpJ,GAAIkrB,QACA,MAAM,IAAI,GAAc,eAAe,qIAyB3C,OAvBM1K,EAAe,sEAChBnX,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3BsK,IACAtK,EAAwC,gBAAIsK,GAKhD1K,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUgB,SAA5ByK,GAAqCvL,GAC9C,MAAO,CAQGkL,kDAAN,SAAwD7B,EAAgBxV,G,sBAAgB1T,QAAO,W,wDACjE,SAAM8qB,GAAyCjL,GAAekL,kDAAkD7B,EAAQxV,I,OAClJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvBoJ,0CAAN,SAAgD9B,EAAgBxV,G,sBAAgB1T,QAAO,W,wDACzD,SAAM8qB,GAAyCjL,GAAemL,0CAA0C9B,EAAQxV,I,OAC1I,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBqJ,8DAAN,SAAoEC,EAAsBC,EAAiCzX,G,sBAAgB1T,QAAO,W,wDACpH,SAAM8qB,GAAyCjL,GAAeoL,8DAA8DC,EAAcC,EAAiBzX,I,OACrL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YApK9B,IA+PP,GAovBA,GA8zBA,GAyZA,GA38DA,IAA6C,MAA7C,GAA6C,IASlC,aAAAmJ,kDAAP,SAAyD7B,EAAgBxV,GAAzE,WACI,OAAO0X,GAA0BrmB,KAAK8a,eAAekL,kDAAkD7B,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWhK,aAAAkL,0CAAP,SAAiD9B,EAAgBxV,GAAjE,WACI,OAAO0X,GAA0BrmB,KAAK8a,eAAemL,0CAA0C9B,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYxJ,aAAAmL,8DAAP,SAAqEC,EAAsBC,EAAiCzX,GAA5H,WACI,OAAO0X,GAA0BrmB,KAAK8a,eAAeoL,8DAA8DC,EAAcC,EAAiBzX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAG9M,IAtCA,c,iDA6CyC,SAA5BuL,GAAsCxL,GAAV,WACrC,MAAO,CAUHyL,yDAA0D,SAAOC,EAAiBL,EAAsBxqB,EAAyEgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAExM,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,2HAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,gIAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,2HA0BtC,OAxBM8f,EAAe,iEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB6K,wBAAyB,SAAOD,EAAiBE,EAAgBC,EAAiBhY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEzG,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,0FA6BtC,OA3BM/K,EAAe,6BAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACnD9K,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEjBpe,IAAVgpB,IACA5K,EAA8B,MAAI4K,QAGvBhpB,IAAXipB,IACA7K,EAA+B,OAAI6K,GAKvCjL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBgL,oDAAqD,SAAOJ,EAAiBL,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1H,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,sHAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,2HAsB3C,OApBM1K,EAAe,2DAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBiL,kDAAmD,SAAOL,EAAiBL,EAAsBW,EAAoBnY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,2CAE5I,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,oHAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,yHA8B3C,OA5BM1K,EAAe,2DAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GACzBiL,EAAqB,IAAI1e,cAGV3K,IAAjBopB,GACAC,EAAmBC,OAAO,gBAAiBF,GAI/CjL,EAAwB,gBAAkB,sBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAO0rB,EAEvB,CAAP,EAAO,CACH3qB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjBqL,kCAAmC,SAAOT,EAAiB7X,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElF,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,oGAqBtC,OAnBM/K,EAAe,wCAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACnD9K,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBsL,8DAA+D,SAAOV,EAAiBL,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpI,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,gIAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,qIAsB3C,OApBM1K,EAAe,sEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBuL,6DAA8D,SAAOX,EAAiBL,EAAsBxqB,EAA6EgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEhN,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,+HAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,oIAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,+HA0BtC,OAxBM8f,EAAe,sEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBwL,kDAAmD,SAAOZ,EAAiBL,EAAsBxqB,EAAkEgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1L,GAAIurB,QACA,MAAM,IAAI,GAAc,UAAU,oHAGtC,GAAIL,QACA,MAAM,IAAI,GAAc,eAAe,yHAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,oHA0BtC,OAxBM8f,EAAe,0DAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO6a,KACpDliB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUC,SAAbyL,GAAsBvM,GAC/B,MAAO,CAUGyL,yDAAN,SAA+DC,EAAiBL,EAAsBxqB,EAAyEgT,G,sBAAgB1T,QAAO,W,wDACxK,SAAMqrB,GAA0BxL,GAAeyL,yDAAyDC,EAASL,EAAcxqB,EAASgT,I,OAClK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB4J,wBAAN,SAA8BD,EAAiBE,EAAgBC,EAAiBhY,G,sBAAgB1T,QAAO,W,wDACzE,SAAMqrB,GAA0BxL,GAAe2L,wBAAwBD,EAASE,EAAOC,EAAQhY,I,OACzH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB+J,oDAAN,SAA0DJ,EAAiBL,EAAsBxX,G,sBAAgB1T,QAAO,W,wDAC1F,SAAMqrB,GAA0BxL,GAAe8L,oDAAoDJ,EAASL,EAAcxX,I,OACpJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBgK,kDAAN,SAAwDL,EAAiBL,EAAsBW,EAAoBnY,G,sBAAgB1T,QAAO,W,wDAC5G,SAAMqrB,GAA0BxL,GAAe+L,kDAAkDL,EAASL,EAAcW,EAAcnY,I,OAChK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBoK,kCAAN,SAAwCT,EAAiB7X,G,sBAAgB1T,QAAO,W,wDAClD,SAAMqrB,GAA0BxL,GAAemM,kCAAkCT,EAAS7X,I,OACpH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBqK,8DAAN,SAAoEV,EAAiBL,EAAsBxX,G,sBAAgB1T,QAAO,W,wDACpG,SAAMqrB,GAA0BxL,GAAeoM,8DAA8DV,EAASL,EAAcxX,I,OAC9J,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBsK,6DAAN,SAAmEX,EAAiBL,EAAsBxqB,EAA6EgT,G,sBAAgB1T,QAAO,W,wDAChL,SAAMqrB,GAA0BxL,GAAeqM,6DAA6DX,EAASL,EAAcxqB,EAASgT,I,OACtK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBuK,kDAAN,SAAwDZ,EAAiBL,EAAsBxqB,EAAkEgT,G,sBAAgB1T,QAAO,W,wDAC1J,SAAMqrB,GAA0BxL,GAAesM,kDAAkDZ,EAASL,EAAcxqB,EAASgT,I,OAC3J,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAmNrC,c,iDAmHoD,SAAvCyK,GAAiDxM,GAAV,WAChD,MAAO,CAUHyM,+EAAgF,SAAOC,EAA4BrB,EAAsBxqB,EAAoFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpP,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,4JAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,sJAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,iJA0BtC,OAxBM8f,EAAe,wFAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB6L,8CAA+C,SAAOD,EAA4Bd,EAAgBC,EAAiBhY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1I,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,2HA6BjD,OA3BM/L,EAAe,oDAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC9D9L,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEjBpe,IAAVgpB,IACA5K,EAA8B,MAAI4K,QAGvBhpB,IAAXipB,IACA7K,EAA+B,OAAI6K,GAKvCjL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB8L,0EAA2E,SAAOF,EAA4BrB,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE3J,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,uJAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,iJAsB3C,OApBM1K,EAAe,kFAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB+L,wEAAyE,SAAOH,EAA4BrB,EAAsBW,EAAoBnY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,2CAE7K,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,qJAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,+IA8B3C,OA5BM1K,EAAe,kFAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GACzBiL,EAAqB,IAAI1e,cAGV3K,IAAjBopB,GACAC,EAAmBC,OAAO,gBAAiBF,GAI/CjL,EAAwB,gBAAkB,sBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAO0rB,EAEvB,CAAP,EAAO,CACH3qB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBgM,wDAAyD,SAAOJ,EAA4B7Y,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEnH,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,qIAqBjD,OAnBM/L,EAAe,+DAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC9D9L,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBiM,oFAAqF,SAAOL,EAA4BrB,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAErK,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,iKAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,2JAsB3C,OApBM1K,EAAe,6FAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBkM,mFAAoF,SAAON,EAA4BrB,EAAsBxqB,EAAwFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE5P,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,gKAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,0JAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,qJA0BtC,OAxBM8f,EAAe,6FAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBmM,wEAAyE,SAAOP,EAA4BrB,EAAsBxqB,EAA6EgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEtO,GAAIusB,QACA,MAAM,IAAI,GAAc,qBAAqB,qJAGjD,GAAIrB,QACA,MAAM,IAAI,GAAc,eAAe,+IAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,0IA0BtC,OAxBM8f,EAAe,iFAChBnX,QAAQ,uBAA6BD,mBAAmBsH,OAAO6b,KAC/DljB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUY,SAAxBoM,GAAiClN,GAC1C,MAAO,CAUGyM,+EAAN,SAAqFC,EAA4BrB,EAAsBxqB,EAAoFgT,G,sBAAgB1T,QAAO,W,wDACpN,SAAMqsB,GAAqCxM,GAAeyM,+EAA+EC,EAAoBrB,EAAcxqB,EAASgT,I,OAC9M,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB4K,8CAAN,SAAoDD,EAA4Bd,EAAgBC,EAAiBhY,G,sBAAgB1T,QAAO,W,wDAC1G,SAAMqsB,GAAqCxM,GAAe2M,8CAA8CD,EAAoBd,EAAOC,EAAQhY,I,OACrK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB6K,0EAAN,SAAgFF,EAA4BrB,EAAsBxX,G,sBAAgB1T,QAAO,W,wDAC3H,SAAMqsB,GAAqCxM,GAAe4M,0EAA0EF,EAAoBrB,EAAcxX,I,OAChM,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB8K,wEAAN,SAA8EH,EAA4BrB,EAAsBW,EAAoBnY,G,sBAAgB1T,QAAO,W,wDAC7I,SAAMqsB,GAAqCxM,GAAe6M,wEAAwEH,EAAoBrB,EAAcW,EAAcnY,I,OAC5M,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvB+K,wDAAN,SAA8DJ,EAA4B7Y,G,sBAAgB1T,QAAO,W,wDACnF,SAAMqsB,GAAqCxM,GAAe8M,wDAAwDJ,EAAoB7Y,I,OAChK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBgL,oFAAN,SAA0FL,EAA4BrB,EAAsBxX,G,sBAAgB1T,QAAO,W,wDACrI,SAAMqsB,GAAqCxM,GAAe+M,oFAAoFL,EAAoBrB,EAAcxX,I,OAC1M,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBiL,mFAAN,SAAyFN,EAA4BrB,EAAsBxqB,EAAwFgT,G,sBAAgB1T,QAAO,W,wDAC5N,SAAMqsB,GAAqCxM,GAAegN,mFAAmFN,EAAoBrB,EAAcxqB,EAASgT,I,OAClN,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBkL,wEAAN,SAA8EP,EAA4BrB,EAAsBxqB,EAA6EgT,G,sBAAgB1T,QAAO,W,wDACtM,SAAMqsB,GAAqCxM,GAAeiN,wEAAwEP,EAAoBrB,EAAcxqB,EAASgT,I,OACvM,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAqNrC,c,iDAoH4C,SAA/BoL,GAAyCnN,GAAV,WACxC,MAAO,CAUHoN,yBAA0B,SAAO/D,EAAgBuC,EAAgBC,EAAiBhY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEzG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,0FA6BrC,OA3BM1I,EAAe,+BAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEjBpe,IAAVgpB,IACA5K,EAA8B,MAAI4K,QAGvBhpB,IAAXipB,IACA7K,EAA+B,OAAI6K,GAKvCjL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBuM,qDAAsD,SAAOhE,EAAgBgC,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1H,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,sHAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,4HAsB3C,OApBM1K,EAAe,6DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBwM,mDAAoD,SAAOjE,EAAgBgC,EAAsBW,EAAoBnY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,2CAE5I,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,oHAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,0HA8B3C,OA5BM1K,EAAe,6DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GACzBiL,EAAqB,IAAI1e,cAGV3K,IAAjBopB,GACAC,EAAmBC,OAAO,gBAAiBF,GAI/CjL,EAAwB,gBAAkB,sBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAO0rB,EAEvB,CAAP,EAAO,CACH3qB,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUI,SAAhByM,GAAyBvN,GAClC,MAAO,CAUGoN,yBAAN,SAA+B/D,EAAgBuC,EAAgBC,EAAiBhY,G,sBAAgB1T,QAAO,W,wDACzE,SAAMgtB,GAA6BnN,GAAeoN,yBAAyB/D,EAAQuC,EAAOC,EAAQhY,I,OAC5H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBsL,qDAAN,SAA2DhE,EAAgBgC,EAAsBxX,G,sBAAgB1T,QAAO,W,wDAC1F,SAAMgtB,GAA6BnN,GAAeqN,qDAAqDhE,EAAQgC,EAAcxX,I,OACvJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBuL,mDAAN,SAAyDjE,EAAgBgC,EAAsBW,EAAoBnY,G,sBAAgB1T,QAAO,W,wDAC5G,SAAMgtB,GAA6BnN,GAAesN,mDAAmDjE,EAAQgC,EAAcW,EAAcnY,I,OACnK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAmGrC,c,iDAiD0D,SAA7CyL,GAAuDxN,GAAV,WACtD,MAAO,CAQHyN,mDAAoD,SAAOpE,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,oHAqBrC,OAnBM1I,EAAe,2DAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB4M,gEAAiE,SAAOC,EAAwBC,EAA8BC,EAA6Cha,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElM,GAAIwtB,QACA,MAAM,IAAI,GAAc,UAAU,kIAGtC,GAAIC,QACA,MAAM,IAAI,GAAc,uBAAuB,+IAGnD,GAAIC,QACA,MAAM,IAAI,GAAc,uBAAuB,+IAgCnD,OA7BMjN,EAAiB,KADF,0EACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B2M,IACA3M,EAAgC,QAAI2M,QAGX/qB,IAAzBgrB,IACA5M,EAA6C,qBAAI4M,QAGxBhrB,IAAzBirB,IACA7M,EAA6C,qBAAI6M,GAKrDjN,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUkB,SAA9BgN,GAAuC9N,GAChD,MAAO,CAQGyN,mDAAN,SAAyDpE,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAClE,SAAMqtB,GAA2CxN,GAAeyN,mDAAmDpE,EAAQxV,I,OACrJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB2L,gEAAN,SAAsEC,EAAwBC,EAA8BC,EAA6Cha,G,sBAAgB1T,QAAO,W,wDAClK,SAAMqtB,GAA2CxN,GAAe0N,gEAAgEC,EAASC,EAAsBC,EAAsBha,I,OAC/M,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA34CP,MAA9B,GAA8B,IAWnB,aAAA0J,yDAAP,SAAgEC,EAAiBL,EAAsBxqB,EAAyEgT,GAAhL,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAeyL,yDAAyDC,EAASL,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAahL,aAAA0L,wBAAP,SAA+BD,EAAiBE,EAAgBC,EAAiBhY,GAAjF,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAe2L,wBAAwBD,EAASE,EAAOC,EAAQhY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvI,aAAA6L,oDAAP,SAA2DJ,EAAiBL,EAAsBxX,GAAlG,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAe8L,oDAAoDJ,EAASL,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAalK,aAAA8L,kDAAP,SAAyDL,EAAiBL,EAAsBW,EAAoBnY,GAApH,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAe+L,kDAAkDL,EAASL,EAAcW,EAAcnY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU9K,aAAAkM,kCAAP,SAAyCT,EAAiB7X,GAA1D,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAemM,kCAAkCT,EAAS7X,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYlI,aAAAmM,8DAAP,SAAqEV,EAAiBL,EAAsBxX,GAA5G,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAeoM,8DAA8DV,EAASL,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa5K,aAAAoM,6DAAP,SAAoEX,EAAiBL,EAAsBxqB,EAA6EgT,GAAxL,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAeqM,6DAA6DX,EAASL,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAapL,aAAAqM,kDAAP,SAAyDZ,EAAiBL,EAAsBxqB,EAAkEgT,GAAlK,WACI,OAAO0Y,GAAWrnB,KAAK8a,eAAesM,kDAAkDZ,EAASL,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAqtB3I,MAAzC,GAAyC,IAW9B,aAAAwM,+EAAP,SAAsFC,EAA4BrB,EAAsBxqB,EAAoFgT,GAA5N,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAeyM,+EAA+EC,EAAoBrB,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa5N,aAAA0M,8CAAP,SAAqDD,EAA4Bd,EAAgBC,EAAiBhY,GAAlH,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAe2M,8CAA8CD,EAAoBd,EAAOC,EAAQhY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYnL,aAAA2M,0EAAP,SAAiFF,EAA4BrB,EAAsBxX,GAAnI,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAe4M,0EAA0EF,EAAoBrB,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa9M,aAAA4M,wEAAP,SAA+EH,EAA4BrB,EAAsBW,EAAoBnY,GAArJ,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAe6M,wEAAwEH,EAAoBrB,EAAcW,EAAcnY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAW1N,aAAA6M,wDAAP,SAA+DJ,EAA4B7Y,GAA3F,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAe8M,wDAAwDJ,EAAoB7Y,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY9K,aAAA8M,oFAAP,SAA2FL,EAA4BrB,EAAsBxX,GAA7I,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAe+M,oFAAoFL,EAAoBrB,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAaxN,aAAA+M,mFAAP,SAA0FN,EAA4BrB,EAAsBxqB,EAAwFgT,GAApO,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAegN,mFAAmFN,EAAoBrB,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAahO,aAAAgN,wEAAP,SAA+EP,EAA4BrB,EAAsBxqB,EAA6EgT,GAA9M,WACI,OAAOqZ,GAAsBhoB,KAAK8a,eAAeiN,wEAAwEP,EAAoBrB,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aA+S/L,MAAjC,GAAiC,IAWtB,aAAAmN,yBAAP,SAAgC/D,EAAgBuC,EAAgBC,EAAiBhY,GAAjF,WACI,OAAO0Z,GAAcroB,KAAK8a,eAAeoN,yBAAyB/D,EAAQuC,EAAOC,EAAQhY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY1I,aAAAoN,qDAAP,SAA4DhE,EAAgBgC,EAAsBxX,GAAlG,WACI,OAAO0Z,GAAcroB,KAAK8a,eAAeqN,qDAAqDhE,EAAQgC,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAarK,aAAAqN,mDAAP,SAA0DjE,EAAgBgC,EAAsBW,EAAoBnY,GAApH,WACI,OAAO0Z,GAAcroB,KAAK8a,eAAesN,mDAAmDjE,EAAQgC,EAAcW,EAAcnY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUrL,IA4MP,GA6uBA,GA6fA,GA1uCA,IAA+C,MAA/C,GAA+C,IASpC,aAAAwN,mDAAP,SAA0DpE,EAAgBxV,GAA1E,WACI,OAAOia,GAA4B5oB,KAAK8a,eAAeyN,mDAAmDpE,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAanK,aAAAyN,gEAAP,SAAuEC,EAAwBC,EAA8BC,EAA6Cha,GAA1K,WACI,OAAOia,GAA4B5oB,KAAK8a,eAAe0N,gEAAgEC,EAASC,EAAsBC,EAAsBha,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAGxO,IA3BA,c,iDAkC4C,SAA/B8N,GAAyC/N,GAAV,WACxC,MAAO,CAUHgO,gEAAiE,SAAOC,EAAoB5C,EAAsBxqB,EAA4EgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAErN,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,qIAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,uIAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,kIA0BtC,OAxBM8f,EAAe,yEAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBoN,+BAAgC,SAAOD,EAAoBrC,EAAgBC,EAAiBhY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEnH,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,oGA6BzC,OA3BMtN,EAAe,qCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACtDrN,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEjBpe,IAAVgpB,IACA5K,EAA8B,MAAI4K,QAGvBhpB,IAAXipB,IACA7K,EAA+B,OAAI6K,GAKvCjL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBqN,2DAA4D,SAAOF,EAAoB5C,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpI,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,gIAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,kIAsB3C,OApBM1K,EAAe,mEAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBsN,yDAA0D,SAAOH,EAAoB5C,EAAsBW,EAAoBnY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,2CAEtJ,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,8HAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,gIA8B3C,OA5BM1K,EAAe,mEAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GACzBiL,EAAqB,IAAI1e,cAGV3K,IAAjBopB,GACAC,EAAmBC,OAAO,gBAAiBF,GAI/CjL,EAAwB,gBAAkB,sBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAO0rB,EAEvB,CAAP,EAAO,CACH3qB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBuN,yCAA0C,SAAOJ,EAAoBpa,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE5F,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,8GAqBzC,OAnBMtN,EAAe,gDAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACtDrN,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBwN,qEAAsE,SAAOL,EAAoB5C,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE9I,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,0IAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,4IAsB3C,OApBM1K,EAAe,8EAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjByN,oEAAqE,SAAON,EAAoB5C,EAAsBxqB,EAAgFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE7N,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,yIAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,2IAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,sIA0BtC,OAxBM8f,EAAe,8EAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB0N,yDAA0D,SAAOP,EAAoB5C,EAAsBxqB,EAAqEgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEvM,GAAI8tB,QACA,MAAM,IAAI,GAAc,aAAa,8HAGzC,GAAI5C,QACA,MAAM,IAAI,GAAc,eAAe,gIAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,2HA0BtC,OAxBM8f,EAAe,kEAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOod,KACvDzkB,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUI,SAAhB2N,GAAyBzO,GAClC,MAAO,CAUGgO,gEAAN,SAAsEC,EAAoB5C,EAAsBxqB,EAA4EgT,G,sBAAgB1T,QAAO,W,wDACrL,SAAM4tB,GAA6B/N,GAAegO,gEAAgEC,EAAY5C,EAAcxqB,EAASgT,I,OAC/K,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBmM,+BAAN,SAAqCD,EAAoBrC,EAAgBC,EAAiBhY,G,sBAAgB1T,QAAO,W,wDACnF,SAAM4tB,GAA6B/N,GAAekO,+BAA+BD,EAAYrC,EAAOC,EAAQhY,I,OACtI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBoM,2DAAN,SAAiEF,EAAoB5C,EAAsBxX,G,sBAAgB1T,QAAO,W,wDACpG,SAAM4tB,GAA6B/N,GAAemO,2DAA2DF,EAAY5C,EAAcxX,I,OACjK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBqM,yDAAN,SAA+DH,EAAoB5C,EAAsBW,EAAoBnY,G,sBAAgB1T,QAAO,W,wDACtH,SAAM4tB,GAA6B/N,GAAeoO,yDAAyDH,EAAY5C,EAAcW,EAAcnY,I,OAC7K,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvBsM,yCAAN,SAA+CJ,EAAoBpa,G,sBAAgB1T,QAAO,W,wDAC5D,SAAM4tB,GAA6B/N,GAAeqO,yCAAyCJ,EAAYpa,I,OACjI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBuM,qEAAN,SAA2EL,EAAoB5C,EAAsBxX,G,sBAAgB1T,QAAO,W,wDAC9G,SAAM4tB,GAA6B/N,GAAesO,qEAAqEL,EAAY5C,EAAcxX,I,OAC3K,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBwM,oEAAN,SAA0EN,EAAoB5C,EAAsBxqB,EAAgFgT,G,sBAAgB1T,QAAO,W,wDAC7L,SAAM4tB,GAA6B/N,GAAeuO,oEAAoEN,EAAY5C,EAAcxqB,EAASgT,I,OACnL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvByM,yDAAN,SAA+DP,EAAoB5C,EAAsBxqB,EAAqEgT,G,sBAAgB1T,QAAO,W,wDACvK,SAAM4tB,GAA6B/N,GAAewO,yDAAyDP,EAAY5C,EAAcxqB,EAASgT,I,OACxK,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAqNrC,c,iDAoHkD,SAArC2M,GAA+C1O,GAAV,WAC9C,MAAO,CAUH2O,qCAAsC,SAAOtF,EAAgBuC,EAAgBC,EAAiBhY,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAErH,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,sGA6BrC,OA3BM1I,EAAe,4CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEjBpe,IAAVgpB,IACA5K,EAA8B,MAAI4K,QAGvBhpB,IAAXipB,IACA7K,EAA+B,OAAI6K,GAKvCjL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB8N,8DAA+D,SAAOvF,EAAgBgC,EAAsBwD,EAAiChb,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,2CAEpK,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,+HAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,qIA8B3C,OA5BM1K,EAAe,yEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GACzBiL,EAAqB,IAAI1e,cAGG3K,IAA9BisB,GACA5C,EAAmBC,OAAO,6BAA8B2C,GAI5D9N,EAAwB,gBAAkB,sBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAO0rB,EAEvB,CAAP,EAAO,CACH3qB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBgO,wEAAyE,SAAOzF,EAAgBgC,EAAsB0D,EAAiBlb,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE9J,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,yIAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,+IAG3C,GAAI0D,QACA,MAAM,IAAI,GAAc,UAAU,0IAuBtC,OArBMpO,EAAe,oFAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACzD7hB,QAAQ,YAAkBD,mBAAmBsH,OAAOke,KACnDnO,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,UAAayf,GAAgBhN,GAChEkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBkO,oEAAqE,SAAO3F,EAAgBgC,EAAsBxqB,EAA+DgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAExM,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,qIAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,2IAG3C,GAAIxqB,QACA,MAAM,IAAI,GAAc,UAAU,sIA0BtC,OAxBM8f,EAAe,gFAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUU,SAAtBmO,GAA+BjP,GACxC,MAAO,CAUG2O,qCAAN,SAA2CtF,EAAgBuC,EAAgBC,EAAiBhY,G,sBAAgB1T,QAAO,W,wDACrF,SAAMuuB,GAAmC1O,GAAe2O,qCAAqCtF,EAAQuC,EAAOC,EAAQhY,I,OAC9I,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB6M,8DAAN,SAAoEvF,EAAgBgC,EAAsBwD,EAAiChb,G,sBAAgB1T,QAAO,W,wDACpI,SAAMuuB,GAAmC1O,GAAe4O,8DAA8DvF,EAAQgC,EAAcwD,EAA2Bhb,I,OACjM,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB+M,wEAAN,SAA8EzF,EAAgBgC,EAAsB0D,EAAiBlb,G,sBAAgB1T,QAAO,W,wDAC9H,SAAMuuB,GAAmC1O,GAAe8O,wEAAwEzF,EAAQgC,EAAc0D,EAASlb,I,OACzL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBiN,oEAAN,SAA0E3F,EAAgBgC,EAAsBxqB,EAA+DgT,G,sBAAgB1T,QAAO,W,wDACxK,SAAMuuB,GAAmC1O,GAAegP,oEAAoE3F,EAAQgC,EAAcxqB,EAASgT,I,OACrL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA6HrC,c,iDAgEqD,SAAxCmN,GAAkDlP,GAAV,WACjD,MAAO,CAOHmP,yCAA0C,SAAOtb,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmBxE,OAjBMygB,EAAiB,KADF,6CACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBsO,0DAA2D,SAAO/F,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEzG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,2HAqBrC,OAnBM1I,EAAe,iEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBuO,yCAA0C,SAAOhG,EAAgBxoB,EAAoFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE5K,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,0GAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,2GAyBtC,OAvBM8f,EAAe,4CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjBwO,6BAA8B,SAAOhP,EAAiBzM,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE7E,GAAImgB,QACA,MAAM,IAAI,GAAc,UAAU,+FAwBtC,OArBMM,EAAiB,KADF,gCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEfpe,IAAZ0d,IACAU,EAAgC,QAAIV,GAKxCM,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjByO,8BAA+B,SAAO1uB,EAA8DgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE3H,GAAIU,QACA,MAAM,IAAI,GAAc,UAAU,gGAwBtC,OArBM+f,EAAiB,KADF,gCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB0O,2CAA4C,SAAOC,EAAiBhP,EAAiB4I,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE7H,GAAIsvB,QACA,MAAM,IAAI,GAAc,UAAU,6GA6BtC,OA3BM9O,EAAe,iDAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KACnD7O,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAX6d,IACAO,EAA+B,OAAIP,QAGxB7d,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCzI,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB4O,8DAA+D,SAAOD,EAAiB5uB,EAAoFwoB,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEnN,GAAIsvB,QACA,MAAM,IAAI,GAAc,UAAU,gIAGtC,GAAI5uB,QACA,MAAM,IAAI,GAAc,UAAU,gIA6BtC,OA3BM8f,EAAe,qEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KACnD7O,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCtI,EAAwB,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB6O,8CAA+C,SAAOF,EAAiBpG,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE/G,GAAIsvB,QACA,MAAM,IAAI,GAAc,UAAU,gHAyBtC,OAvBM9O,EAAe,qDAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KACnD7O,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCzI,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjB8O,oCAAqC,SAAOH,EAAiB5b,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEpF,GAAIsvB,QACA,MAAM,IAAI,GAAc,UAAU,sGAqBtC,OAnBM9O,EAAe,yCAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KACnD7O,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjB+O,sCAAuC,SAAOJ,EAAiB5uB,EAAsEwoB,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE7K,GAAIsvB,QACA,MAAM,IAAI,GAAc,UAAU,wGAGtC,GAAI5uB,QACA,MAAM,IAAI,GAAc,UAAU,wGA6BtC,OA3BM8f,EAAe,yCAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KACnD7O,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCtI,EAAwB,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUa,SAAzBgP,GAAkC9P,GAC3C,MAAO,CAOGmP,yCAAN,SAA+Ctb,G,sBAAgB1T,QAAO,W,wDACxC,SAAM+uB,GAAsClP,GAAemP,yCAAyCtb,I,OAC9H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvBqN,0DAAN,SAAgE/F,EAAgBxV,G,sBAAgB1T,QAAO,W,wDACzE,SAAM+uB,GAAsClP,GAAeoP,0DAA0D/F,EAAQxV,I,OACvJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvBsN,yCAAN,SAA+ChG,EAAgBxoB,EAAoFgT,G,sBAAgB1T,QAAO,W,wDAC5I,SAAM+uB,GAAsClP,GAAeqP,yCAAyChG,EAAQxoB,EAASgT,I,OAC/I,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBuN,6BAAN,SAAmChP,EAAiBzM,G,sBAAgB1T,QAAO,W,wDAC7C,SAAM+uB,GAAsClP,GAAesP,6BAA6BhP,EAASzM,I,OAC3H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBwN,8BAAN,SAAoC1uB,EAA8DgT,G,sBAAgB1T,QAAO,W,wDAC3F,SAAM+uB,GAAsClP,GAAeuP,8BAA8B1uB,EAASgT,I,OAC5H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvByN,2CAAN,SAAiDC,EAAiBhP,EAAiB4I,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC7F,SAAM+uB,GAAsClP,GAAewP,2CAA2CC,EAAShP,EAAQ4I,EAAQxV,I,OACzJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB2N,8DAAN,SAAoED,EAAiB5uB,EAAoFwoB,EAAiBxV,G,sBAAgB1T,QAAO,W,wDACnL,SAAM+uB,GAAsClP,GAAe0P,8DAA8DD,EAAS5uB,EAASwoB,EAAQxV,I,OAC7K,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB4N,8CAAN,SAAoDF,EAAiBpG,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC/E,SAAM+uB,GAAsClP,GAAe2P,8CAA8CF,EAASpG,EAAQxV,I,OACpJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvB6N,oCAAN,SAA0CH,EAAiB5b,G,sBAAgB1T,QAAO,W,wDACpD,SAAM+uB,GAAsClP,GAAe4P,oCAAoCH,EAAS5b,I,OAClI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvB8N,sCAAN,SAA4CJ,EAAiB5uB,EAAsEwoB,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC7I,SAAM+uB,GAAsClP,GAAe6P,sCAAsCJ,EAAS5uB,EAASwoB,EAAQxV,I,OACrJ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA1mCJ,MAAjC,GAAiC,IAWtB,aAAAiM,gEAAP,SAAuEC,EAAoB5C,EAAsBxqB,EAA4EgT,GAA7L,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAegO,gEAAgEC,EAAY5C,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa7L,aAAAiO,+BAAP,SAAsCD,EAAoBrC,EAAgBC,EAAiBhY,GAA3F,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAekO,+BAA+BD,EAAYrC,EAAOC,EAAQhY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYpJ,aAAAkO,2DAAP,SAAkEF,EAAoB5C,EAAsBxX,GAA5G,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAemO,2DAA2DF,EAAY5C,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa/K,aAAAmO,yDAAP,SAAgEH,EAAoB5C,EAAsBW,EAAoBnY,GAA9H,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAeoO,yDAAyDH,EAAY5C,EAAcW,EAAcnY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAW3L,aAAAoO,yCAAP,SAAgDJ,EAAoBpa,GAApE,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAeqO,yCAAyCJ,EAAYpa,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY/I,aAAAqO,qEAAP,SAA4EL,EAAoB5C,EAAsBxX,GAAtH,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAesO,qEAAqEL,EAAY5C,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAazL,aAAAsO,oEAAP,SAA2EN,EAAoB5C,EAAsBxqB,EAAgFgT,GAArM,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAeuO,oEAAoEN,EAAY5C,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAajM,aAAAuO,yDAAP,SAAgEP,EAAoB5C,EAAsBxqB,EAAqEgT,GAA/K,WACI,OAAO4a,GAAcvpB,KAAK8a,eAAewO,yDAAyDP,EAAY5C,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAmZ1J,MAAvC,GAAuC,IAW5B,aAAA0O,qCAAP,SAA4CtF,EAAgBuC,EAAgBC,EAAiBhY,GAA7F,WACI,OAAOob,GAAoB/pB,KAAK8a,eAAe2O,qCAAqCtF,EAAQuC,EAAOC,EAAQhY,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa5J,aAAA2O,8DAAP,SAAqEvF,EAAgBgC,EAAsBwD,EAAiChb,GAA5I,WACI,OAAOob,GAAoB/pB,KAAK8a,eAAe4O,8DAA8DvF,EAAQgC,EAAcwD,EAA2Bhb,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa/M,aAAA6O,wEAAP,SAA+EzF,EAAgBgC,EAAsB0D,EAAiBlb,GAAtI,WACI,OAAOob,GAAoB/pB,KAAK8a,eAAe8O,wEAAwEzF,EAAQgC,EAAc0D,EAASlb,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAavM,aAAA+O,oEAAP,SAA2E3F,EAAgBgC,EAAsBxqB,EAA+DgT,GAAhL,WACI,OAAOob,GAAoB/pB,KAAK8a,eAAegP,oEAAoE3F,EAAQgC,EAAcxqB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvM,IAsxBP,GA8cA,GA6SA,GA3vBA,GAA0C,MAA1C,GAA0C,IAQ/B,aAAAkP,yCAAP,SAAgDtb,GAAhD,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAemP,yCAAyCtb,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAW5I,aAAAmP,0DAAP,SAAiE/F,EAAgBxV,GAAjF,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAeoP,0DAA0D/F,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWrK,aAAAoP,yCAAP,SAAgDhG,EAAgBxoB,EAAoFgT,GAApJ,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAeqP,yCAAyChG,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU7J,aAAAqP,6BAAP,SAAoChP,EAAiBzM,GAArD,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAesP,6BAA6BhP,EAASzM,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUzI,aAAAsP,8BAAP,SAAqC1uB,EAA8DgT,GAAnG,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAeuP,8BAA8B1uB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY1I,aAAAuP,2CAAP,SAAkDC,EAAiBhP,EAAiB4I,EAAiBxV,GAArG,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAewP,2CAA2CC,EAAShP,EAAQ4I,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAavK,aAAAyP,8DAAP,SAAqED,EAAiB5uB,EAAoFwoB,EAAiBxV,GAA3L,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAe0P,8DAA8DD,EAAS5uB,EAASwoB,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY3L,aAAA0P,8CAAP,SAAqDF,EAAiBpG,EAAiBxV,GAAvF,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAe2P,8CAA8CF,EAASpG,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUlK,aAAA2P,oCAAP,SAA2CH,EAAiB5b,GAA5D,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAe4P,oCAAoCH,EAAS5b,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAahJ,aAAA4P,sCAAP,SAA6CJ,EAAiB5uB,EAAsEwoB,EAAiBxV,GAArJ,WACI,OAAOic,GAAuB5qB,KAAK8a,eAAe6P,sCAAsCJ,EAAS5uB,EAASwoB,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAG9K,IA3HA,c,iDAkImD,SAAtC8P,GAAgD/P,GAAV,WAC/C,MAAO,CAQHgQ,gCAAiC,SAAO3G,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE/E,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,iGAqBrC,OAnBM1I,EAAe,sCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBmP,wCAAyC,SAAO5G,EAAgBxoB,EAA4EgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEnK,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,yGAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,0GAyBtC,OAvBM8f,EAAe,8CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBoP,kCAAmC,SAAO7G,EAAgBxoB,EAAyEgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1J,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,mGAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,oGAyBtC,OAvBM8f,EAAe,sCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjBqP,6BAA8B,SAAOtc,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmB5D,OAjBMygB,EAAiB,KADF,iCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUW,SAAvBsP,GAAgCpQ,GACzC,MAAO,CAQGgQ,gCAAN,SAAsC3G,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAC/C,SAAM4vB,GAAoC/P,GAAegQ,gCAAgC3G,EAAQxV,I,OAC3H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBkO,wCAAN,SAA8C5G,EAAgBxoB,EAA4EgT,G,sBAAgB1T,QAAO,W,wDACnI,SAAM4vB,GAAoC/P,GAAeiQ,wCAAwC5G,EAAQxoB,EAASgT,I,OAC5I,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBmO,kCAAN,SAAwC7G,EAAgBxoB,EAAyEgT,G,sBAAgB1T,QAAO,W,wDAC1H,SAAM4vB,GAAoC/P,GAAekQ,kCAAkC7G,EAAQxoB,EAASgT,I,OACtI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBoO,6BAAN,SAAmCtc,G,sBAAgB1T,QAAO,W,wDAC5B,SAAM4vB,GAAoC/P,GAAemQ,6BAA6Btc,I,OAChH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA+GrC,c,iDAyDgD,SAAnCsO,GAA6CrQ,GAAV,WAC5C,MAAO,CAMHsQ,6BAA8B,SAAOzc,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmB5D,OAjBMygB,EAAiB,KADF,kCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAQjByP,0BAA2B,SAAO1c,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmBzD,OAjBMygB,EAAiB,KADF,8BACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB0P,uBAAwB,SAAO9O,EAAgB+O,EAAmBvkB,EAAmB2H,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE5G,GAAIuhB,QACA,MAAM,IAAI,GAAc,SAAS,wFAGrC,GAAI+O,QACA,MAAM,IAAI,GAAc,YAAY,2FAGxC,GAAIvkB,QACA,MAAM,IAAI,GAAc,YAAY,2FAgCxC,OA7BM0U,EAAiB,KADF,2BACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAX8e,IACAV,EAA+B,OAAIU,QAGrB9e,IAAd6tB,IACAzP,EAAkC,UAAIyP,QAGxB7tB,IAAdsJ,IACA8U,EAAkC,UAAI9U,GAK1C0U,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUQ,SAApB4P,GAA6B1Q,GACtC,MAAO,CAMGsQ,6BAAN,SAAmCzc,G,sBAAgB1T,QAAO,W,wDAC5B,SAAMkwB,GAAiCrQ,GAAesQ,6BAA6Bzc,I,OAC7G,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAQvBwO,0BAAN,SAAgC1c,G,sBAAgB1T,QAAO,W,wDACzB,SAAMkwB,GAAiCrQ,GAAeuQ,0BAA0B1c,I,OAC1G,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvByO,uBAAN,SAA6B9O,EAAgB+O,EAAmBvkB,EAAmB2H,G,sBAAgB1T,QAAO,W,wDAC5E,SAAMkwB,GAAiCrQ,GAAewQ,uBAAuB9O,EAAQ+O,EAAWvkB,EAAW2H,I,OACrI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAmFrC,c,iDAyCkD,SAArC4O,GAA+C3Q,GAAV,WAC9C,MAAO,CAQH4Q,+BAAgC,SAAOvH,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE9E,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,gGAqBrC,OAnBM1I,EAAe,qCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjB+P,iCAAkC,SAAOxH,EAAgBgC,EAAsBxX,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEtG,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,kGAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,wGAyB3C,OAvBM1K,EAAe,qCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAC1BC,EAAyB,QAEVpe,IAAjByoB,IACArK,EAAqC,aAAIqK,GAK7CzK,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUU,SAAtBgQ,GAA+B9Q,GACxC,MAAO,CAQG4Q,+BAAN,SAAqCvH,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAC9C,SAAMwwB,GAAmC3Q,GAAe4Q,+BAA+BvH,EAAQxV,I,OACzH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvB8O,iCAAN,SAAuCxH,EAAgBgC,EAAsBxX,G,sBAAgB1T,QAAO,W,wDACtE,SAAMwwB,GAAmC3Q,GAAe6Q,iCAAiCxH,EAAQgC,EAAcxX,I,OACzI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA5cG,MAAxC,GAAwC,IAS7B,aAAAiO,gCAAP,SAAuC3G,EAAgBxV,GAAvD,WACI,OAAOuc,GAAqBlrB,KAAK8a,eAAegQ,gCAAgC3G,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYzI,aAAAgQ,wCAAP,SAA+C5G,EAAgBxoB,EAA4EgT,GAA3I,WACI,OAAOuc,GAAqBlrB,KAAK8a,eAAeiQ,wCAAwC5G,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY1J,aAAAiQ,kCAAP,SAAyC7G,EAAgBxoB,EAAyEgT,GAAlI,WACI,OAAOuc,GAAqBlrB,KAAK8a,eAAekQ,kCAAkC7G,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUpJ,aAAAkQ,6BAAP,SAAoCtc,GAApC,WACI,OAAOuc,GAAqBlrB,KAAK8a,eAAemQ,6BAA6Btc,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aA8PpG,MAArC,GAAqC,IAO1B,aAAAqQ,6BAAP,SAAoCzc,GAApC,WACI,OAAO6c,GAAkBxrB,KAAK8a,eAAesQ,6BAA6Bzc,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAS3H,aAAAsQ,0BAAP,SAAiC1c,GAAjC,WACI,OAAO6c,GAAkBxrB,KAAK8a,eAAeuQ,0BAA0B1c,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYxH,aAAAuQ,uBAAP,SAA8B9O,EAAgB+O,EAAmBvkB,EAAmB2H,GAApF,WACI,OAAO6c,GAAkBxrB,KAAK8a,eAAewQ,uBAAuB9O,EAAQ+O,EAAWvkB,EAAW2H,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUvJ,IA6LP,MAAuC,MAAvC,GAAuC,IAS5B,aAAA2Q,+BAAP,SAAsCvH,EAAgBxV,GAAtD,WACI,OAAOid,GAAoB5rB,KAAK8a,eAAe4Q,+BAA+BvH,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYvI,aAAA4Q,iCAAP,SAAwCxH,EAAgBgC,EAAsBxX,GAA9E,WACI,OAAOid,GAAoB5rB,KAAK8a,eAAe6Q,iCAAiCxH,EAAQgC,EAAcxX,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAGlK,IA1BA,c,iDAiCsD,SAAzC8Q,GAAmD/Q,GAAV,WAClD,MAAO,CAQHgR,6DAA8D,SAAO3H,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE5G,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,8HAqBrC,OAnBM1I,EAAe,sEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjBmQ,mCAAoC,SAAO5H,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElF,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,oGAqBrC,OAnBM1I,EAAe,yCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBoQ,oFAAqF,SAAO7H,EAAgBgC,EAAsB8F,EAAqCtd,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE9L,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,qJAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,2JAG3C,GAAI8F,QACA,MAAM,IAAI,GAAc,6BAA6B,yKA0BzD,OAxBMxQ,EAAe,+FAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAA4D,iBAA/B4L,GAA+F,qBAAnDrQ,EAAuBrgB,QAAQ,gBAC9GqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAyClG,IAA/BuuB,EAA2CA,EAA6B,IAAOA,GAA8B,GAEzK,CAAP,EAAO,CACH7vB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAYjBsQ,yGAA0G,SAAO/H,EAAgBgC,EAAsBgG,EAAwDxd,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEtO,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,0KAGrC,GAAIgC,QACA,MAAM,IAAI,GAAc,eAAe,gLAG3C,GAAIgG,QACA,MAAM,IAAI,GAAc,gDAAgD,iNA0B5E,OAxBM1Q,EAAe,uHAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,iBAAuBD,mBAAmBsH,OAAOwa,KACxDzK,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAA+E,iBAAlD8L,GAAkH,qBAAnDvQ,EAAuBrgB,QAAQ,gBACjIqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAA4DlG,IAAlDyuB,EAA8DA,EAAgD,IAAOA,GAAiD,GAElO,CAAP,EAAO,CACH/vB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBwQ,qCAAsC,SAAOjI,EAAgBkI,EAAkE1d,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEtJ,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,sGAGrC,GAAIkI,QACA,MAAM,IAAI,GAAc,YAAY,yGAyBxC,OAvBM5Q,EAAe,yCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAE/DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAA2C,iBAAdgM,GAA8E,qBAAnDzQ,EAAuBrgB,QAAQ,gBAC7FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAwBlG,IAAd2uB,EAA0BA,EAAY,IAAOA,GAAa,GAEtH,CAAP,EAAO,CACHjwB,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAUjB0Q,kFAAmF,SAAOnI,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAEjI,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,mJAqBrC,OAnBM1I,EAAe,8FAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjB2Q,gCAAiC,SAAO5d,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmB/D,OAjBMygB,EAAiB,KADF,oCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUc,SAA1B4Q,GAAmC1R,GAC5C,MAAO,CAQGgR,6DAAN,SAAmE3H,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAC5E,SAAM4wB,GAAuC/Q,GAAegR,6DAA6D3H,EAAQxV,I,OAC3J,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvBkP,mCAAN,SAAyC5H,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAClD,SAAM4wB,GAAuC/Q,GAAeiR,mCAAmC5H,EAAQxV,I,OACjI,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBmP,oFAAN,SAA0F7H,EAAgBgC,EAAsB8F,EAAqCtd,G,sBAAgB1T,QAAO,W,wDAC9J,SAAM4wB,GAAuC/Q,GAAekR,oFAAoF7H,EAAQgC,EAAc8F,EAA4Btd,I,OAC5N,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAYvBqP,yGAAN,SAA+G/H,EAAgBgC,EAAsBgG,EAAwDxd,G,sBAAgB1T,QAAO,W,wDACtM,SAAM4wB,GAAuC/Q,GAAeoR,yGAAyG/H,EAAQgC,EAAcgG,EAA+Cxd,I,OACpQ,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBuP,qCAAN,SAA2CjI,EAAgBkI,EAAkE1d,G,sBAAgB1T,QAAO,W,wDACtH,SAAM4wB,GAAuC/Q,GAAesR,qCAAqCjI,EAAQkI,EAAW1d,I,OAC9I,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAUvByP,kFAAN,SAAwFnI,EAAgBxV,G,sBAAgB1T,QAAO,W,wDACjG,SAAM4wB,GAAuC/Q,GAAewR,kFAAkFnI,EAAQxV,I,OAChL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvB0P,gCAAN,SAAsC5d,G,sBAAgB1T,QAAO,W,wDAC/B,SAAM4wB,GAAuC/Q,GAAeyR,gCAAgC5d,I,OACtH,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA3Y9B,IA4jBP,MAA2C,MAA3C,GAA2C,IAShC,aAAAiP,6DAAP,SAAoE3H,EAAgBxV,GAApF,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAegR,6DAA6D3H,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWzK,aAAAgR,mCAAP,SAA0C5H,EAAgBxV,GAA1D,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAeiR,mCAAmC5H,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa/I,aAAAiR,oFAAP,SAA2F7H,EAAgBgC,EAAsB8F,EAAqCtd,GAAtK,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAekR,oFAAoF7H,EAAQgC,EAAc8F,EAA4Btd,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa1O,aAAAmR,yGAAP,SAAgH/H,EAAgBgC,EAAsBgG,EAAwDxd,GAA9M,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAeoR,yGAAyG/H,EAAQgC,EAAcgG,EAA+Cxd,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYlR,aAAAqR,qCAAP,SAA4CjI,EAAgBkI,EAAkE1d,GAA9H,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAesR,qCAAqCjI,EAAQkI,EAAW1d,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAW5J,aAAAuR,kFAAP,SAAyFnI,EAAgBxV,GAAzG,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAewR,kFAAkFnI,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU9L,aAAAwR,gCAAP,SAAuC5d,GAAvC,WACI,OAAO6d,GAAwBxsB,KAAK8a,eAAeyR,gCAAgC5d,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAG/I,IAzFA,c,iDAgGwD,SAA3C0R,GAAqD3R,GAAV,WACpD,MAAO,CAYH4R,uEAAwE,SAAOvI,EAAgBwI,EAAuBC,EAAqBC,EAAiIC,EAA+Bne,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAElU,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,wIAGrC,GAAIwI,QACA,MAAM,IAAI,GAAc,gBAAgB,+IAG5C,GAAIC,QACA,MAAM,IAAI,GAAc,cAAc,6IAG1C,GAAIC,QACA,MAAM,IAAI,GAAc,aAAa,4IAGzC,GAAIC,QACA,MAAM,IAAI,GAAc,wBAAwB,uJAqCpD,OAnCMrR,EAAe,iFAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAETpe,IAAlBivB,IACA7Q,EAAsC,cAAI6Q,QAG1BjvB,IAAhBkvB,IACA9Q,EAAoC,YAAI8Q,QAGzBlvB,IAAfmvB,IACA/Q,EAAmC,WAAI+Q,QAGbnvB,IAA1BovB,IACAhR,EAA8C,sBAAIgR,GAKtDpR,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,SAWjBmR,uEAAwE,SAAO5I,EAAgBxoB,EAAoFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAE1M,GAAIkpB,QACA,MAAM,IAAI,GAAc,SAAS,wIAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,yIAyBtC,OAvBM8f,EAAe,gFAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1CH,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAC9F8kB,EAAyC,iBAAZ1kB,GAA4E,qBAAnDigB,EAAuBrgB,QAAQ,gBAC3FqgB,EAAuBvgB,KAAQglB,EAAqB1c,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAAOA,GAAW,GAEhH,CAAP,EAAO,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,SASjBoR,kCAAmC,SAAOre,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmBjE,OAjBMygB,EAAiB,KADF,sCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAUgB,SAA5BqR,GAAqCnS,GAC9C,MAAO,CAYG4R,uEAAN,SAA6EvI,EAAgBwI,EAAuBC,EAAqBC,EAAiIC,EAA+Bne,G,sBAAgB1T,QAAO,W,wDAClS,SAAMwxB,GAAyC3R,GAAe4R,uEAAuEvI,EAAQwI,EAAeC,EAAaC,EAAYC,EAAuBne,I,OACtO,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WAWvBkQ,uEAAN,SAA6E5I,EAAgBxoB,EAAoFgT,G,sBAAgB1T,QAAO,W,wDAC1K,SAAMwxB,GAAyC3R,GAAeiS,uEAAuE5I,EAAQxoB,EAASgT,I,OAChL,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,WASvBmQ,kCAAN,SAAwCre,G,sBAAgB1T,QAAO,W,wDACjC,SAAMwxB,GAAyC3R,GAAekS,kCAAkCre,I,OAC1H,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YAzM9B,IA0SP,GAkJA,GAlJA,GAA6C,MAA7C,GAA6C,IAalC,aAAA6P,uEAAP,SAA8EvI,EAAgBwI,EAAuBC,EAAqBC,EAAiIC,EAA+Bne,GAA1S,WACI,OAAOse,GAA0BjtB,KAAK8a,eAAe4R,uEAAuEvI,EAAQwI,EAAeC,EAAaC,EAAYC,EAAuBne,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAYpP,aAAAgS,uEAAP,SAA8E5I,EAAgBxoB,EAAoFgT,GAAlL,WACI,OAAOse,GAA0BjtB,KAAK8a,eAAeiS,uEAAuE5I,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU9L,aAAAiS,kCAAP,SAAyCre,GAAzC,WACI,OAAOse,GAA0BjtB,KAAK8a,eAAekS,kCAAkCre,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAGnJ,IAzCA,c,iDAuFqC,SAAxBmS,GAAiCpS,GAC1C,MAAO,CAOGqS,sBAAN,SAA4Bxe,G,sBAAgB1T,QAAO,W,wDACrB,SAhDc,SAAU6f,GAAV,WAChD,MAAO,CAOHqS,sBAAuB,SAAOxe,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAmBrD,OAjBMygB,EAAiB,KADF,yBACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAE1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAI/BJ,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEhFoM,EAAejV,OAClBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UAmBmBwR,CAAqCtS,GAAeqS,sBAAsBxe,I,OAC1G,OADMiO,EAAoB,SACnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,YA+CrC,c,iDAAyC,MAAzC,GAAyC,IAQ9B,aAAAsQ,sBAAP,SAA6Bxe,GAA7B,WACI,OAAOue,GAAsBltB,KAAK8a,eAAeqS,sBAAsBxe,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,a,OCz+SnI,G,qcA7Ca,GAAY,EAAAH,gBAAA,8BAA8C,OAAQ,IA4B/E,EAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,SAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,ECtCM,SAApBqoB,GAA8BC,EAAsBC,EAAmBC,GAChF,GAAIA,QACA,MAAM,IAAI,GAAcD,EAAW,sBAAsBA,EAAS,uCAAuCD,EAAY,KAyD9F,SAAlBG,GAA4BrxB,G,IAAU,wDAE/C,IADA,IAAMsxB,EAAe,IAAIhlB,gBAAgBtM,EAAIqK,QACxB,MAAAknB,EAAA,eAAS,CAAzB,IACU7vB,EADJyS,EAAM,KACb,IAAWzS,KAAOyS,EACdmd,EAAaE,IAAI9vB,EAAKyS,EAAOzS,IAGrC1B,EAAIqK,OAASinB,EAAaztB,WAOO,SAAxB4tB,GAAkCltB,EAAYmtB,EAAqBhT,GAC5E,IAAMiT,EAA6B,iBAAVptB,EAIzB,OAH2BotB,GAAajT,GAAiBA,EAAckT,WACjElT,EAAckT,WAAWF,EAAevyB,QAAQ,iBAChDwyB,GAEApqB,KAAKC,eAAoBlG,IAAViD,EAAsBA,EAAQ,IAC5CA,GAAS,GAOQ,SAAfstB,GAAyB7xB,GAClC,OAAOA,EAAIyK,SAAWzK,EAAIqK,OAASrK,EAAIsK,KAON,SAAxBwnB,GAAkCC,EAAwBC,EAA4BzT,EAAmBG,GAClH,OAAO,SAACzb,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GAClC8B,EAAmB,SAAIsR,EAAUxf,SAAO,CAAEvS,MAAM0e,aAAa,EAAbA,EAAeC,WAAYA,GAAYoT,EAAU/xB,MACvG,OAAOiD,EAAM1D,QAAQkhB,I,wNAzGhBwR,GAAiB,sB,49DCkgCW,SAA7BC,GAAsCxT,GAC/C,IAAMyT,EAjI+C,SAAUzT,GAAV,WACrD,MAAO,CAQH0T,8DAA+D,SAAOrK,EAAgBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAsB7G,OApBAoyB,GAAkB,gEAAiE,SAAUlJ,GACvF1I,EAAe,uEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAElDzI,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAWjB8S,+DAAgE,SAAOvK,EAAgBxoB,EAAmFgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA2BjM,OAzBAoyB,GAAkB,iEAAkE,SAAUlJ,GAE9FkJ,GAAkB,iEAAkE,UAAW1xB,GACzF8f,EAAe,yEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAElDzI,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1C4R,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAOwyB,GAAsBlyB,EAASigB,EAAwBd,GAE9E,CAAP,EAAO,CACH1e,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAYjB+S,wCAAyC,SAAOxK,EAAgBxoB,EAA4EizB,EAAuBjgB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA+B1L,OA7BAoyB,GAAkB,0CAA2C,SAAUlJ,GAEvEkJ,GAAkB,0CAA2C,UAAW1xB,GAClE8f,EAAe,6CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAElDzI,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAC1BC,EAAyB,GAE3B8S,UACA/S,EAAwB,kBAAoBlQ,OAAOijB,IAKvD/S,EAAwB,gBAAkB,mBAE1C4R,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAOwyB,GAAsBlyB,EAASigB,EAAwBd,GAE9E,CAAP,EAAO,CACH1e,IAAK6xB,GAAavS,GAClB/M,QAASiN,UAWaiT,CAA0C/T,GAC5E,MAAO,CAQG0T,8DAAN,SAAoErK,EAAgBxV,G,sBAAgB1T,QAAO,W,wDAC7E,SAAMszB,EAA0BC,8DAA8DrK,EAAQxV,I,OAChI,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAUtE4T,+DAAN,SAAqEvK,EAAgBxoB,EAAmFgT,G,sBAAgB1T,QAAO,W,wDACjK,SAAMszB,EAA0BG,+DAA+DvK,EAAQxoB,EAASgT,I,OAC1I,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAWtE6T,wCAAN,SAA8CxK,EAAgBxoB,EAA4EizB,EAAuBjgB,G,sBAAgB1T,QAAO,W,wDAC1J,SAAMszB,EAA0BI,wCAAwCxK,EAAQxoB,EAASizB,EAAcjgB,I,OACjI,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,YAp8BxEgU,GAA0D,IAClE,YACA,kBA0DQC,GAA6D,IACrE,UACA,gBAqYQC,GAAwD,IAChE,YACA,kBAmSQC,GAAkD,IAC1D,YACA,2BAqDG,IAoQP,GAy1BA,GAz1BA,GAA8C,MAA9C,GAA8C,GASnC,aAAAT,8DAAP,SAAqErK,EAAgBxV,GAArF,WACI,OAAO2f,GAA2BtuB,KAAK8a,eAAe0T,8DAA8DrK,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY7K,aAAA2T,+DAAP,SAAsEvK,EAAgBxoB,EAAmFgT,GAAzK,WACI,OAAO2f,GAA2BtuB,KAAK8a,eAAe4T,+DAA+DvK,EAAQxoB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAavL,aAAA4T,wCAAP,SAA+CxK,EAAgBxoB,EAA4EizB,EAAuBjgB,GAAlK,WACI,OAAO2f,GAA2BtuB,KAAK8a,eAAe6T,wCAAwCxK,EAAQxoB,EAASizB,EAAcjgB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEzL,IAvCA,c,iDAodsC,SAAzB,GAAkCD,GAC3C,IAAMyT,EAva2C,SAAUzT,GAAV,WACjD,MAAO,CAOHoU,yCAA0C,SAAOvgB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAmBxE,OAhBMygB,EAAiB,IAAI+S,IAFN,6CAEwBJ,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SASjBuT,6BAA8B,SAAOxgB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAmB5D,OAhBMygB,EAAiB,IAAI+S,IAFN,gCAEwBJ,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SASjBwT,+BAAgC,SAAOzgB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAmB9D,OAhBMygB,EAAiB,IAAI+S,IAFN,kCAEwBJ,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAUjByT,oCAAqC,SAAOjU,EAAiBzM,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAsBpF,OApBAoyB,GAAkB,sCAAuC,UAAWjS,GAC9DK,EAAe,0CAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOyP,KAEnDM,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAUjB0T,8BAA+B,SAAO3zB,EAAwDgT,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAwBrH,OAtBAoyB,GAAkB,gCAAiC,UAAW1xB,GAGxD+f,EAAiB,IAAI+S,IAFN,gCAEwBJ,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1C4R,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAOwyB,GAAsBlyB,EAASigB,EAAwBd,GAE9E,CAAP,EAAO,CACH1e,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAYjB2T,2CAA4C,SAAOhF,EAAiBhP,EAAiB4I,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA8B7H,OA5BAoyB,GAAkB,6CAA8C,UAAW9C,GACrE9O,EAAe,kDAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAX6d,IACAO,EAA+B,OAAIP,QAGxB7d,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCsJ,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAYjB4T,8DAA+D,SAAOjF,EAAiB5uB,EAA8EwoB,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA+B7M,OA7BAoyB,GAAkB,gEAAiE,UAAW9C,GAE9F8C,GAAkB,gEAAiE,UAAW1xB,GACxF8f,EAAe,sEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCtI,EAAwB,gBAAkB,mBAE1C4R,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAOwyB,GAAsBlyB,EAASigB,EAAwBd,GAE9E,CAAP,EAAO,CACH1e,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAWjB6T,8CAA+C,SAAOlF,EAAiBpG,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA0B/G,OAxBAoyB,GAAkB,gDAAiD,UAAW9C,GACxE9O,EAAe,sDAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCsJ,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAUjB8T,oCAAqC,SAAOnF,EAAiB5b,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAsBpF,OApBAoyB,GAAkB,sCAAuC,UAAW9C,GAC9D9O,EAAe,0CAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC4R,GAAgB/R,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAYjB+T,6DAA8D,SAAOpF,EAAiBqF,EAAwBzL,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAgCtJ,OA9BAoyB,GAAkB,+DAAgE,UAAW9C,GAE7F8C,GAAkB,+DAAgE,UAAWuC,GACvFnU,EAAe,sEAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B8T,IACA9T,EAAgC,QAAI8T,QAGzBlyB,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCsJ,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK6xB,GAAavS,GAClB/M,QAASiN,SAYjBiU,sCAAuC,SAAOtF,EAAiB5uB,EAAgEwoB,EAAiBxV,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA+BvK,OA7BAoyB,GAAkB,wCAAyC,UAAW9C,GAEtE8C,GAAkB,wCAAyC,UAAW1xB,GAChE8f,EAAe,0CAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAO4e,KAEnD7O,EAAiB,IAAI+S,IAAIhT,EAAc4S,IAEzCvT,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAXymB,IACArI,EAA+B,OAAIqI,GAKvCtI,EAAwB,gBAAkB,mBAE1C4R,GAAgB/R,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,KAAOwyB,GAAsBlyB,EAASigB,EAAwBd,GAE9E,CAAP,EAAO,CACH1e,IAAK6xB,GAAavS,GAClB/M,QAASiN,UAWa,CAAsCd,GACxE,MAAO,CAOGoU,yCAAN,SAA+CvgB,G,sBAAgB1T,QAAO,W,wDACxC,SAAMszB,EAA0BW,yCAAyCvgB,I,OACnG,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAQtEqU,6BAAN,SAAmCxgB,G,sBAAgB1T,QAAO,W,wDAC5B,SAAMszB,EAA0BY,6BAA6BxgB,I,OACvF,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAQtEsU,+BAAN,SAAqCzgB,G,sBAAgB1T,QAAO,W,wDAC9B,SAAMszB,EAA0Ba,+BAA+BzgB,I,OACzF,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAStEuU,oCAAN,SAA0CjU,EAAiBzM,G,sBAAgB1T,QAAO,W,wDACpD,SAAMszB,EAA0Bc,oCAAoCjU,EAASzM,I,OACvG,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAStEwU,8BAAN,SAAoC3zB,EAAwDgT,G,sBAAgB1T,QAAO,W,wDACrF,SAAMszB,EAA0Be,8BAA8B3zB,EAASgT,I,OACjG,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAWtEyU,2CAAN,SAAiDhF,EAAiBhP,EAAiB4I,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC7F,SAAMszB,EAA0BgB,2CAA2ChF,EAAShP,EAAQ4I,EAAQxV,I,OAC9H,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAWtE0U,8DAAN,SAAoEjF,EAAiB5uB,EAA8EwoB,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC7K,SAAMszB,EAA0BiB,8DAA8DjF,EAAS5uB,EAASwoB,EAAQxV,I,OAClJ,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAUtE2U,8CAAN,SAAoDlF,EAAiBpG,EAAiBxV,G,sBAAgB1T,QAAO,W,wDAC/E,SAAMszB,EAA0BkB,8CAA8ClF,EAASpG,EAAQxV,I,OACzH,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAStE4U,oCAAN,SAA0CnF,EAAiB5b,G,sBAAgB1T,QAAO,W,wDACpD,SAAMszB,EAA0BmB,oCAAoCnF,EAAS5b,I,OACvG,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAWtE6U,6DAAN,SAAmEpF,EAAiBqF,EAAwBzL,EAAiBxV,G,sBAAgB1T,QAAO,W,wDACtH,SAAMszB,EAA0BoB,6DAA6DpF,EAASqF,EAASzL,EAAQxV,I,OACjJ,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,UAWtE+U,sCAAN,SAA4CtF,EAAiB5uB,EAAgEwoB,EAAiBxV,G,sBAAgB1T,QAAO,W,wDACvI,SAAMszB,EAA0BsB,sCAAsCtF,EAAS5uB,EAASwoB,EAAQxV,I,OAC1H,OADMiO,EAAoB,SACnB,CAAP,EAAOsR,GAAsBtR,EAAmB,IAAa,GAAW9B,WAqQpF,c,iDAA0C,MAA1C,GAA0C,GAQ/B,aAAAoU,yCAAP,SAAgDvgB,GAAhD,WACI,OAAO,GAAuB3O,KAAK8a,eAAeoU,yCAAyCvgB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAU5I,aAAAoU,6BAAP,SAAoCxgB,GAApC,WACI,OAAO,GAAuB3O,KAAK8a,eAAeqU,6BAA6BxgB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAUhI,aAAAqU,+BAAP,SAAsCzgB,GAAtC,WACI,OAAO,GAAuB3O,KAAK8a,eAAesU,+BAA+BzgB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWlI,aAAAsU,oCAAP,SAA2CjU,EAAiBzM,GAA5D,WACI,OAAO,GAAuB3O,KAAK8a,eAAeuU,oCAAoCjU,EAASzM,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWhJ,aAAAuU,8BAAP,SAAqC3zB,EAAwDgT,GAA7F,WACI,OAAO,GAAuB3O,KAAK8a,eAAewU,8BAA8B3zB,EAASgT,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa1I,aAAAwU,2CAAP,SAAkDhF,EAAiBhP,EAAiB4I,EAAiBxV,GAArG,WACI,OAAO,GAAuB3O,KAAK8a,eAAeyU,2CAA2ChF,EAAShP,EAAQ4I,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAavK,aAAAyU,8DAAP,SAAqEjF,EAAiB5uB,EAA8EwoB,EAAiBxV,GAArL,WACI,OAAO,GAAuB3O,KAAK8a,eAAe0U,8DAA8DjF,EAAS5uB,EAASwoB,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAY3L,aAAA0U,8CAAP,SAAqDlF,EAAiBpG,EAAiBxV,GAAvF,WACI,OAAO,GAAuB3O,KAAK8a,eAAe2U,8CAA8ClF,EAASpG,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWlK,aAAA2U,oCAAP,SAA2CnF,EAAiB5b,GAA5D,WACI,OAAO,GAAuB3O,KAAK8a,eAAe4U,oCAAoCnF,EAAS5b,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAahJ,aAAA4U,6DAAP,SAAoEpF,EAAiBqF,EAAwBzL,EAAiBxV,GAA9H,WACI,OAAO,GAAuB3O,KAAK8a,eAAe6U,6DAA6DpF,EAASqF,EAASzL,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAa1L,aAAA8U,sCAAP,SAA6CtF,EAAiB5uB,EAAgEwoB,EAAiBxV,GAA/I,WACI,OAAO,GAAuB3O,KAAK8a,eAAe+U,sCAAsCtF,EAAS5uB,EAASwoB,EAAQxV,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aCpnE9K,I,GC4DA,GD5DM+U,GAA8B,IAAI,GAClCC,GAAgC,IAAI,EA+B1C,IACIC,iCA9BqC,SAAC7L,GACtC,OAAO2L,GAA4B1L,uDAAuDD,EAAQ,CAAE5mB,iBAAiB,KA8BrH0yB,iCA3BqC,SAAC9L,EAAgB+L,GAChDC,EAA4H,CAC9HD,0BAAyB,GAE7B,OAAOJ,GAA4BtL,2CAA2CL,EAAQgM,EAAc,CAAE5yB,iBAAiB,KAwBvH6yB,4BArBgC,SAACjM,EAAgBkM,GAC3CF,EAA4H,CAC9HE,2BAA0B,GAE9B,OAAOP,GAA4BtL,2CAA2CL,EAAQgM,EAAc,CAAE5yB,iBAAiB,KAkBvH+yB,2BAf+B,SAACnM,EAAgBoM,GAC1CC,EAAsH,CACxHD,eAAc,GAElB,OAAOR,GAA8BrB,+DAA+DvK,EAAQqM,EAAgB,CAAEjzB,iBAAiB,KAY/IkzB,YATgB,WAChB,OAAOX,GAA4BrL,8BAA8B,CAAElnB,iBAAiB,MEpClFmzB,GAAkC,IAAI,GA6B5C,IACEC,qBA5B2B,SAC3BxM,GAEA,OAAOuM,GAAgC1K,kDAAkD7B,EAAQ,CAC/F5mB,iBAAiB,KAyBnBqzB,mBArByB,SACzBC,EACAC,GAEA,OAAOJ,GAAgCxK,8DACrC2K,EACAC,EACA,CAAEvzB,iBAAiB,KAerBwzB,6BAXmC,SACnC5M,GAEA,OAAOuM,GAAgCzK,0CAA0C9B,EAAQ,CACvF5mB,iBAAiB,M,scDPR,GAAY,EAAAqd,gBAAA,oCAAoD,OAAQ,IA4BrF,EAGE,SACEE,EACUC,EACA1b,QADA,IAAA0b,MAAA,SACA,IAAA1b,MAAA,GADA,KAAA0b,WACA,KAAA1b,QAENyb,IACF9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAWrD,OAAmC9Y,MAAA,UAMnC,IAHE,YAAmB+Y,EAAeC,GAAlC,EACE,aAAMA,IAAI,K,OADO,EAAAD,QAFnB,EAAAhW,KAAwB,gB,q+DEuMe,SAA5BgsB,GAAqClW,GAChD,MAAO,CAQCmW,mCAAN,SACE9M,EACAxV,G,sBACC1T,QAAO,W,wDAQkB,SA/EwB,SAAS6f,GAAT,WACtD,MAAO,CAQLmW,mCAAoC,SAClC9M,EACAxV,G,YAAA,IAAAA,MAAA,I,YACC1T,QAAO,W,yCAER,GAAIkpB,QACF,MAAM,IAAI,GACR,SACA,oGA8BJ,OA3BM1I,EAAe,yCAAyCnX,QAC5D,WACAD,mBAAmBsH,OAAOwY,KAEtBzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACFa,EAAcb,EAAca,aAExBC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE/BJ,EAAepM,MAAQ,YAClBoM,EAAepM,OACfwM,GACAnN,EAAQW,cAGNoM,EAAejV,OAChBsV,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GAC1FqgB,EAAuBrgB,QAAU,YAC5BsgB,GACAE,GACApN,EAAQpT,SAGN,CAAP,EAAO,CACLa,IAAK,KAAuBsf,GAC5B/M,QAASiN,UA8BqBsV,CAC9BpW,GACAmW,mCAAmC9M,EAAQxV,I,OAC7C,OAHMiO,EAAoB,SAGnB,CAAP,EAAO,SAACvd,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IACpC8B,EAAmB,SACpBD,EAAkBjO,SAAO,CAC5BvS,IAAK2e,EAAW6B,EAAkBxgB,MAEpC,OAAOiD,EAAM1D,QAAQkhB,aA1JjBsU,GAAiD,IAC3D,aACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,kBAqBK,IAuJP,OAA6C,MAA7C,GAA6C,GASpC,aAAAF,mCAAP,SAA0C9M,EAAgBxV,GAA1D,WACE,OAAOqiB,GAA0BhxB,KAAK8a,eACnCmW,mCAAmC9M,EAAQxV,GAC3CnQ,KAAK,SAAA7C,GAAW,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEhD,IAdA,c,iDChWA,I,GC4DA,GD5DMqW,GAAgC,IAAI,EACpCC,GAAkC,IAAI,GACtCC,GAA+B,IAAI,EA8DzC,IACIC,+BA7DmC,WACnC,OAAOH,GAA8B7E,gCAAgC,CAAEhvB,iBAAiB,KA6DxFi0B,iBA1DqB,SAACrN,GACtB,OAAOiN,GAA8BrF,mCAAmC5H,EAAQ,CAAE5mB,iBAAiB,KA0DnGk0B,mBAvDuB,SAACtN,GACxB,OAAOkN,GAAgCJ,mCAAmC9M,EAAQ,CAAE5mB,iBAAiB,KAuDrGm0B,aApDiB,SAACvN,EAAgBwN,GAE5BC,EAAoGD,EACrG5lB,IAAI,SAACoa,GACF,MAAO,CACH0L,iBAAkB,YAClB1L,aAAcA,KAI1B,OAAOiL,GAA8BhF,qCAAqCjI,EAAQyN,EAAgB,CAAEr0B,iBAAiB,KA2CrHu0B,gBAxCoB,SAAC3N,EAAgB4N,GAE/BC,EAAsGD,EACvGhmB,IAAI,SAACoa,GACF,MAAO,CACH0L,iBAAkB,YAClB1L,aAAcA,EACdnM,QAAQ,KAIpB,OAAOoX,GAA8BhF,qCAAqCjI,EAAQ6N,EAAkB,CAAEz0B,iBAAiB,KA8BvH00B,sBA1B0B,WAC1B,OAAOX,GAA6BrH,4CA0BpCiI,8BAvBkC,SAAC/N,GACnC,OAAOiN,GAA8BtF,6DAA6D3H,EAAQ,CAAE5mB,iBAAiB,KAuB7H40B,8BApBkC,SAAChO,EAAgB8H,EAAqC9F,GACxF,OAAOiL,GAA8BpF,oFAAoF7H,EAAQgC,EAAc8F,EAA4B,CAAE1uB,iBAAiB,KAoB9L60B,sCAjB0C,SAACjO,GAC3C,OAAOiN,GAA8B9E,kFAAkFnI,EAAQ,CAAE5mB,iBAAiB,KAiBlJ80B,qCAdyC,SAAClO,EAAgBgI,EAAwDhG,GAClH,OAAOiL,GAA8BlF,yGAAyG/H,EAAQgC,EAAcgG,EAA+C,CAAE5uB,iBAAiB,MEjEpO+0B,GAA4B,IAAI,EAUtC,IACIC,kBATsB,SAACpO,GACvB,OAAOmO,GAA0B5G,+BAA+BvH,EAAQ,CAAE5mB,iBAAiB,KAS3Fi1B,qBANyB,SAACrO,EAAgB0M,GAC1C,OAAOyB,GAA0B3G,iCAAiCxH,EAAQ0M,EAAoB,CAAEtzB,iBAAiB,M,qcDQxG,GAAY,EAAAqd,gBAAA,sBAAsC,OAAQ,IAM1D,GACN,IAqBP,GAGE,SACEE,EACUC,EACA1b,QADA,IAAA0b,MAAA,SACA,IAAA1b,MAAA,GADA,KAAA0b,WACA,KAAA1b,QAENyb,IACF9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAWrD,OAAmC9Y,MAAA,SAMnC,IAHE,YAAmB+Y,EAAeC,GAAlC,EACE,aAAMA,IAAI,K,OADO,EAAAD,QAFnB,EAAAhW,KAAwB,gB,EEzCO,SAApB,GAA8BsoB,EAAsBC,EAAmBC,GAChF,GAAIA,QACA,MAAM,IAAI,GAAcD,EAAW,sBAAsBA,EAAS,uCAAuCD,EAAY,KAyD9F,SAAlB,GAA4BlxB,G,IAAU,wDAE/C,IADA,IAAMsxB,EAAe,IAAIhlB,gBAAgBtM,EAAIqK,QACxB,MAAAknB,EAAA,eAAS,CAAzB,IACU7vB,EADJyS,EAAM,KACb,IAAWzS,KAAOyS,EACdmd,EAAaE,IAAI9vB,EAAKyS,EAAOzS,IAGrC1B,EAAIqK,OAASinB,EAAaztB,WAqBF,SAAf,GAAyB7D,GAClC,OAAOA,EAAIyK,SAAWzK,EAAIqK,OAASrK,EAAIsK,KAON,SAAxB,GAAkCynB,EAAwBC,EAA4BzT,EAAmBG,GAClH,OAAO,SAACzb,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GAClC8B,EAAmB,SAAIsR,EAAUxf,SAAO,CAAEvS,MAAM0e,aAAa,EAAbA,EAAeC,WAAYA,GAAYoT,EAAU/xB,MACvG,OAAOiD,EAAM1D,QAAQkhB,I,wNAzGhB,GAAiB,sB,29DCmbH,SAAd4V,GAAuB3X,GAChC,IAAMyT,EAxGgC,SAAUzT,GAAV,WACtC,MAAO,CAYH4X,YAAa,SAAOC,EAAyBC,EAAuEC,EAA+QrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAyCjc,OAvCA,GAAkB,cAAe,WAAY03B,GAGvCjX,EAAiB,IAAI+S,IAFN,aAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B6W,IACA7W,EAAiC,SAAI6W,EAAS9tB,KAAK,UAGlCnH,IAAjBk1B,IACA9W,EAAqC,aAAI8W,QAGhCl1B,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAUjBmX,uBAAwB,SAAO3X,EAAiBzM,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAyBvE,OAvBA,GAAkB,yBAA0B,UAAWmgB,GAGjDM,EAAiB,IAAI+S,IAFN,0BAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEfpe,IAAZ0d,IACAU,EAAgC,QAAIV,GAKxC,GAAgBM,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWaoX,CAA2BlY,GAC7D,MAAO,CAYG4X,YAAN,SAAkBC,EAAyBC,EAAuEC,EAA+QrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACja,SAAMszB,EAA0BmE,YAAYC,EAAUC,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,I,OACxH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAStEiY,uBAAN,SAA6B3X,EAAiBzM,G,sBAAgB1T,QAAO,W,wDACvC,SAAMszB,EAA0BwE,uBAAuB3X,EAASzM,I,OAC1F,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,YAlXxEmY,GAAuD,IAC/D,gBACA,mCACA,uBACA,yBACA,iCACA,uBACA,iBACA,qCACA,mBACA,yBACA,uCACA,2BACA,4CAoGQC,GAA2D,IACnE,cACA,yBACA,uBACA,qBACA,sBAiCQC,GAAsD,IAC9D,cACA,yBACA,uBACA,qBACA,qBAoFG,IA+MP,OAA+B,KAA/B,GAA+B,IAapB,aAAAT,YAAP,SAAmBC,EAAyBC,EAAuEC,EAA+QrgB,EAAiBsgB,EAAsBnkB,GAAza,WACI,OAAO8jB,GAAYzyB,KAAK8a,eAAe4X,YAAYC,EAAUC,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAWtJ,aAAAgY,uBAAP,SAA8B3X,EAAiBzM,GAA/C,WACI,OAAO8jB,GAAYzyB,KAAK8a,eAAeiY,uBAAuB3X,EAASzM,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEnI,IA5BA,c,iDA6O2B,SAAdqY,GAAuBtY,GAChC,IAAMyT,EA3MgC,SAAUzT,GAAV,WACtC,MAAO,CAQHuY,mBAAoB,SAAO7W,EAAgB7N,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAyBlE,OAvBA,GAAkB,qBAAsB,SAAUuhB,GAG5Cd,EAAiB,IAAI+S,IAFN,sBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEhBpe,IAAX8e,IACAV,EAA+B,OAAIU,GAKvC,GAAgBd,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAajB0X,qBAAsB,SAAOC,EAAwBV,EAAoCrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCvJ,OAnCA,GAAkB,uBAAwB,UAAWs4B,GAG/C7X,EAAiB,IAAI+S,IAFN,wBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3ByX,IACAzX,EAAgC,QAAIyX,EAAQ1uB,KAAK,UAGxCnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAajB4X,iBAAkB,SAAOD,EAAwBV,EAAsKrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCrR,OAnCA,GAAkB,mBAAoB,UAAWs4B,GAG3C7X,EAAiB,IAAI+S,IAFN,mBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3ByX,IACAzX,EAAgC,QAAIyX,EAAQ1uB,KAAK,UAGxCnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAajB6X,yBAA0B,SAAOF,EAAwBV,EAAkIrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCzP,OAnCA,GAAkB,2BAA4B,UAAWs4B,GAGnD7X,EAAiB,IAAI+S,IAFN,4BAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3ByX,IACAzX,EAAgC,QAAIyX,EAAQ1uB,KAAK,UAGxCnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWa8X,CAA2B5Y,GAC7D,MAAO,CAQGuY,mBAAN,SAAyB7W,EAAgB7N,G,sBAAgB1T,QAAO,W,wDAClC,SAAMszB,EAA0B8E,mBAAmB7W,EAAQ7N,I,OACrF,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAYtEwY,qBAAN,SAA2BC,EAAwBV,EAAoCrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACvH,SAAMszB,EAA0B+E,qBAAqBC,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,I,OAClH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAYtE0Y,iBAAN,SAAuBD,EAAwBV,EAAsKrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACrP,SAAMszB,EAA0BiF,iBAAiBD,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC9G,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAYtE2Y,yBAAN,SAA+BF,EAAwBV,EAAkIrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACzN,SAAMszB,EAA0BkF,yBAAyBF,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,I,OACtH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WAhQ7E,IA+XP,MAA+B,KAA/B,GAA+B,IASpB,aAAAuY,mBAAP,SAA0B7W,EAAgB7N,GAA1C,WACI,OAAOykB,GAAYpzB,KAAK8a,eAAeuY,mBAAmB7W,EAAQ7N,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAcnH,aAAAuY,qBAAP,SAA4BC,EAAwBV,EAAoCrgB,EAAiBsgB,EAAsBnkB,GAA/H,WACI,OAAOykB,GAAYpzB,KAAK8a,eAAewY,qBAAqBC,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAchJ,aAAAyY,iBAAP,SAAwBD,EAAwBV,EAAsKrgB,EAAiBsgB,EAAsBnkB,GAA7P,WACI,OAAOykB,GAAYpzB,KAAK8a,eAAe0Y,iBAAiBD,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAc5I,aAAA0Y,yBAAP,SAAgCF,EAAwBV,EAAkIrgB,EAAiBsgB,EAAsBnkB,GAAjO,WACI,OAAOykB,GAAYpzB,KAAK8a,eAAe2Y,yBAAyBF,EAASV,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAE/J,IAzDA,c,iDA6H2B,SAAd4Y,GAAuB7Y,GAChC,IAAMyT,EA9DgC,SAAUzT,GAAV,WACtC,MAAO,CAWH8Y,iBAAkB,SAAOC,EAAyBhB,EAAkBrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqClI,OAnCA,GAAkB,mBAAoB,WAAY44B,GAG5CnY,EAAiB,IAAI+S,IAFN,mBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B+X,IACA/X,EAAiC,SAAI+X,EAAShvB,KAAK,UAG1CnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWakY,CAA2BhZ,GAC7D,MAAO,CAWG8Y,iBAAN,SAAuBC,EAAyBhB,EAAkBrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDAClG,SAAMszB,EAA0BqF,iBAAiBC,EAAUhB,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC/G,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA5E7E,IAmIP,MAA+B,KAA/B,GAA+B,IAYpB,aAAA8Y,iBAAP,SAAwBC,EAAyBhB,EAAkBrgB,EAAiBsgB,EAAsBnkB,GAA1G,WACI,OAAOglB,GAAY3zB,KAAK8a,eAAe8Y,iBAAiBC,EAAUhB,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAExJ,IAfA,c,iDAsByC,SAA5BgZ,GAAsCjZ,GAAV,WACrC,MAAO,CAQHkZ,YAAa,SAAOC,EAAkEtlB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCD/kCpF,IAAU0F,EAAYmtB,EAAqBhT,EACtEiT,ECsmCE,OAtBA,GAAkB,cAAe,WAAYkG,GAGvCvY,EAAiB,IAAI+S,IAFN,YAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAE9DmN,EAAyB,IADzBD,EAA0B,IAKR,gBAAkB,mBAE1C,GAAgBH,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SACpGqgB,EAAuBvgB,MDrmCwByyB,ECqmCelS,EDrmCMd,ECqmCkBA,IDpmCxFiT,EAA6B,iBADQptB,ECqmCiBszB,KDnmCpBnZ,GAAiBA,EAAckT,WACjElT,EAAckT,WAAWF,EAAevyB,QAAQ,iBAChDwyB,GAEApqB,KAAKC,eAAoBlG,IAAViD,EAAsBA,EAAQ,IAC5CA,GAAS,ICgmCD,CAAP,EAAO,CACHvE,IAAK,GAAasf,GAClB/M,QAASiN,UAUC,SAAbsY,GAAsBpZ,GAC/B,IAAMyT,EAA4BwF,GAA0BjZ,GAC5D,MAAO,CAQGkZ,YAAN,SAAkBC,EAAkEtlB,G,sBAAgB1T,QAAO,W,wDAC7E,SAAMszB,EAA0ByF,YAAYC,EAAUtlB,I,OAChF,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WAzD7E,IA0GP,OAA8B,KAA9B,GAA8B,IASnB,aAAAkZ,YAAP,SAAmBC,EAAkEtlB,GAArF,WACI,OAAOulB,GAAWl0B,KAAK8a,eAAekZ,YAAYC,EAAUtlB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAExH,IAZA,c,iDAgF4B,SAAfoZ,GAAwBrZ,GACjC,IAAMyT,EA9DiC,SAAUzT,GAAV,WACvC,MAAO,CAWHsZ,uBAAwB,SAAO9X,EAA0BuW,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCrJ,OAnCA,GAAkB,yBAA0B,YAAaqhB,GAGnDZ,EAAiB,IAAI+S,IAFN,yBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3BQ,IACAR,EAAkC,UAAIQ,EAAUzX,KAAK,UAG5CnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWayY,CAA4BvZ,GAC9D,MAAO,CAWGsZ,uBAAN,SAA6B9X,EAA0BuW,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACrH,SAAMszB,EAA0B6F,uBAAuB9X,EAAWuW,EAAMrgB,EAAQsgB,EAAYnkB,I,OACtH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA5E7E,IAmIP,MAAgC,KAAhC,GAAgC,IAYrB,aAAAsZ,uBAAP,SAA8B9X,EAA0BuW,EAA8BrgB,EAAiBsgB,EAAsBnkB,GAA7H,WACI,OAAOwlB,GAAan0B,KAAK8a,eAAesZ,uBAAuB9X,EAAWuW,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEhK,IAfA,c,iDAmFsC,SAAzBuZ,GAAkCxZ,GAC3C,IAAMyT,EA9D2C,SAAUzT,GAAV,WACjD,MAAO,CAWHyZ,4BAA6B,SAAOC,EAAoC3B,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCpK,OAnCA,GAAkB,8BAA+B,sBAAuBu5B,GAGlE9Y,EAAiB,IAAI+S,IAFN,+BAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B0Y,IACA1Y,EAA4C,oBAAI0Y,EAAoB3vB,KAAK,UAGhEnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWa6Y,CAAsC3Z,GACxE,MAAO,CAWGyZ,4BAAN,SAAkCC,EAAoC3B,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACpI,SAAMszB,EAA0BgG,4BAA4BC,EAAqB3B,EAAMrgB,EAAQsgB,EAAYnkB,I,OACrI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA5E7E,IAmIP,MAA0C,KAA1C,GAA0C,IAY/B,aAAAyZ,4BAAP,SAAmCC,EAAoC3B,EAA8BrgB,EAAiBsgB,EAAsBnkB,GAA5I,WACI,OAAO2lB,GAAuBt0B,KAAK8a,eAAeyZ,4BAA4BC,EAAqB3B,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAEzL,IAfA,c,iDAmF+B,SAAlB2Z,GAA2B5Z,GACpC,IAAMyT,EA9DoC,SAAUzT,GAAV,WAC1C,MAAO,CAWH6Z,gBAAiB,SAAOC,EAA4B/B,EAAkBrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCpI,OAnCA,GAAkB,kBAAmB,cAAe25B,GAG9ClZ,EAAiB,IAAI+S,IAFN,kBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B8Y,IACA9Y,EAAoC,YAAI8Y,EAAY/vB,KAAK,UAGhDnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWaiZ,CAA+B/Z,GACjE,MAAO,CAWG6Z,gBAAN,SAAsBC,EAA4B/B,EAAkBrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACpG,SAAMszB,EAA0BoG,gBAAgBC,EAAa/B,EAAMrgB,EAAQsgB,EAAYnkB,I,OACjH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA5E7E,IAmIP,MAAmC,KAAnC,GAAmC,IAYxB,aAAA6Z,gBAAP,SAAuBC,EAA4B/B,EAAkBrgB,EAAiBsgB,EAAsBnkB,GAA5G,WACI,OAAO+lB,GAAgB10B,KAAK8a,eAAe6Z,gBAAgBC,EAAa/B,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAE9J,IAfA,c,iDA8M0B,SAAb+Z,GAAsBha,GAC/B,IAAMyT,EAzL+B,SAAUzT,GAAV,WACrC,MAAO,CAYHia,gBAAiB,SAAOC,EAA4BpC,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAyCzP,OAvCA,GAAkB,kBAAmB,cAAe+5B,GAG9CtZ,EAAiB,IAAI+S,IAFN,kBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3BkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,UAGxCnH,IAAjBk1B,IACA9W,EAAqC,aAAI8W,QAGhCl1B,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAejBqZ,6BAA8B,SAAOD,EAA4BE,EAA2Bp2B,EAAoB+zB,EAAkErgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCA6ChP,OA3CA,GAAkB,+BAAgC,cAAe+5B,GAG3DtZ,EAAiB,IAAI+S,IAFN,gCAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3BkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,UAGpCnH,IAArBw3B,IACApZ,EAAyC,iBAAIoZ,QAGhCx3B,IAAboB,IACAgd,EAAiC,SAAIhd,QAG5BpB,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAcjBuZ,+BAAgC,SAAOC,EAAoBC,EAA6BxC,EAAkErgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAwCxN,OAtCA,GAAkB,iCAAkC,aAAcm6B,GAElE,GAAkB,iCAAkC,eAAgBC,GAC9D5Z,EAAe,oCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KAEtD1Z,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3BuZ,IACAvZ,EAAqC,aAAIuZ,EAAaxwB,KAAK,UAGlDnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWa0Z,CAA0Bxa,GAC5D,MAAO,CAYGia,gBAAN,SAAsBC,EAA4BpC,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACzN,SAAMszB,EAA0BwG,gBAAgBC,EAAapC,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC/H,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UActEma,6BAAN,SAAmCD,EAA4BE,EAA2Bp2B,EAAoB+zB,EAAkErgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDAChN,SAAMszB,EAA0B0G,6BAA6BD,EAAaE,EAAkBp2B,EAAU+zB,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC1J,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAatEqa,+BAAN,SAAqCC,EAAoBC,EAA6BxC,EAAkErgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACxL,SAAMszB,EAA0B4G,+BAA+BC,EAAYC,EAAcxC,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC7I,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WAvO7E,IA0VP,OAA8B,KAA9B,GAA8B,IAanB,aAAAia,gBAAP,SAAuBC,EAA4BpC,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,GAAjO,WACI,OAAOmmB,GAAW90B,KAAK8a,eAAeia,gBAAgBC,EAAapC,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAgB5J,aAAAka,6BAAP,SAAoCD,EAA4BE,EAA2Bp2B,EAAoB+zB,EAAkErgB,EAAiBsgB,EAAsBnkB,GAAxN,WACI,OAAOmmB,GAAW90B,KAAK8a,eAAema,6BAA6BD,EAAaE,EAAkBp2B,EAAU+zB,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAevL,aAAAoa,+BAAP,SAAsCC,EAAoBC,EAA6BxC,EAAkErgB,EAAiBsgB,EAAsBnkB,GAAhM,WACI,OAAOmmB,GAAW90B,KAAK8a,eAAeqa,+BAA+BC,EAAYC,EAAcxC,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAErL,IAjDA,c,iDAqHgC,SAAnBwa,GAA4Bza,GACrC,IAAMyT,EA9DqC,SAAUzT,GAAV,WAC3C,MAAO,CAWH0a,iBAAkB,SAAOC,EAAyB5C,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqC9I,OAnCA,GAAkB,mBAAoB,WAAYw6B,GAG5C/Z,EAAiB,IAAI+S,IAFN,mBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3B2Z,IACA3Z,EAAiC,SAAI2Z,EAAS5wB,KAAK,UAG1CnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWa8Z,CAAgC5a,GAClE,MAAO,CAWG0a,iBAAN,SAAuBC,EAAyB5C,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDAC9G,SAAMszB,EAA0BiH,iBAAiBC,EAAU5C,EAAMrgB,EAAQsgB,EAAYnkB,I,OAC/G,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA5E7E,IAmIP,GAuHA,GAvHA,IAAoC,KAApC,GAAoC,IAYzB,aAAA0a,iBAAP,SAAwBC,EAAyB5C,EAA8BrgB,EAAiBsgB,EAAsBnkB,GAAtH,WACI,OAAO4mB,GAAiBv1B,KAAK8a,eAAe0a,iBAAiBC,EAAU5C,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAE7J,IAfA,c,iDA6D6B,SAAhB4a,GAAyB7a,GAClC,IAAMyT,EAxCkC,SAAUzT,GAAV,WACxC,MAAO,CAOH8a,cAAe,SAAOjnB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAmB7C,OAhBMygB,EAAiB,IAAI+S,IAFN,eAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC,GAAgBH,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWaia,CAA6B/a,GAC/D,MAAO,CAOG8a,cAAN,SAAoBjnB,G,sBAAgB1T,QAAO,W,wDACb,SAAMszB,EAA0BqH,cAAcjnB,I,OACxE,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA+CpF,c,iDA+E4B,SAAfgb,GAAwBhb,GACjC,IAAMyT,EA9DiC,SAAUzT,GAAV,WACvC,MAAO,CAWHib,kBAAmB,SAAOC,EAA8BnD,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAqCpJ,OAnCA,GAAkB,oBAAqB,gBAAiB+6B,GAGlDta,EAAiB,IAAI+S,IAFN,oBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3Bka,IACAla,EAAsC,cAAIka,EAAcnxB,KAAK,UAGpDnH,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWaqa,CAA4Bnb,GAC9D,MAAO,CAWGib,kBAAN,SAAwBC,EAA8BnD,EAA8BrgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDACpH,SAAMszB,EAA0BwH,kBAAkBC,EAAenD,EAAMrgB,EAAQsgB,EAAYnkB,I,OACrH,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WA9FnD,KAAjC,GAAiC,IAQtB,aAAA8a,cAAP,SAAqBjnB,GAArB,WACI,OAAOgnB,GAAc31B,KAAK8a,eAAe8a,cAAcjnB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAS5G,IAmIP,GAiKA,GAjKA,IAAgC,KAAhC,GAAgC,IAYrB,aAAAgb,kBAAP,SAAyBC,EAA8BnD,EAA8BrgB,EAAiBsgB,EAAsBnkB,GAA5H,WACI,OAAOmnB,GAAa91B,KAAK8a,eAAeib,kBAAkBC,EAAenD,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAE/J,IAfA,c,iDAwF2B,SAAdmb,GAAuBpb,GAChC,IAAMyT,EAnEgC,SAAUzT,GAAV,WACtC,MAAO,CAYHqb,qBAAsB,SAAOC,EAAyBxD,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAyC3P,OAvCA,GAAkB,uBAAwB,WAAYm7B,GAGhD1a,EAAiB,IAAI+S,IAFN,uBAEwB,IAEzC3T,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,GAE3Bsa,IACAta,EAAiC,SAAIsa,EAASvxB,KAAK,UAGlCnH,IAAjBk1B,IACA9W,EAAqC,aAAI8W,QAGhCl1B,IAATm1B,IACA/W,EAA6B,KAAI+W,QAGtBn1B,IAAX8U,IACAsJ,EAA+B,OAAItJ,QAGpB9U,IAAfo1B,IACAhX,EAAmC,WAAIgX,GAK3C,GAAgBpX,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWaya,CAA2Bvb,GAC7D,MAAO,CAYGqb,qBAAN,SAA2BC,EAAyBxD,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,G,sBAAgB1T,QAAO,W,wDAC3N,SAAMszB,EAA0B4H,qBAAqBC,EAAUxD,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,I,OACjI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,WAyDpF,c,iDAA+B,KAA/B,GAA+B,IAapB,aAAAqb,qBAAP,SAA4BC,EAAyBxD,EAAuEC,EAAgErgB,EAAiBsgB,EAAsBnkB,GAAnO,WACI,OAAOunB,GAAYl2B,KAAK8a,eAAeqb,qBAAqBC,EAAUxD,EAAcC,EAAMrgB,EAAQsgB,EAAYnkB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aChsFlK,IAAAub,GAAkB,EAAA1b,gBAAA,cAEpB2b,GAA4B,IAAI,GAChCC,GAAwB,IAAI,GAE7BC,UAAY,IACf,0BACA,iCACA,4CAGGC,SAAI,IACP,gBACA,mBAGGC,UAAiB,IACpB,mBACA,sBACA,sBACA,sBACA,uBAGGC,OAAQ,IACX,UAGF,I,GCgCA,GDoGA,GACEC,SArIe,SACf7B,EACApC,EACAC,EACArgB,EACAsgB,GAIA,OAAOyD,GAA0BxB,gBAC/BC,EACApC,EACAC,EACArgB,EACAsgB,EACA,CAAEv1B,iBAAiB,KAuHrBu5B,sBAnH4B,SAC5B9B,EACAnC,EACArgB,EACAsgB,GAIA,OAAOyD,GACJtB,6BAA6BD,EAAa,GAAG,EAAMnC,EAAMrgB,EAAQsgB,EAAY,CAC5Ev1B,iBAAiB,IAElBiB,KAAK,SAAC,G,IAAEnD,EAAI,OAAEsB,EAAM,SAAEO,EAAU,aAAE3B,EAAO,UAAEI,EAAO,UASjD,MAAO,CACLN,KAAM,CACJA,KAV4B,QAAV,EAAAA,aAAI,EAAJA,EAAMA,YAAI,eAAE0Q,IAAI,SAAAiE,G,IAC9B+mB,EAA2B,QAAf,EAAA/mB,EAAKgnB,kBAAU,eAAG,GACpC,MAAO,CACLC,SAAUjnB,EAAKolB,WACf8B,MAAOH,aAAS,EAATA,EAAWG,MAClBC,SAAUJ,aAAS,EAATA,EAAWI,aAOvBx6B,OAAM,EACNO,WAAU,EACV3B,QAAO,EACPI,QAAO,MAwFby7B,yBAjF+B,SAC/BpC,EACAnC,EACArgB,EACAsgB,EACAxX,GAIA,YAJA,IAAAA,MAAA,IAIOib,GAA0BtB,6BAC/BD,EACA1Z,GACA,EACAuX,EACArgB,EACAsgB,EACA,CAAEv1B,iBAAiB,KAkErB85B,iBA9DuB,SACvBzC,EACA/B,EACArgB,EACAsgB,GAIA,OAAO0D,GAAsB7B,gBAAgBC,EAAa/B,EAAMrgB,EAAQsgB,EAAY,CAClFv1B,iBAAiB,KAsDnB+5B,4BAlDkC,SAClClC,EACAC,EACAxC,EACArgB,EACAsgB,GAIA,OAAOyD,GAA0BpB,+BAC/BC,EACAC,EACAxC,EACArgB,EACAsgB,EACA,CACEv1B,iBAAiB,KAmCrBg6B,mBA9ByB,SACzBnB,EACAxD,EACAC,EACArgB,EACAsgB,GAIA,IAAMrZ,EAAY,CAChBrd,IAAQk6B,GAAa,uBACrB/4B,iBAAiB,EACjBi6B,WAAW,GAGb,OAAOC,EAAYlgB,IAAIkC,EAAW,CAChC2c,SAAQ,EACRxD,aAAY,EACZC,KAAI,EACJrgB,OAAM,EACNsgB,WAAU,KAWZ2D,aAAY,GACZC,KAAI,GACJC,kBAAiB,GACjBC,SAAQ,IE5KJc,GAAkC,IAAI,EA6C5C,IACEjH,YA5CkB,WAGlB,OAAOiH,GAAgC1K,kCAAkC,CAAEzvB,iBAAiB,KA0C5Fo6B,cAvCoB,SACpBxT,EACAwI,EACAC,EACAC,EACAC,GAEM8K,EAA6H,CACjIjL,cAAa,EACbC,YAAW,EACXC,WAAU,EACVC,sBAAqB,GAEvB,OAAO4K,GAAgC3K,uEACrC5I,EACAyT,EACA,CAAEr6B,iBAAiB,KAwBrBs6B,eApBqB,SACrB1T,EACAwI,EACAC,EACAC,EACAiL,GAEA,OAAOJ,GAAgChL,uEACrCvI,EACAwI,EACAC,EACAC,EACAiL,EACA,CAAEv6B,iBAAiB,EAAMP,aAAc,kB,scDxB9B,GAAY,EAAA4d,gBAAA,iBAAiC,OAAQ,IAMrD,GACJ,IAqBT,GAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,UAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,SEg0D5B,G,upBA7P6C,SAAhC,GAA0C8V,GACnD,MAAO,CAQHid,mCAAA,SAAmC3C,EAAoBzmB,GAEnD,QAFmD,IAAAA,MAAA,IAE/CymB,QACA,MAAM,IAAI,GAAc,aAAa,wGAEnC3Z,EAAe,yCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjBoc,8BAAA,SAA8B5C,EAAoBzmB,GAE9C,QAF8C,IAAAA,MAAA,IAE1CymB,QACA,MAAM,IAAI,GAAc,aAAa,mGAEnC3Z,EAAe,mCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjBqc,+BAAA,SAA+B7C,EAAoBz5B,EAA0DgT,GAEzG,QAFyG,IAAAA,MAAA,IAErGymB,QACA,MAAM,IAAI,GAAc,aAAa,oGAGzC,GAAIz5B,QACA,MAAM,IAAI,GAAc,UAAU,iGAEtC,IAAM8f,EAAe,mCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUK,SAAjB,GAA0Bd,GACnC,MAAO,CAQHid,mCAAA,SAAmC3C,EAAoBzmB,GACnD,IAAMiO,EAAoB,GAA8B9B,GAAeid,mCAAmC3C,EAAYzmB,GACtH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7Bmb,8BAAA,SAA8B5C,EAAoBzmB,GAC9C,IAAMiO,EAAoB,GAA8B9B,GAAekd,8BAA8B5C,EAAYzmB,GACjH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7Bob,+BAAA,SAA+B7C,EAAoBz5B,EAA0DgT,GACzG,IAAMiO,EAAoB,GAA8B9B,GAAemd,+BAA+B7C,EAAYz5B,EAASgT,GAC3H,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MA2FrC,c,iDAuG+B,SAAlB,GAA2B/B,GACpC,MAAO,CAWHod,+BAAA,SAA+B9C,EAAoB/Z,EAA4BC,EAA4BC,EAAiB5M,GACxH,IAvE4CmM,EAuEtC8B,GAvEsC9B,EAuEaA,EA3D7D,SAA+Bsa,EAAoB/Z,EAA4BC,EAA4BC,EAAiB5M,GAExH,QAFwH,IAAAA,MAAA,IAEpHymB,QACA,MAAM,IAAI,GAAc,aAAa,oGAEzC,IAAM3Z,EAAe,qCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,YAlBkBpe,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAInCG,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,GAuBa,CAA6EwZ,EAAY/Z,EAAWC,EAAOC,EAAQ5M,IAC7I,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,OAz3DzBsb,GAA+D,IACvE,sCACA,iCACA,yBACA,yBACA,uCACA,6BACA,iDACA,kDA4PQC,EAAoE,IAC5E,sBACA,8BACA,2BA+mBQC,GAA0E,IAClF,8CACA,uBACA,qCACA,mCACA,mDACA,2DACA,yEACA,qEACA,uCACA,6BACA,uCACA,yCACA,oDAuLQC,GAAwC,IAChD,oBACA,qBACA,qBACA,mBACA,2BACA,qBACA,6BACA,oBAoPQvY,EAAoF,IAC5F,UACA,eAMQC,GAA0F,IAClG,kBACA,uBAkc8B,MAAlC,GAAkC,IASvB,aAAA+X,mCAAP,SAA0C3C,EAAoBzmB,GAC1D,OAAO,GAAe3O,KAAK8a,eAAeid,mCAAmC3C,EAAYzmB,EAAlF,CAA2F3O,KAAKX,MAAOW,KAAK+a,WAWhH,aAAAid,8BAAP,SAAqC5C,EAAoBzmB,GACrD,OAAO,GAAe3O,KAAK8a,eAAekd,8BAA8B5C,EAAYzmB,EAA7E,CAAsF3O,KAAKX,MAAOW,KAAK+a,WAY3G,aAAAkd,+BAAP,SAAsC7C,EAAoBz5B,EAA0DgT,GAChH,OAAO,GAAe3O,KAAK8a,eAAemd,+BAA+B7C,EAAYz5B,EAASgT,EAAvF,CAAgG3O,KAAKX,MAAOW,KAAK+a,WAUzH,IAiIP,OAAmC,MAAnC,GAAmC,IAYxB,aAAAmd,+BAAP,SAAsC9C,EAAoB/Z,EAA4BC,EAA4BC,EAAiB5M,GAC/H,OAAO,GAAgB3O,KAAK8a,eAAeod,+BAA+B9C,EAAY/Z,EAAWC,EAAOC,EAAQ5M,EAAzG,CAAkH3O,KAAKX,MAAOW,KAAK+a,WAGlJ,IAhBA,c,iDAuByC,SAA5B,GAAsCD,GAC/C,MAAO,CAUHyd,wBAAA,SAAwBC,EAAoB7R,EAAiBD,EAAgB/X,GAEzE,QAFyE,IAAAA,MAAA,IAErE6pB,QACA,MAAM,IAAI,GAAc,aAAa,6FAEzC,IACM9c,EAAiB,KADF,4BACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,YAlBmBpe,IAAf86B,IACA1c,EAAmC,WAAI0c,QAG5B96B,IAAXipB,IACA7K,EAA+B,OAAI6K,QAGzBjpB,IAAVgpB,IACA5K,EAA8B,MAAI4K,GAIlChL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAYjB6c,yBAAA,SAAyBC,EAA4B/R,EAAiBD,EAAgB/X,GAElF,QAFkF,IAAAA,MAAA,IAE9E+pB,QACA,MAAM,IAAI,GAAc,cAAc,+FAE1C,IACMhd,EAAiB,KADF,6BACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,OAlBI4c,IACA5c,EAAoC,YAAI4c,QAG7Bh7B,IAAXipB,IACA7K,EAA+B,OAAI6K,QAGzBjpB,IAAVgpB,IACA5K,EAA8B,MAAI4K,GAIlChL,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB+c,2BAAA,SAA2B3D,EAA4BrmB,GAEnD,QAFmD,IAAAA,MAAA,IAE/CqmB,QACA,MAAM,IAAI,GAAc,cAAc,iGAE1C,IACMtZ,EAAiB,KADF,gCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,OAVIkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,KAIzD6W,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjBgd,WAAA,SAAW5D,EAA4BrmB,GAEnC,QAFmC,IAAAA,MAAA,IAE/BqmB,QACA,MAAM,IAAI,GAAc,cAAc,iFAE1C,IACMtZ,EAAiB,KADF,aACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,OAVIkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,KAIzD6W,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAwBjBid,eAAA,SAAeC,EAAyBC,EAA0BC,EAA0BC,EAA2BC,EAAgCC,EAAyBC,EAA+BhW,EAAuBiW,EAAyBC,EAAuBC,EAA2CC,EAAsCC,EAAiCC,EAAsBC,EAA4BhrB,QAAA,IAAAA,MAAA,IACtb,IACM+M,EAAiB,KADF,kBACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoE/B,YAlEuBpe,IAAnBo7B,IACAhd,EAAuB,mBAAqBgd,QAGxBp7B,IAApBq7B,IACAjd,EAAuB,oBAAsBid,QAGzBr7B,IAApBs7B,IACAld,EAAuB,oBAAsBkd,QAGxBt7B,IAArBu7B,IACAnd,EAAuB,qBAAuBmd,QAGpBv7B,IAA1Bw7B,IACApd,EAAuB,0BAA4Bod,QAGhCx7B,IAAnBy7B,IACArd,EAAuB,mBAAqBqd,QAGnBz7B,IAAzB07B,IACAtd,EAAuB,yBAA2Bsd,QAGjC17B,IAAjB0lB,IACAtH,EAAuB,iBAAmBsH,QAGvB1lB,IAAnB27B,IACAvd,EAAuB,mBAAqBud,QAG3B37B,IAAjB47B,IACAxd,EAAuB,iBAAmBwd,QAGN57B,IAApC67B,IACAzd,EAAuB,oCAAsCyd,QAG7B77B,IAAhC87B,IACA1d,EAAuB,gCAAkC0d,QAG9B97B,IAA3B+7B,IACA3d,EAAuB,2BAA6B2d,QAGpC/7B,IAAhBg8B,IACA5d,EAAuB,gBAAkB4d,QAGnBh8B,IAAtBi8B,IACA7d,EAAuB,sBAAwB6d,GAI/Cje,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnED,IAmEiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjBge,+BAAA,SAA+BxD,EAAyBznB,GAEpD,QAFoD,IAAAA,MAAA,IAEhDynB,QACA,MAAM,IAAI,GAAc,WAAW,kGAEvC,IACM1a,EAAiB,KADF,oCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,OAVIsa,IACAta,EAAiC,SAAIsa,GAIrC1a,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjBie,oCAAA,SAAoC7E,EAA4BrmB,GAE5D,QAF4D,IAAAA,MAAA,IAExDqmB,QACA,MAAM,IAAI,GAAc,cAAc,0GAE1C,IACMtZ,EAAiB,KADF,yCACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,OAVIkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,KAIzD6W,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAcjBke,mCAAA,SAAmCC,EAAiBC,EAAyC3e,EAAmBC,EAA4BC,EAAiB5M,GAEzJ,QAFyJ,IAAAA,MAAA,IAErJorB,QACA,MAAM,IAAI,GAAc,UAAU,qGAGtC,GAAIC,QACA,MAAM,IAAI,GAAc,aAAa,wGAEnCve,EAAe,2CAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOouB,KACpDz1B,QAAQ,eAAqBD,mBAAmBsH,OAAOquB,KACtDte,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,YAlBkBpe,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAInCG,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjBqe,iCAAA,SAAiCF,EAAiBp+B,EAAmDgT,GAEjG,QAFiG,IAAAA,MAAA,IAE7ForB,QACA,MAAM,IAAI,GAAc,UAAU,mGAGtC,GAAIp+B,QACA,MAAM,IAAI,GAAc,UAAU,mGAEtC,IAAM8f,EAAe,sCAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOouB,KACnDre,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAYjBse,gDAAA,SAAgDC,EAAuBC,EAA6Bd,EAAuB3qB,GAEvH,QAFuH,IAAAA,MAAA,IAEnHwrB,QACA,MAAM,IAAI,GAAc,gBAAgB,wHAE5C,IAAM1e,EAAe,sDAChBnX,QAAQ,kBAAwBD,mBAAmBsH,OAAOwuB,KACzDze,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAgB/B,YAd2Bpe,IAAvB08B,IACAte,EAAuB,uBAAyBse,QAG/B18B,IAAjB47B,IACAxd,EAAuB,iBAAmBwd,GAI1C5d,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAfD,IAeiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAYjBye,wCAAA,SAAwCjF,EAAoBgF,EAA6Bd,EAAuB3qB,GAE5G,QAF4G,IAAAA,MAAA,IAExGymB,QACA,MAAM,IAAI,GAAc,aAAa,6GAEzC,IAAM3Z,EAAe,8CAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAgB/B,YAd2Bpe,IAAvB08B,IACAte,EAAuB,uBAAyBse,QAG/B18B,IAAjB47B,IACAxd,EAAuB,iBAAmBwd,GAI1C5d,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAfD,IAeiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB0e,gBAAA,SAAgBC,EAAoL5rB,QAAA,IAAAA,MAAA,IAChM,IACM+M,EAAiB,KADF,mBACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,YAV8Bpe,IAA1B68B,IACAze,EAAuB,0BAA4Bye,GAInD7e,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB4e,yBAAA,SAAyBpF,EAAoBzmB,GAEzC,QAFyC,IAAAA,MAAA,IAErCymB,QACA,MAAM,IAAI,GAAc,aAAa,8FAEnC3Z,EAAe,8BAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB6e,0BAAA,SAA0BrF,EAAoBzmB,GAE1C,QAF0C,IAAAA,MAAA,IAEtCymB,QACA,MAAM,IAAI,GAAc,aAAa,+FAEnC3Z,EAAe,+BAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUC,SAAb,GAAsBd,GAC/B,MAAO,CAUHyd,wBAAA,SAAwBC,EAAoB7R,EAAiBD,EAAgB/X,GACzE,IAAMiO,EAAoB,GAA0B9B,GAAeyd,wBAAwBC,EAAY7R,EAAQD,EAAO/X,GACtH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAY7B4b,yBAAA,SAAyBC,EAA4B/R,EAAiBD,EAAgB/X,GAClF,IAAMiO,EAAoB,GAA0B9B,GAAe2d,yBAAyBC,EAAa/R,EAAQD,EAAO/X,GACxH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B8b,2BAAA,SAA2B3D,EAA4BrmB,GACnD,IAAMiO,EAAoB,GAA0B9B,GAAe6d,2BAA2B3D,EAAarmB,GAC3G,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B+b,WAAA,SAAW5D,EAA4BrmB,GACnC,IAAMiO,EAAoB,GAA0B9B,GAAe8d,WAAW5D,EAAarmB,GAC3F,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAwB7Bgc,eAAA,SAAeC,EAAyBC,EAA0BC,EAA0BC,EAA2BC,EAAgCC,EAAyBC,EAA+BhW,EAAuBiW,EAAyBC,EAAuBC,EAA2CC,EAAsCC,EAAiCC,EAAsBC,EAA4BhrB,GACtb,IAAMiO,EAAoB,GAA0B9B,GAAe+d,eAAeC,EAAgBC,EAAiBC,EAAiBC,EAAkBC,EAAuBC,EAAgBC,EAAsBhW,EAAciW,EAAgBC,EAAcC,EAAiCC,EAA6BC,EAAwBC,EAAaC,EAAmBhrB,GACrX,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B+c,+BAAA,SAA+BxD,EAAyBznB,GACpD,IAAMiO,EAAoB,GAA0B9B,GAAe8e,+BAA+BxD,EAAUznB,GAC5G,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7Bgd,oCAAA,SAAoC7E,EAA4BrmB,GAC5D,IAAMiO,EAAoB,GAA0B9B,GAAe+e,oCAAoC7E,EAAarmB,GACpH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAc7Bid,mCAAA,SAAmCC,EAAiBC,EAAyC3e,EAAmBC,EAA4BC,EAAiB5M,GACzJ,IAAMiO,EAAoB,GAA0B9B,GAAegf,mCAAmCC,EAASC,EAAY3e,EAAWC,EAAOC,EAAQ5M,GACrJ,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7Bod,iCAAA,SAAiCF,EAAiBp+B,EAAmDgT,GACjG,IAAMiO,EAAoB,GAA0B9B,GAAemf,iCAAiCF,EAASp+B,EAASgT,GACtH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAY7Bqd,gDAAA,SAAgDC,EAAuBC,EAA6Bd,EAAuB3qB,GACvH,IAAMiO,EAAoB,GAA0B9B,GAAeof,gDAAgDC,EAAeC,EAAoBd,EAAc3qB,GACpK,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAY7Bwd,wCAAA,SAAwCjF,EAAoBgF,EAA6Bd,EAAuB3qB,GAC5G,IAAMiO,EAAoB,GAA0B9B,GAAeuf,wCAAwCjF,EAAYgF,EAAoBd,EAAc3qB,GACzJ,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7Byd,gBAAA,SAAgBC,EAAoL5rB,GAChM,IAAMiO,EAAoB,GAA0B9B,GAAewf,gBAAgBC,EAAuB5rB,GAC1G,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B2d,yBAAA,SAAyBpF,EAAoBzmB,GACzC,IAAMiO,EAAoB,GAA0B9B,GAAe0f,yBAAyBpF,EAAYzmB,GACxG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B4d,0BAAA,SAA0BrF,EAAoBzmB,GAC1C,IAAMiO,EAAoB,GAA0B9B,GAAe2f,0BAA0BrF,EAAYzmB,GACzG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MA/1B9B,IA0sCP,GAoTA,GA6bA,GA4YA,GA7nCA,GAA8B,MAA9B,GAA8B,IAWnB,aAAA0b,wBAAP,SAA+BC,EAAoB7R,EAAiBD,EAAgB/X,GAChF,OAAO,GAAW3O,KAAK8a,eAAeyd,wBAAwBC,EAAY7R,EAAQD,EAAO/X,EAAlF,CAA2F3O,KAAKX,MAAOW,KAAK+a,WAahH,aAAA0d,yBAAP,SAAgCC,EAA4B/R,EAAiBD,EAAgB/X,GACzF,OAAO,GAAW3O,KAAK8a,eAAe2d,yBAAyBC,EAAa/R,EAAQD,EAAO/X,EAApF,CAA6F3O,KAAKX,MAAOW,KAAK+a,WAWlH,aAAA4d,2BAAP,SAAkC3D,EAA4BrmB,GAC1D,OAAO,GAAW3O,KAAK8a,eAAe6d,2BAA2B3D,EAAarmB,EAAvE,CAAgF3O,KAAKX,MAAOW,KAAK+a,WAWrG,aAAA6d,WAAP,SAAkB5D,EAA4BrmB,GAC1C,OAAO,GAAW3O,KAAK8a,eAAe8d,WAAW5D,EAAarmB,EAAvD,CAAgE3O,KAAKX,MAAOW,KAAK+a,WAyBrF,aAAA8d,eAAP,SAAsBC,EAAyBC,EAA0BC,EAA0BC,EAA2BC,EAAgCC,EAAyBC,EAA+BhW,EAAuBiW,EAAyBC,EAAuBC,EAA2CC,EAAsCC,EAAiCC,EAAsBC,EAA4BhrB,GAC7b,OAAO,GAAW3O,KAAK8a,eAAe+d,eAAeC,EAAgBC,EAAiBC,EAAiBC,EAAkBC,EAAuBC,EAAgBC,EAAsBhW,EAAciW,EAAgBC,EAAcC,EAAiCC,EAA6BC,EAAwBC,EAAaC,EAAmBhrB,EAAjV,CAA0V3O,KAAKX,MAAOW,KAAK+a,WAW/W,aAAA6e,+BAAP,SAAsCxD,EAAyBznB,GAC3D,OAAO,GAAW3O,KAAK8a,eAAe8e,+BAA+BxD,EAAUznB,EAAxE,CAAiF3O,KAAKX,MAAOW,KAAK+a,WAWtG,aAAA8e,oCAAP,SAA2C7E,EAA4BrmB,GACnE,OAAO,GAAW3O,KAAK8a,eAAe+e,oCAAoC7E,EAAarmB,EAAhF,CAAyF3O,KAAKX,MAAOW,KAAK+a,WAe9G,aAAA+e,mCAAP,SAA0CC,EAAiBC,EAAyC3e,EAAmBC,EAA4BC,EAAiB5M,GAChK,OAAO,GAAW3O,KAAK8a,eAAegf,mCAAmCC,EAASC,EAAY3e,EAAWC,EAAOC,EAAQ5M,EAAjH,CAA0H3O,KAAKX,MAAOW,KAAK+a,WAY/I,aAAAkf,iCAAP,SAAwCF,EAAiBp+B,EAAmDgT,GACxG,OAAO,GAAW3O,KAAK8a,eAAemf,iCAAiCF,EAASp+B,EAASgT,EAAlF,CAA2F3O,KAAKX,MAAOW,KAAK+a,WAahH,aAAAmf,gDAAP,SAAuDC,EAAuBC,EAA6Bd,EAAuB3qB,GAC9H,OAAO,GAAW3O,KAAK8a,eAAeof,gDAAgDC,EAAeC,EAAoBd,EAAc3qB,EAAhI,CAAyI3O,KAAKX,MAAOW,KAAK+a,WAa9J,aAAAsf,wCAAP,SAA+CjF,EAAoBgF,EAA6Bd,EAAuB3qB,GACnH,OAAO,GAAW3O,KAAK8a,eAAeuf,wCAAwCjF,EAAYgF,EAAoBd,EAAc3qB,EAArH,CAA8H3O,KAAKX,MAAOW,KAAK+a,WAWnJ,aAAAuf,gBAAP,SAAuBC,EAAoL5rB,GACvM,OAAO,GAAW3O,KAAK8a,eAAewf,gBAAgBC,EAAuB5rB,EAAtE,CAA+E3O,KAAKX,MAAOW,KAAK+a,WAWpG,aAAAyf,yBAAP,SAAgCpF,EAAoBzmB,GAChD,OAAO,GAAW3O,KAAK8a,eAAe0f,yBAAyBpF,EAAYzmB,EAApE,CAA6E3O,KAAKX,MAAOW,KAAK+a,WAWlG,aAAA0f,0BAAP,SAAiCrF,EAAoBzmB,GACjD,OAAO,GAAW3O,KAAK8a,eAAe2f,0BAA0BrF,EAAYzmB,EAArE,CAA8E3O,KAAKX,MAAOW,KAAK+a,WAG9G,IApMA,c,iDAsPgC,SAAnB2f,GAA4B5f,GACrC,MAAO,CAQH6f,oCAAA,SAAoCvF,EAAoBzmB,GACpD,IArD6CmM,EAqDvC8B,GArDuC9B,EAqDaA,EA5C9D,SAAoCsa,EAAoBzmB,GAEpD,QAFoD,IAAAA,MAAA,IAEhDymB,QACA,MAAM,IAAI,GAAc,aAAa,yGAEnC3Z,EAAe,2CAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,GAoBagf,CAAmFxF,EAAYzmB,IACzH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAiDrC,c,iDAoB8C,SAAjCge,GAA2C/f,GACpD,MAAO,CASHggB,gCAAA,SAAgC1F,EAAoB2F,EAAoDpsB,GAEpG,QAFoG,IAAAA,MAAA,IAEhGymB,QACA,MAAM,IAAI,GAAc,aAAa,qGAGzC,GAAI2F,QACA,MAAM,IAAI,GAAc,cAAc,sGAE1C,IAAMtf,EAAe,qCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAA0BlG,IAAhBq9B,EAA4BA,EAAc,IAEtG,CACH3+B,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjBof,kBAAA,SAAkBr5B,EAAYgN,GAE1B,QAF0B,IAAAA,MAAA,IAEtBhN,QACA,MAAM,IAAI,GAAc,KAAK,+EAE3B8Z,EAAe,uBAChBnX,QAAQ,OAAaD,mBAAmBsH,OAAOhK,KAC9C+Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjBqf,oBAAA,SAAoBt5B,EAAYhG,EAA+CgT,GAE3E,QAF2E,IAAAA,MAAA,IAEvEhN,QACA,MAAM,IAAI,GAAc,KAAK,iFAGjC,GAAIhG,QACA,MAAM,IAAI,GAAc,UAAU,sFAEtC,IAAM8f,EAAe,uBAChBnX,QAAQ,OAAaD,mBAAmBsH,OAAOhK,KAC9C+Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjBsf,+BAAA,SAA+Bv5B,EAAYhG,EAA0DgT,GAEjG,QAFiG,IAAAA,MAAA,IAE7FhN,QACA,MAAM,IAAI,GAAc,KAAK,4FAGjC,GAAIhG,QACA,MAAM,IAAI,GAAc,UAAU,iGAEtC,IAAM8f,EAAe,mCAChBnX,QAAQ,OAAaD,mBAAmBsH,OAAOhK,KAC9C+Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjBuf,gCAAA,SAAgCx5B,EAAYhG,EAA2DgT,GAEnG,QAFmG,IAAAA,MAAA,IAE/FhN,QACA,MAAM,IAAI,GAAc,KAAK,6FAGjC,GAAIhG,QACA,MAAM,IAAI,GAAc,UAAU,kGAEtC,IAAM8f,EAAe,oCAChBnX,QAAQ,OAAaD,mBAAmBsH,OAAOhK,KAC9C+Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUM,SAAlBwf,GAA2BtgB,GACpC,MAAO,CASHggB,gCAAA,SAAgC1F,EAAoB2F,EAAoDpsB,GACpG,IAAMiO,EAAoBie,GAA+B/f,GAAeggB,gCAAgC1F,EAAY2F,EAAapsB,GACjI,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7Bme,kBAAA,SAAkBr5B,EAAYgN,GAC1B,IAAMiO,EAAoBie,GAA+B/f,GAAekgB,kBAAkBr5B,EAAIgN,GAC9F,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7Boe,oBAAA,SAAoBt5B,EAAYhG,EAA+CgT,GAC3E,IAAMiO,EAAoBie,GAA+B/f,GAAemgB,oBAAoBt5B,EAAIhG,EAASgT,GACzG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7Bqe,+BAAA,SAA+Bv5B,EAAYhG,EAA0DgT,GACjG,IAAMiO,EAAoBie,GAA+B/f,GAAeogB,+BAA+Bv5B,EAAIhG,EAASgT,GACpH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7Bse,gCAAA,SAAgCx5B,EAAYhG,EAA2DgT,GACnG,IAAMiO,EAAoBie,GAA+B/f,GAAeqgB,gCAAgCx5B,EAAIhG,EAASgT,GACrH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAyIrC,c,iDAwEyC,SAA5Bwe,GAAsCvgB,GAC/C,MAAO,CASHwgB,gCAAA,SAAgClG,EAAoB2F,EAAgEpsB,GAEhH,QAFgH,IAAAA,MAAA,IAE5GymB,QACA,MAAM,IAAI,GAAc,aAAa,qGAGzC,GAAI2F,QACA,MAAM,IAAI,GAAc,cAAc,sGAE1C,IAAMtf,EAAe,oCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAA0BlG,IAAhBq9B,EAA4BA,EAAc,IAEtG,CACH3+B,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB2f,0BAAA,SAA0BnG,EAAoBzmB,GAE1C,QAF0C,IAAAA,MAAA,IAEtCymB,QACA,MAAM,IAAI,GAAc,aAAa,+FAEnC3Z,EAAe,+BAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB4f,8BAAA,SAA8BpG,EAAoBzmB,GAE9C,QAF8C,IAAAA,MAAA,IAE1CymB,QACA,MAAM,IAAI,GAAc,aAAa,mGAEnC3Z,EAAe,oCAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KACtD1Z,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAUjB6f,gBAAA,SAAgBzG,EAA4BrmB,GAExC,QAFwC,IAAAA,MAAA,IAEpCqmB,QACA,MAAM,IAAI,GAAc,cAAc,sFAE1C,IACMtZ,EAAiB,KADF,mBACsC,GAEvDZ,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAY/B,OAVIkZ,IACAlZ,EAAoC,YAAIkZ,EAAYnwB,KAAK,KAIzD6W,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAXD,IAWiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUC,SAAb8f,GAAsB5gB,GAC/B,MAAO,CASHwgB,gCAAA,SAAgClG,EAAoB2F,EAAgEpsB,GAChH,IAAMiO,EAAoBye,GAA0BvgB,GAAewgB,gCAAgClG,EAAY2F,EAAapsB,GAC5H,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B0e,0BAAA,SAA0BnG,EAAoBzmB,GAC1C,IAAMiO,EAAoBye,GAA0BvgB,GAAeygB,0BAA0BnG,EAAYzmB,GACzG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B2e,8BAAA,SAA8BpG,EAAoBzmB,GAC9C,IAAMiO,EAAoBye,GAA0BvgB,GAAe0gB,8BAA8BpG,EAAYzmB,GAC7G,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7B4e,gBAAA,SAAgBzG,EAA4BrmB,GACxC,IAAMiO,EAAoBye,GAA0BvgB,GAAe2gB,gBAAgBzG,EAAarmB,GAChG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MA+GrC,c,iDAz0BoC,MAApC,GAAoC,IASzB,aAAA8d,oCAAP,SAA2CvF,EAAoBzmB,GAC3D,OAAO+rB,GAAiB16B,KAAK8a,eAAe6f,oCAAoCvF,EAAYzmB,EAArF+rB,CAA8F16B,KAAKX,MAAOW,KAAK+a,WAmb3F,MAAnC,GAAmC,IAUxB,aAAA+f,gCAAP,SAAuC1F,EAAoB2F,EAAoDpsB,GAC3G,OAAOysB,GAAgBp7B,KAAK8a,eAAeggB,gCAAgC1F,EAAY2F,EAAapsB,EAA7FysB,CAAsGp7B,KAAKX,MAAOW,KAAK+a,WAW3H,aAAAigB,kBAAP,SAAyBr5B,EAAYgN,GACjC,OAAOysB,GAAgBp7B,KAAK8a,eAAekgB,kBAAkBr5B,EAAIgN,EAA1DysB,CAAmEp7B,KAAKX,MAAOW,KAAK+a,WAYxF,aAAAkgB,oBAAP,SAA2Bt5B,EAAYhG,EAA+CgT,GAClF,OAAOysB,GAAgBp7B,KAAK8a,eAAemgB,oBAAoBt5B,EAAIhG,EAASgT,EAArEysB,CAA8Ep7B,KAAKX,MAAOW,KAAK+a,WAYnG,aAAAmgB,+BAAP,SAAsCv5B,EAAYhG,EAA0DgT,GACxG,OAAOysB,GAAgBp7B,KAAK8a,eAAeogB,+BAA+Bv5B,EAAIhG,EAASgT,EAAhFysB,CAAyFp7B,KAAKX,MAAOW,KAAK+a,WAY9G,aAAAogB,gCAAP,SAAuCx5B,EAAYhG,EAA2DgT,GAC1G,OAAOysB,GAAgBp7B,KAAK8a,eAAeqgB,gCAAgCx5B,EAAIhG,EAASgT,EAAjFysB,CAA0Fp7B,KAAKX,MAAOW,KAAK+a,WA8U5F,MAA9B,GAA8B,IAUnB,aAAAugB,gCAAP,SAAuClG,EAAoB2F,EAAgEpsB,GACvH,OAAO+sB,GAAW17B,KAAK8a,eAAewgB,gCAAgClG,EAAY2F,EAAapsB,EAAxF+sB,CAAiG17B,KAAKX,MAAOW,KAAK+a,WAWtH,aAAAwgB,0BAAP,SAAiCnG,EAAoBzmB,GACjD,OAAO+sB,GAAW17B,KAAK8a,eAAeygB,0BAA0BnG,EAAYzmB,EAArE+sB,CAA8E17B,KAAKX,MAAOW,KAAK+a,WAWnG,aAAAygB,8BAAP,SAAqCpG,EAAoBzmB,GACrD,OAAO+sB,GAAW17B,KAAK8a,eAAe0gB,8BAA8BpG,EAAYzmB,EAAzE+sB,CAAkF17B,KAAKX,MAAOW,KAAK+a,WAWvG,aAAA0gB,gBAAP,SAAuBzG,EAA4BrmB,GAC/C,OAAO+sB,GAAW17B,KAAK8a,eAAe2gB,gBAAgBzG,EAAarmB,EAA5D+sB,CAAqE17B,KAAKX,MAAOW,KAAK+a,W,OC13IrG,G,scA7Ca,GAAY,EAAAH,gBAAA,iBAAiC,OAAQ,IA4BlE,GAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,UAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,ECtCK,SAApB,GAA8BsoB,EAAsBC,EAAmBC,GAChF,GAAIA,QACA,MAAM,IAAI,GAAcD,EAAW,sBAAsBA,EAAS,uCAAuCD,EAAY,KAyD9F,SAAlB,GAA4BlxB,G,IAAU,wDAE/C,IADA,IAAMsxB,EAAe,IAAIhlB,gBAAgBtM,EAAIqK,QACxB,MAAAknB,EAAA,eAAS,CAAzB,IACU7vB,EADJyS,EAAM,KACb,IAAWzS,KAAOyS,EACdmd,EAAaE,IAAI9vB,EAAKyS,EAAOzS,IAGrC1B,EAAIqK,OAASinB,EAAaztB,WAqBF,SAAf,GAAyB7D,GAClC,OAAOA,EAAIyK,SAAWzK,EAAIqK,OAASrK,EAAIsK,KAON,SAAxB,GAAkCynB,EAAwBC,EAA4BzT,EAAmBG,GAClH,OAAO,SAACzb,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,GAClC8B,EAAmB,SAAIsR,EAAUxf,SAAO,CAAEvS,MAAM0e,aAAa,EAAbA,EAAeC,WAAYA,GAAYoT,EAAU/xB,MACvG,OAAOiD,EAAM1D,QAAQkhB,I,wNAzGhB,GAAiB,sB,49DCwoBJ,SAAb,GAAsB/B,GAC/B,IAAMyT,EApQ+B,SAAUzT,GAAV,WACrC,MAAO,CAQH6gB,0BAA2B,SAAOvG,EAAoBzmB,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,uCAsB7E,OApBA,GAAkB,4BAA6B,aAAcm6B,GACvD3Z,EAAe,+BAChBnX,QAAQ,eAAqBD,mBAAmBsH,OAAOypB,KAEtD1Z,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAKhC,GAAgBH,EAJe,GAIyB/M,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAcjBggB,wBAAyB,SAAOC,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAsC9L,OApCA,GAAkB,0BAA2B,UAAW4gC,GAClDpgB,EAAe,6BAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOkwB,KAEnDngB,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEVpe,IAAjBo+B,IACAhgB,EAAqC,aAAIggB,QAG3Bp+B,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAKvC,GAAgBG,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAcjBmgB,0BAA2B,SAAOF,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAsChM,OApCA,GAAkB,4BAA6B,UAAW4gC,GACpDpgB,EAAe,+BAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOkwB,KAEnDngB,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEVpe,IAAjBo+B,IACAhgB,EAAqC,aAAIggB,QAG3Bp+B,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAKvC,GAAgBG,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAcjBogB,8BAA+B,SAAOxf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAsC7L,OApCA,GAAkB,gCAAiC,SAAUuhB,GACvDf,EAAe,oCAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KAElDd,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEVpe,IAAjBo+B,IACAhgB,EAAqC,aAAIggB,QAG3Bp+B,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAKvC,GAAgBG,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,SAcjBqgB,sBAAuB,SAAOzf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,G,YAAA,IAAAA,MAAA,I,YAAoB1T,QAAO,W,yCAsCrL,OApCA,GAAkB,wBAAyB,SAAUuhB,GAC/Cf,EAAe,2BAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KAElDd,EAAiB,IAAI+S,IAAIhT,EAAc,IAEzCX,IACAa,EAAcb,EAAca,aAG1BC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAC7DkN,EAA0B,GAC1BC,EAAyB,QAEVpe,IAAjBo+B,IACAhgB,EAAqC,aAAIggB,QAG3Bp+B,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAKvC,GAAgBG,EAAgBI,EAAwBnN,EAAQW,OAC5DyM,EAAyBJ,GAAeA,EAAYpgB,QAAUogB,EAAYpgB,QAAU,GACxFqgB,EAAuBrgB,QAAU,YAAIsgB,GAA4BE,GAA2BpN,EAAQpT,SAE7F,CAAP,EAAO,CACHa,IAAK,GAAasf,GAClB/M,QAASiN,UAWa,CAA0Bd,GAC5D,MAAO,CAQG6gB,0BAAN,SAAgCvG,EAAoBzmB,G,sBAAgB1T,QAAO,W,wDAC7C,SAAMszB,EAA0BoN,0BAA0BvG,EAAYzmB,I,OAChG,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAatE8gB,wBAAN,SAA8BC,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,G,sBAAgB1T,QAAO,W,wDAC9J,SAAMszB,EAA0BqN,wBAAwBC,EAASC,EAAczgB,EAAWC,EAAOC,EAAQ5M,I,OACnI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAatEihB,0BAAN,SAAgCF,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,G,sBAAgB1T,QAAO,W,wDAChK,SAAMszB,EAA0BwN,0BAA0BF,EAASC,EAAczgB,EAAWC,EAAOC,EAAQ5M,I,OACrI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAatEkhB,8BAAN,SAAoCxf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,G,sBAAgB1T,QAAO,W,wDAC7J,SAAMszB,EAA0ByN,8BAA8Bxf,EAAQsf,EAAczgB,EAAWC,EAAOC,EAAQ5M,I,OACxI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,UAatEmhB,sBAAN,SAA4Bzf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,G,sBAAgB1T,QAAO,W,wDACrJ,SAAMszB,EAA0B0N,sBAAsBzf,EAAQsf,EAAczgB,EAAWC,EAAOC,EAAQ5M,I,OAChI,OADMiO,EAAoB,SACnB,CAAP,EAAO,GAAsBA,EAAmB,IAAa,GAAW9B,YAlrBxE+E,GAAoF,IAC5F,UACA,gBAMQC,GAA0F,IAClG,kBACA,wBAiCQC,GAAoF,IAC5F,UACA,gBAMQC,GAA0F,IAClG,kBACA,wBAmIQkc,GAAgF,IACxF,cACA,mBACA,iBACA,eACA,aACA,eACA,eACA,aACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,eACA,eACA,eACA,iBACA,6BACA,yBACA,eACA,eACA,iBACA,uBACA,qBACA,qBACA,uBACA,qBACA,+BACA,uBACA,aACA,eACA,mBACA,2BACA,uBACA,iCACA,iCACA,iCACA,yCACA,mCACA,iCACA,mCACA,mCACA,mCACA,iCACA,iCACA,iCACA,+BACA,iCACA,iCACA,iCACA,yDACA,+DACA,mCACA,iBACA,8BAiCQC,GAAgF,IACxF,YACA,iBAoFG,IA4eP,OAA8B,MAA9B,GAA8B,IASnB,aAAAR,0BAAP,SAAiCvG,EAAoBzmB,GAArD,WACI,OAAO,GAAW3O,KAAK8a,eAAe6gB,0BAA0BvG,EAAYzmB,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAe7H,aAAA6gB,wBAAP,SAA+BC,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,GAAtK,WACI,OAAO,GAAW3O,KAAK8a,eAAe8gB,wBAAwBC,EAASC,EAAczgB,EAAWC,EAAOC,EAAQ5M,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAehK,aAAAghB,0BAAP,SAAiCF,EAAiBC,EAA6CzgB,EAA4BC,EAA4BC,EAAiB5M,GAAxK,WACI,OAAO,GAAW3O,KAAK8a,eAAeihB,0BAA0BF,EAASC,EAAczgB,EAAWC,EAAOC,EAAQ5M,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAelK,aAAAihB,8BAAP,SAAqCxf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,GAArK,WACI,OAAO,GAAW3O,KAAK8a,eAAekhB,8BAA8Bxf,EAAQsf,EAAczgB,EAAWC,EAAOC,EAAQ5M,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAerK,aAAAkhB,sBAAP,SAA6Bzf,EAAgBsf,EAA6CzgB,EAA4BC,EAAsBC,EAAiB5M,GAA7J,WACI,OAAO,GAAW3O,KAAK8a,eAAemhB,sBAAsBzf,EAAQsf,EAAczgB,EAAWC,EAAOC,EAAQ5M,GAASnQ,KAAK,SAAC7C,GAAY,OAAAA,EAAQ,EAAK0D,MAAO,EAAK0b,aAExK,IA5EA,c,iDCp4BA,I,GC6DA,GD7DMqhB,GAAmB,IAAI,EACvBC,GAAqB,IAAI,GACzB,GAAwB,IAAI,GA+FlC,IACEC,iBA9FuB,SACvBlH,GAEA,OAAOiH,GAAmBV,0BAA0BvG,EAAY,CAAE73B,iBAAiB,KA4FnFg/B,qBAzF2B,SAC3BvH,GAEA,OAAOoH,GAAiBvC,oCAAoC7E,EAAa,CACvEz3B,iBAAiB,KAsFnBi/B,gBAlFsB,SACtBpG,GAEA,OAAOgG,GAAiBxC,+BAA+BxD,EAAU,CAAE74B,iBAAiB,KAgFpFk/B,eA7EqB,SACrBzH,GAEA,OAAOoH,GAAiBzD,2BAA2B3D,EAAa,CAAEz3B,iBAAiB,KA2EnFm/B,eAxEqB,SACrB1H,GAEA,OAAOoH,GAAiBxD,WAAW5D,EAAa,CAAEz3B,iBAAiB,KAsEnEo/B,cAnEoB,SACpBvH,EACA/Z,EACAC,EACAC,GAEA,OAAO,GAAsB2c,+BAA+B9C,EAAY/Z,EAAWC,EAAOC,IA8D1FqhB,cA3DoB,SACpBrC,GAUA,OAAO6B,GAAiB9B,gBAAgBC,IAiDxCsC,aA9CmB,SACnB/D,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAhW,EACAiW,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAhrB,GAEA,OAAOytB,GAAiBvD,eACtBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAhW,EACAiW,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAhrB,K,qcC7ES,GAAY,EAAAiM,gBAAA,qBAAqC,OAAQ,IA4BtE,GAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,SAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,gqBCmec,SAA7B,GAAuC8V,GAChD,MAAO,CAWHgiB,yBAAA,SAAyB1hB,EAAiBC,EAA4BC,EAA4BC,EAAiB5M,GAE/G,QAF+G,IAAAA,MAAA,IAE3GyM,QACA,MAAM,IAAI,GAAc,UAAU,2FAEtC,IAAMK,EAAe,8BAChBnX,QAAQ,YAAkBD,mBAAmBsH,OAAOyP,KACnDM,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,YAlBkBpe,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAInCG,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAcjBmhB,gCAAA,SAAgC7a,EAAqB/F,EAAmBgG,EAAyB6a,EAAqBC,EAAsBtuB,GAExI,QAFwI,IAAAA,MAAA,IAEpIuT,QACA,MAAM,IAAI,GAAc,cAAc,sGAE1C,IAAMzG,EAAe,oCAChBnX,QAAQ,gBAAsBD,mBAAmBsH,OAAOuW,KACvDxG,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAwB/B,YAtBiBpe,IAAbye,IACAL,EAAiC,SAAIK,QAGlBze,IAAnBykB,IACArG,EAAuC,eAAIqG,QAG5BzkB,IAAfs/B,IACAlhB,EAAmC,WAAIkhB,QAGvBt/B,IAAhBu/B,IACAnhB,EAAoC,YAAImhB,GAIxCvhB,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAvBD,IAuBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUE,SAAd,GAAuBd,GAChC,MAAO,CAWHgiB,yBAAA,SAAyB1hB,EAAiBC,EAA4BC,EAA4BC,EAAiB5M,GAC/G,IAAMiO,EAAoB,GAA2B9B,GAAegiB,yBAAyB1hB,EAASC,EAAWC,EAAOC,EAAQ5M,GAChI,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAc7BkgB,gCAAA,SAAgC7a,EAAqB/F,EAAmBgG,EAAyB6a,EAAqBC,EAAsBtuB,GACxI,IAAMiO,EAAoB,GAA2B9B,GAAeiiB,gCAAgC7a,EAAa/F,EAAUgG,EAAgB6a,EAAYC,EAAatuB,GACpK,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,OAxezBqgB,EAAwC,IAChD,UACA,eAMQC,EAA8C,IACtD,kBACA,uBAwNQC,EAA0C,IAClD,YACA,iBAqGQC,EAAuC,IAC/C,YACA,UACA,YACA,YACA,gCAQG,IAqOP,GAiLA,GAjLA,GAA+B,MAA/B,GAA+B,IAYpB,aAAAP,yBAAP,SAAgC1hB,EAAiBC,EAA4BC,EAA4BC,EAAiB5M,GACtH,OAAO,GAAY3O,KAAK8a,eAAegiB,yBAAyB1hB,EAASC,EAAWC,EAAOC,EAAQ5M,EAA5F,CAAqG3O,KAAKX,MAAOW,KAAK+a,WAe1H,aAAAgiB,gCAAP,SAAuC7a,EAAqB/F,EAAmBgG,EAAyB6a,EAAqBC,EAAsBtuB,GAC/I,OAAO,GAAY3O,KAAK8a,eAAeiiB,gCAAgC7a,EAAa/F,EAAUgG,EAAgB6a,EAAYC,EAAatuB,EAAhI,CAAyI3O,KAAKX,MAAOW,KAAK+a,WAGzK,IAhCA,c,iDAuG8B,SAAjBuiB,GAA0BxiB,GACnC,MAAO,CAYHyiB,qCAAA,SAAqC/gB,EAAgB0F,EAAqB7G,EAA4BC,EAA4BC,EAAiB5M,GAC/I,IA9E2CmM,EA8ErC8B,GA9EqC9B,EA8EaA,EAjE5D,SAAqC0B,EAAgB0F,EAAqB7G,EAA4BC,EAA4BC,EAAiB5M,GAE/I,QAF+I,IAAAA,MAAA,IAE3I6N,QACA,MAAM,IAAI,GAAc,SAAS,sGAGrC,GAAI0F,QACA,MAAM,IAAI,GAAc,cAAc,2GAEpCzG,EAAe,6CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAO6Q,KACnDlY,QAAQ,gBAAsBD,mBAAmBsH,OAAOuW,KACvDxG,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAoB/B,YAlBkBpe,IAAd2d,IACAS,EAAkC,UAAIT,QAG5B3d,IAAV4d,IACAQ,EAA8B,MAAIR,QAGvB5d,IAAX6d,IACAO,EAA+B,OAAIP,GAInCG,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAnBD,IAmBiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,GAwBa4hB,CAAkFhhB,EAAQ0F,EAAa7G,EAAWC,EAAOC,EAAQ5M,IAC3J,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAyDrC,c,iDAAkC,MAAlC,GAAkC,IAavB,aAAA0gB,qCAAP,SAA4C/gB,EAAgB0F,EAAqB7G,EAA4BC,EAA4BC,EAAiB5M,GACtJ,OAAO2uB,GAAet9B,KAAK8a,eAAeyiB,qCAAqC/gB,EAAQ0F,EAAa7G,EAAWC,EAAOC,EAAQ5M,EAAvH2uB,CAAgIt9B,KAAKX,MAAOW,KAAK+a,WCn8BhK,I,GC0DA,GD1DM0iB,GAAoB,IAAI,EAM9B,IACIC,mBALuB,SAACxb,EAAqB/F,EAAmBgG,GAChE,OAAOsb,GAAkBV,gCAAgC7a,EAAa/F,EAAUgG,KEFpF,IACEwb,WAAY,SAAUnhB,GACpB,MAAO,QAAUA,GAGnBohB,QAAS,WACP,OAAIC,eACKA,6BAEFC,cAGTC,UAAW,WACT,OAAI/9B,KAAK49B,UACAE,aAAax8B,OAEf,GAGT08B,OAAQ,SAAU95B,GAChB,OAAIlE,KAAK49B,UACAE,aAAahgC,IAAIoG,GAEnB,IAGT+5B,gBAAiB,SAAUngC,EAAK6C,GAC1BX,KAAK49B,WACPE,aAAaI,QAAQpgC,EAAK6F,KAAKC,UAAUjD,KAI7Cw9B,gBAAiB,SAAUrgC,GACzB,GAAIkC,KAAK49B,UACP,OAAOj6B,KAAKE,MAAMi6B,aAAaM,QAAQtgC,KAI3CugC,mBAAoB,SAAUC,GACxBt+B,KAAK49B,gBAAwC,IAApBU,IACvBp3B,OAAO/I,iBAET+I,OAAO/I,iBAAiB,UAAWmgC,GAAiB,GAGpDp3B,OAAOq3B,YAAY,YAAaD,KAKtCE,mBAAoB,SAAU1gC,GACxBkC,KAAK49B,WACPE,aAAaW,WAAW3gC,IAI5B4gC,oBAAqB,SAAU5gC,EAAKzC,GAClC,IAAIsjC,GAAc,IAAIp5B,MAAOq5B,UACzBC,EAAe7+B,KAAKm+B,gBAAgBrgC,IAEtC+gC,EADGA,GACY,IAEL,KAAWxjC,EACvBwjC,EAAY,UAAgBF,EAC5B3+B,KAAKi+B,gBAAgBngC,EAAK+gC,IAG5BC,0BAA2B,SAAUhhC,EAAKihC,GACxC,IAAIC,GAAmB,IAAIz5B,MAAOq5B,UAC9BK,EAAaj/B,KAAKm+B,gBAAgBrgC,GACtC,GAAImhC,GAAcA,EAAU,UAAe,CAGzC,GAAID,EAFkBC,EAAU,WAChCF,EAAeA,GAAgB,KAE7B,OAAOE,EAGPj/B,KAAKw+B,mBAAmB1gC,GAG5B,OAAO,O,scDpEE,GAAY,EAAA8c,gBAAA,kBAAkC,OAAQ,IA4BnE,EAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,UAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,EE2OsB,SAArCk6B,GAA+CpkB,GACxD,MAAO,CAOHqkB,oBAAA,SAAoBxwB,QAAA,IAAAA,MAAA,IAChB,IACM+M,EAAiBtf,EAAA,GADF,uBAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IASjBwjB,qCAAA,SAAqCzwB,QAAA,IAAAA,MAAA,IACjC,IACM+M,EAAiBtf,EAAA,GADF,2CAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IAUjByjB,uCAAA,SAAuCC,EAA0C3wB,GAE7E,QAF6E,IAAAA,MAAA,IAEzE2wB,QACA,MAAM,IAAI,GAAc,cAAc,6GAE1C,IACM5jB,EAAiBtf,EAAA,GADF,2CAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAA0BlG,IAAhB4hC,EAA4BA,EAAc,IAEtG,CACHljC,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,KAUU,SAAtB2jB,GAA+BzkB,GACxC,MAAO,CAOHqkB,oBAAA,SAAoBxwB,GAChB,IAAMiO,EAAoBsiB,GAAmCpkB,GAAeqkB,oBAAoBxwB,GAChG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAS7BuiB,qCAAA,SAAqCzwB,GACjC,IAAMiO,EAAoBsiB,GAAmCpkB,GAAeskB,qCAAqCzwB,GACjH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7BwiB,uCAAA,SAAuCC,EAA0C3wB,GAC7E,IAAMiO,EAAoBsiB,GAAmCpkB,GAAeukB,uCAAuCC,EAAa3wB,GAChI,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,M,OAqFrC,GAqMA,GAsXA,G,upBA3jBA,c,iDA0C4C,SAA/B2iB,GAAyC1kB,GAClD,MAAO,CAOH2kB,eAAA,SAAe9wB,QAAA,IAAAA,MAAA,IACX,IACM+M,EAAiBtf,EAAA,GADF,iBAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IASjB8jB,mCAAA,SAAmC/wB,QAAA,IAAAA,MAAA,IAC/B,IACM+M,EAAiBtf,EAAA,GADF,wCAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,KAUI,SAAhB+jB,GAAyB7kB,GAClC,MAAO,CAOH2kB,eAAA,SAAe9wB,GACX,IAAMiO,EAAoB4iB,GAA6B1kB,GAAe2kB,eAAe9wB,GACrF,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAS7B6iB,mCAAA,SAAmC/wB,GAC/B,IAAMiO,EAAoB4iB,GAA6B1kB,GAAe4kB,mCAAmC/wB,GACzG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAiErC,c,iDA8B0C,SAA7B+iB,GAAuC9kB,GAChD,MAAO,CAOH+kB,aAAA,SAAalxB,QAAA,IAAAA,MAAA,IACT,IACM+M,EAAiBtf,EAAA,GADF,eAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IAUjBkkB,oCAAA,SAAoCR,EAA+C3wB,GAE/E,QAF+E,IAAAA,MAAA,IAE3E2wB,QACA,MAAM,IAAI,GAAc,cAAc,0GAE1C,IACM5jB,EAAiBtf,EAAA,GADF,yCAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,QAAWyf,GAAgBhN,GAC9DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAA0BlG,IAAhB4hC,EAA4BA,EAAc,IAEtG,CACHljC,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IASjBmkB,6BAAA,SAA6BpxB,QAAA,IAAAA,MAAA,IACzB,IACM+M,EAAiBtf,EAAA,GADF,iCAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IASjBokB,uBAAA,SAAuBrxB,QAAA,IAAAA,MAAA,IACnB,IACM+M,EAAiBtf,EAAA,GADF,2BAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,IASjBqkB,kDAAA,SAAkDtxB,QAAA,IAAAA,MAAA,IAC9C,IACM+M,EAAiBtf,EAAA,GADF,yDAC0B,GAE3C0e,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAKA,EAAA,GAAWsf,GAChB/M,QAASiN,KAUE,SAAdskB,GAAuBplB,GAChC,MAAO,CAOH+kB,aAAA,SAAalxB,GACT,IAAMiO,EAAoBgjB,GAA2B9kB,GAAe+kB,aAAalxB,GACjF,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAU7BijB,oCAAA,SAAoCR,EAA+C3wB,GAC/E,IAAMiO,EAAoBgjB,GAA2B9kB,GAAeglB,oCAAoCR,EAAa3wB,GACrH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAS7BkjB,6BAAA,SAA6BpxB,GACzB,IAAMiO,EAAoBgjB,GAA2B9kB,GAAeilB,6BAA6BpxB,GACjG,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAS7BmjB,uBAAA,SAAuBrxB,GACnB,IAAMiO,EAAoBgjB,GAA2B9kB,GAAeklB,uBAAuBrxB,GAC3F,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAS7BojB,kDAAA,SAAkDtxB,GAC9C,IAAMiO,EAAoBgjB,GAA2B9kB,GAAemlB,kDAAkDtxB,GACtH,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAyHrC,c,iDA3jBuC,MAAvC,GAAuC,GAQ5B,aAAAsiB,oBAAP,SAA2BxwB,GACvB,OAAO4wB,GAAoBv/B,KAAK8a,eAAeqkB,oBAAoBxwB,EAA5D4wB,CAAqEv/B,KAAKX,MAAOW,KAAK+a,WAU1F,aAAAqkB,qCAAP,SAA4CzwB,GACxC,OAAO4wB,GAAoBv/B,KAAK8a,eAAeskB,qCAAqCzwB,EAA7E4wB,CAAsFv/B,KAAKX,MAAOW,KAAK+a,WAW3G,aAAAskB,uCAAP,SAA8CC,EAA0C3wB,GACpF,OAAO4wB,GAAoBv/B,KAAK8a,eAAeukB,uCAAuCC,EAAa3wB,EAA5F4wB,CAAqGv/B,KAAKX,MAAOW,KAAK+a,WAqKpG,MAAjC,GAAiC,GAQtB,aAAA0kB,eAAP,SAAsB9wB,GAClB,OAAOgxB,GAAc3/B,KAAK8a,eAAe2kB,eAAe9wB,EAAjDgxB,CAA0D3/B,KAAKX,MAAOW,KAAK+a,WAU/E,aAAA2kB,mCAAP,SAA0C/wB,GACtC,OAAOgxB,GAAc3/B,KAAK8a,eAAe4kB,mCAAmC/wB,EAArEgxB,CAA8E3/B,KAAKX,MAAOW,KAAK+a,WChuB9G,IAEWolB,GAFLC,GAAoB,IDkkCK,MAA/B,GAA+B,GAQpB,aAAAP,aAAP,SAAoBlxB,GAChB,OAAOuxB,GAAYlgC,KAAK8a,eAAe+kB,aAAalxB,EAA7CuxB,CAAsDlgC,KAAKX,MAAOW,KAAK+a,WAW3E,aAAA+kB,oCAAP,SAA2CR,EAA+C3wB,GACtF,OAAOuxB,GAAYlgC,KAAK8a,eAAeglB,oCAAoCR,EAAa3wB,EAAjFuxB,CAA0FlgC,KAAKX,MAAOW,KAAK+a,WAU/G,aAAAglB,6BAAP,SAAoCpxB,GAChC,OAAOuxB,GAAYlgC,KAAK8a,eAAeilB,6BAA6BpxB,EAA7DuxB,CAAsElgC,KAAKX,MAAOW,KAAK+a,WAU3F,aAAAilB,uBAAP,SAA8BrxB,GAC1B,OAAOuxB,GAAYlgC,KAAK8a,eAAeklB,uBAAuBrxB,EAAvDuxB,CAAgElgC,KAAKX,MAAOW,KAAK+a,WAUrF,aAAAklB,kDAAP,SAAyDtxB,GACrD,OAAOuxB,GAAYlgC,KAAK8a,eAAemlB,kDAAkDtxB,EAAlFuxB,CAA2FlgC,KAAKX,MAAOW,KAAK+a,WAG3H,ICrnCmB,SAAbslB,KACF,OAAOD,GAAkBP,aAAa,CAAEtiC,iBAAiB,KALlD4iC,OAAsB,IAC7B,2CAGJ,ICNKG,GDuCL,GACID,WAAU,GACVE,cA/BkB,WAClB,OAAOH,GAAkBH,kDAAkD,CAAE1iC,iBAAiB,KA+B9FijC,cA5BkB,SAACC,GACbC,EAA2D,CAC7DC,oBAAqBF,GAEzB,OAAOL,GAAkBN,oCAAoCY,EAAS,CAAEnjC,iBAAiB,KAyBzFqjC,oBARwB,SAACC,GACzB,OAfmCC,EAeET,GAfuBU,EAeXZ,GAAuBE,WAfcQ,EAeFA,EAd7E,IAAI5lC,QAAQ,SAACC,EAASC,GACzB,IAAM6lC,EAAmBC,GAAoBnC,0BAA0BiC,EAAkBF,GACrFG,EAMA9lC,EAAQ8lC,EAAiB3lC,MALzBylC,IAAgBtiC,KAAK,SAAC/B,GAClBwkC,GAAoBvC,oBAAoBqC,EAAkBtkC,EAASpB,MACnEH,EAAQuB,EAASpB,OAClB,SAAC2G,GAAiB,OAAA7G,EAAO6G,OAPF,IAAC8+B,EAAyBC,EAA0BF,IEzBpF,GAAoB,IAAI,GACxBK,GAAqB,IAAI,EACzBC,GAAoB,IAAI,EACxBC,GAAyB,IAAI,GAC7BC,GAAoB,IAAI,EACxBC,GAA+B,IAAI,EACnCC,GAAoB,IAAI,GACxBC,GAAmB,IAAI,GAqH7B,IACEC,UApHgB,SAChB9O,EACAC,EACAC,EACArgB,EACAsgB,GAIA,OAAO,GAAkBJ,YAAYC,EAAUC,EAAcC,EAAMrgB,EAAQsgB,EAAY,CACrFv1B,iBAAiB,KA2GnBmkC,WAxGiB,SACjBnO,EACAV,EACArgB,EACAsgB,GAIA,OAAOqO,GAAkB3N,iBAAiBD,EAASV,EAAMrgB,EAAQsgB,EAAY,CAC3Ev1B,iBAAiB,KAgGnBokC,mBA5FyB,SACzBpO,EACAV,EACArgB,EACAsgB,GAIA,OAAOqO,GAAkB1N,yBAAyBF,EAASV,EAAMrgB,EAAQsgB,EAAY,CACnFv1B,iBAAiB,KAoFnBqkC,cAnEoB,SACpBnM,EACA5C,EACArgB,EACAsgB,GAIA,OAAOsO,GAAuB5L,iBAAiBC,EAAU5C,EAAMrgB,EAAQsgB,EAAY,CACjFv1B,iBAAiB,KA2DnBskC,cAvDoB,SACpBhO,EACAhB,EACArgB,EACAsgB,GAIA,OAAOuO,GAAkBzN,iBAAiBC,EAAUhB,EAAMrgB,EAAQsgB,EAAY,CAC5Ev1B,iBAAiB,KA+CnBukC,yBA3C+B,SAC/BtN,EACA3B,EACArgB,EACAsgB,GAIA,OAAOwO,GAA6B/M,4BAClCC,EACA3B,EACArgB,EACAsgB,EACA,CAAEv1B,iBAAiB,KA+BrBwkC,WAnFiB,SACjBzlB,EACAuW,EACArgB,EACAsgB,GAIA,OAAOoO,GAAmB9M,uBAAuB9X,EAAWuW,EAAMrgB,EAAQsgB,EAAY,CACpFv1B,iBAAiB,KA2EnBykC,eA5BqB,SACrBhM,EACAnD,EACArgB,EACAsgB,GAIA,OAAOyO,GAAkBxL,kBAAkBC,EAAenD,EAAMrgB,EAAQsgB,EAAY,CAClFv1B,iBAAiB,KAoBnB0kC,mBAhByB,SACzBhO,GAIA,OAAOuN,GAAiBxN,YAAYC,EAAU,CAAE12B,iBAAiB,MDvH7D2kC,GAAoC,IAAI,IACzC5B,SAAwB,IACzB,oBACA,kBAGJ,I,GEqDA,GFjDA,GACI6B,uBAL2B,SAACnN,EAAuB7O,GACnD,OAAO+b,GAAkC1Z,gEAAgEwM,EAAa7O,EAAcma,GAAyB8B,SAAU,CAAE7kC,iBAAiB,M,scEOjL,GAAY,EAAAqd,gBAAA,4BAA4C,OAAQ,IA4B7E,GAGI,SAAYE,EAAyCC,EAAwC1b,QAAxC,IAAA0b,MAAA,SAAwC,IAAA1b,MAAA,GAAxC,KAAA0b,WAAwC,KAAA1b,QACrFyb,IACA9a,KAAK8a,cAAgBA,EACrB9a,KAAK+a,SAAWD,EAAcC,UAAY/a,KAAK+a,WAW3D,OAAmC9Y,MAAA,UAKnC,IAHI,YAAmB+Y,EAAeC,GAAlC,EACI,aAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAhW,KAAwB,gB,SC2e5B,G,upBA1VyD,SAA5Cq9B,GAAsDvnB,GAC/D,MAAO,CAQHwnB,sDAAA,SAAsDne,EAAgBxV,GAElE,QAFkE,IAAAA,MAAA,IAE9DwV,QACA,MAAM,IAAI,GAAc,SAAS,uHAE/B1I,EAAe,gEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjB2mB,wCAAA,SAAwCpe,EAAgBxoB,EAAqDgT,GAEzG,QAFyG,IAAAA,MAAA,IAErGwV,QACA,MAAM,IAAI,GAAc,SAAS,yGAGrC,GAAIxoB,QACA,MAAM,IAAI,GAAc,UAAU,0GAEtC,IAAM8f,EAAe,6CAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KAClDzI,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,SAAYyf,GAAgBhN,GAC/DkN,EAA0B,GAI5BA,EAAwB,gBAAkB,mBAE9CH,EAAepM,MAAQ,YAAIoM,EAAepM,OALX,IAKgDX,EAAQW,cAEhFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAAIsgB,GAA4BlN,EAAQpT,SAIzE,OAFAqgB,EAAuBvgB,KAA6BsI,KAAKC,eAAsBlG,IAAZ/B,EAAwBA,EAAU,IAE9F,CACHS,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAWjB4mB,wDAAA,SAAwDre,EAAgBse,EAAoB9zB,GAExF,QAFwF,IAAAA,MAAA,IAEpFwV,QACA,MAAM,IAAI,GAAc,SAAS,yHAGrC,GAAIse,QACA,MAAM,IAAI,GAAc,OAAO,uHAE7BhnB,EAAe,oEAChBnX,QAAQ,WAAiBD,mBAAmBsH,OAAOwY,KACnD7f,QAAQ,SAAeD,mBAAmBsH,OAAO82B,KAChD/mB,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAUnE,OALI+M,EAAepM,MAAQ,YAAIoM,EAAepM,OAHf,IAGoDX,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAPD,IAOiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,IAYjB8mB,+CAAA,SAA+CD,EAAoBE,EAA4BC,EAAmBj0B,GAE9G,QAF8G,IAAAA,MAAA,IAE1G8zB,QACA,MAAM,IAAI,GAAc,OAAO,8GAEnC,IAAMhnB,EAAe,wDAChBnX,QAAQ,SAAeD,mBAAmBsH,OAAO82B,KAChD/mB,EAAiB,KAAsBD,GAAc,GAEvDX,IACAa,EAAcb,EAAca,aAEhC,IAAMC,EAAyB,OAAE1f,OAAQ,OAAUyf,GAAgBhN,GAE7DmN,EAAyB,GAgB/B,YAd0Bpe,IAAtBilC,IACA7mB,EAA0C,kBAAI6mB,QAGjCjlC,IAAbklC,IACA9mB,EAAiC,SAAI8mB,GAIrClnB,EAAepM,MAAQ,YAAIoM,EAAepM,OAAUwM,GAA2BnN,EAAQW,cAEpFoM,EAAejV,OACtBmV,EAAuBrgB,QAAU,SAfD,IAeiCoT,EAAQpT,SAElE,CACHa,IAAK,KAAuBsf,GAC5B/M,QAASiN,KAUiB,SAA7BinB,GAAsC/nB,GAC/C,MAAO,CAQHwnB,sDAAA,SAAsDne,EAAgBxV,GAClE,IAAMiO,EAAoBylB,GAA0CvnB,GAAewnB,sDAAsDne,EAAQxV,GACjJ,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7B0lB,wCAAA,SAAwCpe,EAAgBxoB,EAAqDgT,GACzG,IAAMiO,EAAoBylB,GAA0CvnB,GAAeynB,wCAAwCpe,EAAQxoB,EAASgT,GAC5I,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAW7B2lB,wDAAA,SAAwDre,EAAgBse,EAAoB9zB,GACxF,IAAMiO,EAAoBylB,GAA0CvnB,GAAe0nB,wDAAwDre,EAAQse,EAAM9zB,GACzJ,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,KAY7B6lB,+CAAA,SAA+CD,EAAoBE,EAA4BC,EAAmBj0B,GAC9G,IAAMiO,EAAoBylB,GAA0CvnB,GAAe4nB,+CAA+CD,EAAME,EAAmBC,EAAUj0B,GACrK,OAAO,SAACtP,EAAoC0b,QAApC,IAAA1b,MAAA,QAAoC,IAAA0b,MAAA,IAClC8B,EAAmB,SAAID,EAAkBjO,SAAO,CAAEvS,IAAK2e,EAAW6B,EAAkBxgB,MAC1F,OAAOiD,EAAM1D,QAAQkhB,MAqHrC,c,kDAhgBYimB,EAAyE,IACjF,YACA,gBACA,yBAoDQC,GAAyC,IACjD,YACA,iBACA,0BAgEQC,EAA0D,IAClE,YACA,gBACA,wBCpKJ,IAEKC,GAFCC,GAAmB,IDuiBqB,MAA9C,GAA8C,IASnC,aAAAZ,sDAAP,SAA6Dne,EAAgBxV,GACzE,OAAOk0B,GAA2B7iC,KAAK8a,eAAewnB,sDAAsDne,EAAQxV,EAA7Gk0B,CAAsH7iC,KAAKX,MAAOW,KAAK+a,WAY3I,aAAAwnB,wCAAP,SAA+Cpe,EAAgBxoB,EAAqDgT,GAChH,OAAOk0B,GAA2B7iC,KAAK8a,eAAeynB,wCAAwCpe,EAAQxoB,EAASgT,EAAxGk0B,CAAiH7iC,KAAKX,MAAOW,KAAK+a,WAYtI,aAAAynB,wDAAP,SAA+Dre,EAAgBse,EAAoB9zB,GAC/F,OAAOk0B,GAA2B7iC,KAAK8a,eAAe0nB,wDAAwDre,EAAQse,EAAM9zB,EAArHk0B,CAA8H7iC,KAAKX,MAAOW,KAAK+a,WAanJ,aAAA2nB,+CAAP,SAAsDD,EAAoBE,EAA4BC,EAAmBj0B,GACrH,OAAOk0B,GAA2B7iC,KAAK8a,eAAe4nB,+CAA+CD,EAAME,EAAmBC,EAAUj0B,EAAjIk0B,CAA0I7iC,KAAKX,MAAOW,KAAK+a,WAG1K,KC1lBKkoB,OAAiB,IAClB,wBAEJ,ICMYE,GDFZ,IACIC,0BAL8B,SAACR,EAAkBD,GACjD,OAAOO,GAAiBR,+CAA+CO,GAAkBI,WAAYV,EAAmBC,EAAU,CAAErlC,iBAAiB,MCA5I+lC,GAAyB,CACpCC,UAAU,EACVC,mBAZuC,KCDO,SAAnCC,GACXC,EACAC,GAEA,OAAO,SAACC,GACAC,EAAsBp4B,KAAKq4B,IAAI,EAAGF,EAAW,GAAKF,EACxD,OAAOj4B,KAAKs4B,IAAIJ,EAAiBE,ICOnC,YAAYN,EAAoBC,GALxB,KAAAQ,MAA6B,IAAIC,IAMvCjkC,KAAKujC,SAAWA,IAAY,EAC5BvjC,KAAKwjC,mBAAqBA,GFdW,IEerCxjC,KAAKkkC,eAAoBC,sCFAjBhB,SAAiB,IAC3B,gCACA,0CACA,0CEsEF,QAtEU,aAAAiB,YAAR,SAAoBtmC,GAClB,MAAO,GAAGkC,KAAKkkC,eAAiBpmC,GAG3B,aAAAumC,IAAP,SAAWvmC,EAAa,G,IAAEylC,EAAQ,WAAEC,EAAkB,qBAC9Cc,EAAWtkC,KAAKokC,YAAYtmC,GAClC,OAAKylC,GAAYvjC,KAAKujC,WAAazF,eACxBmD,GAAoBnC,0BAC3BwF,EACAd,GAAsBxjC,KAAKwjC,oBAGxBxjC,KAAKgkC,MAAMK,IAAIC,IAGjB,aAAA1W,IAAP,SAAW9vB,EAAazC,EAAc,GAAEkoC,EAAQ,WACxCe,EAAWtkC,KAAKokC,YAAYtmC,IAC7BylC,GAAYvjC,KAAKujC,WAAazF,cACjCmD,GAAoBvC,oBAAoB4F,EAAUjpC,GAEpD2E,KAAKgkC,MAAMpW,IAAI0W,EAAUjpC,IAIpB,aAAAkc,IAAP,SAAWzZ,EAAa,G,IAElBymC,EAFoBhB,EAAQ,WAAEC,EAAkB,qBAC9Cc,EAAWtkC,KAAKokC,YAAYtmC,GAElC,OAAKylC,GAAYvjC,KAAKujC,WAAazF,aAK1ByG,OAJPA,EAAQtD,GAAoBnC,0BAC1BwF,EACAd,GAAsBxjC,KAAKwjC,0BAEjB,EAALe,EAAOlpC,MAKZkpC,GACFvkC,KAAKgkC,MAAMpW,IAAI0W,EAAUC,aAAK,EAALA,EAAOlpC,MAE3B2E,KAAKgkC,MAAMzsB,IAAI+sB,KAGjB,aAAAtqB,OAAP,SAAclc,GACNwmC,EAAWtkC,KAAKokC,YAAYtmC,GAC9BggC,cACFmD,GAAoBzC,mBAAmB8F,GAEzCtkC,KAAKgkC,MAAMhqB,OAAOsqB,IAKb,aAAAE,MAAP,WAEE,GADAxkC,KAAKgkC,MAAMQ,QACP1G,aAAc,CAEhB,IADA,IAAM2G,EAAe,GACZvgC,EAAI,EAAGA,EAAI45B,aAAax8B,OAAQ4C,IAAK,CAC5C,IAAMwgC,EAAkB5G,aAAahgC,IAAIoG,GACrCwgC,EAAgB70B,SAAS7P,KAAKkkC,iBAChCO,EAAapjC,KAAKqjC,GAGtB,IAAK,IAAI13B,EAAI,EAAGA,EAAIy3B,EAAanjC,OAAQ0L,IACvC8wB,aAAaW,WAAWgG,EAAaz3B,MAI7C,I,iNCzCE,YACE23B,EACAC,EACAC,GAjCM,KAAAC,aAAoC,GAEpC,KAAAC,uBAAyB,EAEzB,KAAAC,eAAgB,EAEhB,KAAAC,OAAQ,EA8BZ,IAAAC,EAQEL,EAAU,gBAPZM,EAOEN,EAAU,qBANZO,EAMEP,EAAU,UALZQ,EAKER,EAAU,iBAJZS,EAIET,EAAU,kBAHZU,EAGEV,EAAU,mBAFZW,EAEEX,EAAU,UADZE,EACEF,EAAU,uBACNtB,EAAiC2B,EAAe,SAAtC1B,EAAuB0B,EAAe,mBACxDllC,KAAKklC,gBAAkBA,EACvBllC,KAAKylC,cAAgB,IAAI,GAAWlC,EAAUC,GAC9CxjC,KAAKmlC,qBAAuBA,EAC5BnlC,KAAKolC,UAAYA,EACjBplC,KAAKqlC,iBAAmBA,EACxBrlC,KAAKslC,kBAAoBA,EACzBtlC,KAAKulC,mBAAqBA,EAC1BvlC,KAAK2kC,eAAiBA,EACtB3kC,KAAK4kC,gBAAkBA,EACvB5kC,KAAKilC,MAAQO,IAAa,EAC1BxlC,KAAK0lC,YAAcngC,KAAKQ,MACxB/F,KAAK+kC,uBAAyBA,EAiKlC,QA9JE,aAAAY,kBAAA,SAAkBC,EAA4B5jC,GAA9C,WACM0hC,EAAkB,EAChBmC,GAAc,IAAItgC,MAAOq5B,UAC/BgH,EAAMhoC,QAAQ,SAACjC,GACb,IAOQmqC,EAPJ,EAAKL,cAAcpB,IAAI1oC,EAAQmC,IAAKnC,EAAQupC,kBACxCa,GAAsB,IAAIxgC,MAAOq5B,UACvCjjC,EAAQT,QAAQ,SACX,EAAKuqC,cAAcluB,IAAI5b,EAAQmC,IAAKnC,EAAQupC,kBAC5C,CAAEc,YAAa,CAAEC,SAAUF,EAAsBpqC,EAAQuqC,UAAUtH,eAE/D,EAAKyG,kBAAoBrjC,IAAUmhC,GAAkBgD,oBACxDL,EAAe,EAAKP,mBACtB,EAAKA,mBAAmB5pC,EAAQyqC,eHrFb,IGyFrB1C,EADoB,EAAlBA,EACgBj4B,KAAKs4B,IAAIL,EAAiBoC,GAE1BA,IAGdnqC,EAAQyqC,eAAiB,EAAKf,kBAClC1pC,EAAQ0qC,WAAaR,EAAcC,EAGnC,EAAKhB,aAAa5jC,QAAQvF,IAE1BA,EAAQR,OAAOgoC,GAAkBmD,sBAGnCC,QAAQtB,MAAMjjC,EAAOrG,GACrBA,EAAQR,OAAO6G,MAInBhC,KAAKwmC,eAAiBjhC,KAAKQ,MAEvB/F,KAAKilC,OACPsB,QAAQtB,MAASjlC,KAAK0lC,YAAW,wBAAyB,CACxDO,SAAUjmC,KAAKwmC,eAAiBxmC,KAAKymC,iBACrC3B,aAAc9kC,KAAK8kC,aACnBpB,gBAAe,EACfyB,qBAAsBnlC,KAAKmlC,uBAIT,EAAlBzB,GACFgD,WAAW,WAAM,SAAKC,gBAAgBjD,EAAkB1jC,KAAKmlC,sBAE/DnlC,KAAK+kC,wBAA0B,EAC/B/kC,KAAK2mC,gBAGP,aAAAA,aAAA,W,MAAA,OACE,GAAoC,IAAhC3mC,KAAK+kC,yBAAgC/kC,KAAKglC,cAA9C,CAIAhlC,KAAKymC,iBAAmBlhC,KAAKQ,MAE7B,IAAM6/B,EAA6B,GAC7BgB,EAAuC,IAAI3C,IAC3C4C,EAAuC,GAEvChB,GAAc,IAAItgC,MAAOq5B,UAI/B,IAFA5+B,KAAKglC,eAAgB,EAEdY,EAAMtkC,OAAStB,KAAKolC,WAAwC,EAA3BplC,KAAK8kC,aAAaxjC,QAAY,CACpE,IAMQykC,EANFpqC,EAAUqE,KAAK8kC,aAAavjC,QAC9B5F,EAAQ0qC,WAAaR,GACvBe,EAAUhZ,IAAIjyB,EAAQmC,IAAKnC,GAC3BkrC,EAAgBxlC,KAAK1F,IAEZqE,KAAKylC,cAAcpB,IAAI1oC,EAAQmC,IAAKnC,EAAQupC,kBAC/Ca,GAAsB,IAAIxgC,MAAOq5B,UACvCjjC,EAAQT,QAAQ,SACX8E,KAAKylC,cAAcluB,IAAI5b,EAAQmC,IAAKnC,EAAQupC,kBAC5C,CAAEc,YAAa,CAAEC,SAAUF,EAAsBpqC,EAAQuqC,UAAUtH,eAE/DgI,EAAUvC,IAAI1oC,EAAQmC,KAE/B+oC,EAAgBxlC,KAAK1F,IAErBirC,EAAUhZ,IAAIjyB,EAAQmC,IAAKnC,GAC3BiqC,EAAMvkC,KAAK1F,KAIf,EAAAqE,KAAK8kC,cAAazjC,KAAI,QAAIwlC,GAC1B7mC,KAAKglC,eAAgB,EAEjBY,EAAMtkC,QAAU,MAGpBtB,KAAK+kC,uBACL/kC,KAAK2mC,eAED3mC,KAAKilC,OACPsB,QAAQtB,MAASjlC,KAAK0lC,YAAW,wBAAyB,CACxDoB,mBAAoB9mC,KAAKwmC,eAAiBxmC,KAAKymC,iBAAmBzmC,KAAKwmC,eAAiB,EACxFN,UAAWlmC,KAAKymC,iBAChB3B,aAAc9kC,KAAK8kC,aACnBc,MAAOA,EAAM75B,IAAI,SAAA9N,GAAK,OAAAA,EAAEH,QAI5BkC,KAAK2kC,eAAeiB,GAAOpnC,KACzB,SAACnD,GACC0M,OAAO+B,QAAQzO,GAAMuC,QAAQ,SAAC,G,IAACE,EAAG,KAAE6C,EAAK,KACjChF,EAAUirC,EAAUrvB,IAAIzZ,GAC9B,EAAKipC,iBAAiBjpC,EAAK6C,EAAOhF,aAAO,EAAPA,EAASupC,mBAG7C,EAAKS,kBAAkBC,EAAOzC,GAAkB6D,iBAElD,SAAAhlC,GACE,EAAK2jC,kBAAkBC,EAAO5jC,QAKpC,aAAA+kC,iBAAA,SAAiBjpC,EAAazC,EAAW6pC,GAAzC,WACEllC,KAAKylC,cAAc7X,IAAI9vB,EAAKzC,EAAM6pC,GAAmBllC,KAAKklC,iBACtDllC,KAAKslC,mBACPoB,WAAW,WACT,EAAKjB,cAAczrB,OAAOlc,IACzBkC,KAAKslC,kBAAkBxnC,KAI9B,aAAAmpC,UAAA,SAAUj3B,EAASlS,EAAconC,GAAjC,WACE,OAAO,IAAIjqC,QAAQ,SAACC,EAASC,GAC3B,EAAK2pC,aAAazjC,KAAK,CACrBvD,IAAKA,GAAO,EAAK8mC,gBAAgB50B,GACjCuQ,OAAQvQ,EACR3U,KAAM2U,EACNo2B,cAAe,EACfC,WAAY,EACZH,UAAW,IAAI3gC,KACf2/B,gBAAiBA,GAAmB,EAAKA,gBACzChqC,QAAO,EACPC,OAAM,IAERurC,WAAW,WAAM,SAAKC,gBAAgB,EAAKxB,yBAI/C,aAAA+B,eAAA,SAAel3B,EAASlS,GAChBwmC,EAAWxmC,GAAOkC,KAAK4kC,gBAAgB50B,GAC7C,OAAOhQ,KAAKylC,cAAczrB,OAAOsqB,IAGnC,aAAA6C,WAAA,WACEnnC,KAAKylC,cAAcjB,SAEvB,IC7NA,cACkB,KAAAf,iCAAmCA,GAuBrD,IAxBA,IAGE,aAAA2D,uBAAA,SACEzC,EACA0C,EACAxC,GAcA,OAZKA,EAAWM,uBACdN,EAAWM,qBJrB0B,IIuBlCN,EAAWQ,mBACdR,EAAWQ,iBJlBsB,GIoB9BR,EAAWK,kBACdL,EAAWK,gBAAkB5B,IAE1BuB,EAAWE,yBACdF,EAAWE,uBJpB4B,GIsBlC,IAAI,GAAsBJ,EAAgB0C,EAAgBxC,IAErE,KAEA,ICOYyC,GAzCJC,GAAsC,EAAA3sB,gBAAA,WAA1B4sB,GAA0B,EAAA5sB,gBAAA,YAAb6sB,GAAa,EAAA7sB,gBAAA,SCkCX,SAAtB8sB,GAAuBC,EAAwBnrB,GAK1D,OAJIpgB,EDDDmrC,GAAU,aCCc/qB,EDDK,ICCGmrB,EAC/BA,IAAeL,GAAWM,WAC5BxrC,EDDyCmrC,GAAU,2BCG9C,CACLnrC,IAAG,EACHo7B,WAAW,EACXj6B,iBAAiB,GAkBe,SAAvBsqC,KACX,MAAO,CACLzrC,IDxBuCorC,GAAW,qBCyBlDhQ,WAAW,EACXj6B,iBAAiB,GCbI,SAAnBuqC,GAAoBH,GACxB,OAAO,SAAC,G,IAAC,OAAE7pC,EAAG,MAAQiqC,EAAe,OAC3BvrB,EAAoBurB,EAAe,OAA3BC,EAAYD,EAAe,QACrCtuB,EAAYiuB,GAAoBC,EAAYnrB,GAC5CngB,GDTyBkf,GAAF,ECSGwsB,GDTK,OAAE1sB,EAAS,YAAEC,EAAK,QACnDjf,EAAS,GACXkf,GACFxT,OAAOwH,OAAOlT,EAAQ,CAAEkf,OAAM,IAE5BF,GACFtT,OAAOwH,OAAOlT,EAAQ,CAAEgf,UAAS,IAE/BC,GACFvT,OAAOwH,OAAOlT,EAAQ,CAAEif,MAAK,IAExBjf,GCAL,OAAOo7B,EAAA,IACAhe,EAAWpd,GACfmC,KAAK,SAACypC,GACL,IAAMC,EAA2C,GACjD,GAAKD,YAAY5sC,KAEf,OADA6sC,EAAQpqC,GAAO,CAAEqqC,SAAU,IACpBD,EAIP,IDxDFE,ECwDE,EACEH,EAAU,KADEE,EAAQ,OAAsBE,EAAU,qBAAkBC,EAAU,iBAE9EF,GD1DNA,EAA2B,GC0DaD,EDzDtCvqC,QAAQ,SAAA2qC,GACdH,EAAYG,EAAO5mC,IAAM4mC,EACzBH,EAAYG,EAAO5mC,IAAI6mC,WAAa,UAAUD,EAAO5mC,GAAE,WACvDymC,EAAYG,EAAO5mC,IAAI8mC,SAAW,KAE7BL,GCsDD,GAAIJ,EAEF,OADAE,EAAQpqC,GAAO,CAAEqqC,SAAQ,EAAEE,WAAU,EAAEC,WAAU,GAC1CJ,EAGHQ,EAAoBb,KAEpBtU,EAAUxrB,OAAOgC,KAAKq+B,GAAar8B,IAAI,SAAApK,GAAM,OAAAgnC,SAAShnC,EAAI,MAChE,OAAO81B,EAAA,KACCiR,EAAmB,CAAEnV,QAAO,IACjC/0B,KAAK,SAACoqC,GD7DmB,IAACR,EAA0BQ,ECgEnD,ODhEyBR,EC8DJA,ED7DiB,GAAX,QAAjC,EAAkB,QAAlB,EAAAQ,OADyDA,EC8DjBA,QD7D5B,EAAZA,EAAcvtC,YAAI,eAAEwtC,qBAAa,eAAEvnC,UAE3BunC,EACND,EAAY,mBAEE,GAAH,GAAOC,GACZjrC,QAAQ,SAACkrC,GACjBV,EAAYU,EAAatsB,QAAQisB,SAAWK,KCuDtCZ,EAAQpqC,GAAO,CAAEqqC,SAAQ,EAAEE,WAAU,EAAEC,WAAU,GAC1CJ,IAERa,MAAM,SAAC/mC,GAIN,OAFAukC,QAAQtB,MAAMjjC,GACdkmC,EAAQpqC,GAAO,CAAEqqC,SAAQ,EAAEE,WAAU,EAAEC,WAAU,GAC1CJ,MAGZa,MAAM,SAAC/mC,GAGN,OADAukC,QAAQtB,MAAMjjC,GACP,MC9FU,SAAnBsR,GAAmB,UAAC01B,EAAD,iCAAgB9hC,OAAOC,SAASV,OAAW0K,SAAkB63B,GAI3D,SAArBC,GAAqB,UAACC,EAAD,iCAAe,GAAO/3B,aAAsB+3B,GAEhD,SAAjBC,GAAiBC,GACrB,OAAIC,YACKA,2BAAyBD,GAE3BA,GH6BG9B,UAAU,IACpB,kBACA,yBACA,2BACA,uBAGK,I,mFIbP,IA3B4B,IAAIgC,IAEsBlC,uBACpD,SAAAmC,GACE,IAAM9vB,EAAY,CAChBrd,IJ2B8BqrC,GAAQ,YI1BtCjQ,WAAW,EACXj6B,iBAAiB,GAEbg2B,EAAUgW,EAAMx9B,IAAI,SAAC,GAAyB,OAAT,gBAC3C,OAAO0rB,EAAA,KACChe,EAAW,CAAE8Z,QAAO,EAAEiW,oBAAoB,IAC/ChrC,KAAK,SAAC,G,IAAgBirC,EAAK,YACpBvB,EAAyC,GAI/C,OAHAuB,EAAM7rC,QAAQ,SAAC8rC,GACbxB,EAAQwB,EAAK/nC,IAAM+nC,IAEdxB,KAGb,SAAC,GAAE1rB,EAAM,SAAsB,OAAAA,aAAM,EAANA,EAAQvc,YACvC,CACEmlC,UJoBgC,IInBhCD,qBJqB2C,ME1BzC,GAAsB,IAAImE,GAE1BK,GAAkE,IAAI1F,IAyEtE2F,EAA8B,SAACjC,GACnC,IAAMkC,EAhE4B,SAClClC,EACAmC,EACAC,GAEA,GAAIJ,GAAWtF,IAAIsD,GAAa,OAAOgC,GAAWpyB,IAAIowB,GAChDqC,EAAY,GAAoB5C,uBAAuB0C,EAAeC,EAAc,CACxF3E,UAAW,IAGb,OADAuE,GAAW/b,IAAI+Z,EAAYqC,GACpBA,EAsDmBC,CACxBtC,EACAG,GAAiBH,GACjB,SAAC,GAAEnrB,EAAM,SAAwB,OAAAA,aAAM,EAANA,EAAQvc,aAG3C,OAAO,SAAC8nC,EAAkC7C,GACxC,IA1EF,EA0EQgF,EAA6BvC,EAzErB,KADhB,EA0EiDI,GA1EzC,OACkB,IADV,SACoB,IADT,YACsB,IADf,QA+EhC,OAHI7C,WAAiBiF,cACnBN,EAAkB3C,eAAea,EAAiBmC,GAE7CL,EAAkB5C,UAAUc,EAAiBmC,EAAYhF,KAYpE,GAAqD,QAAtC,GAA0B,QAA1B,GAAAh+B,OAAOkjC,2BAAmB,iBAAEC,kBAAU,iBAAEC,kBAAmB,CACxEC,WAAYX,EAA4BtC,GAAWkD,SACnDC,aAAcb,EAA4BtC,GAAWoD,WACrDC,cAAef,EAA4BtC,GAAWsD,YACtDC,mBAAoBjB,EAA4BtC,GAAWM,UAC3DkD,QAAS,SAACtuB,GAAmB,oBAAoC,CAAEA,OAAM,KACzEuuB,wBAd8B,WAC9BpB,GAAW/rC,QAAQ,SAACosC,GAClBA,EAAU7C,iBG1Gd,IACE6D,iBAAgB,GAChBC,8BAA6B,GAC7BC,kCAAiC,GACjCC,uBAAsB,GACtBC,4BAA2B,GAC3BC,wBAAuB,EACvBC,kCAAiC,GACjCC,eAAc,GACdC,mBAAkB,GAClBC,gBAAe,EACfC,oBAAmB,GACnBC,6BAA4B,EAC5BC,0BAAyB,GACzBC,cAAa,EAEbvB,gBAAiBuB,G,aFJnB,IACE1C,kBACA71B,oBACA21B,sBACA6C,cA1BoB,SAAAve,GAAS,OAAIja,KAAmBia,IA2BpDwe,UAAW3vC,KACX4vC,WAAY5vC,KACZ6vC,SAAU7vC,KACV8vC,uBAAwB/6B,YACxBg7B,mBAAoBh7B,WACpBi7B,0BArBgC,SAAAlD,GAChC,OAAOC,GAAe,gBAAD,OAAiBF,GAAmBC,MAqBzDmD,kBAlBwB,SAACnnC,EAAMgkC,GAC/B,OAAOC,GAAe,GAAD,OAAIjkC,EAAJ,YAAY+jC,GAAmBC,OGlBtD,eAwBA,I,GCzBA,GDyBA,IAlBE,aAAAC,eAAA,SAAexnC,GACb,GAAkB,iBAAPA,EACT,OAAO,KAGT,IAAM2qC,EAAU,EAAA1xB,gBAAA,WACV2xB,EAAeC,GAAWT,UAAU,CAAEllC,SAAU7G,KAAKysC,gBAAgB9qC,KAC3E,OAAO6qC,GAAWR,WAAWM,EAASC,IAGxC,aAAAG,WAAA,SAAW/qC,GACHvF,EAAM4D,KAAKmpC,eAAexnC,GAC5BvF,GACF8K,OAAOC,SAASoI,OAAOnT,IAG7B,ICvBA,c,iDAUA,I,GCXA,GDWA,I,kcAVsB,GAAtB,GAAsB,IACpB,aAAAqwC,gBAAA,SAAgB9qC,GACd,MAAO,UAAUA,GAGnB,aAAAgrC,gBAAA,WACE,MAAO,gBAEX,ICTA,c,iDAUA,I,GCVA,GDUA,K,kcAVuB,GAAvB,GAAuB,IACrB,aAAAF,gBAAA,SAAgB9qC,GACd,MAAO,WAAWA,GAGpB,aAAAgrC,gBAAA,WACE,MAAO,iBAEX,ICRA,c,itBCC2B,SAArBC,KAAqB,YAA6B,IAAhBC,cAOZ,SAAtBC,GAAuBC,EAAW9tC,EAAS+tC,EAAsBC,GACjEL,MAAwBC,oCACpBK,EAAsBnlC,OAAOolC,OAAOC,IAAav9B,SAASo9B,GAC5DA,EACAG,GAAYC,IAEhBR,kCAAgCE,EAAW9tC,EAAS+tC,EAAsBE,K,kcDdxD,GAAtB,GAAsB,IACpB,aAAAT,gBAAA,SAAgB9qC,GACd,MAAO,UAAUA,EAAE,YAGrB,aAAAgrC,gBAAA,WACE,MAAO,gBAIX,EAFA,GENA,IACEW,KAAM,IAAI,EACVC,MAAO,IAAI,GACX7D,KAAM,IAAI,GDJZ,IAEM0D,GAAc,GAAH,MELmB,CAClCI,QAAS,EACTH,IAAK,EACLI,OAAQ,EACRC,WAAY,IFGRd,KAAuBC,0BAA0B,IAsCvD,IACEc,WEvCyB,CACzBC,gBAAiB,kBACjBC,YAAa,cACbC,SAAU,YFqCVV,eACAW,UA5BgB,SAACC,EAAOC,GAAqB,IACrCjpC,EAAwCgpC,EAAxChpC,KAAM6G,EAAkCmiC,EAAlCniC,KAAM5M,EAA4B+uC,EAA5B/uC,QAASivC,EAAmBF,EAAnBE,eACvBC,EAAc,GAAH,CACfC,IAAKppC,GACFipC,GAGDhqC,MAAMQ,QAAQypC,IAChBA,EAAetwC,QAAQ,SAAAywC,GAChBtmC,OAAO5I,UAAUiJ,eAAeJ,KAAKmmC,EAAaE,IAErD9H,QAAQ+H,KAAR,sCAA4CD,EAA5C,wBAKNvB,GAAoBjhC,EAAM5M,EAASkvC,IAanCrB,uBACAyB,kBAXwB,SAACtvC,EAAS86B,EAASyU,GACvCC,kBAAkBA,qCACpBA,oCAAkCxvC,EAAS86B,EAASyU,KGtCpDE,I,EAKAC,UAAU,IALVD,KACAE,G,EAAAA,WACAC,G,EAAAA,QACAC,G,EAAAA,KACAC,G,EAAAA,aAGJ,SAASC,GAAYnnC,GACjB,YAAwB,IAAbA,EACA,aAEJA,ECXa,SAAlBonC,GAAkBC,GAAyB,IACvCnC,EAAcmC,EAAdnC,UACAoC,EAAQD,EAARC,IACFnC,EAAuBkC,EAAsBrK,WACnDuK,uBAAuCrC,EAAWoC,EAAKnC,GAGzB,SAA1BqC,GAA2BF,EAAKG,GACpCF,qBAAqCD,EAAKG,GDM5C,QACIC,sBAAuB,SAAUlzC,EAAQwL,GACjC6mC,IACAA,GAAKa,sBAAsBlzC,EAAQ2yC,GAAYnnC,KAIvD2nC,yBAA0B,SAAUnzC,EAAQwL,GACpC+mC,IACAA,GAAWY,yBAAyBnzC,EAAQ2yC,GAAYnnC,KAIhE4nC,kBAAmB,SAAUpzC,EAAQwL,GAC7B+mC,IACAA,GAAWa,kBAAkBpzC,EAAQ2yC,GAAYnnC,KAIzD6nC,gBAAiB,SAAUrzC,EAAQwL,GAC3B+mC,IACAA,GAAWc,gBAAgBrzC,EAAQ2yC,GAAYnnC,KAIvD8nC,MAAO,SAAU9nC,GACTgnC,IACAA,GAAQc,MAAMX,GAAYnnC,KAIlC+nC,WAAY,SAAUvzC,EAAQwL,GACtBinC,IACAA,GAAKc,WAAWvzC,EAAQ2yC,GAAYnnC,KAI5CgoC,aAAc,SAASpP,EAAY54B,GAC3BknC,IAAgBA,GAAae,uBAC7Bf,GAAae,sBAAsBrP,EAAYuO,GAAYnnC,MEvD/D2U,IAAWuzB,eAAe,IAA1BvzB,OACFwzB,GAAgB,CACpBC,QAAS,UACTC,UAAW,YACXjc,SAAU,WACVkc,WAAY,cAGd,IACEC,YAAa,SAASvkC,GACpB,uBAAiBmkC,GAAcnkC,GAA/B,sBAAkD2Q,IAAU,KDiDhE,GACE6zB,wBAnC8B,SAACf,EAAavV,EAASuW,EAAgBC,GACrE,MAAO,CACLjB,cACAvV,UACAuW,iBACAC,aA+BFX,WA3BiB,SAACY,EAAoBtB,GACtC,IACQuB,EACEnB,EAhBYvV,EARWuW,EAsB7BI,iBACID,EAAsBvB,EACpBI,EAAgBkB,EAAhBlB,YACAvV,EAAYyW,EAAZzW,QACAuW,EAAmBE,EAAnBF,eACAC,EAAaC,EAAbD,SACJxW,IAAYuV,GAAegB,GAC7BG,EAAoB5L,WAAWyL,eAAiBA,EAChDrB,GAAgBwB,GAChBpB,GAAwBoB,EAAoBE,uBAAwBrB,GA/BhDvV,EAgCHA,EAhCYuW,EAgCHA,EA/B9BI,gCAA8B3W,EAASuW,GAAgB,GAAM,IAgChDhB,GAAeiB,GACxBE,EAAoB5L,WAAW0L,SAAWA,EAC1CtB,GAAgBwB,GAChBpB,GAAwBoB,EAAoBE,uBAAwBrB,GAhCrDiB,EAiCFA,EAhCjBG,oCAAkCH,KAkC9BtB,GAAgBwB,GAChBpB,GAAwBoB,EAAoBE,uBAAwB5W,GAhClDA,EAiCFA,EAhCpB2W,mCAAiC3W,OErB/BwN,GACA3sB,6BADY4sB,GACZ5sB,8BADyBg2B,GACzBh2B,6BCIFi2B,GDDqB,SAAUr0B,GACzB,gBAAUo0B,GAAV,kBAA8Bp0B,EAA9B,aCKNs0B,GDEuB,WACjB,gBAAUtJ,GAAV,uBCAFuJ,GAAc,IAEdC,GAAU,CACdf,QDRqB,SAAUzzB,GACzB,gBAAU+qB,GAAV,qBAAiC/qB,EAAjC,aCQN0zB,UDDuB,SAAU1zB,GAC3B,gBAAU+qB,GAAV,qBAAiC/qB,EAAjC,eCCN2zB,WDEwB,SAAU3zB,GAC5B,gBAAU+qB,GAAV,qBAAiC/qB,EAAjC,gBCFNy0B,eDKqB,WACf,gBAAU1J,GAAV,6BCWD,SAAS2J,GAAiBd,EAAavkC,EAAMslC,GAClD,IAAM5J,EAAa,CACjBnrC,IAAK40C,GAAQnlC,GAAMkkC,sBACnBvY,WAAW,EACXj6B,iBAAiB,GAGbiqC,EAAc,CAClBprC,IAAK00C,KACLtZ,WAAW,EACXj6B,iBAAiB,GAGnB,OAAOk6B,EAAYA,IAAI8P,GAAY/oC,KAAK,SAAA8J,GACtC,IAAM2nC,EAAU3nC,EAAOjN,KAAKA,MAAQiN,EAC9BirB,EAAU,GAUhB,OATA6c,EAAYvkC,GAAQ,GAEpBokC,EAAQryC,QAAQ,SAAA2qC,GACd,IAAI/rB,EAAS+rB,EAAO5mC,GACpB4xB,EAAQlyB,KAAKmb,GACb+rB,EAAOC,WAAaqI,GAAkBr0B,GACtC4zB,EAAYvkC,GAAM2Q,GAAU+rB,IAGvB9Q,EAAYA,mBAAmBlE,EAASwd,GAAavJ,GAAa,GAAMhpC,KAAK,SAAAnD,GAClF,IACM+1C,EAzCoBvlC,EA2D1B,OAnBIxQ,GAAsB,EAAdA,EAAKiG,SACX8vC,EAAY,GAChB/1C,EAAKuC,QAAQ,YAAWirC,EAAsB,EAA9BxtC,KAAQwtC,cACtBuI,EAAYA,EAAUxpC,OAAOihC,KAG/BuI,EAAUxzC,QAAQ,SAAA6qC,GAChB2H,EAAYvkC,GAAM48B,EAASjsB,QAAQisB,SAAWA,KAI9C0I,IACFlQ,uBACEoQ,GAAkBA,YAAYxlC,GAC9BukC,EAAYvkC,IAtDUA,EAwDDA,EAvD7BnG,SAASvH,iBAAiB,gBAAiB,WACzC8iC,sBAAuCoQ,GAAkBA,YAAYxlC,OAyD5DukC,EAAYvkC,OAuBlB,SAASylC,GAAelB,EAAavkC,EAAM0lC,GAAe,IACvDxS,EAA0CwS,EAA1CxS,aAAyBoS,EAAiBI,EAA5BC,UACtB,GAAIL,EAAc,CAChB,IAAMM,GA/EiB5lC,EA+EaA,EA/EPkzB,EA+EaA,GA9EtCwF,EAAQtD,GAAoBA,0BAChCoQ,GAAkBA,YAAYxlC,GAC9BkzB,IAEawF,EAAMlpC,KAAO,MA2E1B,GAAIo2C,EACF,OAAO,IAAIx2C,QAAQ,SAASC,GAC1BA,EAAQu2C,KAKd,OAAOP,GAAiBd,EAAavkC,EAAMslC,G,wKC/EvCO,GAAkB,I,WAnCpB,c,8BAAc,G,yDAAA,OACV1xC,KAAK2xC,UAAY,IAAIC,IACrB5xC,KAAKowC,YAAc,G,2DAGXvoC,GACR7H,KAAK2xC,UAAU33B,OAAOnS,K,gCAGhBA,EAAUgE,EAAM0lC,GAAe,WAC/BM,EAAsC,mBAAbhqC,EACzBspC,EAAeI,GAAiBA,EAAcC,UACpDK,GAAmB7xC,KAAK2xC,UAAUG,IAAIjqC,GAElCspC,GAAgBnxC,KAAKowC,YAAYvkC,GACjCgmC,GAAmBhqC,EAAS7H,KAAKowC,YAAYvkC,IAE7CylC,GAAetxC,KAAKowC,YAAavkC,EAAM0lC,GAAe/yC,KAAK,SAAAnD,GDoEhE,IAAgCwQ,EAAM4lC,ECnE7BN,IDmEuBtlC,ECnEgBA,GDmEV4lC,ECnEgBp2C,IDqEzDqK,SAASvH,iBAAiB,yBAA0B,SAAS6vC,EAAOhqC,GAC9DA,GACF0iC,WAAW,WACT1iC,EAAKpG,QAAQ,SAAS6qC,GAAU,IACzBjsB,EAAUisB,EAAVjsB,OACDi1B,EAAUj1B,KACZi1B,EAAUj1B,GAAQisB,SAAWA,KAGjCxH,uBAAwCoQ,GAAkBA,YAAYxlC,GAAO4lC,QC7EvE,EAAKrB,YAAYvkC,GAAQxQ,EACzB,EAAKs2C,UAAU/zC,QAAQ,SAAAm0C,GACnBA,EAAK12C,S,uCAMJwQ,EAAM0lC,GACXC,EAAcD,EAAdC,UACR,OAAON,GAAiBlxC,KAAKowC,YAAavkC,EAAM2lC,Q,oCAQxCQ,KAAO,CACnBC,QAAS,UACTC,UAAW,YACXC,WAAY,aACZC,eAAgB,kBAGpB,SC7CQC,GAAe,EAAAz3B,gBAAA,WCSvB,EACe,WACX,IAAM03B,EAAc5sC,SAAS6sC,kBAAkB,eAAe,GAC9D,OAAID,EACK,CACLE,gCAhBsB,SAACC,GAC7B,IAAKA,EAAU,OAAO,EAChBC,EAAiBD,EAASjrC,MAAM,KACtC,OAIE,KAHmC,GAAlCmhC,SAAS+J,EAAe,GAAI,IAAW,GACJ,GAAlC/J,SAAS+J,EAAe,GAAI,IAC5B/J,SAAS+J,EAAe,GAAI,KAUOC,CAC/BL,EAAYM,aAAa,gDAE3BC,4BAA6BlK,SAC3B2J,EAAYM,aAAa,0CACzB,KAIC,I,yhBCdL,GAAsB,IAAItJ,GAC5BwJ,GAAY,EAGdN,GADI,GAGFO,KAF6B,gCAC/BF,GAA2B,+BAGvBG,GAA+B,GAAoB5L,uBACvD,SAAAmC,GACE,IAAM9vB,EAAY,CAChBrd,IFjBMi2C,GAAU,+BEkBhB7a,WAAW,EACXj6B,iBAAiB,GAEb01C,EAAW1J,EAAMx9B,IAAI,SAAC,GAAE,IAAA1Q,KAAc,SAAK63C,EAAS,KAAtB,YAA+B,aAAMA,KACzE,OAAOzb,EAAY1d,KAAKN,EAAWw5B,GAAUz0C,KAAK,WAChD,IAAM0pC,EAAyB,GAI/B,OAHAqB,EAAM3rC,QAAQ,SAAC,GAAEE,EAAG,MAClBoqC,EAAQpqC,IAAO,IAEVoqC,KAGX,SAAC,GAAEiL,EAAM,SAAgB,OAAAA,aAAM,EAANA,EAAQlzC,YACjC,CACEmlC,UAAWyN,IF7BiB,IE8B5B1N,qBAAsBqN,GF5BiB,MEgC3C,GACEY,eAAgB,SAACC,GACf,IAAMF,EAASL,GAEf,OADAA,IAAa,EACNE,GAA6B/L,UAAU,IAAEkM,OAAM,GAAKE,MCpC/DnsC,OAAOkjC,oBAAsB,CAC3BC,cACAiJ,aACAlE,sBACAmE,iBACAtS,uBACAoQ,qBACAmC,kBACA9B,kBACA+B,kB","file":"coreRobloxUtilities.bundle.min.js","sourcesContent":["module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var __WEBPACK_NAMESPACE_OBJECT__ = Roblox;","var __WEBPACK_NAMESPACE_OBJECT__ = RobloxTracer;","enum HttpResponseCodes {\r\n  ok = 200,\r\n  accepted = 202,\r\n  movedPermanently = 301,\r\n  badRequest = 400,\r\n  unauthorized = 401,\r\n  forbidden = 403,\r\n  notFound = 404,\r\n  methodNotAllowed = 405,\r\n  conflict = 409,\r\n  payloadTooLarge = 413,\r\n  tooManyAttempts = 429,\r\n  serverError = 500,\r\n  serviceUnavailable = 503\r\n}\r\n\r\nexport default Object.freeze(HttpResponseCodes);\r\n","enum HttpRequestMethods {\r\n  GET = 'get',\r\n  HEAD = 'head',\r\n  POST = 'post',\r\n  PUT = 'put',\r\n  DELETE = 'delete',\r\n  OPTIONS = 'options',\r\n  PATCH = 'patch'\r\n}\r\n\r\nexport default Object.freeze(HttpRequestMethods);\r\n","import axios, { AxiosPromise } from 'axios';\r\nimport { XsrfToken } from 'Roblox';\r\nimport {\r\n  instrumentation,\r\n  tags,\r\n  logs,\r\n  inject,\r\n  apiSiteRequestValidator,\r\n  isTracerEnabled,\r\n  tracerConstants\r\n} from 'roblox-tracer';\r\nimport UrlConfig from '../interfaces/UrlConfig';\r\nimport ResponseConfig from '../interfaces/ResponseConfig';\r\nimport ErrorResponse from '../interfaces/ErrorResponse';\r\nimport HttpResponseCodes from './httpResponseCodes';\r\nimport HttpRequestMethods from './httpRequestMethods';\r\n\r\nconst CSRF_TOKEN_HEADER = 'x-csrf-token';\r\nconst CSRF_INVALID_RESPONSE_CODE = HttpResponseCodes.forbidden;\r\n\r\n// TODO: figure out how to get theres from data attr on page #http-retry-dat\r\nconst HTTP_RETRY_BASE_TIMEOUT = 1000;\r\nconst HTTP_RETRY_MAX_TIMEOUT = 8000;\r\nconst HTTP_RETRY_MAX_TIMES = 3;\r\n\r\nlet currentToken = XsrfToken.getToken();\r\n\r\naxios.interceptors.request.use((config: UrlConfig) => {\r\n  const { method, noCache, headers, url } = config;\r\n  const newConfig = { ...config };\r\n  // if type is post or delete add XsrfToken to header.\r\n  if (\r\n    method === HttpRequestMethods.POST ||\r\n    method === HttpRequestMethods.PATCH ||\r\n    method === HttpRequestMethods.DELETE\r\n  ) {\r\n    if (!currentToken) {\r\n      currentToken = XsrfToken.getToken();\r\n    }\r\n    if (noCache) {\r\n      newConfig.headers = headers || {};\r\n      newConfig['Cache-Control'] = 'no-cache, no-store, must-revalidate';\r\n      newConfig.Pragma = 'no-cache';\r\n      newConfig.Expires = 0;\r\n    }\r\n    newConfig.headers[CSRF_TOKEN_HEADER] = currentToken;\r\n  }\r\n\r\n  // instrument roblox tracer\r\n  if (isTracerEnabled && apiSiteRequestValidator.isApiSiteAvailableForTracing(url)) {\r\n    const requestSpan = instrumentation.createAndGetSpan(\r\n      tracerConstants.operationNames.httpRequest\r\n    );\r\n    tags.setXHRRequestTags(requestSpan, { component: `axios`, method, url });\r\n    logs.setXHRRequestLogs(requestSpan);\r\n    const headerCarriers = inject.httpRequestCarrier(requestSpan);\r\n    Object.keys(headerCarriers).forEach(key => {\r\n      newConfig.headers[key] = headerCarriers[key];\r\n    });\r\n    newConfig.tracerConfig = {\r\n      requestSpan\r\n    };\r\n  }\r\n  return newConfig;\r\n}, null);\r\n\r\naxios.interceptors.response.use(\r\n  (response: ResponseConfig) => {\r\n    const {\r\n      status,\r\n      config: { url, tracerConfig }\r\n    } = response;\r\n\r\n    if (tracerConfig && apiSiteRequestValidator.isApiSiteAvailableForTracing(url)) {\r\n      const { requestSpan } = tracerConfig;\r\n      tags.setXHRResponseTags(requestSpan, {\r\n        status\r\n      });\r\n      logs.setXHRResponseSuccessLogs(requestSpan);\r\n      instrumentation.finalizeSpan(requestSpan);\r\n    }\r\n    return response;\r\n  },\r\n  (error: ErrorResponse): AxiosPromise => {\r\n    const { config: responseConfig, response } = error;\r\n    if (response) {\r\n      const { status, headers, config } = response;\r\n      const newToken: string = headers[CSRF_TOKEN_HEADER];\r\n\r\n      if (status === CSRF_INVALID_RESPONSE_CODE && newToken) {\r\n        config.headers[CSRF_TOKEN_HEADER] = newToken;\r\n        currentToken = newToken;\r\n        XsrfToken.setToken(newToken);\r\n        return axios.request(config);\r\n      }\r\n\r\n      if (\r\n        config?.tracerConfig &&\r\n        apiSiteRequestValidator.isApiSiteAvailableForTracing(config.url)\r\n      ) {\r\n        const { requestSpan } = config.tracerConfig;\r\n        tags.setXHRResponseErrorTags(requestSpan, {\r\n          status\r\n        });\r\n        logs.setXHRResponseErrorLogs(requestSpan);\r\n        instrumentation.finalizeSpan(requestSpan);\r\n      }\r\n    }\r\n    if (responseConfig?.fullError || axios.isCancel(error)) {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return Promise.reject(response);\r\n  }\r\n);\r\n\r\nexport default axios;\r\n","import { AxiosPromise, AxiosResponse, CancelTokenSource } from 'axios';\r\nimport httpClient from './httpClient';\r\nimport HttpRequestMethods from './httpRequestMethods';\r\nimport UrlConfig from '../interfaces/UrlConfig';\r\n\r\nfunction buildCustomizedConfig(urlConfig: UrlConfig): UrlConfig {\r\n  const config = { ...urlConfig };\r\n  if (urlConfig.noCache) {\r\n    config.headers = {\r\n      ...config.headers,\r\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n      Pragma: 'no-cache',\r\n      Expires: 0\r\n    };\r\n  }\r\n  if (urlConfig.authBearerToken) {\r\n    config.headers = {\r\n      ...config.headers,\r\n      'X-Auth-Bearer-Token': urlConfig.authBearerToken\r\n    };\r\n  }\r\n\r\n  return config;\r\n}\r\n\r\nfunction buildRequest(urlConfig: UrlConfig): AxiosPromise {\r\n  if (!urlConfig) {\r\n    Promise.reject(new Error('No config found'));\r\n  }\r\n  return httpClient(buildCustomizedConfig(urlConfig));\r\n}\r\n\r\nfunction buildGetRequest(urlConfig: UrlConfig, params?: URLSearchParams | object): AxiosPromise {\r\n  return buildRequest({\r\n    method: HttpRequestMethods.GET,\r\n    url: urlConfig.url,\r\n    ...urlConfig,\r\n    params\r\n  });\r\n}\r\n\r\nfunction buildPostRequest(\r\n  urlConfig: UrlConfig,\r\n  data?: Document | BodyInit | object | null\r\n): AxiosPromise {\r\n  return buildRequest({\r\n    method: HttpRequestMethods.POST,\r\n    url: urlConfig.url,\r\n    ...urlConfig,\r\n    data\r\n  });\r\n}\r\n\r\nfunction buildPatchRequest(urlConfig: UrlConfig, data?: Document | BodyInit | null): AxiosPromise {\r\n  return buildRequest({\r\n    method: HttpRequestMethods.PATCH,\r\n    url: urlConfig.url,\r\n    ...urlConfig,\r\n    data\r\n  });\r\n}\r\n\r\nfunction buildDeleteRequest(urlConfig: UrlConfig): AxiosPromise {\r\n  return buildRequest({\r\n    method: HttpRequestMethods.DELETE,\r\n    url: urlConfig.url,\r\n    ...urlConfig\r\n  });\r\n}\r\n\r\nfunction buildBatchPromises(\r\n  arrayNeedsBatch: string[],\r\n  cutOff: number,\r\n  urlConfig: UrlConfig,\r\n  isPost: boolean,\r\n  paramsKey: string\r\n): Promise<AxiosResponse[]> {\r\n  const promises: AxiosPromise[] = [];\r\n  let startIndex = 0;\r\n  let subArray = arrayNeedsBatch.slice(startIndex, cutOff);\r\n  const key = paramsKey || 'userIds';\r\n  while (subArray.length > 0) {\r\n    const params: Record<string, string[]> = {};\r\n    params[key] = subArray;\r\n    if (isPost) {\r\n      promises.push(buildPostRequest(urlConfig, params));\r\n    } else {\r\n      promises.push(buildGetRequest(urlConfig, params));\r\n    }\r\n    startIndex += 1;\r\n    subArray = arrayNeedsBatch.slice(startIndex * cutOff, startIndex * cutOff + cutOff);\r\n  }\r\n  return Promise.all(promises);\r\n}\r\n\r\nfunction createCancelToken(): CancelTokenSource {\r\n  return httpClient.CancelToken.source();\r\n}\r\n\r\nfunction isCancelled(error: any): boolean {\r\n  return httpClient.isCancel(error);\r\n}\r\n\r\nexport default {\r\n  methods: HttpRequestMethods,\r\n  get: buildGetRequest,\r\n  post: buildPostRequest,\r\n  delete: buildDeleteRequest,\r\n  patch: buildPatchRequest,\r\n  buildBatchPromises,\r\n  createCancelToken,\r\n  isCancelled\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Catalog Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.catalogApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","// tslint:disable\r\n// / <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Catalog Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * A model to represent asset favorites.\r\n * @export\r\n * @interface RobloxCatalogApiAssetFavoriteModel\r\n */\r\nexport interface RobloxCatalogApiAssetFavoriteModel {\r\n  /**\r\n   * The Id of the asset being favorited.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiAssetFavoriteModel\r\n   */\r\n  assetId?: number;\r\n  /**\r\n   * The Id of the user favoriting the asset.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiAssetFavoriteModel\r\n   */\r\n  userId?: number;\r\n  /**\r\n   * The time at which the user favorited the asset.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiAssetFavoriteModel\r\n   */\r\n  created?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiBundleCreatorModel\r\n */\r\nexport interface RobloxCatalogApiBundleCreatorModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleCreatorModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleCreatorModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleCreatorModel\r\n   */\r\n  type?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiBundleDetailsModel\r\n */\r\nexport interface RobloxCatalogApiBundleDetailsModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  description?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  bundleType?: string;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiBundleItemDetailModel>}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  items?: Array<RobloxCatalogApiBundleItemDetailModel>;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiBundleCreatorModel}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  creator?: RobloxCatalogApiBundleCreatorModel;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiBundleProductModel}\r\n   * @memberof RobloxCatalogApiBundleDetailsModel\r\n   */\r\n  product?: RobloxCatalogApiBundleProductModel;\r\n}\r\n/**\r\n * A model to represent bundle favorites.\r\n * @export\r\n * @interface RobloxCatalogApiBundleFavoriteModel\r\n */\r\nexport interface RobloxCatalogApiBundleFavoriteModel {\r\n  /**\r\n   * The Id of the bundle being favorited.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleFavoriteModel\r\n   */\r\n  bundleId?: number;\r\n  /**\r\n   * The Id of the user favoriting the bundle.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleFavoriteModel\r\n   */\r\n  userId?: number;\r\n  /**\r\n   * The time at which the user favorited the bundle.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleFavoriteModel\r\n   */\r\n  created?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiBundleItemDetailModel\r\n */\r\nexport interface RobloxCatalogApiBundleItemDetailModel {\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiBundleItemDetailModel\r\n   */\r\n  owned?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleItemDetailModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleItemDetailModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleItemDetailModel\r\n   */\r\n  type?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiBundleProductModel\r\n */\r\nexport interface RobloxCatalogApiBundleProductModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  type?: string;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  isPublicDomain?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  isForSale?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  priceInRobux?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  isFree?: boolean;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  noPriceText?: string;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiPremiumPricingModel}\r\n   * @memberof RobloxCatalogApiBundleProductModel\r\n   */\r\n  premiumPricing?: RobloxCatalogApiPremiumPricingModel;\r\n}\r\n/**\r\n * Basic catalog item model\r\n * @export\r\n * @interface RobloxCatalogApiCatalogItemModel\r\n */\r\nexport interface RobloxCatalogApiCatalogItemModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  description?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  type?: string;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  priceInRobux?: number;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiPremiumPricingModel}\r\n   * @memberof RobloxCatalogApiCatalogItemModel\r\n   */\r\n  premiumPricing?: RobloxCatalogApiPremiumPricingModel;\r\n}\r\n/**\r\n * Response model for navigation menu items\r\n * @export\r\n * @interface RobloxCatalogApiCatalogMenuItemsResponseModel\r\n */\r\nexport interface RobloxCatalogApiCatalogMenuItemsResponseModel {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultGearSubcategory?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultGearSubcategoryEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultCategory?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultCategoryIdForRecommendedSearch?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryIdForRecommendedSearchEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultCreator?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCreatorEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultCurrency?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCurrencyEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultSortType?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortTypeEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  defaultSortAggregation?: RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortAggregationEnum;\r\n  /**\r\n   *\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  categoriesWithCreator?: Array<\r\n    RobloxCatalogApiCatalogMenuItemsResponseModelCategoriesWithCreatorEnum\r\n  >;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  robloxUserId?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  robloxUserName?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  gearSubcategory?: RobloxCatalogApiCatalogMenuItemsResponseModelGearSubcategoryEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  allCategories?: RobloxCatalogApiCatalogMenuItemsResponseModelAllCategoriesEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  freeFilter?: RobloxCatalogApiCatalogMenuItemsResponseModelFreeFilterEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  customRobuxFilter?: RobloxCatalogApiCatalogMenuItemsResponseModelCustomRobuxFilterEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  robuxFilter?: RobloxCatalogApiCatalogMenuItemsResponseModelRobuxFilterEnum;\r\n  /**\r\n   * Response object representing all categories\r\n   * @type {Array<RobloxCatalogApiCategoryModel>}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  categories?: Array<RobloxCatalogApiCategoryModel>;\r\n  /**\r\n   * Response object representing all genres\r\n   * @type {Array<RobloxCatalogApiGenreModel>}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  genres?: Array<RobloxCatalogApiGenreModel>;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiSortMenuModel}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  sortMenu?: RobloxCatalogApiSortMenuModel;\r\n  /**\r\n   * Response object representing all creator filters\r\n   * @type {Array<RobloxCatalogApiCreatorFilterModel>}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  creatorFilters?: Array<RobloxCatalogApiCreatorFilterModel>;\r\n  /**\r\n   * Response object representing all price filters\r\n   * @type {Array<RobloxCatalogApiPriceFilterModel>}\r\n   * @memberof RobloxCatalogApiCatalogMenuItemsResponseModel\r\n   */\r\n  priceFilters?: Array<RobloxCatalogApiPriceFilterModel>;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultGearSubcategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BackAccessories = 'BackAccessories',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  FaceAccessories = 'FaceAccessories',\r\n  Faces = 'Faces',\r\n  Featured = 'Featured',\r\n  FrontAccessories = 'FrontAccessories',\r\n  Gear = 'Gear',\r\n  HairAccessories = 'HairAccessories',\r\n  Hats = 'Hats',\r\n  Heads = 'Heads',\r\n  NeckAccessories = 'NeckAccessories',\r\n  Pants = 'Pants',\r\n  Shirts = 'Shirts',\r\n  ShoulderAccessories = 'ShoulderAccessories',\r\n  Tshirts = 'Tshirts',\r\n  WaistAccessories = 'WaistAccessories',\r\n  Bundles = 'Bundles',\r\n  AnimationBundles = 'AnimationBundles',\r\n  EmoteAnimations = 'EmoteAnimations',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Melee = 'Melee',\r\n  Ranged = 'Ranged',\r\n  Explosive = 'Explosive',\r\n  PowerUp = 'PowerUp',\r\n  Navigation = 'Navigation',\r\n  Musical = 'Musical',\r\n  Social = 'Social',\r\n  Building = 'Building',\r\n  Transport = 'Transport',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCategoryIdForRecommendedSearchEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCreatorEnum {\r\n  User = 'User',\r\n  Group = 'Group'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultCurrencyEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortTypeEnum {\r\n  Relevance = 'Relevance',\r\n  Favorited = 'Favorited',\r\n  Sales = 'Sales',\r\n  Updated = 'Updated',\r\n  PriceAsc = 'PriceAsc',\r\n  PriceDesc = 'PriceDesc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelDefaultSortAggregationEnum {\r\n  Past12Hours = 'Past12Hours',\r\n  PastDay = 'PastDay',\r\n  Past3Days = 'Past3Days',\r\n  PastWeek = 'PastWeek',\r\n  PastMonth = 'PastMonth',\r\n  AllTime = 'AllTime'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelCategoriesWithCreatorEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelGearSubcategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BackAccessories = 'BackAccessories',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  FaceAccessories = 'FaceAccessories',\r\n  Faces = 'Faces',\r\n  Featured = 'Featured',\r\n  FrontAccessories = 'FrontAccessories',\r\n  Gear = 'Gear',\r\n  HairAccessories = 'HairAccessories',\r\n  Hats = 'Hats',\r\n  Heads = 'Heads',\r\n  NeckAccessories = 'NeckAccessories',\r\n  Pants = 'Pants',\r\n  Shirts = 'Shirts',\r\n  ShoulderAccessories = 'ShoulderAccessories',\r\n  Tshirts = 'Tshirts',\r\n  WaistAccessories = 'WaistAccessories',\r\n  Bundles = 'Bundles',\r\n  AnimationBundles = 'AnimationBundles',\r\n  EmoteAnimations = 'EmoteAnimations',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Melee = 'Melee',\r\n  Ranged = 'Ranged',\r\n  Explosive = 'Explosive',\r\n  PowerUp = 'PowerUp',\r\n  Navigation = 'Navigation',\r\n  Musical = 'Musical',\r\n  Social = 'Social',\r\n  Building = 'Building',\r\n  Transport = 'Transport',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelAllCategoriesEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelFreeFilterEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelCustomRobuxFilterEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogMenuItemsResponseModelRobuxFilterEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n\r\n/**\r\n * Catalog Metadata model\r\n * @export\r\n * @interface RobloxCatalogApiCatalogMetadataModel\r\n */\r\nexport interface RobloxCatalogApiCatalogMetadataModel {\r\n  /**\r\n   * Default number of Splash tiles in catalog page\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  numberOfCatalogItemsToDisplayOnSplash?: number;\r\n  /**\r\n   * Number of splash tiles in catalog page on phone\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  numberOfCatalogItemsToDisplayOnSplashOnPhone?: number;\r\n  /**\r\n   * Should consumer use catalog sorts\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  isCatalogSortsFromApiEnabled?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  is3dInEachItemCardAbTestingEnabled?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  is3dInEachItemCardEnabled?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  timeoutOn3dThumbnailRequestInMs?: number;\r\n  /**\r\n   * Determines whether Premium prices, when available, should be shown on catalog item tiles\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  isPremiumPriceOnItemTilesEnabled?: boolean;\r\n  /**\r\n   * Determines whether Premium icons, when applicable, should be shown on catalog item tiles\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  isPremiumIconOnItemTilesEnabled?: boolean;\r\n  /**\r\n   * Determines whether Premium sort is availabe\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogMetadataModel\r\n   */\r\n  isPremiumSortEnabled?: boolean;\r\n}\r\n/**\r\n * The detailed model for catalog items, complete with economy and ownership info\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem {\r\n  /**\r\n   * whether item is available for rent\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  isForRent?: boolean;\r\n  /**\r\n   * Id to pass into economy purchase api  userID of lowest private seller if resellable  Creator AgentID (deprecated) / CreatorTargetId otherwise\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  expectedSellerId?: number;\r\n  /**\r\n   * Whether item is owned by user\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  owned?: boolean;\r\n  /**\r\n   * Whether item can be purchased\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  isPurchasable?: boolean;\r\n  /**\r\n   * The Item Id.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  id?: number;\r\n  /**\r\n   * The {Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.ItemType} item type.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  itemType?: RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemTypeEnum;\r\n  /**\r\n   * The {Roblox.Platform.Assets.AssetType} serialized if item is an asset.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  assetType?: RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemAssetTypeEnum;\r\n  /**\r\n   * The {Roblox.Platform.Bundles.Core.BundleType} serialized if item is a bundle.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  bundleType?: RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemBundleTypeEnum;\r\n  /**\r\n   * The item name.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  name?: string;\r\n  /**\r\n   * The item description.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  description?: string;\r\n  /**\r\n   * The product id of corresponding item.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  productId?: number;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1}, serialized if item has genres.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  genres?: Array<RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemGenresEnum>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} contained in the bundle, serialized if item is a bundle.\r\n   * @type {Array<RobloxCatalogApiBundleItemDetailModel>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  bundledItems?: Array<RobloxCatalogApiBundleItemDetailModel>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} if item has {Roblox.Catalog.Api.CatalogItemStatus}.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  itemStatus?: Array<RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemStatusEnum>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} if item has {Roblox.Catalog.Api.CatalogItemRestriction}.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  itemRestrictions?: Array<\r\n    RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemRestrictionsEnum\r\n  >;\r\n  /**\r\n   * The {Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.CreatorType} of the item\\'s creator.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  creatorType?: RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemCreatorTypeEnum;\r\n  /**\r\n   * The creator id of the item\\'s creator.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  creatorTargetId?: number;\r\n  /**\r\n   * The creator name of the item\\'s creator.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  creatorName?: string;\r\n  /**\r\n   * The item\\'s price.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  price?: number;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiPremiumPricingModel}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  premiumPricing?: RobloxCatalogApiPremiumPricingModel;\r\n  /**\r\n   * The item\\'s lowest price, only if the item is resellable and there are resellers.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  lowestPrice?: number;\r\n  /**\r\n   * The localized string item status if the item\\'s price should not be displayed.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  priceStatus?: string;\r\n  /**\r\n   * The number of items in stock, only if the item is resellable and is limitedEdition\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  unitsAvailableForConsumption?: number;\r\n  /**\r\n   * The number of times the item has been purchased.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  purchaseCount?: number;\r\n  /**\r\n   * The number of times the item has been favorited.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem\r\n   */\r\n  favoriteCount?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemTypeEnum {\r\n  Asset = 'Asset',\r\n  Bundle = 'Bundle'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemAssetTypeEnum {\r\n  Image = 'Image',\r\n  TShirt = 'TShirt',\r\n  Audio = 'Audio',\r\n  Mesh = 'Mesh',\r\n  Lua = 'Lua',\r\n  HTML = 'HTML',\r\n  Text = 'Text',\r\n  Hat = 'Hat',\r\n  Place = 'Place',\r\n  Model = 'Model',\r\n  Shirt = 'Shirt',\r\n  Pants = 'Pants',\r\n  Decal = 'Decal',\r\n  Avatar = 'Avatar',\r\n  Head = 'Head',\r\n  Face = 'Face',\r\n  Gear = 'Gear',\r\n  Badge = 'Badge',\r\n  GroupEmblem = 'GroupEmblem',\r\n  Animation = 'Animation',\r\n  Arms = 'Arms',\r\n  Legs = 'Legs',\r\n  Torso = 'Torso',\r\n  RightArm = 'RightArm',\r\n  LeftArm = 'LeftArm',\r\n  LeftLeg = 'LeftLeg',\r\n  RightLeg = 'RightLeg',\r\n  Package = 'Package',\r\n  YouTubeVideo = 'YouTubeVideo',\r\n  GamePass = 'GamePass',\r\n  App = 'App',\r\n  Code = 'Code',\r\n  Plugin = 'Plugin',\r\n  SolidModel = 'SolidModel',\r\n  MeshPart = 'MeshPart',\r\n  HairAccessory = 'HairAccessory',\r\n  FaceAccessory = 'FaceAccessory',\r\n  NeckAccessory = 'NeckAccessory',\r\n  ShoulderAccessory = 'ShoulderAccessory',\r\n  FrontAccessory = 'FrontAccessory',\r\n  BackAccessory = 'BackAccessory',\r\n  WaistAccessory = 'WaistAccessory',\r\n  ClimbAnimation = 'ClimbAnimation',\r\n  DeathAnimation = 'DeathAnimation',\r\n  FallAnimation = 'FallAnimation',\r\n  IdleAnimation = 'IdleAnimation',\r\n  JumpAnimation = 'JumpAnimation',\r\n  RunAnimation = 'RunAnimation',\r\n  SwimAnimation = 'SwimAnimation',\r\n  WalkAnimation = 'WalkAnimation',\r\n  PoseAnimation = 'PoseAnimation',\r\n  LocalizationTableManifest = 'LocalizationTableManifest',\r\n  LocalizationTableTranslation = 'LocalizationTableTranslation',\r\n  EmoteAnimation = 'EmoteAnimation',\r\n  Video = 'Video',\r\n  TexturePack = 'TexturePack'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemBundleTypeEnum {\r\n  BodyParts = 'BodyParts',\r\n  AvatarAnimations = 'AvatarAnimations'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemGenresEnum {\r\n  All = 'All',\r\n  Tutorial = 'Tutorial',\r\n  Scary = 'Scary',\r\n  TownAndCity = 'TownAndCity',\r\n  War = 'War',\r\n  Funny = 'Funny',\r\n  Fantasy = 'Fantasy',\r\n  Adventure = 'Adventure',\r\n  SciFi = 'SciFi',\r\n  Pirate = 'Pirate',\r\n  FPS = 'FPS',\r\n  RPG = 'RPG',\r\n  Sports = 'Sports',\r\n  Ninja = 'Ninja',\r\n  WildWest = 'WildWest'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemStatusEnum {\r\n  New = 'New',\r\n  Sale = 'Sale',\r\n  XboxExclusive = 'XboxExclusive',\r\n  AmazonExclusive = 'AmazonExclusive',\r\n  GooglePlayExclusive = 'GooglePlayExclusive',\r\n  IosExclusive = 'IosExclusive',\r\n  SaleTimer = 'SaleTimer'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemItemRestrictionsEnum {\r\n  ThirteenPlus = 'ThirteenPlus',\r\n  LimitedUnique = 'LimitedUnique',\r\n  Limited = 'Limited',\r\n  BuildersClub = 'BuildersClub',\r\n  TurboBuildersClub = 'TurboBuildersClub',\r\n  OutrageousBuildersClub = 'OutrageousBuildersClub',\r\n  Rthro = 'Rthro'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedCompleteResponseItemCreatorTypeEnum {\r\n  User = 'User',\r\n  Group = 'Group'\r\n}\r\n\r\n/**\r\n * The detailed model for catalog items.\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchDetailedResponseItem {\r\n  /**\r\n   * The Item Id.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  id?: number;\r\n  /**\r\n   * The {Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.ItemType} item type.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  itemType?: RobloxCatalogApiCatalogSearchDetailedResponseItemItemTypeEnum;\r\n  /**\r\n   * The {Roblox.Platform.Assets.AssetType} serialized if item is an asset.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  assetType?: RobloxCatalogApiCatalogSearchDetailedResponseItemAssetTypeEnum;\r\n  /**\r\n   * The {Roblox.Platform.Bundles.Core.BundleType} serialized if item is a bundle.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  bundleType?: RobloxCatalogApiCatalogSearchDetailedResponseItemBundleTypeEnum;\r\n  /**\r\n   * The item name.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  name?: string;\r\n  /**\r\n   * The item description.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  description?: string;\r\n  /**\r\n   * The product id of corresponding item.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  productId?: number;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1}, serialized if item has genres.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  genres?: Array<RobloxCatalogApiCatalogSearchDetailedResponseItemGenresEnum>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} contained in the bundle, serialized if item is a bundle.\r\n   * @type {Array<RobloxCatalogApiBundleItemDetailModel>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  bundledItems?: Array<RobloxCatalogApiBundleItemDetailModel>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} if item has {Roblox.Catalog.Api.CatalogItemStatus}.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  itemStatus?: Array<RobloxCatalogApiCatalogSearchDetailedResponseItemItemStatusEnum>;\r\n  /**\r\n   * The {System.Collections.Generic.IEnumerable`1} if item has {Roblox.Catalog.Api.CatalogItemRestriction}.\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  itemRestrictions?: Array<RobloxCatalogApiCatalogSearchDetailedResponseItemItemRestrictionsEnum>;\r\n  /**\r\n   * The {Roblox.Catalog.Api.CatalogSearchDetailedResponseItem.CreatorType} of the item\\'s creator.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  creatorType?: RobloxCatalogApiCatalogSearchDetailedResponseItemCreatorTypeEnum;\r\n  /**\r\n   * The creator id of the item\\'s creator.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  creatorTargetId?: number;\r\n  /**\r\n   * The creator name of the item\\'s creator.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  creatorName?: string;\r\n  /**\r\n   * The item\\'s price.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  price?: number;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiPremiumPricingModel}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  premiumPricing?: RobloxCatalogApiPremiumPricingModel;\r\n  /**\r\n   * The item\\'s lowest price, only if the item is resellable and there are resellers.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  lowestPrice?: number;\r\n  /**\r\n   * The localized string item status if the item\\'s price should not be displayed.\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  priceStatus?: string;\r\n  /**\r\n   * The number of items in stock, only if the item is resellable and is limitedEdition\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  unitsAvailableForConsumption?: number;\r\n  /**\r\n   * The number of times the item has been purchased.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  purchaseCount?: number;\r\n  /**\r\n   * The number of times the item has been favorited.\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  favoriteCount?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemItemTypeEnum {\r\n  Asset = 'Asset',\r\n  Bundle = 'Bundle'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemAssetTypeEnum {\r\n  Image = 'Image',\r\n  TShirt = 'TShirt',\r\n  Audio = 'Audio',\r\n  Mesh = 'Mesh',\r\n  Lua = 'Lua',\r\n  HTML = 'HTML',\r\n  Text = 'Text',\r\n  Hat = 'Hat',\r\n  Place = 'Place',\r\n  Model = 'Model',\r\n  Shirt = 'Shirt',\r\n  Pants = 'Pants',\r\n  Decal = 'Decal',\r\n  Avatar = 'Avatar',\r\n  Head = 'Head',\r\n  Face = 'Face',\r\n  Gear = 'Gear',\r\n  Badge = 'Badge',\r\n  GroupEmblem = 'GroupEmblem',\r\n  Animation = 'Animation',\r\n  Arms = 'Arms',\r\n  Legs = 'Legs',\r\n  Torso = 'Torso',\r\n  RightArm = 'RightArm',\r\n  LeftArm = 'LeftArm',\r\n  LeftLeg = 'LeftLeg',\r\n  RightLeg = 'RightLeg',\r\n  Package = 'Package',\r\n  YouTubeVideo = 'YouTubeVideo',\r\n  GamePass = 'GamePass',\r\n  App = 'App',\r\n  Code = 'Code',\r\n  Plugin = 'Plugin',\r\n  SolidModel = 'SolidModel',\r\n  MeshPart = 'MeshPart',\r\n  HairAccessory = 'HairAccessory',\r\n  FaceAccessory = 'FaceAccessory',\r\n  NeckAccessory = 'NeckAccessory',\r\n  ShoulderAccessory = 'ShoulderAccessory',\r\n  FrontAccessory = 'FrontAccessory',\r\n  BackAccessory = 'BackAccessory',\r\n  WaistAccessory = 'WaistAccessory',\r\n  ClimbAnimation = 'ClimbAnimation',\r\n  DeathAnimation = 'DeathAnimation',\r\n  FallAnimation = 'FallAnimation',\r\n  IdleAnimation = 'IdleAnimation',\r\n  JumpAnimation = 'JumpAnimation',\r\n  RunAnimation = 'RunAnimation',\r\n  SwimAnimation = 'SwimAnimation',\r\n  WalkAnimation = 'WalkAnimation',\r\n  PoseAnimation = 'PoseAnimation',\r\n  LocalizationTableManifest = 'LocalizationTableManifest',\r\n  LocalizationTableTranslation = 'LocalizationTableTranslation',\r\n  EmoteAnimation = 'EmoteAnimation',\r\n  Video = 'Video',\r\n  TexturePack = 'TexturePack'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemBundleTypeEnum {\r\n  BodyParts = 'BodyParts',\r\n  AvatarAnimations = 'AvatarAnimations'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemGenresEnum {\r\n  All = 'All',\r\n  Tutorial = 'Tutorial',\r\n  Scary = 'Scary',\r\n  TownAndCity = 'TownAndCity',\r\n  War = 'War',\r\n  Funny = 'Funny',\r\n  Fantasy = 'Fantasy',\r\n  Adventure = 'Adventure',\r\n  SciFi = 'SciFi',\r\n  Pirate = 'Pirate',\r\n  FPS = 'FPS',\r\n  RPG = 'RPG',\r\n  Sports = 'Sports',\r\n  Ninja = 'Ninja',\r\n  WildWest = 'WildWest'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemItemStatusEnum {\r\n  New = 'New',\r\n  Sale = 'Sale',\r\n  XboxExclusive = 'XboxExclusive',\r\n  AmazonExclusive = 'AmazonExclusive',\r\n  GooglePlayExclusive = 'GooglePlayExclusive',\r\n  IosExclusive = 'IosExclusive',\r\n  SaleTimer = 'SaleTimer'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemItemRestrictionsEnum {\r\n  ThirteenPlus = 'ThirteenPlus',\r\n  LimitedUnique = 'LimitedUnique',\r\n  Limited = 'Limited',\r\n  BuildersClub = 'BuildersClub',\r\n  TurboBuildersClub = 'TurboBuildersClub',\r\n  OutrageousBuildersClub = 'OutrageousBuildersClub',\r\n  Rthro = 'Rthro'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchDetailedResponseItemCreatorTypeEnum {\r\n  User = 'User',\r\n  Group = 'Group'\r\n}\r\n\r\n/**\r\n * ApiPageResponse for catalog search\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem {\r\n  /**\r\n   * Keyword used for search query\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  keyword?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  previousPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  nextPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiCatalogSearchDetailedResponseItem>}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  data?: Array<RobloxCatalogApiCatalogSearchDetailedResponseItem>;\r\n}\r\n/**\r\n * ApiPageResponse for catalog search\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem {\r\n  /**\r\n   * Keyword used for search query\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  keyword?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  previousPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  nextPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiCatalogSearchResponseItem>}\r\n   * @memberof RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  data?: Array<RobloxCatalogApiCatalogSearchResponseItem>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchRequestModel\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchRequestModel {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  category?: RobloxCatalogApiCatalogSearchRequestModelCategoryEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  subcategory?: RobloxCatalogApiCatalogSearchRequestModelSubcategoryEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  sortAggregation?: RobloxCatalogApiCatalogSearchRequestModelSortAggregationEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  sortCurrency?: RobloxCatalogApiCatalogSearchRequestModelSortCurrencyEnum;\r\n  /**\r\n   *\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  genres?: Array<RobloxCatalogApiCatalogSearchRequestModelGenresEnum>;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  sortType?: RobloxCatalogApiCatalogSearchRequestModelSortTypeEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  creatorType?: RobloxCatalogApiCatalogSearchRequestModelCreatorTypeEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  creatorTargetId?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  creatorName?: string;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  maxPrice?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  minPrice?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  keyword?: string;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  includeNotForSale?: boolean;\r\n  /**\r\n   *\r\n   * @type {Array<string>}\r\n   * @memberof RobloxCatalogApiCatalogSearchRequestModel\r\n   */\r\n  tagNames?: Array<string>;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelCategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelSubcategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BackAccessories = 'BackAccessories',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  FaceAccessories = 'FaceAccessories',\r\n  Faces = 'Faces',\r\n  Featured = 'Featured',\r\n  FrontAccessories = 'FrontAccessories',\r\n  Gear = 'Gear',\r\n  HairAccessories = 'HairAccessories',\r\n  Hats = 'Hats',\r\n  Heads = 'Heads',\r\n  NeckAccessories = 'NeckAccessories',\r\n  Pants = 'Pants',\r\n  Shirts = 'Shirts',\r\n  ShoulderAccessories = 'ShoulderAccessories',\r\n  Tshirts = 'Tshirts',\r\n  WaistAccessories = 'WaistAccessories',\r\n  Bundles = 'Bundles',\r\n  AnimationBundles = 'AnimationBundles',\r\n  EmoteAnimations = 'EmoteAnimations',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Melee = 'Melee',\r\n  Ranged = 'Ranged',\r\n  Explosive = 'Explosive',\r\n  PowerUp = 'PowerUp',\r\n  Navigation = 'Navigation',\r\n  Musical = 'Musical',\r\n  Social = 'Social',\r\n  Building = 'Building',\r\n  Transport = 'Transport',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelSortAggregationEnum {\r\n  Past12Hours = 'Past12Hours',\r\n  PastDay = 'PastDay',\r\n  Past3Days = 'Past3Days',\r\n  PastWeek = 'PastWeek',\r\n  PastMonth = 'PastMonth',\r\n  AllTime = 'AllTime'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelSortCurrencyEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelGenresEnum {\r\n  TownAndCity = 'TownAndCity',\r\n  Medieval = 'Medieval',\r\n  SciFi = 'SciFi',\r\n  Fighting = 'Fighting',\r\n  Horror = 'Horror',\r\n  Naval = 'Naval',\r\n  Adventure = 'Adventure',\r\n  Sports = 'Sports',\r\n  Comedy = 'Comedy',\r\n  Western = 'Western',\r\n  Military = 'Military',\r\n  Building = 'Building',\r\n  Fps = 'Fps',\r\n  Rpg = 'Rpg'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelSortTypeEnum {\r\n  Relevance = 'Relevance',\r\n  Favorited = 'Favorited',\r\n  Sales = 'Sales',\r\n  Updated = 'Updated',\r\n  PriceAsc = 'PriceAsc',\r\n  PriceDesc = 'PriceDesc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchRequestModelCreatorTypeEnum {\r\n  User = 'User',\r\n  Group = 'Group'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSearchResponseItem\r\n */\r\nexport interface RobloxCatalogApiCatalogSearchResponseItem {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSearchResponseItem\r\n   */\r\n  itemType?: RobloxCatalogApiCatalogSearchResponseItemItemTypeEnum;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCatalogSearchResponseItemItemTypeEnum {\r\n  Asset = 'Asset',\r\n  Bundle = 'Bundle'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSortModel\r\n */\r\nexport interface RobloxCatalogApiCatalogSortModel {\r\n  /**\r\n   * Name of the sort\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSortModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Display name of the sort\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCatalogSortModel\r\n   */\r\n  displayName?: string;\r\n  /**\r\n   * Number of items to be displayed for the sort\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCatalogSortModel\r\n   */\r\n  numberOfItems?: number;\r\n  /**\r\n   * Items in the sort\r\n   * @type {Array<RobloxCatalogApiCatalogSearchResponseItem>}\r\n   * @memberof RobloxCatalogApiCatalogSortModel\r\n   */\r\n  items?: Array<RobloxCatalogApiCatalogSearchResponseItem>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiCatalogSortsResponseModel\r\n */\r\nexport interface RobloxCatalogApiCatalogSortsResponseModel {\r\n  /**\r\n   * Response object representing all categories\r\n   * @type {Array<RobloxCatalogApiCatalogSortModel>}\r\n   * @memberof RobloxCatalogApiCatalogSortsResponseModel\r\n   */\r\n  sorts?: Array<RobloxCatalogApiCatalogSortModel>;\r\n}\r\n/**\r\n * Response model for category\r\n * @export\r\n * @interface RobloxCatalogApiCategoryModel\r\n */\r\nexport interface RobloxCatalogApiCategoryModel {\r\n  /**\r\n   * Category type\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  category?: RobloxCatalogApiCategoryModelCategoryEnum;\r\n  /**\r\n   * Category id\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  categoryId?: number;\r\n  /**\r\n   * Category name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Category order index\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  orderIndex?: number;\r\n  /**\r\n   * Subcategories under this category\r\n   * @type {Array<RobloxCatalogApiSubcategoryModel>}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  subcategories?: Array<RobloxCatalogApiSubcategoryModel>;\r\n  /**\r\n   * Gets or sets whether the category is searchable in search bar\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCategoryModel\r\n   */\r\n  isSearchable?: boolean;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiCategoryModelCategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  Featured = 'Featured',\r\n  Gear = 'Gear',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiCreatorContainerV2\r\n */\r\nexport interface RobloxCatalogApiCreatorContainerV2 {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCreatorContainerV2\r\n   */\r\n  creatorId?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCreatorContainerV2\r\n   */\r\n  creatorType?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCreatorContainerV2\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCreatorContainerV2\r\n   */\r\n  creatorProfileLink?: string;\r\n}\r\n/**\r\n * Response model for creator filter\r\n * @export\r\n * @interface RobloxCatalogApiCreatorFilterModel\r\n */\r\nexport interface RobloxCatalogApiCreatorFilterModel {\r\n  /**\r\n   * Creator user Id\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiCreatorFilterModel\r\n   */\r\n  userId?: number;\r\n  /**\r\n   * Creator name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiCreatorFilterModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Whether this filter is selected by default\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiCreatorFilterModel\r\n   */\r\n  isSelected?: boolean;\r\n}\r\n/**\r\n * Response model for genre\r\n * @export\r\n * @interface RobloxCatalogApiGenreModel\r\n */\r\nexport interface RobloxCatalogApiGenreModel {\r\n  /**\r\n   * Genre type\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiGenreModel\r\n   */\r\n  genre?: RobloxCatalogApiGenreModelGenreEnum;\r\n  /**\r\n   * Genre name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiGenreModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Whether this genre is selected by default\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiGenreModel\r\n   */\r\n  isSelected?: boolean;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiGenreModelGenreEnum {\r\n  TownAndCity = 'TownAndCity',\r\n  Medieval = 'Medieval',\r\n  SciFi = 'SciFi',\r\n  Fighting = 'Fighting',\r\n  Horror = 'Horror',\r\n  Naval = 'Naval',\r\n  Adventure = 'Adventure',\r\n  Sports = 'Sports',\r\n  Comedy = 'Comedy',\r\n  Western = 'Western',\r\n  Military = 'Military',\r\n  Building = 'Building',\r\n  Fps = 'Fps',\r\n  Rpg = 'Rpg'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiItemContainerV2\r\n */\r\nexport interface RobloxCatalogApiItemContainerV2 {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  assetId?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  price?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  premiumPrice?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  absoluteUrl?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiItemContainerV2\r\n   */\r\n  audioUrl?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiMultigetItemDetailsRequestItem\r\n */\r\nexport interface RobloxCatalogApiMultigetItemDetailsRequestItem {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiMultigetItemDetailsRequestItem\r\n   */\r\n  itemType?: RobloxCatalogApiMultigetItemDetailsRequestItemItemTypeEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiMultigetItemDetailsRequestItem\r\n   */\r\n  id?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiMultigetItemDetailsRequestItemItemTypeEnum {\r\n  Asset = 'Asset',\r\n  Bundle = 'Bundle'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiMultigetItemDetailsRequestModel\r\n */\r\nexport interface RobloxCatalogApiMultigetItemDetailsRequestModel {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiMultigetItemDetailsRequestItem>}\r\n   * @memberof RobloxCatalogApiMultigetItemDetailsRequestModel\r\n   */\r\n  items?: Array<RobloxCatalogApiMultigetItemDetailsRequestItem>;\r\n}\r\n/**\r\n * A model to represent owned bundles.\r\n * @export\r\n * @interface RobloxCatalogApiOwnedBundleModel\r\n */\r\nexport interface RobloxCatalogApiOwnedBundleModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiOwnedBundleModel\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiOwnedBundleModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiOwnedBundleModel\r\n   */\r\n  bundleType?: string;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiBundleCreatorModel}\r\n   * @memberof RobloxCatalogApiOwnedBundleModel\r\n   */\r\n  creator?: RobloxCatalogApiBundleCreatorModel;\r\n}\r\n/**\r\n * Defines the Premium pricing for a catalog item\r\n * @export\r\n * @interface RobloxCatalogApiPremiumPricingModel\r\n */\r\nexport interface RobloxCatalogApiPremiumPricingModel {\r\n  /**\r\n   * The Premium discount percentage for a catalog item\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiPremiumPricingModel\r\n   */\r\n  premiumDiscountPercentage?: number;\r\n  /**\r\n   * The Premium price for a catalog item\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiPremiumPricingModel\r\n   */\r\n  premiumPriceInRobux?: number;\r\n}\r\n/**\r\n * Response model for price filter\r\n * @export\r\n * @interface RobloxCatalogApiPriceFilterModel\r\n */\r\nexport interface RobloxCatalogApiPriceFilterModel {\r\n  /**\r\n   * Currency Type of this price filter\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiPriceFilterModel\r\n   */\r\n  currencyType?: RobloxCatalogApiPriceFilterModelCurrencyTypeEnum;\r\n  /**\r\n   * Price filter Name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiPriceFilterModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Whether if this price filter exclude price sorts\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiPriceFilterModel\r\n   */\r\n  excludePriceSorts?: boolean;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiPriceFilterModelCurrencyTypeEnum {\r\n  All = 'All',\r\n  Robux = 'Robux',\r\n  Tickets = 'Tickets',\r\n  CustomRobux = 'CustomRobux',\r\n  CustomTickets = 'CustomTickets',\r\n  Free = 'Free'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiProductContainerV2\r\n */\r\nexport interface RobloxCatalogApiProductContainerV2 {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  priceInRobux?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isForSale?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isPublicDomain?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isResellable?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isLimited?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isLimitedUnique?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  serialNumber?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isRental?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  rentalDurationInHours?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  bcRequirement?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  totalPrivateSales?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  sellerId?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  sellerName?: string;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  lowestPrivateSaleUserAssetId?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isXboxExclusiveItem?: boolean;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  offsaleDeadline?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  noPriceText?: string;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiProductContainerV2\r\n   */\r\n  isFree?: boolean;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxCatalogApiRecommendationViewModelV2\r\n */\r\nexport interface RobloxCatalogApiRecommendationViewModelV2 {\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiItemContainerV2}\r\n   * @memberof RobloxCatalogApiRecommendationViewModelV2\r\n   */\r\n  item?: RobloxCatalogApiItemContainerV2;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiCreatorContainerV2}\r\n   * @memberof RobloxCatalogApiRecommendationViewModelV2\r\n   */\r\n  creator?: RobloxCatalogApiCreatorContainerV2;\r\n  /**\r\n   *\r\n   * @type {RobloxCatalogApiProductContainerV2}\r\n   * @memberof RobloxCatalogApiRecommendationViewModelV2\r\n   */\r\n  product?: RobloxCatalogApiProductContainerV2;\r\n}\r\n/**\r\n * Recommendations Metadata Model\r\n * @export\r\n * @interface RobloxCatalogApiRecommendationsMetadataModel\r\n */\r\nexport interface RobloxCatalogApiRecommendationsMetadataModel {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  numOfRecommendationsDisplayed?: number;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  numOfRecommendationsRetrieved?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  isCarouselEnabled?: boolean;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  isCarouselTestingEnabled?: boolean;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  carouselTestingVariation?: number;\r\n  /**\r\n   *\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiRecommendationsMetadataModel\r\n   */\r\n  isRecommendationFromCatalogApiEnabled?: boolean;\r\n}\r\n/**\r\n * Response model for sort aggregation\r\n * @export\r\n * @interface RobloxCatalogApiSortAggregationModel\r\n */\r\nexport interface RobloxCatalogApiSortAggregationModel {\r\n  /**\r\n   * Sort aggregation type\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSortAggregationModel\r\n   */\r\n  sortAggregation?: RobloxCatalogApiSortAggregationModelSortAggregationEnum;\r\n  /**\r\n   * Sort aggregation name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSortAggregationModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Whether this sort aggregation is selected by default\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortAggregationModel\r\n   */\r\n  isSelected?: boolean;\r\n  /**\r\n   * Whether this sort aggregation has sub menu\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortAggregationModel\r\n   */\r\n  hasSubMenu?: boolean;\r\n  /**\r\n   * Whether this sort aggregation is price related\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortAggregationModel\r\n   */\r\n  isPriceRelated?: boolean;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiSortAggregationModelSortAggregationEnum {\r\n  Past12Hours = 'Past12Hours',\r\n  PastDay = 'PastDay',\r\n  Past3Days = 'Past3Days',\r\n  PastWeek = 'PastWeek',\r\n  PastMonth = 'PastMonth',\r\n  AllTime = 'AllTime'\r\n}\r\n\r\n/**\r\n * Response model for sort menu\r\n * @export\r\n * @interface RobloxCatalogApiSortMenuModel\r\n */\r\nexport interface RobloxCatalogApiSortMenuModel {\r\n  /**\r\n   * List of sort options\r\n   * @type {Array<RobloxCatalogApiSortOptionModel>}\r\n   * @memberof RobloxCatalogApiSortMenuModel\r\n   */\r\n  sortOptions?: Array<RobloxCatalogApiSortOptionModel>;\r\n  /**\r\n   * List of sort aggregations\r\n   * @type {Array<RobloxCatalogApiSortAggregationModel>}\r\n   * @memberof RobloxCatalogApiSortMenuModel\r\n   */\r\n  sortAggregations?: Array<RobloxCatalogApiSortAggregationModel>;\r\n}\r\n/**\r\n * Response model for sort option\r\n * @export\r\n * @interface RobloxCatalogApiSortOptionModel\r\n */\r\nexport interface RobloxCatalogApiSortOptionModel {\r\n  /**\r\n   * Sort type\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  sortType?: RobloxCatalogApiSortOptionModelSortTypeEnum;\r\n  /**\r\n   * Descending or Ascending order of the sort\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  sortOrder?: RobloxCatalogApiSortOptionModelSortOrderEnum;\r\n  /**\r\n   * Sort option Name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Whether this sort option is selected by default\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  isSelected?: boolean;\r\n  /**\r\n   * Whether this sort option has sub menu\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  hasSubMenu?: boolean;\r\n  /**\r\n   * Whether this sort option is price related\r\n   * @type {boolean}\r\n   * @memberof RobloxCatalogApiSortOptionModel\r\n   */\r\n  isPriceRelated?: boolean;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiSortOptionModelSortTypeEnum {\r\n  Relevance = 'Relevance',\r\n  Favorited = 'Favorited',\r\n  Sales = 'Sales',\r\n  Updated = 'Updated',\r\n  PriceAsc = 'PriceAsc',\r\n  PriceDesc = 'PriceDesc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiSortOptionModelSortOrderEnum {\r\n  Asc = 'Asc',\r\n  Desc = 'Desc'\r\n}\r\n\r\n/**\r\n * Response model for subcategory\r\n * @export\r\n * @interface RobloxCatalogApiSubcategoryModel\r\n */\r\nexport interface RobloxCatalogApiSubcategoryModel {\r\n  /**\r\n   * Subcategory type\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSubcategoryModel\r\n   */\r\n  subcategory?: RobloxCatalogApiSubcategoryModelSubcategoryEnum;\r\n  /**\r\n   * Subcategory id\r\n   * @type {number}\r\n   * @memberof RobloxCatalogApiSubcategoryModel\r\n   */\r\n  subcategoryId?: number;\r\n  /**\r\n   * Subcategory name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSubcategoryModel\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Subcategory short name\r\n   * @type {string}\r\n   * @memberof RobloxCatalogApiSubcategoryModel\r\n   */\r\n  shortName?: string;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxCatalogApiSubcategoryModelSubcategoryEnum {\r\n  Accessories = 'Accessories',\r\n  All = 'All',\r\n  AvatarAnimations = 'AvatarAnimations',\r\n  BackAccessories = 'BackAccessories',\r\n  BodyParts = 'BodyParts',\r\n  Clothing = 'Clothing',\r\n  Collectibles = 'Collectibles',\r\n  FaceAccessories = 'FaceAccessories',\r\n  Faces = 'Faces',\r\n  Featured = 'Featured',\r\n  FrontAccessories = 'FrontAccessories',\r\n  Gear = 'Gear',\r\n  HairAccessories = 'HairAccessories',\r\n  Hats = 'Hats',\r\n  Heads = 'Heads',\r\n  NeckAccessories = 'NeckAccessories',\r\n  Pants = 'Pants',\r\n  Shirts = 'Shirts',\r\n  ShoulderAccessories = 'ShoulderAccessories',\r\n  Tshirts = 'Tshirts',\r\n  WaistAccessories = 'WaistAccessories',\r\n  Bundles = 'Bundles',\r\n  AnimationBundles = 'AnimationBundles',\r\n  EmoteAnimations = 'EmoteAnimations',\r\n  CommunityCreations = 'CommunityCreations',\r\n  Melee = 'Melee',\r\n  Ranged = 'Ranged',\r\n  Explosive = 'Explosive',\r\n  PowerUp = 'PowerUp',\r\n  Navigation = 'Navigation',\r\n  Musical = 'Musical',\r\n  Social = 'Social',\r\n  Building = 'Building',\r\n  Transport = 'Transport',\r\n  Premium = 'Premium',\r\n  Recommended = 'Recommended'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n */\r\nexport interface RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64 {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  key?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  sortOrder?: RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64SortOrderEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  pagingDirection?: RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64PagingDirectionEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  pageNumber?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  discriminator?: string;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64\r\n   */\r\n  count?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64SortOrderEnum {\r\n  Asc = 'Asc',\r\n  Desc = 'Desc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPagingExclusiveStartKeyCursorSystemNullableSystemInt64PagingDirectionEnum {\r\n  Forward = 'Forward',\r\n  Backward = 'Backward'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance\r\n   */\r\n  SortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstanceSortOrderEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance\r\n   */\r\n  PagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstancePagingDirectionEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance\r\n   */\r\n  Count?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstanceSortOrderEnum {\r\n  Asc = 'Asc',\r\n  Desc = 'Desc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstancePagingDirectionEnum {\r\n  Forward = 'Forward',\r\n  Backward = 'Backward'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32 {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n   */\r\n  SortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32SortOrderEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n   */\r\n  PagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32PagingDirectionEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n   */\r\n  Count?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32SortOrderEnum {\r\n  Asc = 'Asc',\r\n  Desc = 'Desc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32PagingDirectionEnum {\r\n  Forward = 'Forward',\r\n  Backward = 'Backward'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64 {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n   */\r\n  SortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n   */\r\n  PagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n   */\r\n  Count?: number;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum {\r\n  Asc = 'Asc',\r\n  Desc = 'Desc'\r\n}\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum {\r\n  Forward = 'Forward',\r\n  Backward = 'Backward'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestRobloxPlatformBundlesCoreIBundleInstance\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestRobloxPlatformBundlesCoreIBundleInstance {\r\n  /**\r\n   *\r\n   * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestRobloxPlatformBundlesCoreIBundleInstance\r\n   */\r\n  ExclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoRobloxPlatformBundlesCoreIBundleInstance;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestRobloxPlatformBundlesCoreIBundleInstance\r\n   */\r\n  CursorRecipe?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestSystemInt32 {\r\n  /**\r\n   *\r\n   * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n   */\r\n  ExclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n   */\r\n  CursorRecipe?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestSystemInt64 {\r\n  /**\r\n   *\r\n   * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n   */\r\n  ExclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n   */\r\n  CursorRecipe?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiBundleDetailsModel>}\r\n   * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel\r\n   */\r\n  data?: Array<RobloxCatalogApiBundleDetailsModel>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiCatalogSearchDetailedResponseItem>}\r\n   * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n   */\r\n  data?: Array<RobloxCatalogApiCatalogSearchDetailedResponseItem>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel\r\n */\r\nexport interface RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiCatalogItemModel>}\r\n   * @memberof RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel\r\n   */\r\n  data?: Array<RobloxCatalogApiCatalogItemModel>;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel\r\n   */\r\n  total?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n */\r\nexport interface RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2 {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiRecommendationViewModelV2>}\r\n   * @memberof RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n   */\r\n  data?: Array<RobloxCatalogApiRecommendationViewModelV2>;\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n   */\r\n  total?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel\r\n */\r\nexport interface RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel\r\n   */\r\n  previousPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel\r\n   */\r\n  nextPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiBundleDetailsModel>}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel\r\n   */\r\n  data?: Array<RobloxCatalogApiBundleDetailsModel>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel\r\n */\r\nexport interface RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel\r\n   */\r\n  previousPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel\r\n   */\r\n  nextPageCursor?: string;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxCatalogApiOwnedBundleModel>}\r\n   * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel\r\n   */\r\n  data?: Array<RobloxCatalogApiOwnedBundleModel>;\r\n}\r\n\r\n/**\r\n * BundleApi - axios parameter creator\r\n * @export\r\n */\r\nexport const BundleApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.\r\n     * @param {number} assetId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetsAssetIdBundlesGet: async (\r\n      assetId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'assetId' is not null or undefined\r\n      if (assetId === null || assetId === undefined) {\r\n        throw new RequiredError(\r\n          'assetId',\r\n          'Required parameter assetId was null or undefined when calling v1AssetsAssetIdBundlesGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/assets/{assetId}/bundles`.replace(\r\n        `{${'assetId'}}`,\r\n        encodeURIComponent(String(assetId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (sortOrder !== undefined) {\r\n        localVarQueryParameter.sortOrder = sortOrder;\r\n      }\r\n\r\n      if (limit !== undefined) {\r\n        localVarQueryParameter.limit = limit;\r\n      }\r\n\r\n      if (cursor !== undefined) {\r\n        localVarQueryParameter.cursor = cursor;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleId.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdDetailsGet: async (\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1BundlesBundleIdDetailsGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/bundles/{bundleId}/details`.replace(\r\n        `{${'bundleId'}}`,\r\n        encodeURIComponent(String(bundleId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles  - Accepts both public and authenticated users\r\n     * @param {number} bundleId\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdRecommendationsGet: async (\r\n      bundleId: number,\r\n      numItems?: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1BundlesBundleIdRecommendationsGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/bundles/{bundleId}/recommendations`.replace(\r\n        `{${'bundleId'}}`,\r\n        encodeURIComponent(String(bundleId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (numItems !== undefined) {\r\n        localVarQueryParameter.numItems = numItems;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Unpacks a bundle and grants all of the associated items.  It may take a few seconds for all items to be granted after the request finishes.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdUnpackPost: async (\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1BundlesBundleIdUnpackPost.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/bundles/{bundleId}/unpack`.replace(\r\n        `{${'bundleId'}}`,\r\n        encodeURIComponent(String(bundleId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleIds.\r\n     * @param {Array<number>} bundleIds\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesDetailsGet: async (\r\n      bundleIds: Array<number>,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'bundleIds' is not null or undefined\r\n      if (bundleIds === null || bundleIds === undefined) {\r\n        throw new RequiredError(\r\n          'bundleIds',\r\n          'Required parameter bundleIds was null or undefined when calling v1BundlesDetailsGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/bundles/details`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (bundleIds) {\r\n        localVarQueryParameter.bundleIds = bundleIds.join(COLLECTION_FORMATS.csv);\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @param {number} userId\r\n     * @param {'BodyParts' | 'AvatarAnimations'} bundleType\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1UsersUserIdBundlesBundleTypeGet: async (\r\n      userId: number,\r\n      bundleType: 'BodyParts' | 'AvatarAnimations',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1UsersUserIdBundlesBundleTypeGet.'\r\n        );\r\n      }\r\n      // verify required parameter 'bundleType' is not null or undefined\r\n      if (bundleType === null || bundleType === undefined) {\r\n        throw new RequiredError(\r\n          'bundleType',\r\n          'Required parameter bundleType was null or undefined when calling v1UsersUserIdBundlesBundleTypeGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/users/{userId}/bundles/{bundleType}`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'bundleType'}}`, encodeURIComponent(String(bundleType)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (limit !== undefined) {\r\n        localVarQueryParameter.limit = limit;\r\n      }\r\n\r\n      if (cursor !== undefined) {\r\n        localVarQueryParameter.cursor = cursor;\r\n      }\r\n\r\n      if (sortOrder !== undefined) {\r\n        localVarQueryParameter.sortOrder = sortOrder;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists the bundles owned by a given user.\r\n     * @param {number} userId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] Sorted by bundle\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1UsersUserIdBundlesGet: async (\r\n      userId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1UsersUserIdBundlesGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/users/{userId}/bundles`.replace(\r\n        `{${'userId'}}`,\r\n        encodeURIComponent(String(userId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (sortOrder !== undefined) {\r\n        localVarQueryParameter.sortOrder = sortOrder;\r\n      }\r\n\r\n      if (limit !== undefined) {\r\n        localVarQueryParameter.limit = limit;\r\n      }\r\n\r\n      if (cursor !== undefined) {\r\n        localVarQueryParameter.cursor = cursor;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * BundleApi - functional programming interface\r\n * @export\r\n */\r\nexport const BundleApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.\r\n     * @param {number} assetId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1AssetsAssetIdBundlesGet(\r\n      assetId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1AssetsAssetIdBundlesGet(assetId, sortOrder, limit, cursor, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleId.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1BundlesBundleIdDetailsGet(\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxCatalogApiBundleDetailsModel>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1BundlesBundleIdDetailsGet(bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles  - Accepts both public and authenticated users\r\n     * @param {number} bundleId\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1BundlesBundleIdRecommendationsGet(\r\n      bundleId: number,\r\n      numItems?: number,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1BundlesBundleIdRecommendationsGet(bundleId, numItems, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Unpacks a bundle and grants all of the associated items.  It may take a few seconds for all items to be granted after the request finishes.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1BundlesBundleIdUnpackPost(\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1BundlesBundleIdUnpackPost(bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleIds.\r\n     * @param {Array<number>} bundleIds\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1BundlesDetailsGet(\r\n      bundleIds: Array<number>,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<Array<RobloxCatalogApiBundleDetailsModel>>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(configuration).v1BundlesDetailsGet(\r\n        bundleIds,\r\n        options\r\n      );\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @param {number} userId\r\n     * @param {'BodyParts' | 'AvatarAnimations'} bundleType\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1UsersUserIdBundlesBundleTypeGet(\r\n      userId: number,\r\n      bundleType: 'BodyParts' | 'AvatarAnimations',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1UsersUserIdBundlesBundleTypeGet(userId, bundleType, limit, cursor, sortOrder, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists the bundles owned by a given user.\r\n     * @param {number} userId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] Sorted by bundle\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1UsersUserIdBundlesGet(\r\n      userId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel>\r\n    > {\r\n      const localVarAxiosArgs = await BundleApiAxiosParamCreator(\r\n        configuration\r\n      ).v1UsersUserIdBundlesGet(userId, sortOrder, limit, cursor, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * BundleApi - factory interface\r\n * @export\r\n */\r\nexport const BundleApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.\r\n     * @param {number} assetId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetsAssetIdBundlesGet(\r\n      assetId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel> {\r\n      return BundleApiFp(configuration)\r\n        .v1AssetsAssetIdBundlesGet(assetId, sortOrder, limit, cursor, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleId.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdDetailsGet(\r\n      bundleId: number,\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiBundleDetailsModel> {\r\n      return BundleApiFp(configuration)\r\n        .v1BundlesBundleIdDetailsGet(bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles  - Accepts both public and authenticated users\r\n     * @param {number} bundleId\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdRecommendationsGet(\r\n      bundleId: number,\r\n      numItems?: number,\r\n      options?: any\r\n    ): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel> {\r\n      return BundleApiFp(configuration)\r\n        .v1BundlesBundleIdRecommendationsGet(bundleId, numItems, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Unpacks a bundle and grants all of the associated items.  It may take a few seconds for all items to be granted after the request finishes.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesBundleIdUnpackPost(bundleId: number, options?: any): AxiosPromise<void> {\r\n      return BundleApiFp(configuration)\r\n        .v1BundlesBundleIdUnpackPost(bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns details about the given bundleIds.\r\n     * @param {Array<number>} bundleIds\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1BundlesDetailsGet(\r\n      bundleIds: Array<number>,\r\n      options?: any\r\n    ): AxiosPromise<Array<RobloxCatalogApiBundleDetailsModel>> {\r\n      return BundleApiFp(configuration)\r\n        .v1BundlesDetailsGet(bundleIds, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @param {number} userId\r\n     * @param {'BodyParts' | 'AvatarAnimations'} bundleType\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1UsersUserIdBundlesBundleTypeGet(\r\n      userId: number,\r\n      bundleType: 'BodyParts' | 'AvatarAnimations',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      options?: any\r\n    ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel> {\r\n      return BundleApiFp(configuration)\r\n        .v1UsersUserIdBundlesBundleTypeGet(userId, bundleType, limit, cursor, sortOrder, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists the bundles owned by a given user.\r\n     * @param {number} userId\r\n     * @param {'Asc' | 'Desc'} [sortOrder] Sorted by bundle\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1UsersUserIdBundlesGet(\r\n      userId: number,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 25 | 50 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel> {\r\n      return BundleApiFp(configuration)\r\n        .v1UsersUserIdBundlesGet(userId, sortOrder, limit, cursor, options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * BundleApi - interface\r\n * @export\r\n * @interface BundleApi\r\n */\r\nexport interface BundleApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.\r\n   * @param {number} assetId\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1AssetsAssetIdBundlesGet(\r\n    assetId: number,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiBundleDetailsModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Returns details about the given bundleId.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1BundlesBundleIdDetailsGet(\r\n    bundleId: number,\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiBundleDetailsModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles  - Accepts both public and authenticated users\r\n   * @param {number} bundleId\r\n   * @param {number} [numItems] The number of recommended items to return.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1BundlesBundleIdRecommendationsGet(\r\n    bundleId: number,\r\n    numItems?: number,\r\n    options?: any\r\n  ): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Unpacks a bundle and grants all of the associated items.  It may take a few seconds for all items to be granted after the request finishes.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1BundlesBundleIdUnpackPost(bundleId: number, options?: any): AxiosPromise<void>;\r\n\r\n  /**\r\n   *\r\n   * @summary Returns details about the given bundleIds.\r\n   * @param {Array<number>} bundleIds\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1BundlesDetailsGet(\r\n    bundleIds: Array<number>,\r\n    options?: any\r\n  ): AxiosPromise<Array<RobloxCatalogApiBundleDetailsModel>>;\r\n\r\n  /**\r\n   *\r\n   * @param {number} userId\r\n   * @param {'BodyParts' | 'AvatarAnimations'} bundleType\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1UsersUserIdBundlesBundleTypeGet(\r\n    userId: number,\r\n    bundleType: 'BodyParts' | 'AvatarAnimations',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    options?: any\r\n  ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Lists the bundles owned by a given user.\r\n   * @param {number} userId\r\n   * @param {'Asc' | 'Desc'} [sortOrder] Sorted by bundle\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApiInterface\r\n   */\r\n  v1UsersUserIdBundlesGet(\r\n    userId: number,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxCatalogApiOwnedBundleModel>;\r\n}\r\n\r\n/**\r\n * BundleApi - object-oriented interface\r\n * @export\r\n * @class BundleApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class BundleApi extends BaseAPI implements BundleApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists the bundles a particular asset belongs to. Use the Id of the last bundle in the response to get the next page.\r\n   * @param {number} assetId\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1AssetsAssetIdBundlesGet(\r\n    assetId: number,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1AssetsAssetIdBundlesGet(assetId, sortOrder, limit, cursor, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Returns details about the given bundleId.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1BundlesBundleIdDetailsGet(bundleId: number, options?: any) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1BundlesBundleIdDetailsGet(bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Gets recommendations for a given bundle, bundleId of 0 returns randomized bundles  - Accepts both public and authenticated users\r\n   * @param {number} bundleId\r\n   * @param {number} [numItems] The number of recommended items to return.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1BundlesBundleIdRecommendationsGet(bundleId: number, numItems?: number, options?: any) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1BundlesBundleIdRecommendationsGet(bundleId, numItems, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Unpacks a bundle and grants all of the associated items.  It may take a few seconds for all items to be granted after the request finishes.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1BundlesBundleIdUnpackPost(bundleId: number, options?: any) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1BundlesBundleIdUnpackPost(bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Returns details about the given bundleIds.\r\n   * @param {Array<number>} bundleIds\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1BundlesDetailsGet(bundleIds: Array<number>, options?: any) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1BundlesDetailsGet(bundleIds, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} userId\r\n   * @param {'BodyParts' | 'AvatarAnimations'} bundleType\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1UsersUserIdBundlesBundleTypeGet(\r\n    userId: number,\r\n    bundleType: 'BodyParts' | 'AvatarAnimations',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    options?: any\r\n  ) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1UsersUserIdBundlesBundleTypeGet(userId, bundleType, limit, cursor, sortOrder, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Lists the bundles owned by a given user.\r\n   * @param {number} userId\r\n   * @param {'Asc' | 'Desc'} [sortOrder] Sorted by bundle\r\n   * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof BundleApi\r\n   */\r\n  public v1UsersUserIdBundlesGet(\r\n    userId: number,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 25 | 50 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ) {\r\n    return BundleApiFp(this.configuration)\r\n      .v1UsersUserIdBundlesGet(userId, sortOrder, limit, cursor, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * CatalogApi - axios parameter creator\r\n * @export\r\n */\r\nexport const CatalogApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Returns list of item details\r\n     * @param {RobloxCatalogApiMultigetItemDetailsRequestModel} model {Roblox.Catalog.Api.MultigetItemDetailsRequestModel}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogItemsDetailsPost: async (\r\n      model: RobloxCatalogApiMultigetItemDetailsRequestModel,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'model' is not null or undefined\r\n      if (model === null || model === undefined) {\r\n        throw new RequiredError(\r\n          'model',\r\n          'Required parameter model was null or undefined when calling v1CatalogItemsDetailsPost.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/catalog/items/details`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n      const needsSerialization =\r\n        typeof model !== 'string' ||\r\n        localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n      localVarRequestOptions.data = needsSerialization\r\n        ? JSON.stringify(model !== undefined ? model : {})\r\n        : model || '';\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog item details, complete with user ownership and economy information\r\n     * @param {number} itemId long, id of the asset or bundle\r\n     * @param {string} itemType String, asset or bundle only\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogItemsItemIdDetailsGet: async (\r\n      itemId: number,\r\n      itemType: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'itemId' is not null or undefined\r\n      if (itemId === null || itemId === undefined) {\r\n        throw new RequiredError(\r\n          'itemId',\r\n          'Required parameter itemId was null or undefined when calling v1CatalogItemsItemIdDetailsGet.'\r\n        );\r\n      }\r\n      // verify required parameter 'itemType' is not null or undefined\r\n      if (itemType === null || itemType === undefined) {\r\n        throw new RequiredError(\r\n          'itemType',\r\n          'Required parameter itemType was null or undefined when calling v1CatalogItemsItemIdDetailsGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/catalog/items/{itemId}/details`.replace(\r\n        `{${'itemId'}}`,\r\n        encodeURIComponent(String(itemId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (itemType !== undefined) {\r\n        localVarQueryParameter.itemType = itemType;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/catalog/metadata`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog sorts\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogSortsGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/catalog/sorts`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CatalogApi - functional programming interface\r\n * @export\r\n */\r\nexport const CatalogApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Returns list of item details\r\n     * @param {RobloxCatalogApiMultigetItemDetailsRequestModel} model {Roblox.Catalog.Api.MultigetItemDetailsRequestModel}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1CatalogItemsDetailsPost(\r\n      model: RobloxCatalogApiMultigetItemDetailsRequestModel,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<\r\n        RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n      >\r\n    > {\r\n      const localVarAxiosArgs = await CatalogApiAxiosParamCreator(\r\n        configuration\r\n      ).v1CatalogItemsDetailsPost(model, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog item details, complete with user ownership and economy information\r\n     * @param {number} itemId long, id of the asset or bundle\r\n     * @param {string} itemType String, asset or bundle only\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1CatalogItemsItemIdDetailsGet(\r\n      itemId: number,\r\n      itemType: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem>\r\n    > {\r\n      const localVarAxiosArgs = await CatalogApiAxiosParamCreator(\r\n        configuration\r\n      ).v1CatalogItemsItemIdDetailsGet(itemId, itemType, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1CatalogMetadataGet(\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiCatalogMetadataModel>\r\n    > {\r\n      const localVarAxiosArgs = await CatalogApiAxiosParamCreator(\r\n        configuration\r\n      ).v1CatalogMetadataGet(options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog sorts\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1CatalogSortsGet(\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiCatalogSortsResponseModel>\r\n    > {\r\n      const localVarAxiosArgs = await CatalogApiAxiosParamCreator(configuration).v1CatalogSortsGet(\r\n        options\r\n      );\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CatalogApi - factory interface\r\n * @export\r\n */\r\nexport const CatalogApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Returns list of item details\r\n     * @param {RobloxCatalogApiMultigetItemDetailsRequestModel} model {Roblox.Catalog.Api.MultigetItemDetailsRequestModel}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogItemsDetailsPost(\r\n      model: RobloxCatalogApiMultigetItemDetailsRequestModel,\r\n      options?: any\r\n    ): AxiosPromise<\r\n      RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n    > {\r\n      return CatalogApiFp(configuration)\r\n        .v1CatalogItemsDetailsPost(model, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog item details, complete with user ownership and economy information\r\n     * @param {number} itemId long, id of the asset or bundle\r\n     * @param {string} itemType String, asset or bundle only\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogItemsItemIdDetailsGet(\r\n      itemId: number,\r\n      itemType: string,\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem> {\r\n      return CatalogApiFp(configuration)\r\n        .v1CatalogItemsItemIdDetailsGet(itemId, itemType, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogMetadataGet(options?: any): AxiosPromise<RobloxCatalogApiCatalogMetadataModel> {\r\n      return CatalogApiFp(configuration)\r\n        .v1CatalogMetadataGet(options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Returns catalog sorts\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CatalogSortsGet(options?: any): AxiosPromise<RobloxCatalogApiCatalogSortsResponseModel> {\r\n      return CatalogApiFp(configuration)\r\n        .v1CatalogSortsGet(options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CatalogApi - interface\r\n * @export\r\n * @interface CatalogApi\r\n */\r\nexport interface CatalogApiInterface {\r\n  /**\r\n   *\r\n   * @summary Returns list of item details\r\n   * @param {RobloxCatalogApiMultigetItemDetailsRequestModel} model {Roblox.Catalog.Api.MultigetItemDetailsRequestModel}\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApiInterface\r\n   */\r\n  v1CatalogItemsDetailsPost(\r\n    model: RobloxCatalogApiMultigetItemDetailsRequestModel,\r\n    options?: any\r\n  ): AxiosPromise<\r\n    RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n  >;\r\n\r\n  /**\r\n   *\r\n   * @summary Returns catalog item details, complete with user ownership and economy information\r\n   * @param {number} itemId long, id of the asset or bundle\r\n   * @param {string} itemType String, asset or bundle only\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApiInterface\r\n   */\r\n  v1CatalogItemsItemIdDetailsGet(\r\n    itemId: number,\r\n    itemType: string,\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiCatalogSearchDetailedCompleteResponseItem>;\r\n\r\n  /**\r\n   *\r\n   * @summary Return Metadata for Catalog Webpage\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApiInterface\r\n   */\r\n  v1CatalogMetadataGet(options?: any): AxiosPromise<RobloxCatalogApiCatalogMetadataModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Returns catalog sorts\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApiInterface\r\n   */\r\n  v1CatalogSortsGet(options?: any): AxiosPromise<RobloxCatalogApiCatalogSortsResponseModel>;\r\n}\r\n\r\n/**\r\n * CatalogApi - object-oriented interface\r\n * @export\r\n * @class CatalogApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class CatalogApi extends BaseAPI implements CatalogApiInterface {\r\n  /**\r\n   *\r\n   * @summary Returns list of item details\r\n   * @param {RobloxCatalogApiMultigetItemDetailsRequestModel} model {Roblox.Catalog.Api.MultigetItemDetailsRequestModel}\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApi\r\n   */\r\n  public v1CatalogItemsDetailsPost(\r\n    model: RobloxCatalogApiMultigetItemDetailsRequestModel,\r\n    options?: any\r\n  ) {\r\n    return CatalogApiFp(this.configuration)\r\n      .v1CatalogItemsDetailsPost(model, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Returns catalog item details, complete with user ownership and economy information\r\n   * @param {number} itemId long, id of the asset or bundle\r\n   * @param {string} itemType String, asset or bundle only\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApi\r\n   */\r\n  public v1CatalogItemsItemIdDetailsGet(itemId: number, itemType: string, options?: any) {\r\n    return CatalogApiFp(this.configuration)\r\n      .v1CatalogItemsItemIdDetailsGet(itemId, itemType, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Return Metadata for Catalog Webpage\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApi\r\n   */\r\n  public v1CatalogMetadataGet(options?: any) {\r\n    return CatalogApiFp(this.configuration)\r\n      .v1CatalogMetadataGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Returns catalog sorts\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CatalogApi\r\n   */\r\n  public v1CatalogSortsGet(options?: any) {\r\n    return CatalogApiFp(this.configuration)\r\n      .v1CatalogSortsGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * CategoryApi - axios parameter creator\r\n * @export\r\n */\r\nexport const CategoryApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetToCategoryGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/asset-to-category`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetToSubcategoryGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/asset-to-subcategory`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Category Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CategoriesGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/categories`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Subcategory Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SubcategoriesGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/subcategories`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CategoryApi - functional programming interface\r\n * @export\r\n */\r\nexport const CategoryApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1AssetToCategoryGet(\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: number }>\r\n    > {\r\n      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(\r\n        configuration\r\n      ).v1AssetToCategoryGet(options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1AssetToSubcategoryGet(\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: number }>\r\n    > {\r\n      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(\r\n        configuration\r\n      ).v1AssetToSubcategoryGet(options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Category Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1CategoriesGet(\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: number }>\r\n    > {\r\n      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(configuration).v1CategoriesGet(\r\n        options\r\n      );\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Subcategory Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1SubcategoriesGet(\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: number }>\r\n    > {\r\n      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(\r\n        configuration\r\n      ).v1SubcategoriesGet(options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CategoryApi - factory interface\r\n * @export\r\n */\r\nexport const CategoryApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetToCategoryGet(options?: any): AxiosPromise<{ [key: string]: number }> {\r\n      return CategoryApiFp(configuration)\r\n        .v1AssetToCategoryGet(options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1AssetToSubcategoryGet(options?: any): AxiosPromise<{ [key: string]: number }> {\r\n      return CategoryApiFp(configuration)\r\n        .v1AssetToSubcategoryGet(options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Category Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1CategoriesGet(options?: any): AxiosPromise<{ [key: string]: number }> {\r\n      return CategoryApiFp(configuration)\r\n        .v1CategoriesGet(options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Lists Subcategory Names and their Ids\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SubcategoriesGet(options?: any): AxiosPromise<{ [key: string]: number }> {\r\n      return CategoryApiFp(configuration)\r\n        .v1SubcategoriesGet(options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * CategoryApi - interface\r\n * @export\r\n * @interface CategoryApi\r\n */\r\nexport interface CategoryApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApiInterface\r\n   */\r\n  v1AssetToCategoryGet(options?: any): AxiosPromise<{ [key: string]: number }>;\r\n\r\n  /**\r\n   *\r\n   * @summary Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApiInterface\r\n   */\r\n  v1AssetToSubcategoryGet(options?: any): AxiosPromise<{ [key: string]: number }>;\r\n\r\n  /**\r\n   *\r\n   * @summary Lists Category Names and their Ids\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApiInterface\r\n   */\r\n  v1CategoriesGet(options?: any): AxiosPromise<{ [key: string]: number }>;\r\n\r\n  /**\r\n   *\r\n   * @summary Lists Subcategory Names and their Ids\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApiInterface\r\n   */\r\n  v1SubcategoriesGet(options?: any): AxiosPromise<{ [key: string]: number }>;\r\n}\r\n\r\n/**\r\n * CategoryApi - object-oriented interface\r\n * @export\r\n * @class CategoryApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class CategoryApi extends BaseAPI implements CategoryApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists a mapping for assets to category IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApi\r\n   */\r\n  public v1AssetToCategoryGet(options?: any) {\r\n    return CategoryApiFp(this.configuration)\r\n      .v1AssetToCategoryGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Lists a mapping for assets to subcategory IDs to convert from inventory ID to catalog ID. Creates a mapping to link \\'Get More\\' button in inventory page to the relevant catalog page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApi\r\n   */\r\n  public v1AssetToSubcategoryGet(options?: any) {\r\n    return CategoryApiFp(this.configuration)\r\n      .v1AssetToSubcategoryGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Lists Category Names and their Ids\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApi\r\n   */\r\n  public v1CategoriesGet(options?: any) {\r\n    return CategoryApiFp(this.configuration)\r\n      .v1CategoriesGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Lists Subcategory Names and their Ids\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof CategoryApi\r\n   */\r\n  public v1SubcategoriesGet(options?: any) {\r\n    return CategoryApiFp(this.configuration)\r\n      .v1SubcategoriesGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * ExclusiveItemsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const ExclusiveItemsApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the exclusive catalog items for a particular app store.\r\n     * @param {'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox'} appStoreType\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1ExclusiveItemsAppStoreTypeBundlesGet: async (\r\n      appStoreType: 'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox',\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'appStoreType' is not null or undefined\r\n      if (appStoreType === null || appStoreType === undefined) {\r\n        throw new RequiredError(\r\n          'appStoreType',\r\n          'Required parameter appStoreType was null or undefined when calling v1ExclusiveItemsAppStoreTypeBundlesGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/exclusive-items/{appStoreType}/bundles`.replace(\r\n        `{${'appStoreType'}}`,\r\n        encodeURIComponent(String(appStoreType))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * ExclusiveItemsApi - functional programming interface\r\n * @export\r\n */\r\nexport const ExclusiveItemsApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the exclusive catalog items for a particular app store.\r\n     * @param {'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox'} appStoreType\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1ExclusiveItemsAppStoreTypeBundlesGet(\r\n      appStoreType: 'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox',\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel>\r\n    > {\r\n      const localVarAxiosArgs = await ExclusiveItemsApiAxiosParamCreator(\r\n        configuration\r\n      ).v1ExclusiveItemsAppStoreTypeBundlesGet(appStoreType, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * ExclusiveItemsApi - factory interface\r\n * @export\r\n */\r\nexport const ExclusiveItemsApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Lists the exclusive catalog items for a particular app store.\r\n     * @param {'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox'} appStoreType\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1ExclusiveItemsAppStoreTypeBundlesGet(\r\n      appStoreType: 'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox',\r\n      options?: any\r\n    ): AxiosPromise<RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel> {\r\n      return ExclusiveItemsApiFp(configuration)\r\n        .v1ExclusiveItemsAppStoreTypeBundlesGet(appStoreType, options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * ExclusiveItemsApi - interface\r\n * @export\r\n * @interface ExclusiveItemsApi\r\n */\r\nexport interface ExclusiveItemsApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists the exclusive catalog items for a particular app store.\r\n   * @param {'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox'} appStoreType\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof ExclusiveItemsApiInterface\r\n   */\r\n  v1ExclusiveItemsAppStoreTypeBundlesGet(\r\n    appStoreType: 'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox',\r\n    options?: any\r\n  ): AxiosPromise<RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiCatalogItemModel>;\r\n}\r\n\r\n/**\r\n * ExclusiveItemsApi - object-oriented interface\r\n * @export\r\n * @class ExclusiveItemsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class ExclusiveItemsApi extends BaseAPI implements ExclusiveItemsApiInterface {\r\n  /**\r\n   *\r\n   * @summary Lists the exclusive catalog items for a particular app store.\r\n   * @param {'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox'} appStoreType\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof ExclusiveItemsApi\r\n   */\r\n  public v1ExclusiveItemsAppStoreTypeBundlesGet(\r\n    appStoreType: 'GooglePlay' | 'Amazon' | 'iOS' | 'Xbox',\r\n    options?: any\r\n  ) {\r\n    return ExclusiveItemsApiFp(this.configuration)\r\n      .v1ExclusiveItemsAppStoreTypeBundlesGet(appStoreType, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * FavoritesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const FavoritesApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given asset Id.\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesAssetsAssetIdCountGet: async (\r\n      assetId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'assetId' is not null or undefined\r\n      if (assetId === null || assetId === undefined) {\r\n        throw new RequiredError(\r\n          'assetId',\r\n          'Required parameter assetId was null or undefined when calling v1FavoritesAssetsAssetIdCountGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/assets/{assetId}/count`.replace(\r\n        `{${'assetId'}}`,\r\n        encodeURIComponent(String(assetId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given bundle Id.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesBundlesBundleIdCountGet: async (\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1FavoritesBundlesBundleIdCountGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/bundles/{bundleId}/count`.replace(\r\n        `{${'bundleId'}}`,\r\n        encodeURIComponent(String(bundleId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete: async (\r\n      userId: number,\r\n      assetId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete.'\r\n        );\r\n      }\r\n      // verify required parameter 'assetId' is not null or undefined\r\n      if (assetId === null || assetId === undefined) {\r\n        throw new RequiredError(\r\n          'assetId',\r\n          'Required parameter assetId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/assets/{assetId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the asset and user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet: async (\r\n      userId: number,\r\n      assetId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet.'\r\n        );\r\n      }\r\n      // verify required parameter 'assetId' is not null or undefined\r\n      if (assetId === null || assetId === undefined) {\r\n        throw new RequiredError(\r\n          'assetId',\r\n          'Required parameter assetId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/assets/{assetId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoritePost: async (\r\n      userId: number,\r\n      assetId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoritePost.'\r\n        );\r\n      }\r\n      // verify required parameter 'assetId' is not null or undefined\r\n      if (assetId === null || assetId === undefined) {\r\n        throw new RequiredError(\r\n          'assetId',\r\n          'Required parameter assetId was null or undefined when calling v1FavoritesUsersUserIdAssetsAssetIdFavoritePost.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/assets/{assetId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete: async (\r\n      userId: number,\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete.'\r\n        );\r\n      }\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/bundles/{bundleId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'bundleId'}}`, encodeURIComponent(String(bundleId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the bundle and user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet: async (\r\n      userId: number,\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet.'\r\n        );\r\n      }\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/bundles/{bundleId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'bundleId'}}`, encodeURIComponent(String(bundleId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoritePost: async (\r\n      userId: number,\r\n      bundleId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'userId' is not null or undefined\r\n      if (userId === null || userId === undefined) {\r\n        throw new RequiredError(\r\n          'userId',\r\n          'Required parameter userId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoritePost.'\r\n        );\r\n      }\r\n      // verify required parameter 'bundleId' is not null or undefined\r\n      if (bundleId === null || bundleId === undefined) {\r\n        throw new RequiredError(\r\n          'bundleId',\r\n          'Required parameter bundleId was null or undefined when calling v1FavoritesUsersUserIdBundlesBundleIdFavoritePost.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/favorites/users/{userId}/bundles/{bundleId}/favorite`\r\n        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))\r\n        .replace(`{${'bundleId'}}`, encodeURIComponent(String(bundleId)));\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * FavoritesApi - functional programming interface\r\n * @export\r\n */\r\nexport const FavoritesApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given asset Id.\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesAssetsAssetIdCountGet(\r\n      assetId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesAssetsAssetIdCountGet(assetId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given bundle Id.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesBundlesBundleIdCountGet(\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesBundlesBundleIdCountGet(bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(userId, assetId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the asset and user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): Promise<\r\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxCatalogApiAssetFavoriteModel>\r\n    > {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(userId, assetId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(userId, assetId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(userId, bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the bundle and user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiBundleFavoriteModel>\r\n    > {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(userId, bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n      const localVarAxiosArgs = await FavoritesApiAxiosParamCreator(\r\n        configuration\r\n      ).v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(userId, bundleId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * FavoritesApi - factory interface\r\n * @export\r\n */\r\nexport const FavoritesApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given asset Id.\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesAssetsAssetIdCountGet(assetId: number, options?: any): AxiosPromise<number> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesAssetsAssetIdCountGet(assetId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite count for the given bundle Id.\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesBundlesBundleIdCountGet(bundleId: number, options?: any): AxiosPromise<number> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesBundlesBundleIdCountGet(bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): AxiosPromise<object> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(userId, assetId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the asset and user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiAssetFavoriteModel> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(userId, assetId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for an asset by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} assetId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(\r\n      userId: number,\r\n      assetId: number,\r\n      options?: any\r\n    ): AxiosPromise<object> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(userId, assetId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Delete favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): AxiosPromise<object> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(userId, bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Gets the favorite model for the bundle and user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiBundleFavoriteModel> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(userId, bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Create a favorite for the bundle by the authenticated user.\r\n     * @param {number} userId\r\n     * @param {number} bundleId\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(\r\n      userId: number,\r\n      bundleId: number,\r\n      options?: any\r\n    ): AxiosPromise<object> {\r\n      return FavoritesApiFp(configuration)\r\n        .v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(userId, bundleId, options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * FavoritesApi - interface\r\n * @export\r\n * @interface FavoritesApi\r\n */\r\nexport interface FavoritesApiInterface {\r\n  /**\r\n   *\r\n   * @summary Gets the favorite count for the given asset Id.\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesAssetsAssetIdCountGet(assetId: number, options?: any): AxiosPromise<number>;\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite count for the given bundle Id.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesBundlesBundleIdCountGet(bundleId: number, options?: any): AxiosPromise<number>;\r\n\r\n  /**\r\n   *\r\n   * @summary Delete a favorite for an asset by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ): AxiosPromise<object>;\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite model for the asset and user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiAssetFavoriteModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Create a favorite for an asset by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ): AxiosPromise<object>;\r\n\r\n  /**\r\n   *\r\n   * @summary Delete favorite for the bundle by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ): AxiosPromise<object>;\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite model for the bundle and user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiBundleFavoriteModel>;\r\n\r\n  /**\r\n   *\r\n   * @summary Create a favorite for the bundle by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApiInterface\r\n   */\r\n  v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ): AxiosPromise<object>;\r\n}\r\n\r\n/**\r\n * FavoritesApi - object-oriented interface\r\n * @export\r\n * @class FavoritesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class FavoritesApi extends BaseAPI implements FavoritesApiInterface {\r\n  /**\r\n   *\r\n   * @summary Gets the favorite count for the given asset Id.\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesAssetsAssetIdCountGet(assetId: number, options?: any) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesAssetsAssetIdCountGet(assetId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite count for the given bundle Id.\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesBundlesBundleIdCountGet(bundleId: number, options?: any) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesBundlesBundleIdCountGet(bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Delete a favorite for an asset by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdAssetsAssetIdFavoriteDelete(userId, assetId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite model for the asset and user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdAssetsAssetIdFavoriteGet(userId, assetId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Create a favorite for an asset by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} assetId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(\r\n    userId: number,\r\n    assetId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdAssetsAssetIdFavoritePost(userId, assetId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Delete favorite for the bundle by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdBundlesBundleIdFavoriteDelete(userId, bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Gets the favorite model for the bundle and user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdBundlesBundleIdFavoriteGet(userId, bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Create a favorite for the bundle by the authenticated user.\r\n   * @param {number} userId\r\n   * @param {number} bundleId\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof FavoritesApi\r\n   */\r\n  public v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(\r\n    userId: number,\r\n    bundleId: number,\r\n    options?: any\r\n  ) {\r\n    return FavoritesApiFp(this.configuration)\r\n      .v1FavoritesUsersUserIdBundlesBundleIdFavoritePost(userId, bundleId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * RecommendationsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const RecommendationsApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets a list of recommended assets, given an asset type  - Migrated from Inventory.Api, functional similarity preserved\r\n     * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {number} [contextAssetId] Optional asset id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1RecommendationsAssetAssetTypeIdGet: async (\r\n      assetTypeId: number,\r\n      numItems?: number,\r\n      contextAssetId?: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'assetTypeId' is not null or undefined\r\n      if (assetTypeId === null || assetTypeId === undefined) {\r\n        throw new RequiredError(\r\n          'assetTypeId',\r\n          'Required parameter assetTypeId was null or undefined when calling v1RecommendationsAssetAssetTypeIdGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v1/recommendations/asset/{assetTypeId}`.replace(\r\n        `{${'assetTypeId'}}`,\r\n        encodeURIComponent(String(assetTypeId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (numItems !== undefined) {\r\n        localVarQueryParameter.numItems = numItems;\r\n      }\r\n\r\n      if (contextAssetId !== undefined) {\r\n        localVarQueryParameter.contextAssetId = contextAssetId;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Recommendations Component based on the page it is used on\r\n     * @param {string} [page]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1RecommendationsMetadataGet: async (\r\n      page?: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/recommendations/metadata`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (page !== undefined) {\r\n        localVarQueryParameter.page = page;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * RecommendationsApi - functional programming interface\r\n * @export\r\n */\r\nexport const RecommendationsApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets a list of recommended assets, given an asset type  - Migrated from Inventory.Api, functional similarity preserved\r\n     * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {number} [contextAssetId] Optional asset id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1RecommendationsAssetAssetTypeIdGet(\r\n      assetTypeId: number,\r\n      numItems?: number,\r\n      contextAssetId?: number,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<\r\n        RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n      >\r\n    > {\r\n      const localVarAxiosArgs = await RecommendationsApiAxiosParamCreator(\r\n        configuration\r\n      ).v1RecommendationsAssetAssetTypeIdGet(assetTypeId, numItems, contextAssetId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Recommendations Component based on the page it is used on\r\n     * @param {string} [page]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1RecommendationsMetadataGet(\r\n      page?: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiRecommendationsMetadataModel>\r\n    > {\r\n      const localVarAxiosArgs = await RecommendationsApiAxiosParamCreator(\r\n        configuration\r\n      ).v1RecommendationsMetadataGet(page, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * RecommendationsApi - factory interface\r\n * @export\r\n */\r\nexport const RecommendationsApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Gets a list of recommended assets, given an asset type  - Migrated from Inventory.Api, functional similarity preserved\r\n     * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {number} [contextAssetId] Optional asset id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1RecommendationsAssetAssetTypeIdGet(\r\n      assetTypeId: number,\r\n      numItems?: number,\r\n      contextAssetId?: number,\r\n      options?: any\r\n    ): AxiosPromise<\r\n      RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n    > {\r\n      return RecommendationsApiFp(configuration)\r\n        .v1RecommendationsAssetAssetTypeIdGet(assetTypeId, numItems, contextAssetId, options)\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Metadata for Recommendations Component based on the page it is used on\r\n     * @param {string} [page]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1RecommendationsMetadataGet(\r\n      page?: string,\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiRecommendationsMetadataModel> {\r\n      return RecommendationsApiFp(configuration)\r\n        .v1RecommendationsMetadataGet(page, options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * RecommendationsApi - interface\r\n * @export\r\n * @interface RecommendationsApi\r\n */\r\nexport interface RecommendationsApiInterface {\r\n  /**\r\n   *\r\n   * @summary Gets a list of recommended assets, given an asset type  - Migrated from Inventory.Api, functional similarity preserved\r\n   * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n   * @param {number} [numItems] The number of recommended items to return.\r\n   * @param {number} [contextAssetId] Optional asset id\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof RecommendationsApiInterface\r\n   */\r\n  v1RecommendationsAssetAssetTypeIdGet(\r\n    assetTypeId: number,\r\n    numItems?: number,\r\n    contextAssetId?: number,\r\n    options?: any\r\n  ): AxiosPromise<\r\n    RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2\r\n  >;\r\n\r\n  /**\r\n   *\r\n   * @summary Return Metadata for Recommendations Component based on the page it is used on\r\n   * @param {string} [page]\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof RecommendationsApiInterface\r\n   */\r\n  v1RecommendationsMetadataGet(\r\n    page?: string,\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiRecommendationsMetadataModel>;\r\n}\r\n\r\n/**\r\n * RecommendationsApi - object-oriented interface\r\n * @export\r\n * @class RecommendationsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class RecommendationsApi extends BaseAPI implements RecommendationsApiInterface {\r\n  /**\r\n   *\r\n   * @summary Gets a list of recommended assets, given an asset type  - Migrated from Inventory.Api, functional similarity preserved\r\n   * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n   * @param {number} [numItems] The number of recommended items to return.\r\n   * @param {number} [contextAssetId] Optional asset id\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof RecommendationsApi\r\n   */\r\n  public v1RecommendationsAssetAssetTypeIdGet(\r\n    assetTypeId: number,\r\n    numItems?: number,\r\n    contextAssetId?: number,\r\n    options?: any\r\n  ) {\r\n    return RecommendationsApiFp(this.configuration)\r\n      .v1RecommendationsAssetAssetTypeIdGet(assetTypeId, numItems, contextAssetId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Return Metadata for Recommendations Component based on the page it is used on\r\n   * @param {string} [page]\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof RecommendationsApi\r\n   */\r\n  public v1RecommendationsMetadataGet(page?: string, options?: any) {\r\n    return RecommendationsApiFp(this.configuration)\r\n      .v1RecommendationsMetadataGet(page, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n\r\n/**\r\n * SearchApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SearchApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog items\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchItemsDetailsGet: async (\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30,\r\n      cursor?: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/search/items/details`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (modelCategory !== undefined) {\r\n        localVarQueryParameter['model.category'] = modelCategory;\r\n      }\r\n\r\n      if (modelSubcategory !== undefined) {\r\n        localVarQueryParameter['model.subcategory'] = modelSubcategory;\r\n      }\r\n\r\n      if (modelSortAggregation !== undefined) {\r\n        localVarQueryParameter['model.sortAggregation'] = modelSortAggregation;\r\n      }\r\n\r\n      if (modelSortCurrency !== undefined) {\r\n        localVarQueryParameter['model.sortCurrency'] = modelSortCurrency;\r\n      }\r\n\r\n      if (modelGenres) {\r\n        localVarQueryParameter['model.genres'] = modelGenres;\r\n      }\r\n\r\n      if (modelSortType !== undefined) {\r\n        localVarQueryParameter['model.sortType'] = modelSortType;\r\n      }\r\n\r\n      if (modelCreatorType !== undefined) {\r\n        localVarQueryParameter['model.creatorType'] = modelCreatorType;\r\n      }\r\n\r\n      if (modelCreatorTargetId !== undefined) {\r\n        localVarQueryParameter['model.creatorTargetId'] = modelCreatorTargetId;\r\n      }\r\n\r\n      if (modelCreatorName !== undefined) {\r\n        localVarQueryParameter['model.creatorName'] = modelCreatorName;\r\n      }\r\n\r\n      if (modelMaxPrice !== undefined) {\r\n        localVarQueryParameter['model.maxPrice'] = modelMaxPrice;\r\n      }\r\n\r\n      if (modelMinPrice !== undefined) {\r\n        localVarQueryParameter['model.minPrice'] = modelMinPrice;\r\n      }\r\n\r\n      if (modelKeyword !== undefined) {\r\n        localVarQueryParameter['model.keyword'] = modelKeyword;\r\n      }\r\n\r\n      if (modelIncludeNotForSale !== undefined) {\r\n        localVarQueryParameter['model.includeNotForSale'] = modelIncludeNotForSale;\r\n      }\r\n\r\n      if (modelTagNames) {\r\n        localVarQueryParameter['model.tagNames'] = modelTagNames;\r\n      }\r\n\r\n      if (sortOrder !== undefined) {\r\n        localVarQueryParameter.sortOrder = sortOrder;\r\n      }\r\n\r\n      if (limit !== undefined) {\r\n        localVarQueryParameter.limit = limit;\r\n      }\r\n\r\n      if (cursor !== undefined) {\r\n        localVarQueryParameter.cursor = cursor;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog item ids\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30 | 50 | 60 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchItemsGet: async (\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30 | 50 | 60 | 100,\r\n      cursor?: string,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/search/items`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      if (modelCategory !== undefined) {\r\n        localVarQueryParameter['model.category'] = modelCategory;\r\n      }\r\n\r\n      if (modelSubcategory !== undefined) {\r\n        localVarQueryParameter['model.subcategory'] = modelSubcategory;\r\n      }\r\n\r\n      if (modelSortAggregation !== undefined) {\r\n        localVarQueryParameter['model.sortAggregation'] = modelSortAggregation;\r\n      }\r\n\r\n      if (modelSortCurrency !== undefined) {\r\n        localVarQueryParameter['model.sortCurrency'] = modelSortCurrency;\r\n      }\r\n\r\n      if (modelGenres) {\r\n        localVarQueryParameter['model.genres'] = modelGenres;\r\n      }\r\n\r\n      if (modelSortType !== undefined) {\r\n        localVarQueryParameter['model.sortType'] = modelSortType;\r\n      }\r\n\r\n      if (modelCreatorType !== undefined) {\r\n        localVarQueryParameter['model.creatorType'] = modelCreatorType;\r\n      }\r\n\r\n      if (modelCreatorTargetId !== undefined) {\r\n        localVarQueryParameter['model.creatorTargetId'] = modelCreatorTargetId;\r\n      }\r\n\r\n      if (modelCreatorName !== undefined) {\r\n        localVarQueryParameter['model.creatorName'] = modelCreatorName;\r\n      }\r\n\r\n      if (modelMaxPrice !== undefined) {\r\n        localVarQueryParameter['model.maxPrice'] = modelMaxPrice;\r\n      }\r\n\r\n      if (modelMinPrice !== undefined) {\r\n        localVarQueryParameter['model.minPrice'] = modelMinPrice;\r\n      }\r\n\r\n      if (modelKeyword !== undefined) {\r\n        localVarQueryParameter['model.keyword'] = modelKeyword;\r\n      }\r\n\r\n      if (modelIncludeNotForSale !== undefined) {\r\n        localVarQueryParameter['model.includeNotForSale'] = modelIncludeNotForSale;\r\n      }\r\n\r\n      if (modelTagNames) {\r\n        localVarQueryParameter['model.tagNames'] = modelTagNames;\r\n      }\r\n\r\n      if (sortOrder !== undefined) {\r\n        localVarQueryParameter.sortOrder = sortOrder;\r\n      }\r\n\r\n      if (limit !== undefined) {\r\n        localVarQueryParameter.limit = limit;\r\n      }\r\n\r\n      if (cursor !== undefined) {\r\n        localVarQueryParameter.cursor = cursor;\r\n      }\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Navigation Menu Items for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchNavigationMenuItemsGet: async (options: any = {}): Promise<RequestArgs> => {\r\n      const localVarPath = `/v1/search/navigation-menu-items`;\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SearchApi - functional programming interface\r\n * @export\r\n */\r\nexport const SearchApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog items\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1SearchItemsDetailsGet(\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30,\r\n      cursor?: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<\r\n        RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n      >\r\n    > {\r\n      const localVarAxiosArgs = await SearchApiAxiosParamCreator(\r\n        configuration\r\n      ).v1SearchItemsDetailsGet(\r\n        modelCategory,\r\n        modelSubcategory,\r\n        modelSortAggregation,\r\n        modelSortCurrency,\r\n        modelGenres,\r\n        modelSortType,\r\n        modelCreatorType,\r\n        modelCreatorTargetId,\r\n        modelCreatorName,\r\n        modelMaxPrice,\r\n        modelMinPrice,\r\n        modelKeyword,\r\n        modelIncludeNotForSale,\r\n        modelTagNames,\r\n        sortOrder,\r\n        limit,\r\n        cursor,\r\n        options\r\n      );\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog item ids\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30 | 50 | 60 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1SearchItemsGet(\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30 | 50 | 60 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<\r\n        RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n      >\r\n    > {\r\n      const localVarAxiosArgs = await SearchApiAxiosParamCreator(configuration).v1SearchItemsGet(\r\n        modelCategory,\r\n        modelSubcategory,\r\n        modelSortAggregation,\r\n        modelSortCurrency,\r\n        modelGenres,\r\n        modelSortType,\r\n        modelCreatorType,\r\n        modelCreatorTargetId,\r\n        modelCreatorName,\r\n        modelMaxPrice,\r\n        modelMinPrice,\r\n        modelKeyword,\r\n        modelIncludeNotForSale,\r\n        modelTagNames,\r\n        sortOrder,\r\n        limit,\r\n        cursor,\r\n        options\r\n      );\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Navigation Menu Items for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v1SearchNavigationMenuItemsGet(\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<RobloxCatalogApiCatalogMenuItemsResponseModel>\r\n    > {\r\n      const localVarAxiosArgs = await SearchApiAxiosParamCreator(\r\n        configuration\r\n      ).v1SearchNavigationMenuItemsGet(options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SearchApi - factory interface\r\n * @export\r\n */\r\nexport const SearchApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog items\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchItemsDetailsGet(\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30,\r\n      cursor?: string,\r\n      options?: any\r\n    ): AxiosPromise<\r\n      RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n    > {\r\n      return SearchApiFp(configuration)\r\n        .v1SearchItemsDetailsGet(\r\n          modelCategory,\r\n          modelSubcategory,\r\n          modelSortAggregation,\r\n          modelSortCurrency,\r\n          modelGenres,\r\n          modelSortType,\r\n          modelCreatorType,\r\n          modelCreatorTargetId,\r\n          modelCreatorName,\r\n          modelMaxPrice,\r\n          modelMinPrice,\r\n          modelKeyword,\r\n          modelIncludeNotForSale,\r\n          modelTagNames,\r\n          sortOrder,\r\n          limit,\r\n          cursor,\r\n          options\r\n        )\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Search for avatarCatalog item ids\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n     * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n     * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n     * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n     * @param {Array<string>} [modelGenres]\r\n     * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n     * @param {'User' | 'Group'} [modelCreatorType]\r\n     * @param {number} [modelCreatorTargetId]\r\n     * @param {string} [modelCreatorName]\r\n     * @param {number} [modelMaxPrice]\r\n     * @param {number} [modelMinPrice]\r\n     * @param {string} [modelKeyword]\r\n     * @param {boolean} [modelIncludeNotForSale]\r\n     * @param {Array<string>} [modelTagNames]\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 28 | 30 | 50 | 60 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchItemsGet(\r\n      modelCategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'Featured'\r\n        | 'Gear'\r\n        | 'CommunityCreations'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSubcategory?:\r\n        | 'Accessories'\r\n        | 'All'\r\n        | 'AvatarAnimations'\r\n        | 'BackAccessories'\r\n        | 'BodyParts'\r\n        | 'Clothing'\r\n        | 'Collectibles'\r\n        | 'FaceAccessories'\r\n        | 'Faces'\r\n        | 'Featured'\r\n        | 'FrontAccessories'\r\n        | 'Gear'\r\n        | 'HairAccessories'\r\n        | 'Hats'\r\n        | 'Heads'\r\n        | 'NeckAccessories'\r\n        | 'Pants'\r\n        | 'Shirts'\r\n        | 'ShoulderAccessories'\r\n        | 'Tshirts'\r\n        | 'WaistAccessories'\r\n        | 'Bundles'\r\n        | 'AnimationBundles'\r\n        | 'EmoteAnimations'\r\n        | 'CommunityCreations'\r\n        | 'Melee'\r\n        | 'Ranged'\r\n        | 'Explosive'\r\n        | 'PowerUp'\r\n        | 'Navigation'\r\n        | 'Musical'\r\n        | 'Social'\r\n        | 'Building'\r\n        | 'Transport'\r\n        | 'Premium'\r\n        | 'Recommended',\r\n      modelSortAggregation?:\r\n        | 'Past12Hours'\r\n        | 'PastDay'\r\n        | 'Past3Days'\r\n        | 'PastWeek'\r\n        | 'PastMonth'\r\n        | 'AllTime',\r\n      modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n      modelGenres?: Array<string>,\r\n      modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n      modelCreatorType?: 'User' | 'Group',\r\n      modelCreatorTargetId?: number,\r\n      modelCreatorName?: string,\r\n      modelMaxPrice?: number,\r\n      modelMinPrice?: number,\r\n      modelKeyword?: string,\r\n      modelIncludeNotForSale?: boolean,\r\n      modelTagNames?: Array<string>,\r\n      sortOrder?: 'Asc' | 'Desc',\r\n      limit?: 10 | 28 | 30 | 50 | 60 | 100,\r\n      cursor?: string,\r\n      options?: any\r\n    ): AxiosPromise<\r\n      RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n    > {\r\n      return SearchApiFp(configuration)\r\n        .v1SearchItemsGet(\r\n          modelCategory,\r\n          modelSubcategory,\r\n          modelSortAggregation,\r\n          modelSortCurrency,\r\n          modelGenres,\r\n          modelSortType,\r\n          modelCreatorType,\r\n          modelCreatorTargetId,\r\n          modelCreatorName,\r\n          modelMaxPrice,\r\n          modelMinPrice,\r\n          modelKeyword,\r\n          modelIncludeNotForSale,\r\n          modelTagNames,\r\n          sortOrder,\r\n          limit,\r\n          cursor,\r\n          options\r\n        )\r\n        .then(request => request(axios, basePath));\r\n    },\r\n    /**\r\n     *\r\n     * @summary Return Navigation Menu Items for Catalog Webpage\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v1SearchNavigationMenuItemsGet(\r\n      options?: any\r\n    ): AxiosPromise<RobloxCatalogApiCatalogMenuItemsResponseModel> {\r\n      return SearchApiFp(configuration)\r\n        .v1SearchNavigationMenuItemsGet(options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SearchApi - interface\r\n * @export\r\n * @interface SearchApi\r\n */\r\nexport interface SearchApiInterface {\r\n  /**\r\n   *\r\n   * @summary Search for avatarCatalog items\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n   * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n   * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n   * @param {Array<string>} [modelGenres]\r\n   * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n   * @param {'User' | 'Group'} [modelCreatorType]\r\n   * @param {number} [modelCreatorTargetId]\r\n   * @param {string} [modelCreatorName]\r\n   * @param {number} [modelMaxPrice]\r\n   * @param {number} [modelMinPrice]\r\n   * @param {string} [modelKeyword]\r\n   * @param {boolean} [modelIncludeNotForSale]\r\n   * @param {Array<string>} [modelTagNames]\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 28 | 30} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApiInterface\r\n   */\r\n  v1SearchItemsDetailsGet(\r\n    modelCategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'Featured'\r\n      | 'Gear'\r\n      | 'CommunityCreations'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSubcategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BackAccessories'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'FaceAccessories'\r\n      | 'Faces'\r\n      | 'Featured'\r\n      | 'FrontAccessories'\r\n      | 'Gear'\r\n      | 'HairAccessories'\r\n      | 'Hats'\r\n      | 'Heads'\r\n      | 'NeckAccessories'\r\n      | 'Pants'\r\n      | 'Shirts'\r\n      | 'ShoulderAccessories'\r\n      | 'Tshirts'\r\n      | 'WaistAccessories'\r\n      | 'Bundles'\r\n      | 'AnimationBundles'\r\n      | 'EmoteAnimations'\r\n      | 'CommunityCreations'\r\n      | 'Melee'\r\n      | 'Ranged'\r\n      | 'Explosive'\r\n      | 'PowerUp'\r\n      | 'Navigation'\r\n      | 'Musical'\r\n      | 'Social'\r\n      | 'Building'\r\n      | 'Transport'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSortAggregation?:\r\n      | 'Past12Hours'\r\n      | 'PastDay'\r\n      | 'Past3Days'\r\n      | 'PastWeek'\r\n      | 'PastMonth'\r\n      | 'AllTime',\r\n    modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n    modelGenres?: Array<string>,\r\n    modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n    modelCreatorType?: 'User' | 'Group',\r\n    modelCreatorTargetId?: number,\r\n    modelCreatorName?: string,\r\n    modelMaxPrice?: number,\r\n    modelMinPrice?: number,\r\n    modelKeyword?: string,\r\n    modelIncludeNotForSale?: boolean,\r\n    modelTagNames?: Array<string>,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 28 | 30,\r\n    cursor?: string,\r\n    options?: any\r\n  ): AxiosPromise<\r\n    RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchDetailedResponseItem\r\n  >;\r\n\r\n  /**\r\n   *\r\n   * @summary Search for avatarCatalog item ids\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n   * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n   * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n   * @param {Array<string>} [modelGenres]\r\n   * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n   * @param {'User' | 'Group'} [modelCreatorType]\r\n   * @param {number} [modelCreatorTargetId]\r\n   * @param {string} [modelCreatorName]\r\n   * @param {number} [modelMaxPrice]\r\n   * @param {number} [modelMinPrice]\r\n   * @param {string} [modelKeyword]\r\n   * @param {boolean} [modelIncludeNotForSale]\r\n   * @param {Array<string>} [modelTagNames]\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 28 | 30 | 50 | 60 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApiInterface\r\n   */\r\n  v1SearchItemsGet(\r\n    modelCategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'Featured'\r\n      | 'Gear'\r\n      | 'CommunityCreations'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSubcategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BackAccessories'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'FaceAccessories'\r\n      | 'Faces'\r\n      | 'Featured'\r\n      | 'FrontAccessories'\r\n      | 'Gear'\r\n      | 'HairAccessories'\r\n      | 'Hats'\r\n      | 'Heads'\r\n      | 'NeckAccessories'\r\n      | 'Pants'\r\n      | 'Shirts'\r\n      | 'ShoulderAccessories'\r\n      | 'Tshirts'\r\n      | 'WaistAccessories'\r\n      | 'Bundles'\r\n      | 'AnimationBundles'\r\n      | 'EmoteAnimations'\r\n      | 'CommunityCreations'\r\n      | 'Melee'\r\n      | 'Ranged'\r\n      | 'Explosive'\r\n      | 'PowerUp'\r\n      | 'Navigation'\r\n      | 'Musical'\r\n      | 'Social'\r\n      | 'Building'\r\n      | 'Transport'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSortAggregation?:\r\n      | 'Past12Hours'\r\n      | 'PastDay'\r\n      | 'Past3Days'\r\n      | 'PastWeek'\r\n      | 'PastMonth'\r\n      | 'AllTime',\r\n    modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n    modelGenres?: Array<string>,\r\n    modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n    modelCreatorType?: 'User' | 'Group',\r\n    modelCreatorTargetId?: number,\r\n    modelCreatorName?: string,\r\n    modelMaxPrice?: number,\r\n    modelMinPrice?: number,\r\n    modelKeyword?: string,\r\n    modelIncludeNotForSale?: boolean,\r\n    modelTagNames?: Array<string>,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 28 | 30 | 50 | 60 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ): AxiosPromise<\r\n    RobloxCatalogApiCatalogSearchPageResponseRobloxCatalogApiCatalogSearchResponseItem\r\n  >;\r\n\r\n  /**\r\n   *\r\n   * @summary Return Navigation Menu Items for Catalog Webpage\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApiInterface\r\n   */\r\n  v1SearchNavigationMenuItemsGet(\r\n    options?: any\r\n  ): AxiosPromise<RobloxCatalogApiCatalogMenuItemsResponseModel>;\r\n}\r\n\r\n/**\r\n * SearchApi - object-oriented interface\r\n * @export\r\n * @class SearchApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SearchApi extends BaseAPI implements SearchApiInterface {\r\n  /**\r\n   *\r\n   * @summary Search for avatarCatalog items\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n   * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n   * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n   * @param {Array<string>} [modelGenres]\r\n   * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n   * @param {'User' | 'Group'} [modelCreatorType]\r\n   * @param {number} [modelCreatorTargetId]\r\n   * @param {string} [modelCreatorName]\r\n   * @param {number} [modelMaxPrice]\r\n   * @param {number} [modelMinPrice]\r\n   * @param {string} [modelKeyword]\r\n   * @param {boolean} [modelIncludeNotForSale]\r\n   * @param {Array<string>} [modelTagNames]\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 28 | 30} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApi\r\n   */\r\n  public v1SearchItemsDetailsGet(\r\n    modelCategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'Featured'\r\n      | 'Gear'\r\n      | 'CommunityCreations'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSubcategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BackAccessories'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'FaceAccessories'\r\n      | 'Faces'\r\n      | 'Featured'\r\n      | 'FrontAccessories'\r\n      | 'Gear'\r\n      | 'HairAccessories'\r\n      | 'Hats'\r\n      | 'Heads'\r\n      | 'NeckAccessories'\r\n      | 'Pants'\r\n      | 'Shirts'\r\n      | 'ShoulderAccessories'\r\n      | 'Tshirts'\r\n      | 'WaistAccessories'\r\n      | 'Bundles'\r\n      | 'AnimationBundles'\r\n      | 'EmoteAnimations'\r\n      | 'CommunityCreations'\r\n      | 'Melee'\r\n      | 'Ranged'\r\n      | 'Explosive'\r\n      | 'PowerUp'\r\n      | 'Navigation'\r\n      | 'Musical'\r\n      | 'Social'\r\n      | 'Building'\r\n      | 'Transport'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSortAggregation?:\r\n      | 'Past12Hours'\r\n      | 'PastDay'\r\n      | 'Past3Days'\r\n      | 'PastWeek'\r\n      | 'PastMonth'\r\n      | 'AllTime',\r\n    modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n    modelGenres?: Array<string>,\r\n    modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n    modelCreatorType?: 'User' | 'Group',\r\n    modelCreatorTargetId?: number,\r\n    modelCreatorName?: string,\r\n    modelMaxPrice?: number,\r\n    modelMinPrice?: number,\r\n    modelKeyword?: string,\r\n    modelIncludeNotForSale?: boolean,\r\n    modelTagNames?: Array<string>,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 28 | 30,\r\n    cursor?: string,\r\n    options?: any\r\n  ) {\r\n    return SearchApiFp(this.configuration)\r\n      .v1SearchItemsDetailsGet(\r\n        modelCategory,\r\n        modelSubcategory,\r\n        modelSortAggregation,\r\n        modelSortCurrency,\r\n        modelGenres,\r\n        modelSortType,\r\n        modelCreatorType,\r\n        modelCreatorTargetId,\r\n        modelCreatorName,\r\n        modelMaxPrice,\r\n        modelMinPrice,\r\n        modelKeyword,\r\n        modelIncludeNotForSale,\r\n        modelTagNames,\r\n        sortOrder,\r\n        limit,\r\n        cursor,\r\n        options\r\n      )\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Search for avatarCatalog item ids\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'Featured' | 'Gear' | 'CommunityCreations' | 'Premium' | 'Recommended'} [modelCategory]\r\n   * @param {'Accessories' | 'All' | 'AvatarAnimations' | 'BackAccessories' | 'BodyParts' | 'Clothing' | 'Collectibles' | 'FaceAccessories' | 'Faces' | 'Featured' | 'FrontAccessories' | 'Gear' | 'HairAccessories' | 'Hats' | 'Heads' | 'NeckAccessories' | 'Pants' | 'Shirts' | 'ShoulderAccessories' | 'Tshirts' | 'WaistAccessories' | 'Bundles' | 'AnimationBundles' | 'EmoteAnimations' | 'CommunityCreations' | 'Melee' | 'Ranged' | 'Explosive' | 'PowerUp' | 'Navigation' | 'Musical' | 'Social' | 'Building' | 'Transport' | 'Premium' | 'Recommended'} [modelSubcategory]\r\n   * @param {'Past12Hours' | 'PastDay' | 'Past3Days' | 'PastWeek' | 'PastMonth' | 'AllTime'} [modelSortAggregation]\r\n   * @param {'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free'} [modelSortCurrency]\r\n   * @param {Array<string>} [modelGenres]\r\n   * @param {'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc'} [modelSortType]\r\n   * @param {'User' | 'Group'} [modelCreatorType]\r\n   * @param {number} [modelCreatorTargetId]\r\n   * @param {string} [modelCreatorName]\r\n   * @param {number} [modelMaxPrice]\r\n   * @param {number} [modelMinPrice]\r\n   * @param {string} [modelKeyword]\r\n   * @param {boolean} [modelIncludeNotForSale]\r\n   * @param {Array<string>} [modelTagNames]\r\n   * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n   * @param {10 | 28 | 30 | 50 | 60 | 100} [limit] The amount of results per request.\r\n   * @param {string} [cursor] The paging cursor for the previous or next page.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApi\r\n   */\r\n  public v1SearchItemsGet(\r\n    modelCategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'Featured'\r\n      | 'Gear'\r\n      | 'CommunityCreations'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSubcategory?:\r\n      | 'Accessories'\r\n      | 'All'\r\n      | 'AvatarAnimations'\r\n      | 'BackAccessories'\r\n      | 'BodyParts'\r\n      | 'Clothing'\r\n      | 'Collectibles'\r\n      | 'FaceAccessories'\r\n      | 'Faces'\r\n      | 'Featured'\r\n      | 'FrontAccessories'\r\n      | 'Gear'\r\n      | 'HairAccessories'\r\n      | 'Hats'\r\n      | 'Heads'\r\n      | 'NeckAccessories'\r\n      | 'Pants'\r\n      | 'Shirts'\r\n      | 'ShoulderAccessories'\r\n      | 'Tshirts'\r\n      | 'WaistAccessories'\r\n      | 'Bundles'\r\n      | 'AnimationBundles'\r\n      | 'EmoteAnimations'\r\n      | 'CommunityCreations'\r\n      | 'Melee'\r\n      | 'Ranged'\r\n      | 'Explosive'\r\n      | 'PowerUp'\r\n      | 'Navigation'\r\n      | 'Musical'\r\n      | 'Social'\r\n      | 'Building'\r\n      | 'Transport'\r\n      | 'Premium'\r\n      | 'Recommended',\r\n    modelSortAggregation?:\r\n      | 'Past12Hours'\r\n      | 'PastDay'\r\n      | 'Past3Days'\r\n      | 'PastWeek'\r\n      | 'PastMonth'\r\n      | 'AllTime',\r\n    modelSortCurrency?: 'All' | 'Robux' | 'Tickets' | 'CustomRobux' | 'CustomTickets' | 'Free',\r\n    modelGenres?: Array<string>,\r\n    modelSortType?: 'Relevance' | 'Favorited' | 'Sales' | 'Updated' | 'PriceAsc' | 'PriceDesc',\r\n    modelCreatorType?: 'User' | 'Group',\r\n    modelCreatorTargetId?: number,\r\n    modelCreatorName?: string,\r\n    modelMaxPrice?: number,\r\n    modelMinPrice?: number,\r\n    modelKeyword?: string,\r\n    modelIncludeNotForSale?: boolean,\r\n    modelTagNames?: Array<string>,\r\n    sortOrder?: 'Asc' | 'Desc',\r\n    limit?: 10 | 28 | 30 | 50 | 60 | 100,\r\n    cursor?: string,\r\n    options?: any\r\n  ) {\r\n    return SearchApiFp(this.configuration)\r\n      .v1SearchItemsGet(\r\n        modelCategory,\r\n        modelSubcategory,\r\n        modelSortAggregation,\r\n        modelSortCurrency,\r\n        modelGenres,\r\n        modelSortType,\r\n        modelCreatorType,\r\n        modelCreatorTargetId,\r\n        modelCreatorName,\r\n        modelMaxPrice,\r\n        modelMinPrice,\r\n        modelKeyword,\r\n        modelIncludeNotForSale,\r\n        modelTagNames,\r\n        sortOrder,\r\n        limit,\r\n        cursor,\r\n        options\r\n      )\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @summary Return Navigation Menu Items for Catalog Webpage\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SearchApi\r\n   */\r\n  public v1SearchNavigationMenuItemsGet(options?: any) {\r\n    return SearchApiFp(this.configuration)\r\n      .v1SearchNavigationMenuItemsGet(options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport * as CatalogProvider from '../../providers/catalog/catalogProvider';\r\nimport { RobloxCatalogApiMultigetItemDetailsRequestModel } from '../../providers/catalog/catalogProvider';\r\n\r\nconst bundleApiInstance = new CatalogProvider.BundleApi();\r\nconst catalogApiInstance = new CatalogProvider.CatalogApi();\r\nconst recommendationsApiInstance = new CatalogProvider.RecommendationsApi();\r\n\r\nconst getAssetRecommendations = (\r\n  assetTypeId: number,\r\n  numItems?: number,\r\n  contextAssetId?: number\r\n): AxiosPromise<CatalogProvider.RobloxWebWebAPIModelsApiLegacyPageResponseRobloxCatalogApiRecommendationViewModelV2> => {\r\n  return recommendationsApiInstance.v1RecommendationsAssetAssetTypeIdGet(\r\n    assetTypeId,\r\n    numItems,\r\n    contextAssetId\r\n  );\r\n};\r\n\r\nconst getBundleRecommendations = (\r\n  bundleId: number,\r\n  numItems?: number\r\n): AxiosPromise<CatalogProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiBundleDetailsModel> => {\r\n  return bundleApiInstance.v1BundlesBundleIdRecommendationsGet(bundleId, numItems, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst postItemDetails = (\r\n  model: RobloxCatalogApiMultigetItemDetailsRequestModel\r\n): AxiosPromise<CatalogProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxCatalogApiCatalogSearchDetailedResponseItem> => {\r\n  return catalogApiInstance.v1CatalogItemsDetailsPost(model, { withCredentials: true });\r\n};\r\n\r\nexport default {\r\n  getAssetRecommendations,\r\n  getBundleRecommendations,\r\n  postItemDetails\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * GameInternationalization Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * OpenAPI spec version: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.gameInternationalizationApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * GameInternationalization Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiLocalizationTableGameAssociation>}\r\n     * @memberof RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest\r\n     */\r\n    tables?: Array<RobloxGameInternationalizationApiLocalizationTableGameAssociation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse\r\n     */\r\n    success?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiAutoLocalizationMetadataResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiAutoLocalizationMetadataResponse {\r\n    /**\r\n     * Is React Implementation of AutoLocalization Settings Enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAutoLocalizationMetadataResponse\r\n     */\r\n    isReactVersionEnabledForAutoLocalizationSettings?: boolean;\r\n    /**\r\n     * Is Tabbed UI Enabled for Configure Localization Page\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAutoLocalizationMetadataResponse\r\n     */\r\n    isTabbedUIEnabledForConfigureLocalizationPage?: boolean;\r\n    /**\r\n     * Is Toggle UI Enabled for Automatic Translations\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAutoLocalizationMetadataResponse\r\n     */\r\n    isAutomaticTranslationToggleUIEnabled?: boolean;\r\n    /**\r\n     * Is Quota UI Enabled for Automatic Translations\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAutoLocalizationMetadataResponse\r\n     */\r\n    isAutomaticTranslationQuotaUIEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage\r\n */\r\nexport interface RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage {\r\n    /**\r\n     * The language code.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * Indicates whether or not automatic translation is allowed for the target language.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage\r\n     */\r\n    isAutomaticTranslationAllowed?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiAutoscrapeEntry\r\n */\r\nexport interface RobloxGameInternationalizationApiAutoscrapeEntry {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiAutoscrapeEntry\r\n     */\r\n    context?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiAutoscrapeEntry\r\n     */\r\n    source?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiCreateTableRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiCreateTableRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiCreateTableRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiCreateTableRequest\r\n     */\r\n    ownerType?: RobloxGameInternationalizationApiCreateTableRequestOwnerTypeEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiCreateTableRequest\r\n     */\r\n    ownerId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiCreateTableRequestOwnerTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiCreateTableResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiCreateTableResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiCreateTableResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiCreateTableResponse\r\n     */\r\n    assetId?: number;\r\n}\r\n/**\r\n * A model that contains an entry identifier and an associated cursor for paged lookups.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiCursorEntryIdentifier\r\n */\r\nexport interface RobloxGameInternationalizationApiCursorEntryIdentifier {\r\n    /**\r\n     * The location to begin our query.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiCursorEntryIdentifier\r\n     */\r\n    cursor?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiCursorEntryIdentifier\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * The translation history count to get.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiCursorEntryIdentifier\r\n     */\r\n    count?: number;\r\n    /**\r\n     * In which order the data is sorted.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiCursorEntryIdentifier\r\n     */\r\n    sortOrder?: RobloxGameInternationalizationApiCursorEntryIdentifierSortOrderEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiCursorEntryIdentifierSortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse {\r\n    /**\r\n     * The game id.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * The language code.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * Indicates whether or not automatic translation is currently enabled for the game and language.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse\r\n     */\r\n    isAutomaticTranslationEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiEntry\r\n */\r\nexport interface RobloxGameInternationalizationApiEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiEntry\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryMetadata}\r\n     * @memberof RobloxGameInternationalizationApiEntry\r\n     */\r\n    metadata?: RobloxGameInternationalizationApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiTranslation>}\r\n     * @memberof RobloxGameInternationalizationApiEntry\r\n     */\r\n    translations?: Array<RobloxGameInternationalizationApiTranslation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiEntryIdentifier\r\n */\r\nexport interface RobloxGameInternationalizationApiEntryIdentifier {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEntryIdentifier\r\n     */\r\n    key?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEntryIdentifier\r\n     */\r\n    context?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEntryIdentifier\r\n     */\r\n    source?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiEntryMetadata\r\n */\r\nexport interface RobloxGameInternationalizationApiEntryMetadata {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEntryMetadata\r\n     */\r\n    example?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxInGameContentTablesClientGameLocation>}\r\n     * @memberof RobloxGameInternationalizationApiEntryMetadata\r\n     */\r\n    gameLocations?: Array<RobloxInGameContentTablesClientGameLocation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiEntryTranslationHistoryPaged\r\n */\r\nexport interface RobloxGameInternationalizationApiEntryTranslationHistoryPaged {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiEntryTranslationHistoryPaged\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * A batch of TranslationHistory for the given entry identifier.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationHistory>}\r\n     * @memberof RobloxGameInternationalizationApiEntryTranslationHistoryPaged\r\n     */\r\n    history?: Array<RobloxGameInternationalizationApiTranslationHistory>;\r\n    /**\r\n     * The cursor to send up on the next request if more history data is required.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiEntryTranslationHistoryPaged\r\n     */\r\n    nextCursor?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiError\r\n */\r\nexport interface RobloxGameInternationalizationApiError {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiError\r\n     */\r\n    errorCode?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiError\r\n     */\r\n    errorMessage?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiFailedEntry\r\n */\r\nexport interface RobloxGameInternationalizationApiFailedEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiError}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntry\r\n     */\r\n    error?: RobloxGameInternationalizationApiError;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntry\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryMetadata}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntry\r\n     */\r\n    metadata?: RobloxGameInternationalizationApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiTranslation>}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntry\r\n     */\r\n    translations?: Array<RobloxGameInternationalizationApiTranslation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged\r\n */\r\nexport interface RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    count?: number;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiError}\r\n     * @memberof RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    error?: RobloxGameInternationalizationApiError;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiFailedNameDescription\r\n */\r\nexport interface RobloxGameInternationalizationApiFailedNameDescription {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiFailedNameDescription\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiFailedNameDescription\r\n     */\r\n    errorCode?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGameAutolocalizationInformationResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGameAutolocalizationInformationResponse {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGameAutolocalizationInformationResponse\r\n     */\r\n    isAutolocalizationEnabled?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGameAutolocalizationInformationResponse\r\n     */\r\n    shouldUseLocalizationTable?: boolean;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGameAutolocalizationInformationResponse\r\n     */\r\n    autoLocalizationTableId?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGameAutolocalizationInformationResponse\r\n     */\r\n    assetId?: number;\r\n}\r\n/**\r\n * A response model for getting the automatic translation allowed status of target languages.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse {\r\n    /**\r\n     * The source language.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse\r\n     */\r\n    sourceLanguage?: string;\r\n    /**\r\n     * The target languages with the automatic translation allowed status.  The status basically says if automatic translation can be enabled for the source and target.\r\n     * @type {Array<RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage>}\r\n     * @memberof RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse\r\n     */\r\n    targetLanguages?: Array<RobloxGameInternationalizationApiAutomaticTranslationStatusTargetLanguage>;\r\n}\r\n/**\r\n * A response model for getting the automatic translation allowed status of a game.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse {\r\n    /**\r\n     * The game id.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * Indicates whether or not automatic translation is allowed for the game.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse\r\n     */\r\n    isAutomaticTranslationAllowed?: boolean;\r\n    /**\r\n     * Indicates whether or not automatic translation switches are enabled for the game.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse\r\n     */\r\n    isAutomaticTranslationSwitchesUIEnabled?: boolean;\r\n}\r\n/**\r\n * A response model for getting the automatic translation quota info of a game.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiMonthlyQuotaModel}\r\n     * @memberof RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse\r\n     */\r\n    monthlyQuota?: RobloxGameInternationalizationApiMonthlyQuotaModel;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiQuotaModel}\r\n     * @memberof RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse\r\n     */\r\n    bankQuota?: RobloxGameInternationalizationApiQuotaModel;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetBadgeIconResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetBadgeIconResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetBadgeIconResponse\r\n     */\r\n    imageId?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetBadgeIconResponse\r\n     */\r\n    imageUrl?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetBadgeIconResponse\r\n     */\r\n    state?: RobloxGameInternationalizationApiGetBadgeIconResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetBadgeIconResponse\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetBadgeIconResponseStateEnum {\r\n    Approved = 'Approved',\r\n    PendingReview = 'PendingReview',\r\n    UnAvailable = 'UnAvailable',\r\n    Rejected = 'Rejected',\r\n    Error = 'Error'\r\n}\r\n\r\n/**\r\n * A response model for getting developer product icon\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetDeveloperProductIconResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n     */\r\n    imageId?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n     */\r\n    imageUrl?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n     */\r\n    state?: RobloxGameInternationalizationApiGetDeveloperProductIconResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetDeveloperProductIconResponseStateEnum {\r\n    Approved = 'Approved',\r\n    PendingReview = 'PendingReview',\r\n    UnAvailable = 'UnAvailable',\r\n    Rejected = 'Rejected',\r\n    Error = 'Error'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetGameIconResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetGameIconResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGameIconResponse\r\n     */\r\n    imageId?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGameIconResponse\r\n     */\r\n    imageUrl?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGameIconResponse\r\n     */\r\n    state?: RobloxGameInternationalizationApiGetGameIconResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGameIconResponse\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetGameIconResponseStateEnum {\r\n    Approved = 'Approved',\r\n    PendingReview = 'PendingReview',\r\n    UnAvailable = 'UnAvailable',\r\n    Rejected = 'Rejected',\r\n    Error = 'Error'\r\n}\r\n\r\n/**\r\n * A response model for getting game pass icon\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetGamePassIconResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetGamePassIconResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGamePassIconResponse\r\n     */\r\n    imageId?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGamePassIconResponse\r\n     */\r\n    imageUrl?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGamePassIconResponse\r\n     */\r\n    state?: RobloxGameInternationalizationApiGetGamePassIconResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGamePassIconResponse\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetGamePassIconResponseStateEnum {\r\n    Approved = 'Approved',\r\n    PendingReview = 'PendingReview',\r\n    UnAvailable = 'UnAvailable',\r\n    Rejected = 'Rejected',\r\n    Error = 'Error'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetGameThumbnailsResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetGameThumbnailsResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetGameThumbnailsResponse\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiMediaAssetResponse>}\r\n     * @memberof RobloxGameInternationalizationApiGetGameThumbnailsResponse\r\n     */\r\n    mediaAssets?: Array<RobloxGameInternationalizationApiMediaAssetResponse>;\r\n}\r\n/**\r\n * A model containing request for getting history of name or description.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n     */\r\n    requestType?: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestRequestTypeEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n     */\r\n    cursor?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n     */\r\n    count?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest\r\n     */\r\n    sortOrder?: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestSortOrderEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestRequestTypeEnum {\r\n    Name = 'Name',\r\n    Description = 'Description'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetNameDescriptionHistoryRequestSortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiTranslationHistory>}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse\r\n     */\r\n    history?: Array<RobloxGameInternationalizationApiTranslationHistory>;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse\r\n     */\r\n    lastEvaluatedId?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetPlayerPoliciesResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetPlayerPoliciesResponse {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetPlayerPoliciesResponse\r\n     */\r\n    isSubjectToChinaPolicies?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetPlayerPoliciesResponse\r\n     */\r\n    arePaidRandomItemsRestricted?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetPlayerPoliciesResponse\r\n     */\r\n    isPaidItemTradingAllowed?: boolean;\r\n    /**\r\n     * \r\n     * @type {Array<string>}\r\n     * @memberof RobloxGameInternationalizationApiGetPlayerPoliciesResponse\r\n     */\r\n    allowedExternalLinkReferences?: Array<string>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTableEntriesPagedResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTableEntriesPagedResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesPagedResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesPagedResponse\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiEntry>}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesPagedResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiCursorEntryIdentifier>}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest\r\n     */\r\n    entries?: Array<RobloxGameInternationalizationApiCursorEntryIdentifier>;\r\n}\r\n/**\r\n * A response model for GetTableEntriesTranslationHistory.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse {\r\n    /**\r\n     * The entries\\' tableId.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    tableId?: string;\r\n    /**\r\n     * The locale of the translations.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * The entries with their identifier, translation history, and next cursor.\r\n     * @type {Array<RobloxGameInternationalizationApiEntryTranslationHistoryPaged>}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    entries?: Array<RobloxGameInternationalizationApiEntryTranslationHistoryPaged>;\r\n    /**\r\n     * The failed entries.\r\n     * @type {Array<RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged>}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    failedEntries?: Array<RobloxGameInternationalizationApiFailedEntryTranslationHistoryPaged>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTableEntryCountResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTableEntryCountResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntryCountResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetTableEntryCountResponse\r\n     */\r\n    entryCount?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTableResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTableResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTableResponse\r\n     */\r\n    ownerType?: RobloxGameInternationalizationApiGetTableResponseOwnerTypeEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetTableResponse\r\n     */\r\n    ownerId?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetTableResponse\r\n     */\r\n    assetId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetTableResponseOwnerTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * A response model that contains game info for getting a translation count.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTranslationCountsForGameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTranslationCountsForGameResponse {\r\n    /**\r\n     * The game id.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiGetTranslationCountsForGameResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * The list of languages/locales of the game.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse>}\r\n     * @memberof RobloxGameInternationalizationApiGetTranslationCountsForGameResponse\r\n     */\r\n    languagesOrLocales?: Array<RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse>;\r\n}\r\n/**\r\n * A response model for getting translation counts for a language or locale.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse {\r\n    /**\r\n     * The code of the language or locale.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse\r\n     */\r\n    languageOrLocaleCode?: string;\r\n    /**\r\n     * An indicator that says whether the passed in language/locale code represents a language or locale.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse\r\n     */\r\n    languageOrLocaleType?: RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponseLanguageOrLocaleTypeEnum;\r\n    /**\r\n     * Info for the requested games, including their translation counts for the specified language or locale.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationCountGameInfoResponse>}\r\n     * @memberof RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse\r\n     */\r\n    games?: Array<RobloxGameInternationalizationApiTranslationCountGameInfoResponse>;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponseLanguageOrLocaleTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiGetUiConfigurationsResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiGetUiConfigurationsResponse {\r\n    /**\r\n     * Game products translation management page is enabled or not.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetUiConfigurationsResponse\r\n     */\r\n    isGameProductsEnabled?: boolean;\r\n    /**\r\n     * Badge Icon translation management is enabled or not.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetUiConfigurationsResponse\r\n     */\r\n    isBadgeIconEnabled?: boolean;\r\n    /**\r\n     * Game pass translation management is enabled or not.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetUiConfigurationsResponse\r\n     */\r\n    isGamePassEnabled?: boolean;\r\n    /**\r\n     * Developer product translation management is enabled or not.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiGetUiConfigurationsResponse\r\n     */\r\n    isDeveloperProductEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiAutoscrapeEntry>}\r\n     * @memberof RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest\r\n     */\r\n    entries?: Array<RobloxGameInternationalizationApiAutoscrapeEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiLanguage\r\n */\r\nexport interface RobloxGameInternationalizationApiLanguage {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguage\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguage\r\n     */\r\n    nativeName?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguage\r\n     */\r\n    languageCode?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiLanguageOrLocale\r\n */\r\nexport interface RobloxGameInternationalizationApiLanguageOrLocale {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocale\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocale\r\n     */\r\n    languageCodeType?: RobloxGameInternationalizationApiLanguageOrLocaleLanguageCodeTypeEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocale\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiLanguageOrLocaleLanguageCodeTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n */\r\nexport interface RobloxGameInternationalizationApiLanguageOrLocaleSettings {\r\n    /**\r\n     * The language code type.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n     */\r\n    languageCodeType?: RobloxGameInternationalizationApiLanguageOrLocaleSettingsLanguageCodeTypeEnum;\r\n    /**\r\n     * The language code.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * Indicates whether or not automatic translation is currently enabled for the game and language.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n     */\r\n    isAutomaticTranslationEnabled?: boolean;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiLanguageOrLocaleSettingsLanguageCodeTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiLocalizationTableGameAssociation\r\n */\r\nexport interface RobloxGameInternationalizationApiLocalizationTableGameAssociation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiLocalizationTableGameAssociation\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiLocalizationTableGameAssociation\r\n     */\r\n    dissociate?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiMediaAssetResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiMediaAssetResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiMediaAssetResponse\r\n     */\r\n    mediaAssetId?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiMediaAssetResponse\r\n     */\r\n    state?: RobloxGameInternationalizationApiMediaAssetResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiMediaAssetResponse\r\n     */\r\n    mediaAssetUrl?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiMediaAssetResponseStateEnum {\r\n    Approved = 'Approved',\r\n    PendingReview = 'PendingReview',\r\n    UnAvailable = 'UnAvailable',\r\n    Rejected = 'Rejected',\r\n    Error = 'Error'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse\r\n     */\r\n    isNameDescriptionMigrationEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse\r\n     */\r\n    mediaAssetId?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiMonthlyQuotaModel\r\n */\r\nexport interface RobloxGameInternationalizationApiMonthlyQuotaModel {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiMonthlyQuotaModel\r\n     */\r\n    previousRefreshDate?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiMonthlyQuotaModel\r\n     */\r\n    nextRefreshDate?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiMonthlyQuotaModel\r\n     */\r\n    remaining?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiMonthlyQuotaModel\r\n     */\r\n    capacity?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiNameDescription\r\n */\r\nexport interface RobloxGameInternationalizationApiNameDescription {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiNameDescription\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiNameDescription\r\n     */\r\n    description?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiNameDescription\r\n     */\r\n    languageCode?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiPatchEntry\r\n */\r\nexport interface RobloxGameInternationalizationApiPatchEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryIdentifier}\r\n     * @memberof RobloxGameInternationalizationApiPatchEntry\r\n     */\r\n    identifier?: RobloxGameInternationalizationApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiEntryMetadata}\r\n     * @memberof RobloxGameInternationalizationApiPatchEntry\r\n     */\r\n    metadata?: RobloxGameInternationalizationApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiPatchTranslation>}\r\n     * @memberof RobloxGameInternationalizationApiPatchEntry\r\n     */\r\n    translations?: Array<RobloxGameInternationalizationApiPatchTranslation>;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiPatchEntry\r\n     */\r\n    _delete?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiPatchLanguage\r\n */\r\nexport interface RobloxGameInternationalizationApiPatchLanguage {\r\n    /**\r\n     * The language code type.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiPatchLanguage\r\n     */\r\n    languageCodeType?: RobloxGameInternationalizationApiPatchLanguageLanguageCodeTypeEnum;\r\n    /**\r\n     * The language code for the language to edit.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiPatchLanguage\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * An optional field used to indicate whether a language should be deleted from this game\\'s list of supported languages.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiPatchLanguage\r\n     */\r\n    _delete?: boolean;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiPatchLanguageLanguageCodeTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiPatchTranslation\r\n */\r\nexport interface RobloxGameInternationalizationApiPatchTranslation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiPatchTranslation\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiPatchTranslation\r\n     */\r\n    translationText?: string;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiPatchTranslation\r\n     */\r\n    _delete?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiQuotaModel\r\n */\r\nexport interface RobloxGameInternationalizationApiQuotaModel {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiQuotaModel\r\n     */\r\n    remaining?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiQuotaModel\r\n     */\r\n    capacity?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest {\r\n    /**\r\n     * The time range to remove entries from. Following ISO 8601 Durations format\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest\r\n     */\r\n    maxAgeForFlush?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest {\r\n    /**\r\n     * The inclusive start dateTime of report in UTC\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest\r\n     */\r\n    startDateTime?: string;\r\n    /**\r\n     * The exclusive end dateTime of report in UTC\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest\r\n     */\r\n    endDateTime?: string;\r\n    /**\r\n     * The report type\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest\r\n     */\r\n    reportType?: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequestReportTypeEnum;\r\n    /**\r\n     * The report subject target id\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest\r\n     */\r\n    reportSubjectTargetId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequestReportTypeEnum {\r\n    GameTranslationStatus = 'GameTranslationStatus',\r\n    GameTranslationStatusForTranslatorGroup = 'GameTranslationStatusForTranslatorGroup',\r\n    GameTranslationStatusForTranslator = 'GameTranslationStatusForTranslator',\r\n    Test = 'Test'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse\r\n     */\r\n    reportGenerationStatus?: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponseReportGenerationStatusEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponseReportGenerationStatusEnum {\r\n    InProgress = 'inProgress',\r\n    Ready = 'ready',\r\n    Unavailable = 'unavailable'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest\r\n     */\r\n    isAutolocalizationEnabled?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest\r\n     */\r\n    shouldUseLocalizationTable?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest\r\n     */\r\n    tableId?: string;\r\n}\r\n/**\r\n * A request model for sorting of image Ids for game thumbnails\r\n * @export\r\n * @interface RobloxGameInternationalizationApiSortImageIdsRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiSortImageIdsRequest {\r\n    /**\r\n     * List of thumbnail ids in desired order.\r\n     * @type {Array<number>}\r\n     * @memberof RobloxGameInternationalizationApiSortImageIdsRequest\r\n     */\r\n    mediaAssetIds?: Array<number>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    isFeatureEnabled?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    areAllLanguagesEnabled?: boolean;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    minimumUniverseIdForFeature?: number;\r\n    /**\r\n     * Is translation progress for human translations enabled on UI\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    isHumanTranslationProgressUIEnabled?: boolean;\r\n    /**\r\n     * Is translation progress for automatic translations enabled on UI\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    isAutomaticTranslationProgressUIEnabled?: boolean;\r\n    /**\r\n     * Is Language Locales UI Enabled for Supported Languages\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse\r\n     */\r\n    isSupportedLanguagesChildLocalesUIEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslation\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslation\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslation\r\n     */\r\n    translationText?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse {\r\n    /**\r\n     * Is Translation Analytics feature enabled on UI\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse\r\n     */\r\n    isFeatureEnabledOnUI?: boolean;\r\n    /**\r\n     * Number of seconds to poll the server for report availability\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse\r\n     */\r\n    reportRequestPollingIntervalSeconds?: number;\r\n    /**\r\n     * Date-Time since the Analytics Reports can be downloaded\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse\r\n     */\r\n    minimumDateTimeForAnalyticsReport?: string;\r\n}\r\n/**\r\n * A model that contains the count value of a translation count and relevant metadata.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationCount\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationCount {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCount\r\n     */\r\n    count?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCount\r\n     */\r\n    translationStatus?: RobloxGameInternationalizationApiTranslationCountTranslationStatusEnum;\r\n    /**\r\n     * Gets or sets the type of the translator associated with the count, or null if the count is not associated with a specific type of translator.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCount\r\n     */\r\n    translatorType?: RobloxGameInternationalizationApiTranslationCountTranslatorTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountTranslationStatusEnum {\r\n    Approved = 'Approved'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountTranslatorTypeEnum {\r\n    Automation = 'Automation',\r\n    User = 'User'\r\n}\r\n\r\n/**\r\n * A response model that contains category info for getting a translation count.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse {\r\n    /**\r\n     * The category of the translation counts.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse\r\n     */\r\n    category?: RobloxGameInternationalizationApiTranslationCountCategoryInfoResponseCategoryEnum;\r\n    /**\r\n     * The translation counts.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationCount>}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse\r\n     */\r\n    translationCounts?: Array<RobloxGameInternationalizationApiTranslationCount>;\r\n    /**\r\n     * The total number of translatable items.  The translation count percentage can be calculated by doing translationCounts / totalTranslatableItemCount.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse\r\n     */\r\n    totalTranslatableItemCount?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountCategoryInfoResponseCategoryEnum {\r\n    InGameContent = 'InGameContent'\r\n}\r\n\r\n/**\r\n * A response model that contains game info for getting a translation count.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationCountGameInfoResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationCountGameInfoResponse {\r\n    /**\r\n     * The game id.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountGameInfoResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * The status of the response for the requested game.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountGameInfoResponse\r\n     */\r\n    status?: RobloxGameInternationalizationApiTranslationCountGameInfoResponseStatusEnum;\r\n    /**\r\n     * Categories of translation counts.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse>}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountGameInfoResponse\r\n     */\r\n    categories?: Array<RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse>;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountGameInfoResponseStatusEnum {\r\n    LanguageOrLocaleSupportedForGame = 'LanguageOrLocaleSupportedForGame',\r\n    LanguageOrLocaleNotSupportedForGame = 'LanguageOrLocaleNotSupportedForGame',\r\n    LanguageOrLocaleIsSource = 'LanguageOrLocaleIsSource',\r\n    InsufficientPermission = 'InsufficientPermission',\r\n    GameDoesNotExist = 'GameDoesNotExist',\r\n    GameDoesNotHaveTable = 'GameDoesNotHaveTable',\r\n    UnknownError = 'UnknownError'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse {\r\n    /**\r\n     * The status of the response for the requested game.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n     */\r\n    status?: RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseStatusEnum;\r\n    /**\r\n     * Categories of translation counts.\r\n     * @type {Array<RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse>}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n     */\r\n    categories?: Array<RobloxGameInternationalizationApiTranslationCountCategoryInfoResponse>;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n     */\r\n    languageCodeType?: RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseLanguageCodeTypeEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponse\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseStatusEnum {\r\n    Success = 'Success',\r\n    LanguageOrLocaleNotSupportedForGame = 'LanguageOrLocaleNotSupportedForGame'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslationCountLanguageOrLocaleResponseLanguageCodeTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale'\r\n}\r\n\r\n/**\r\n * A model containing a translation, translator, and translation time.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslationHistory\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslationHistory {\r\n    /**\r\n     * The translation provided by the translator.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationHistory\r\n     */\r\n    translationText?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxGameInternationalizationApiTranslator}\r\n     * @memberof RobloxGameInternationalizationApiTranslationHistory\r\n     */\r\n    translator?: RobloxGameInternationalizationApiTranslator;\r\n    /**\r\n     * The time the translation was provided.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslationHistory\r\n     */\r\n    created?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiTranslator\r\n */\r\nexport interface RobloxGameInternationalizationApiTranslator {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiTranslator\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiTranslator\r\n     */\r\n    agentType?: RobloxGameInternationalizationApiTranslatorAgentTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameInternationalizationApiTranslatorAgentTypeEnum {\r\n    User = 'User',\r\n    Automation = 'Automation'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings\r\n */\r\nexport interface RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings {\r\n    /**\r\n     * The language code.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * Indicates whether or not automatic translation is currently enabled for Game and Place Information for a game and language.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings\r\n     */\r\n    isUniverseDisplayInfoAutomaticTranslationEnabled?: boolean;\r\n}\r\n/**\r\n * A request model for updating badge description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest {\r\n    /**\r\n     * Badge description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating badge description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse {\r\n    /**\r\n     * Badge description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating badge name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest {\r\n    /**\r\n     * Badge name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Badge description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating badge name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse {\r\n    /**\r\n     * Badge name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Badge description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating badge name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeNameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeNameRequest {\r\n    /**\r\n     * Badge name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameRequest\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * A response model for updating badge name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateBadgeNameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateBadgeNameResponse {\r\n    /**\r\n     * Badge name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateBadgeNameResponse\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * A request model for updating developer product description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest {\r\n    /**\r\n     * Developer product description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating developer product description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse {\r\n    /**\r\n     * Developer product description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating developer product name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest {\r\n    /**\r\n     * Developer product name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Developer product description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating developer product name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse {\r\n    /**\r\n     * Developer product name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Developer product description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating developer product name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest {\r\n    /**\r\n     * Developer product name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * A response model for updating developer product name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse {\r\n    /**\r\n     * Developer product name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * A request model for updating game pass description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest {\r\n    /**\r\n     * Game pass description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating game pass description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse {\r\n    /**\r\n     * Game pass description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating game pass name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest {\r\n    /**\r\n     * Game pass name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Game pass description\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A response model for updating game pass name and description\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse {\r\n    /**\r\n     * Game pass name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Game pass description saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse\r\n     */\r\n    description?: string;\r\n}\r\n/**\r\n * A request model for updating game pass name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassNameRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassNameRequest {\r\n    /**\r\n     * Game pass name\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameRequest\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * A response model for updating game pass name\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateGamePassNameResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateGamePassNameResponse {\r\n    /**\r\n     * Game pass name saved\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateGamePassNameResponse\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateNameDescriptionsRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateNameDescriptionsRequest {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiNameDescription>}\r\n     * @memberof RobloxGameInternationalizationApiUpdateNameDescriptionsRequest\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiNameDescription>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateNameDescriptionsResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateNameDescriptionsResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiNameDescription>}\r\n     * @memberof RobloxGameInternationalizationApiUpdateNameDescriptionsResponse\r\n     */\r\n    successOperations?: Array<RobloxGameInternationalizationApiNameDescription>;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiFailedNameDescription>}\r\n     * @memberof RobloxGameInternationalizationApiUpdateNameDescriptionsResponse\r\n     */\r\n    failedOperations?: Array<RobloxGameInternationalizationApiFailedNameDescription>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateTableContentsRequest\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateTableContentsRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateTableContentsRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiPatchEntry>}\r\n     * @memberof RobloxGameInternationalizationApiUpdateTableContentsRequest\r\n     */\r\n    entries?: Array<RobloxGameInternationalizationApiPatchEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateTableContentsResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateTableContentsResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiFailedEntry>}\r\n     * @memberof RobloxGameInternationalizationApiUpdateTableContentsResponse\r\n     */\r\n    failedEntriesAndTranslations?: Array<RobloxGameInternationalizationApiFailedEntry>;\r\n}\r\n/**\r\n * A response model for getting the automatic translation allowed status for game information.\r\n * @export\r\n * @interface RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse\r\n */\r\nexport interface RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse {\r\n    /**\r\n     * The game id.\r\n     * @type {number}\r\n     * @memberof RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * The language code.\r\n     * @type {string}\r\n     * @memberof RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse\r\n     */\r\n    languageCode?: string;\r\n    /**\r\n     * Indicates universeDisplayInformation automatic translation is enabled.\r\n     * @type {boolean}\r\n     * @memberof RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse\r\n     */\r\n    isUniverseDisplayInfoAutomaticTranslationEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxInGameContentTablesClientGameLocation\r\n */\r\nexport interface RobloxInGameContentTablesClientGameLocation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxInGameContentTablesClientGameLocation\r\n     */\r\n    path?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiGetBadgeIconResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiGetBadgeIconResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiGetDeveloperProductIconResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiGetDeveloperProductIconResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiGetGameIconResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiGetGameIconResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiGetGamePassIconResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiGetGamePassIconResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiGetGameThumbnailsResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiGetGameThumbnailsResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiLanguage>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiLanguage>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiLanguageOrLocale>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiLanguageOrLocale>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiLanguageOrLocaleSettings>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiLanguageOrLocaleSettings>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiNameDescription>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiNameDescription>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings\r\n     */\r\n    data?: Array<RobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings>;\r\n}\r\n\r\n/**\r\n * AutolocalizationApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AutolocalizationApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutolocalizationtablePatch: async (gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdAutolocalizationtablePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1AutolocalizationGamesGameIdAutolocalizationtablePatch.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}/autolocalizationtable`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutolocalizationtablePost: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdAutolocalizationtablePost.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}/autolocalizationtable`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to Flush the autoscraped entries which doesnt have translations\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost: async (gameId: number, request: RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}/autoscrape-cleanup-request`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdGet.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdPatch: async (gameId: number, request: RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1AutolocalizationGamesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets a game\\'s auto-localization related settings\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdSettingsPatch: async (gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutolocalizationGamesGameIdSettingsPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1AutolocalizationGamesGameIdSettingsPatch.');\r\n            }\r\n            const localVarPath = `/v1/autolocalization/games/{gameId}/settings`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Metadata for AutoLocalization Configuration\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/autolocalization/metadata`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutolocalizationApi - functional programming interface\r\n * @export\r\n */\r\nexport const AutolocalizationApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to Flush the autoscraped entries which doesnt have translations\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId: number, request: RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdPatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets a game\\'s auto-localization related settings\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationGamesGameIdSettingsPatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationGamesGameIdSettingsPatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Metadata for AutoLocalization Configuration\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutolocalizationMetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiAutoLocalizationMetadataResponse>> {\r\n            const localVarAxiosArgs = await AutolocalizationApiAxiosParamCreator(configuration).v1AutolocalizationMetadataGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutolocalizationApi - factory interface\r\n * @export\r\n */\r\nexport const AutolocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest, options?: any): AxiosPromise<object> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to Flush the autoscraped entries which doesnt have translations\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId: number, request: RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): AxiosPromise<object> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest, options?: any): AxiosPromise<object> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdPatch(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets a game\\'s auto-localization related settings\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationGamesGameIdSettingsPatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest, options?: any): AxiosPromise<object> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationGamesGameIdSettingsPatch(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Metadata for AutoLocalization Configuration\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutolocalizationMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiAutoLocalizationMetadataResponse> {\r\n            return AutolocalizationApiFp(configuration).v1AutolocalizationMetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AutolocalizationApi - interface\r\n * @export\r\n * @interface AutolocalizationApi\r\n */\r\nexport interface AutolocalizationApiInterface {\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Enqueues an event to Flush the autoscraped entries which doesnt have translations\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId: number, request: RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGameAutolocalizationInformationResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Ingests entries for auto localization.\r\n     * @param {number} gameId The game id.\r\n     * @param {RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Sets a game\\'s auto-localization related settings\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationGamesGameIdSettingsPatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Metadata for AutoLocalization Configuration\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApiInterface\r\n     */\r\n    v1AutolocalizationMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiAutoLocalizationMetadataResponse>;\r\n\r\n}\r\n\r\n/**\r\n * AutolocalizationApi - object-oriented interface\r\n * @export\r\n * @class AutolocalizationApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AutolocalizationApi extends BaseAPI implements AutolocalizationApiInterface {\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationTableForGameRequest, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePatch(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId: number, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Enqueues an event to Flush the autoscraped entries which doesnt have translations\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId: number, request: RobloxGameInternationalizationApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdAutoscrapeCleanupRequestPost(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdGet(gameId: number, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Ingests entries for auto localization.\r\n     * @param {number} gameId The game id.\r\n     * @param {RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiIngestAutoScrapedContentForGameRequest, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdPatch(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Sets a game\\'s auto-localization related settings\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationGamesGameIdSettingsPatch(gameId: number, request: RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest, options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationGamesGameIdSettingsPatch(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Metadata for AutoLocalization Configuration\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutolocalizationApi\r\n     */\r\n    public v1AutolocalizationMetadataGet(options?: any) {\r\n        return AutolocalizationApiFp(this.configuration).v1AutolocalizationMetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * AutomaticTranslationApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AutomaticTranslationApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Checks if automatic translation can be enabled for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationGamesGameIdFeatureStatusGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutomaticTranslationGamesGameIdFeatureStatusGet.');\r\n            }\r\n            const localVarPath = `/v1/automatic-translation/games/{gameId}/feature-status`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Returns the automatic translation quota info for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationGamesGameIdQuotaGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1AutomaticTranslationGamesGameIdQuotaGet.');\r\n            }\r\n            const localVarPath = `/v1/automatic-translation/games/{gameId}/quota`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Checks if the requested target languages are allowed for automatic translation based on the source language.  If there are no requested target languages, then all allowed target languages for the source language will be returned.\r\n         * @param {string} languageCode The source language.\r\n         * @param {Array<string>} [targetLanguages] Optional target languages. If not passed in, all allowed target languages for the source language will be returned.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet: async (languageCode: string, targetLanguages?: Array<string>, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet.');\r\n            }\r\n            const localVarPath = `/v1/automatic-translation/languages/{languageCode}/target-languages`\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (targetLanguages) {\r\n                localVarQueryParameter['targetLanguages'] = targetLanguages;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutomaticTranslationApi - functional programming interface\r\n * @export\r\n */\r\nexport const AutomaticTranslationApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Checks if automatic translation can be enabled for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse>> {\r\n            const localVarAxiosArgs = await AutomaticTranslationApiAxiosParamCreator(configuration).v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Returns the automatic translation quota info for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutomaticTranslationGamesGameIdQuotaGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse>> {\r\n            const localVarAxiosArgs = await AutomaticTranslationApiAxiosParamCreator(configuration).v1AutomaticTranslationGamesGameIdQuotaGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Checks if the requested target languages are allowed for automatic translation based on the source language.  If there are no requested target languages, then all allowed target languages for the source language will be returned.\r\n         * @param {string} languageCode The source language.\r\n         * @param {Array<string>} [targetLanguages] Optional target languages. If not passed in, all allowed target languages for the source language will be returned.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode: string, targetLanguages?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse>> {\r\n            const localVarAxiosArgs = await AutomaticTranslationApiAxiosParamCreator(configuration).v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode, targetLanguages, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutomaticTranslationApi - factory interface\r\n * @export\r\n */\r\nexport const AutomaticTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Checks if automatic translation can be enabled for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse> {\r\n            return AutomaticTranslationApiFp(configuration).v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Returns the automatic translation quota info for a game.  The user must still have proper permissions for the game to get this info.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationGamesGameIdQuotaGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse> {\r\n            return AutomaticTranslationApiFp(configuration).v1AutomaticTranslationGamesGameIdQuotaGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Checks if the requested target languages are allowed for automatic translation based on the source language.  If there are no requested target languages, then all allowed target languages for the source language will be returned.\r\n         * @param {string} languageCode The source language.\r\n         * @param {Array<string>} [targetLanguages] Optional target languages. If not passed in, all allowed target languages for the source language will be returned.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode: string, targetLanguages?: Array<string>, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse> {\r\n            return AutomaticTranslationApiFp(configuration).v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode, targetLanguages, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AutomaticTranslationApi - interface\r\n * @export\r\n * @interface AutomaticTranslationApi\r\n */\r\nexport interface AutomaticTranslationApiInterface {\r\n    /**\r\n     * \r\n     * @summary Checks if automatic translation can be enabled for a game.  The user must still have proper permissions for the game to get this info.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApiInterface\r\n     */\r\n    v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Returns the automatic translation quota info for a game.  The user must still have proper permissions for the game to get this info.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApiInterface\r\n     */\r\n    v1AutomaticTranslationGamesGameIdQuotaGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Checks if the requested target languages are allowed for automatic translation based on the source language.  If there are no requested target languages, then all allowed target languages for the source language will be returned.\r\n     * @param {string} languageCode The source language.\r\n     * @param {Array<string>} [targetLanguages] Optional target languages. If not passed in, all allowed target languages for the source language will be returned.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApiInterface\r\n     */\r\n    v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode: string, targetLanguages?: Array<string>, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse>;\r\n\r\n}\r\n\r\n/**\r\n * AutomaticTranslationApi - object-oriented interface\r\n * @export\r\n * @class AutomaticTranslationApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AutomaticTranslationApi extends BaseAPI implements AutomaticTranslationApiInterface {\r\n    /**\r\n     * \r\n     * @summary Checks if automatic translation can be enabled for a game.  The user must still have proper permissions for the game to get this info.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApi\r\n     */\r\n    public v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId: number, options?: any) {\r\n        return AutomaticTranslationApiFp(this.configuration).v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Returns the automatic translation quota info for a game.  The user must still have proper permissions for the game to get this info.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApi\r\n     */\r\n    public v1AutomaticTranslationGamesGameIdQuotaGet(gameId: number, options?: any) {\r\n        return AutomaticTranslationApiFp(this.configuration).v1AutomaticTranslationGamesGameIdQuotaGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Checks if the requested target languages are allowed for automatic translation based on the source language.  If there are no requested target languages, then all allowed target languages for the source language will be returned.\r\n     * @param {string} languageCode The source language.\r\n     * @param {Array<string>} [targetLanguages] Optional target languages. If not passed in, all allowed target languages for the source language will be returned.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutomaticTranslationApi\r\n     */\r\n    public v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode: string, targetLanguages?: Array<string>, options?: any) {\r\n        return AutomaticTranslationApiFp(this.configuration).v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(languageCode, targetLanguages, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * BadgeApi - axios parameter creator\r\n * @export\r\n */\r\nexport const BadgeApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch: async (badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/description/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsGet: async (badgeId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdIconsGet.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/icons`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete: async (badgeId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a badge\\'s icon\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost: async (badgeId: number, languageCode: string, requestFiles?: any, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n            const localVarFormParams = new FormData();\r\n\r\n\r\n            if (requestFiles !== undefined) { \r\n                localVarFormParams.append('request.files', requestFiles as any);\r\n            }\r\n    \r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = localVarFormParams;\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} badgeId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionGet: async (badgeId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdNameDescriptionGet.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/name-description`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete: async (badgeId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch: async (badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch: async (badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeId' is not null or undefined\r\n            if (badgeId === null || badgeId === undefined) {\r\n                throw new RequiredError('badgeId','Required parameter badgeId was null or undefined when calling v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/badges/{badgeId}/name/language-codes/{languageCode}`\r\n                .replace(`{${\"badgeId\"}}`, encodeURIComponent(String(badgeId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BadgeApi - functional programming interface\r\n * @export\r\n */\r\nexport const BadgeApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdIconsGet(badgeId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdIconsGet(badgeId, width, height, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a badge\\'s icon\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId: number, languageCode: string, requestFiles?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId, languageCode, requestFiles, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} badgeId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdNameDescriptionGet(badgeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdNameDescriptionGet(badgeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameResponse>> {\r\n            const localVarAxiosArgs = await BadgeApiAxiosParamCreator(configuration).v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BadgeApi - factory interface\r\n * @export\r\n */\r\nexport const BadgeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsGet(badgeId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdIconsGet(badgeId, width, height, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a badge\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a badge\\'s icon\r\n         * @param {number} badgeId The id of the badge\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId, languageCode, requestFiles, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} badgeId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionGet(badgeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdNameDescriptionGet(badgeId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a badge\r\n         * @param {number} badgeId The badge id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateBadgeNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameResponse> {\r\n            return BadgeApiFp(configuration).v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * BadgeApi - interface\r\n * @export\r\n * @interface BadgeApi\r\n */\r\nexport interface BadgeApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a badge\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdIconsGet(badgeId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetBadgeIconResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a badge\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update a badge\\'s icon\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} badgeId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdNameDescriptionGet(badgeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name and description to Update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApiInterface\r\n     */\r\n    v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateBadgeNameResponse>;\r\n\r\n}\r\n\r\n/**\r\n * BadgeApi - object-oriented interface\r\n * @export\r\n * @class BadgeApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class BadgeApi extends BaseAPI implements BadgeApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeDescriptionRequest, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a badge\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdIconsGet(badgeId: number, width?: number, height?: number, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdIconsGet(badgeId, width, height, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a badge\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodeDelete(badgeId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update a badge\\'s icon\r\n     * @param {number} badgeId The id of the badge\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId: number, languageCode: string, requestFiles?: any, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdIconsLanguageCodesLanguageCodePost(badgeId, languageCode, requestFiles, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} badgeId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdNameDescriptionGet(badgeId: number, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdNameDescriptionGet(badgeId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId: number, languageCode: string, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodeDelete(badgeId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name and description to Update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameDescriptionRequest, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdNameDescriptionLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a badge\r\n     * @param {number} badgeId The badge id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateBadgeNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgeApi\r\n     */\r\n    public v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateBadgeNameRequest, options?: any) {\r\n        return BadgeApiFp(this.configuration).v1BadgesBadgeIdNameLanguageCodesLanguageCodePatch(badgeId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * DeveloperProductApi - axios parameter creator\r\n * @export\r\n */\r\nexport const DeveloperProductApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch: async (developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/description/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsGet: async (developerProductId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdIconsGet.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/icons`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete: async (developerProductId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a developer product\\'s icon\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost: async (developerProductId: number, languageCode: string, requestFiles?: any, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n            const localVarFormParams = new FormData();\r\n\r\n\r\n            if (requestFiles !== undefined) { \r\n                localVarFormParams.append('request.files', requestFiles as any);\r\n            }\r\n    \r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = localVarFormParams;\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a developer product\r\n         * @param {number} developerProductId The developer product Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionGet: async (developerProductId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionGet.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/name-description`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete: async (developerProductId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch: async (developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch: async (developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductId' is not null or undefined\r\n            if (developerProductId === null || developerProductId === undefined) {\r\n                throw new RequiredError('developerProductId','Required parameter developerProductId was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/developer-products/{developerProductId}/name/language-codes/{languageCode}`\r\n                .replace(`{${\"developerProductId\"}}`, encodeURIComponent(String(developerProductId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DeveloperProductApi - functional programming interface\r\n * @export\r\n */\r\nexport const DeveloperProductApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId, width, height, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a developer product\\'s icon\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId: number, languageCode: string, requestFiles?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId, languageCode, requestFiles, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a developer product\r\n         * @param {number} developerProductId The developer product Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse>> {\r\n            const localVarAxiosArgs = await DeveloperProductApiAxiosParamCreator(configuration).v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DeveloperProductApi - factory interface\r\n * @export\r\n */\r\nexport const DeveloperProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId, width, height, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a developer product\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a developer product\\'s icon\r\n         * @param {number} developerProductId The id of the developer product\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId, languageCode, requestFiles, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a developer product\r\n         * @param {number} developerProductId The developer product Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name and description to Update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a developer product\r\n         * @param {number} developerProductId The developer product id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse> {\r\n            return DeveloperProductApiFp(configuration).v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * DeveloperProductApi - interface\r\n * @export\r\n * @interface DeveloperProductApi\r\n */\r\nexport interface DeveloperProductApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a developer product\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetDeveloperProductIconResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a developer product\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update a developer product\\'s icon\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get all names and descriptions of a developer product\r\n     * @param {number} developerProductId The developer product Id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name and description to Update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApiInterface\r\n     */\r\n    v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateDeveloperProductNameResponse>;\r\n\r\n}\r\n\r\n/**\r\n * DeveloperProductApi - object-oriented interface\r\n * @export\r\n * @class DeveloperProductApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class DeveloperProductApi extends BaseAPI implements DeveloperProductApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductDescriptionRequest, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a developer product\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId: number, width?: number, height?: number, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdIconsGet(developerProductId, width, height, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a developer product\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update a developer product\\'s icon\r\n     * @param {number} developerProductId The id of the developer product\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId: number, languageCode: string, requestFiles?: any, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdIconsLanguageCodesLanguageCodePost(developerProductId, languageCode, requestFiles, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get all names and descriptions of a developer product\r\n     * @param {number} developerProductId The developer product Id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId: number, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionGet(developerProductId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId: number, languageCode: string, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodeDelete(developerProductId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name and description to Update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameDescriptionRequest, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdNameDescriptionLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a developer product\r\n     * @param {number} developerProductId The developer product id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductApi\r\n     */\r\n    public v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateDeveloperProductNameRequest, options?: any) {\r\n        return DeveloperProductApiFp(this.configuration).v1DeveloperProductsDeveloperProductIdNameLanguageCodesLanguageCodePatch(developerProductId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GameIconApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GameIconApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdGet: async (gameId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameIconGamesGameIdGet.');\r\n            }\r\n            const localVarPath = `/v1/game-icon/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete: async (gameId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/game-icon/games/{gameId}/language-codes/{languageCode}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game\\'s icon\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdLanguageCodesLanguageCodePost: async (gameId: number, languageCode: string, requestFiles?: any, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameIconGamesGameIdLanguageCodesLanguageCodePost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GameIconGamesGameIdLanguageCodesLanguageCodePost.');\r\n            }\r\n            const localVarPath = `/v1/game-icon/games/{gameId}/language-codes/{languageCode}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n            const localVarFormParams = new FormData();\r\n\r\n\r\n            if (requestFiles !== undefined) { \r\n                localVarFormParams.append('request.files', requestFiles as any);\r\n            }\r\n    \r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = localVarFormParams;\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameIconApi - functional programming interface\r\n * @export\r\n */\r\nexport const GameIconApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameIconGamesGameIdGet(gameId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse>> {\r\n            const localVarAxiosArgs = await GameIconApiAxiosParamCreator(configuration).v1GameIconGamesGameIdGet(gameId, width, height, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GameIconApiAxiosParamCreator(configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game\\'s icon\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId: number, languageCode: string, requestFiles?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GameIconApiAxiosParamCreator(configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId, languageCode, requestFiles, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameIconApi - factory interface\r\n * @export\r\n */\r\nexport const GameIconApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdGet(gameId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse> {\r\n            return GameIconApiFp(configuration).v1GameIconGamesGameIdGet(gameId, width, height, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return GameIconApiFp(configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game\\'s icon\r\n         * @param {number} gameId The id of the game\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object> {\r\n            return GameIconApiFp(configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId, languageCode, requestFiles, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GameIconApi - interface\r\n * @export\r\n * @interface GameIconApi\r\n */\r\nexport interface GameIconApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get all icons for a game\r\n     * @param {number} gameId The id of the game\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApiInterface\r\n     */\r\n    v1GameIconGamesGameIdGet(gameId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameIconResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a game\r\n     * @param {number} gameId The id of the game\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApiInterface\r\n     */\r\n    v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update a game\\'s icon\r\n     * @param {number} gameId The id of the game\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApiInterface\r\n     */\r\n    v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object>;\r\n\r\n}\r\n\r\n/**\r\n * GameIconApi - object-oriented interface\r\n * @export\r\n * @class GameIconApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GameIconApi extends BaseAPI implements GameIconApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get all icons for a game\r\n     * @param {number} gameId The id of the game\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApi\r\n     */\r\n    public v1GameIconGamesGameIdGet(gameId: number, width?: number, height?: number, options?: any) {\r\n        return GameIconApiFp(this.configuration).v1GameIconGamesGameIdGet(gameId, width, height, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a game\r\n     * @param {number} gameId The id of the game\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApi\r\n     */\r\n    public v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId: number, languageCode: string, options?: any) {\r\n        return GameIconApiFp(this.configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodeDelete(gameId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update a game\\'s icon\r\n     * @param {number} gameId The id of the game\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameIconApi\r\n     */\r\n    public v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId: number, languageCode: string, requestFiles?: any, options?: any) {\r\n        return GameIconApiFp(this.configuration).v1GameIconGamesGameIdLanguageCodesLanguageCodePost(gameId, languageCode, requestFiles, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GameLocalizationStatusApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GameLocalizationStatusApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for all languages of a game\r\n         * @param {number} gameId GameID of the game to get translation counts for\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationStatusGameIdTranslationCountsGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameLocalizationStatusGameIdTranslationCountsGet.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-status/{gameId}/translation-counts`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {Array<number>} gameIds List of game ids to retrieve translation counts for.\r\n         * @param {string} languageOrLocaleCode The code for the language or locale.\r\n         * @param {'Language' | 'Locale'} languageOrLocaleType Indicates whether the languageOrLocaleCode represents a language or locale.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet: async (gameIds: Array<number>, languageOrLocaleCode: string, languageOrLocaleType: 'Language' | 'Locale', options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameIds' is not null or undefined\r\n            if (gameIds === null || gameIds === undefined) {\r\n                throw new RequiredError('gameIds','Required parameter gameIds was null or undefined when calling v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet.');\r\n            }\r\n            // verify required parameter 'languageOrLocaleCode' is not null or undefined\r\n            if (languageOrLocaleCode === null || languageOrLocaleCode === undefined) {\r\n                throw new RequiredError('languageOrLocaleCode','Required parameter languageOrLocaleCode was null or undefined when calling v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet.');\r\n            }\r\n            // verify required parameter 'languageOrLocaleType' is not null or undefined\r\n            if (languageOrLocaleType === null || languageOrLocaleType === undefined) {\r\n                throw new RequiredError('languageOrLocaleType','Required parameter languageOrLocaleType was null or undefined when calling v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-status/translation-counts-for-language-or-locale`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameIds) {\r\n                localVarQueryParameter['gameIds'] = gameIds;\r\n            }\r\n\r\n            if (languageOrLocaleCode !== undefined) {\r\n                localVarQueryParameter['languageOrLocaleCode'] = languageOrLocaleCode;\r\n            }\r\n\r\n            if (languageOrLocaleType !== undefined) {\r\n                localVarQueryParameter['languageOrLocaleType'] = languageOrLocaleType;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameLocalizationStatusApi - functional programming interface\r\n * @export\r\n */\r\nexport const GameLocalizationStatusApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for all languages of a game\r\n         * @param {number} gameId GameID of the game to get translation counts for\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameLocalizationStatusGameIdTranslationCountsGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForGameResponse>> {\r\n            const localVarAxiosArgs = await GameLocalizationStatusApiAxiosParamCreator(configuration).v1GameLocalizationStatusGameIdTranslationCountsGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {Array<number>} gameIds List of game ids to retrieve translation counts for.\r\n         * @param {string} languageOrLocaleCode The code for the language or locale.\r\n         * @param {'Language' | 'Locale'} languageOrLocaleType Indicates whether the languageOrLocaleCode represents a language or locale.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds: Array<number>, languageOrLocaleCode: string, languageOrLocaleType: 'Language' | 'Locale', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse>> {\r\n            const localVarAxiosArgs = await GameLocalizationStatusApiAxiosParamCreator(configuration).v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds, languageOrLocaleCode, languageOrLocaleType, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameLocalizationStatusApi - factory interface\r\n * @export\r\n */\r\nexport const GameLocalizationStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for all languages of a game\r\n         * @param {number} gameId GameID of the game to get translation counts for\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationStatusGameIdTranslationCountsGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForGameResponse> {\r\n            return GameLocalizationStatusApiFp(configuration).v1GameLocalizationStatusGameIdTranslationCountsGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {Array<number>} gameIds List of game ids to retrieve translation counts for.\r\n         * @param {string} languageOrLocaleCode The code for the language or locale.\r\n         * @param {'Language' | 'Locale'} languageOrLocaleType Indicates whether the languageOrLocaleCode represents a language or locale.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds: Array<number>, languageOrLocaleCode: string, languageOrLocaleType: 'Language' | 'Locale', options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse> {\r\n            return GameLocalizationStatusApiFp(configuration).v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds, languageOrLocaleCode, languageOrLocaleType, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GameLocalizationStatusApi - interface\r\n * @export\r\n * @interface GameLocalizationStatusApi\r\n */\r\nexport interface GameLocalizationStatusApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for all languages of a game\r\n     * @param {number} gameId GameID of the game to get translation counts for\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationStatusApiInterface\r\n     */\r\n    v1GameLocalizationStatusGameIdTranslationCountsGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForGameResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n     * @param {Array<number>} gameIds List of game ids to retrieve translation counts for.\r\n     * @param {string} languageOrLocaleCode The code for the language or locale.\r\n     * @param {'Language' | 'Locale'} languageOrLocaleType Indicates whether the languageOrLocaleCode represents a language or locale.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationStatusApiInterface\r\n     */\r\n    v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds: Array<number>, languageOrLocaleCode: string, languageOrLocaleType: 'Language' | 'Locale', options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GameLocalizationStatusApi - object-oriented interface\r\n * @export\r\n * @class GameLocalizationStatusApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GameLocalizationStatusApi extends BaseAPI implements GameLocalizationStatusApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for all languages of a game\r\n     * @param {number} gameId GameID of the game to get translation counts for\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationStatusApi\r\n     */\r\n    public v1GameLocalizationStatusGameIdTranslationCountsGet(gameId: number, options?: any) {\r\n        return GameLocalizationStatusApiFp(this.configuration).v1GameLocalizationStatusGameIdTranslationCountsGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n     * @param {Array<number>} gameIds List of game ids to retrieve translation counts for.\r\n     * @param {string} languageOrLocaleCode The code for the language or locale.\r\n     * @param {'Language' | 'Locale'} languageOrLocaleType Indicates whether the languageOrLocaleCode represents a language or locale.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationStatusApi\r\n     */\r\n    public v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds: Array<number>, languageOrLocaleCode: string, languageOrLocaleType: 'Language' | 'Locale', options?: any) {\r\n        return GameLocalizationStatusApiFp(this.configuration).v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(gameIds, languageOrLocaleCode, languageOrLocaleType, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GamePassApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamePassApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch: async (gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/description/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsGet: async (gamePassId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdIconsGet.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/icons`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete: async (gamePassId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game pass\\'s icon\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost: async (gamePassId: number, languageCode: string, requestFiles?: any, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/icons/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n            const localVarFormParams = new FormData();\r\n\r\n\r\n            if (requestFiles !== undefined) { \r\n                localVarFormParams.append('request.files', requestFiles as any);\r\n            }\r\n    \r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = localVarFormParams;\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a game pass\r\n         * @param {number} gamePassId The game pass Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionGet: async (gamePassId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdNameDescriptionGet.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/name-description`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete: async (gamePassId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name/description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch: async (gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/name-description/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch: async (gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassId' is not null or undefined\r\n            if (gamePassId === null || gamePassId === undefined) {\r\n                throw new RequiredError('gamePassId','Required parameter gamePassId was null or undefined when calling v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch.');\r\n            }\r\n            const localVarPath = `/v1/game-passes/{gamePassId}/name/language-codes/{languageCode}`\r\n                .replace(`{${\"gamePassId\"}}`, encodeURIComponent(String(gamePassId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamePassApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdIconsGet(gamePassId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdIconsGet(gamePassId, width, height, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game pass\\'s icon\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId: number, languageCode: string, requestFiles?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId, languageCode, requestFiles, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a game pass\r\n         * @param {number} gamePassId The game pass Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdNameDescriptionGet(gamePassId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdNameDescriptionGet(gamePassId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name/description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameResponse>> {\r\n            const localVarAxiosArgs = await GamePassApiAxiosParamCreator(configuration).v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassApi - factory interface\r\n * @export\r\n */\r\nexport const GamePassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Update localized description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all icons for a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {number} [width] The width of the icon to request\r\n         * @param {number} [height] The height of the icon to request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsGet(gamePassId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdIconsGet(gamePassId, width, height, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete a localized icon from a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the localized icon to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update a game pass\\'s icon\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of this icon to update\r\n         * @param {any} [requestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId, languageCode, requestFiles, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get all names and descriptions of a game pass\r\n         * @param {number} gamePassId The game pass Id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionGet(gamePassId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdNameDescriptionGet(gamePassId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Delete localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name and description to delete\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name and description of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name/description to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update localized name of a game pass\r\n         * @param {number} gamePassId The game pass id\r\n         * @param {string} languageCode The language code of the name to update\r\n         * @param {RobloxGameInternationalizationApiUpdateGamePassNameRequest} request The request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameResponse> {\r\n            return GamePassApiFp(configuration).v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamePassApi - interface\r\n * @export\r\n * @interface GamePassApi\r\n */\r\nexport interface GamePassApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdIconsGet(gamePassId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGamePassIconResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update a game pass\\'s icon\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId: number, languageCode: string, requestFiles?: any, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get all names and descriptions of a game pass\r\n     * @param {number} gamePassId The game pass Id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdNameDescriptionGet(gamePassId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>;\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name/description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameDescriptionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApiInterface\r\n     */\r\n    v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateGamePassNameResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GamePassApi - object-oriented interface\r\n * @export\r\n * @class GamePassApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamePassApi extends BaseAPI implements GamePassApiInterface {\r\n    /**\r\n     * \r\n     * @summary Update localized description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassDescriptionRequest, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get all icons for a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {number} [width] The width of the icon to request\r\n     * @param {number} [height] The height of the icon to request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdIconsGet(gamePassId: number, width?: number, height?: number, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdIconsGet(gamePassId, width, height, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete a localized icon from a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the localized icon to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update a game pass\\'s icon\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of this icon to update\r\n     * @param {any} [requestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId: number, languageCode: string, requestFiles?: any, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdIconsLanguageCodesLanguageCodePost(gamePassId, languageCode, requestFiles, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get all names and descriptions of a game pass\r\n     * @param {number} gamePassId The game pass Id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdNameDescriptionGet(gamePassId: number, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdNameDescriptionGet(gamePassId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Delete localized name and description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name and description to delete\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId: number, languageCode: string, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodeDelete(gamePassId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name and description of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name/description to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameDescriptionRequest, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdNameDescriptionLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update localized name of a game pass\r\n     * @param {number} gamePassId The game pass id\r\n     * @param {string} languageCode The language code of the name to update\r\n     * @param {RobloxGameInternationalizationApiUpdateGamePassNameRequest} request The request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassApi\r\n     */\r\n    public v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId: number, languageCode: string, request: RobloxGameInternationalizationApiUpdateGamePassNameRequest, options?: any) {\r\n        return GamePassApiFp(this.configuration).v1GamePassesGamePassIdNameLanguageCodesLanguageCodePatch(gamePassId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GameThumbnailsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GameThumbnailsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the localized image ids in all languages for a game.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {number} [width] The width.\r\n         * @param {number} [height] The height.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdImagesGet: async (gameId: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameThumbnailsGamesGameIdImagesGet.');\r\n            }\r\n            const localVarPath = `/v1/game-thumbnails/games/{gameId}/images`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Uploads the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {any} [gameThumbnailRequestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost: async (gameId: number, languageCode: string, gameThumbnailRequestFiles?: any, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost.');\r\n            }\r\n            const localVarPath = `/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/image`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n            const localVarFormParams = new FormData();\r\n\r\n\r\n            if (gameThumbnailRequestFiles !== undefined) { \r\n                localVarFormParams.append('gameThumbnailRequest.files', gameThumbnailRequestFiles as any);\r\n            }\r\n    \r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = localVarFormParams;\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Deletes the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {number} imageId The image identifier.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete: async (gameId: number, languageCode: string, imageId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete.');\r\n            }\r\n            // verify required parameter 'imageId' is not null or undefined\r\n            if (imageId === null || imageId === undefined) {\r\n                throw new RequiredError('imageId','Required parameter imageId was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete.');\r\n            }\r\n            const localVarPath = `/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/{imageId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)))\r\n                .replace(`{${\"imageId\"}}`, encodeURIComponent(String(imageId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Orders the specified image Ids for the game thumbnails.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {RobloxGameInternationalizationApiSortImageIdsRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost: async (gameId: number, languageCode: string, request: RobloxGameInternationalizationApiSortImageIdsRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost.');\r\n            }\r\n            const localVarPath = `/v1/game-thumbnails/games/{gameId}/language-codes/{languageCode}/images/order`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameThumbnailsApi - functional programming interface\r\n * @export\r\n */\r\nexport const GameThumbnailsApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the localized image ids in all languages for a game.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {number} [width] The width.\r\n         * @param {number} [height] The height.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameThumbnailsGamesGameIdImagesGet(gameId: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse>> {\r\n            const localVarAxiosArgs = await GameThumbnailsApiAxiosParamCreator(configuration).v1GameThumbnailsGamesGameIdImagesGet(gameId, width, height, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Uploads the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {any} [gameThumbnailRequestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId: number, languageCode: string, gameThumbnailRequestFiles?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse>> {\r\n            const localVarAxiosArgs = await GameThumbnailsApiAxiosParamCreator(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId, languageCode, gameThumbnailRequestFiles, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Deletes the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {number} imageId The image identifier.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId: number, languageCode: string, imageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GameThumbnailsApiAxiosParamCreator(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId, languageCode, imageId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Orders the specified image Ids for the game thumbnails.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {RobloxGameInternationalizationApiSortImageIdsRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId: number, languageCode: string, request: RobloxGameInternationalizationApiSortImageIdsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await GameThumbnailsApiAxiosParamCreator(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId, languageCode, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameThumbnailsApi - factory interface\r\n * @export\r\n */\r\nexport const GameThumbnailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the localized image ids in all languages for a game.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {number} [width] The width.\r\n         * @param {number} [height] The height.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdImagesGet(gameId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse> {\r\n            return GameThumbnailsApiFp(configuration).v1GameThumbnailsGamesGameIdImagesGet(gameId, width, height, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Uploads the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {any} [gameThumbnailRequestFiles] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId: number, languageCode: string, gameThumbnailRequestFiles?: any, options?: any): AxiosPromise<RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse> {\r\n            return GameThumbnailsApiFp(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId, languageCode, gameThumbnailRequestFiles, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Deletes the game thumbnail.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {number} imageId The image identifier.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId: number, languageCode: string, imageId: number, options?: any): AxiosPromise<object> {\r\n            return GameThumbnailsApiFp(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId, languageCode, imageId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Orders the specified image Ids for the game thumbnails.\r\n         * @param {number} gameId The game identifier.\r\n         * @param {string} languageCode The language code.\r\n         * @param {RobloxGameInternationalizationApiSortImageIdsRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId: number, languageCode: string, request: RobloxGameInternationalizationApiSortImageIdsRequest, options?: any): AxiosPromise<object> {\r\n            return GameThumbnailsApiFp(configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId, languageCode, request, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GameThumbnailsApi - interface\r\n * @export\r\n * @interface GameThumbnailsApi\r\n */\r\nexport interface GameThumbnailsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the localized image ids in all languages for a game.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {number} [width] The width.\r\n     * @param {number} [height] The height.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApiInterface\r\n     */\r\n    v1GameThumbnailsGamesGameIdImagesGet(gameId: number, width?: number, height?: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiGetGameThumbnailsResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Uploads the game thumbnail.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {any} [gameThumbnailRequestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApiInterface\r\n     */\r\n    v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId: number, languageCode: string, gameThumbnailRequestFiles?: any, options?: any): AxiosPromise<RobloxGameInternationalizationApiModelsResponseUploadImageForGameThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Deletes the game thumbnail.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {number} imageId The image identifier.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApiInterface\r\n     */\r\n    v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId: number, languageCode: string, imageId: number, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Orders the specified image Ids for the game thumbnails.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {RobloxGameInternationalizationApiSortImageIdsRequest} request The request.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApiInterface\r\n     */\r\n    v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId: number, languageCode: string, request: RobloxGameInternationalizationApiSortImageIdsRequest, options?: any): AxiosPromise<object>;\r\n\r\n}\r\n\r\n/**\r\n * GameThumbnailsApi - object-oriented interface\r\n * @export\r\n * @class GameThumbnailsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GameThumbnailsApi extends BaseAPI implements GameThumbnailsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the localized image ids in all languages for a game.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {number} [width] The width.\r\n     * @param {number} [height] The height.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApi\r\n     */\r\n    public v1GameThumbnailsGamesGameIdImagesGet(gameId: number, width?: number, height?: number, options?: any) {\r\n        return GameThumbnailsApiFp(this.configuration).v1GameThumbnailsGamesGameIdImagesGet(gameId, width, height, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Uploads the game thumbnail.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {any} [gameThumbnailRequestFiles] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApi\r\n     */\r\n    public v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId: number, languageCode: string, gameThumbnailRequestFiles?: any, options?: any) {\r\n        return GameThumbnailsApiFp(this.configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagePost(gameId, languageCode, gameThumbnailRequestFiles, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Deletes the game thumbnail.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {number} imageId The image identifier.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApi\r\n     */\r\n    public v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId: number, languageCode: string, imageId: number, options?: any) {\r\n        return GameThumbnailsApiFp(this.configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesImageIdDelete(gameId, languageCode, imageId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Orders the specified image Ids for the game thumbnails.\r\n     * @param {number} gameId The game identifier.\r\n     * @param {string} languageCode The language code.\r\n     * @param {RobloxGameInternationalizationApiSortImageIdsRequest} request The request.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameThumbnailsApi\r\n     */\r\n    public v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId: number, languageCode: string, request: RobloxGameInternationalizationApiSortImageIdsRequest, options?: any) {\r\n        return GameThumbnailsApiFp(this.configuration).v1GameThumbnailsGamesGameIdLanguageCodesLanguageCodeImagesOrderPost(gameId, languageCode, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * LocalizationTableApi - axios parameter creator\r\n * @export\r\n */\r\nexport const LocalizationTableApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableAvailableLanguagesGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/localizationtable/available-languages`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game\r\n         * @param {number} gameId The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableGamesGameIdAssetsGenerationRequestPost: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1LocalizationtableGamesGameIdAssetsGenerationRequestPost.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/games/{gameId}/assets-generation-request`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableGametablesGameIdPatch: async (gameId: number, request: RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1LocalizationtableGametablesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1LocalizationtableGametablesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/gametables/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} assetId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesGet: async (assetId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'assetId' is not null or undefined\r\n            if (assetId === null || assetId === undefined) {\r\n                throw new RequiredError('assetId','Required parameter assetId was null or undefined when calling v1LocalizationtableTablesGet.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (assetId !== undefined) {\r\n                localVarQueryParameter['assetId'] = assetId;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {RobloxGameInternationalizationApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesPost: async (request: RobloxGameInternationalizationApiCreateTableRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1LocalizationtableTablesPost.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {string} [cursor] \r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntriesGet: async (tableId: string, cursor?: string, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            if (tableId === null || tableId === undefined) {\r\n                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling v1LocalizationtableTablesTableIdEntriesGet.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables/{tableId}/entries`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost: async (tableId: string, request: RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            if (tableId === null || tableId === undefined) {\r\n                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables/{tableId}/entries/translation-history`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntryCountGet: async (tableId: string, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            if (tableId === null || tableId === undefined) {\r\n                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling v1LocalizationtableTablesTableIdEntryCountGet.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables/{tableId}/entry-count`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdGet: async (tableId: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            if (tableId === null || tableId === undefined) {\r\n                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling v1LocalizationtableTablesTableIdGet.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables/{tableId}`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxGameInternationalizationApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdPatch: async (tableId: string, request: RobloxGameInternationalizationApiUpdateTableContentsRequest, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            if (tableId === null || tableId === undefined) {\r\n                throw new RequiredError('tableId','Required parameter tableId was null or undefined when calling v1LocalizationtableTablesTableIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1LocalizationtableTablesTableIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/localizationtable/tables/{tableId}`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - functional programming interface\r\n * @export\r\n */\r\nexport const LocalizationTableApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableAvailableLanguagesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableAvailableLanguagesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game\r\n         * @param {number} gameId The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableGametablesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableGametablesGameIdPatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} assetId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesGet(assetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTableResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesGet(assetId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {RobloxGameInternationalizationApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesPost(request: RobloxGameInternationalizationApiCreateTableRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiCreateTableResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesPost(request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {string} [cursor] \r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesPagedResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesTableIdEntriesGet(tableId, cursor, gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTableEntryCountResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesTableIdEntryCountGet(tableId, gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesTableIdGet(tableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetTableResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesTableIdGet(tableId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxGameInternationalizationApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationtableTablesTableIdPatch(tableId: string, request: RobloxGameInternationalizationApiUpdateTableContentsRequest, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateTableContentsResponse>> {\r\n            const localVarAxiosArgs = await LocalizationTableApiAxiosParamCreator(configuration).v1LocalizationtableTablesTableIdPatch(tableId, request, gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - factory interface\r\n * @export\r\n */\r\nexport const LocalizationTableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableAvailableLanguagesGet(options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableAvailableLanguagesGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game\r\n         * @param {number} gameId The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): AxiosPromise<object> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} gameId \r\n         * @param {RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableGametablesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableGametablesGameIdPatch(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} assetId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesGet(assetId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesGet(assetId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {RobloxGameInternationalizationApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesPost(request: RobloxGameInternationalizationApiCreateTableRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiCreateTableResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesPost(request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {string} [cursor] \r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesPagedResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesTableIdEntriesGet(tableId, cursor, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntryCountResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesTableIdEntryCountGet(tableId, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdGet(tableId: string, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesTableIdGet(tableId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxGameInternationalizationApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationtableTablesTableIdPatch(tableId: string, request: RobloxGameInternationalizationApiUpdateTableContentsRequest, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateTableContentsResponse> {\r\n            return LocalizationTableApiFp(configuration).v1LocalizationtableTablesTableIdPatch(tableId, request, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - interface\r\n * @export\r\n * @interface LocalizationTableApi\r\n */\r\nexport interface LocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the supported language codes that can be used by localization tables\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableAvailableLanguagesGet(options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage>;\r\n\r\n    /**\r\n     * \r\n     * @summary Generates localization asset of a game\r\n     * @param {number} gameId The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableGametablesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiAssociateLocalizationTablesToGameResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} assetId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesGet(assetId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {RobloxGameInternationalizationApiCreateTableRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesPost(request: RobloxGameInternationalizationApiCreateTableRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiCreateTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {string} tableId \r\n     * @param {string} [cursor] \r\n     * @param {number} [gameId] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesPagedResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the translation history for each entry passed in.\r\n     * @param {string} tableId The entries\\&#39; tableId.\r\n     * @param {RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the number of entries in the specified table\r\n     * @param {string} tableId The table id\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableEntryCountResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {string} tableId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesTableIdGet(tableId: string, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Updates the tables contents based on what is provided.\r\n     * @param {string} tableId The table guid for the table to update.\r\n     * @param {RobloxGameInternationalizationApiUpdateTableContentsRequest} request The metadata object is optional.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationtableTablesTableIdPatch(tableId: string, request: RobloxGameInternationalizationApiUpdateTableContentsRequest, gameId?: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateTableContentsResponse>;\r\n\r\n}\r\n\r\n/**\r\n * LocalizationTableApi - object-oriented interface\r\n * @export\r\n * @class LocalizationTableApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class LocalizationTableApi extends BaseAPI implements LocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the supported language codes that can be used by localization tables\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableAvailableLanguagesGet(options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableAvailableLanguagesGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Generates localization asset of a game\r\n     * @param {number} gameId The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableGamesGameIdAssetsGenerationRequestPost(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} gameId \r\n     * @param {RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableGametablesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiAssociateLocalizationTablesToGameRequest, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableGametablesGameIdPatch(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} assetId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesGet(assetId: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesGet(assetId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {RobloxGameInternationalizationApiCreateTableRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesPost(request: RobloxGameInternationalizationApiCreateTableRequest, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesPost(request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} tableId \r\n     * @param {string} [cursor] \r\n     * @param {number} [gameId] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesTableIdEntriesGet(tableId, cursor, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the translation history for each entry passed in.\r\n     * @param {string} tableId The entries\\&#39; tableId.\r\n     * @param {RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxGameInternationalizationApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the number of entries in the specified table\r\n     * @param {string} tableId The table id\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesTableIdEntryCountGet(tableId, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} tableId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesTableIdGet(tableId: string, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesTableIdGet(tableId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Updates the tables contents based on what is provided.\r\n     * @param {string} tableId The table guid for the table to update.\r\n     * @param {RobloxGameInternationalizationApiUpdateTableContentsRequest} request The metadata object is optional.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationtableTablesTableIdPatch(tableId: string, request: RobloxGameInternationalizationApiUpdateTableContentsRequest, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationtableTablesTableIdPatch(tableId, request, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * NameDescriptionApi - axios parameter creator\r\n * @export\r\n */\r\nexport const NameDescriptionApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a game\\'s name and description in all supported languages\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1NameDescriptionGamesGameIdGet.');\r\n            }\r\n            const localVarPath = `/v1/name-description/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the history for name or description in a provided language.\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdHistoryPost: async (gameId: number, request: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1NameDescriptionGamesGameIdHistoryPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1NameDescriptionGamesGameIdHistoryPost.');\r\n            }\r\n            const localVarPath = `/v1/name-description/games/{gameId}/history`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates a game\\'s name and description in multiple languages.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiUpdateNameDescriptionsRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdPatch: async (gameId: number, request: RobloxGameInternationalizationApiUpdateNameDescriptionsRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1NameDescriptionGamesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1NameDescriptionGamesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/name-description/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for name/description migration to new page\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/name-description/metadata`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * NameDescriptionApi - functional programming interface\r\n * @export\r\n */\r\nexport const NameDescriptionApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a game\\'s name and description in all supported languages\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1NameDescriptionGamesGameIdGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>> {\r\n            const localVarAxiosArgs = await NameDescriptionApiAxiosParamCreator(configuration).v1NameDescriptionGamesGameIdGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the history for name or description in a provided language.\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1NameDescriptionGamesGameIdHistoryPost(gameId: number, request: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse>> {\r\n            const localVarAxiosArgs = await NameDescriptionApiAxiosParamCreator(configuration).v1NameDescriptionGamesGameIdHistoryPost(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates a game\\'s name and description in multiple languages.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiUpdateNameDescriptionsRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1NameDescriptionGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiUpdateNameDescriptionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateNameDescriptionsResponse>> {\r\n            const localVarAxiosArgs = await NameDescriptionApiAxiosParamCreator(configuration).v1NameDescriptionGamesGameIdPatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for name/description migration to new page\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1NameDescriptionMetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse>> {\r\n            const localVarAxiosArgs = await NameDescriptionApiAxiosParamCreator(configuration).v1NameDescriptionMetadataGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * NameDescriptionApi - factory interface\r\n * @export\r\n */\r\nexport const NameDescriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a game\\'s name and description in all supported languages\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription> {\r\n            return NameDescriptionApiFp(configuration).v1NameDescriptionGamesGameIdGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the history for name or description in a provided language.\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest} request The request.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdHistoryPost(gameId: number, request: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse> {\r\n            return NameDescriptionApiFp(configuration).v1NameDescriptionGamesGameIdHistoryPost(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates a game\\'s name and description in multiple languages.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxGameInternationalizationApiUpdateNameDescriptionsRequest} request The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiUpdateNameDescriptionsRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateNameDescriptionsResponse> {\r\n            return NameDescriptionApiFp(configuration).v1NameDescriptionGamesGameIdPatch(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for name/description migration to new page\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1NameDescriptionMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse> {\r\n            return NameDescriptionApiFp(configuration).v1NameDescriptionMetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * NameDescriptionApi - interface\r\n * @export\r\n * @interface NameDescriptionApi\r\n */\r\nexport interface NameDescriptionApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets a game\\'s name and description in all supported languages\r\n     * @param {number} gameId The id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApiInterface\r\n     */\r\n    v1NameDescriptionGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiNameDescription>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the history for name or description in a provided language.\r\n     * @param {number} gameId The id of the game\r\n     * @param {RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest} request The request.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApiInterface\r\n     */\r\n    v1NameDescriptionGamesGameIdHistoryPost(gameId: number, request: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetNameDescriptionHistoryResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Updates a game\\'s name and description in multiple languages.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiUpdateNameDescriptionsRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApiInterface\r\n     */\r\n    v1NameDescriptionGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiUpdateNameDescriptionsRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateNameDescriptionsResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Rollout settings for name/description migration to new page\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApiInterface\r\n     */\r\n    v1NameDescriptionMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiModelsResponseGameNameDescriptionMetadataResponse>;\r\n\r\n}\r\n\r\n/**\r\n * NameDescriptionApi - object-oriented interface\r\n * @export\r\n * @class NameDescriptionApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class NameDescriptionApi extends BaseAPI implements NameDescriptionApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets a game\\'s name and description in all supported languages\r\n     * @param {number} gameId The id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApi\r\n     */\r\n    public v1NameDescriptionGamesGameIdGet(gameId: number, options?: any) {\r\n        return NameDescriptionApiFp(this.configuration).v1NameDescriptionGamesGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the history for name or description in a provided language.\r\n     * @param {number} gameId The id of the game\r\n     * @param {RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest} request The request.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApi\r\n     */\r\n    public v1NameDescriptionGamesGameIdHistoryPost(gameId: number, request: RobloxGameInternationalizationApiGetNameDescriptionHistoryRequest, options?: any) {\r\n        return NameDescriptionApiFp(this.configuration).v1NameDescriptionGamesGameIdHistoryPost(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Updates a game\\'s name and description in multiple languages.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxGameInternationalizationApiUpdateNameDescriptionsRequest} request The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApi\r\n     */\r\n    public v1NameDescriptionGamesGameIdPatch(gameId: number, request: RobloxGameInternationalizationApiUpdateNameDescriptionsRequest, options?: any) {\r\n        return NameDescriptionApiFp(this.configuration).v1NameDescriptionGamesGameIdPatch(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Rollout settings for name/description migration to new page\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof NameDescriptionApi\r\n     */\r\n    public v1NameDescriptionMetadataGet(options?: any) {\r\n        return NameDescriptionApiFp(this.configuration).v1NameDescriptionMetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * PlayerPolicyApi - axios parameter creator\r\n * @export\r\n */\r\nexport const PlayerPolicyApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesAllValuesGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/player-policies/all-values`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesClientGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/player-policies-client`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} userId \r\n         * @param {string} ipAddress \r\n         * @param {string} userAgent \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesRccGet: async (userId: number, ipAddress: string, userAgent: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userId' is not null or undefined\r\n            if (userId === null || userId === undefined) {\r\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling v1PlayerPoliciesRccGet.');\r\n            }\r\n            // verify required parameter 'ipAddress' is not null or undefined\r\n            if (ipAddress === null || ipAddress === undefined) {\r\n                throw new RequiredError('ipAddress','Required parameter ipAddress was null or undefined when calling v1PlayerPoliciesRccGet.');\r\n            }\r\n            // verify required parameter 'userAgent' is not null or undefined\r\n            if (userAgent === null || userAgent === undefined) {\r\n                throw new RequiredError('userAgent','Required parameter userAgent was null or undefined when calling v1PlayerPoliciesRccGet.');\r\n            }\r\n            const localVarPath = `/v1/player-policies-rcc`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userId !== undefined) {\r\n                localVarQueryParameter['userId'] = userId;\r\n            }\r\n\r\n            if (ipAddress !== undefined) {\r\n                localVarQueryParameter['ipAddress'] = ipAddress;\r\n            }\r\n\r\n            if (userAgent !== undefined) {\r\n                localVarQueryParameter['userAgent'] = userAgent;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * PlayerPolicyApi - functional programming interface\r\n * @export\r\n */\r\nexport const PlayerPolicyApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1PlayerPoliciesAllValuesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>> {\r\n            const localVarAxiosArgs = await PlayerPolicyApiAxiosParamCreator(configuration).v1PlayerPoliciesAllValuesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1PlayerPoliciesClientGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>> {\r\n            const localVarAxiosArgs = await PlayerPolicyApiAxiosParamCreator(configuration).v1PlayerPoliciesClientGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} userId \r\n         * @param {string} ipAddress \r\n         * @param {string} userAgent \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1PlayerPoliciesRccGet(userId: number, ipAddress: string, userAgent: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>> {\r\n            const localVarAxiosArgs = await PlayerPolicyApiAxiosParamCreator(configuration).v1PlayerPoliciesRccGet(userId, ipAddress, userAgent, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * PlayerPolicyApi - factory interface\r\n * @export\r\n */\r\nexport const PlayerPolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesAllValuesGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse> {\r\n            return PlayerPolicyApiFp(configuration).v1PlayerPoliciesAllValuesGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesClientGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse> {\r\n            return PlayerPolicyApiFp(configuration).v1PlayerPoliciesClientGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @param {number} userId \r\n         * @param {string} ipAddress \r\n         * @param {string} userAgent \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlayerPoliciesRccGet(userId: number, ipAddress: string, userAgent: string, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse> {\r\n            return PlayerPolicyApiFp(configuration).v1PlayerPoliciesRccGet(userId, ipAddress, userAgent, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * PlayerPolicyApi - interface\r\n * @export\r\n * @interface PlayerPolicyApi\r\n */\r\nexport interface PlayerPolicyApiInterface {\r\n    /**\r\n     * \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApiInterface\r\n     */\r\n    v1PlayerPoliciesAllValuesGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApiInterface\r\n     */\r\n    v1PlayerPoliciesClientGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>;\r\n\r\n    /**\r\n     * \r\n     * @param {number} userId \r\n     * @param {string} ipAddress \r\n     * @param {string} userAgent \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApiInterface\r\n     */\r\n    v1PlayerPoliciesRccGet(userId: number, ipAddress: string, userAgent: string, options?: any): AxiosPromise<RobloxGameInternationalizationApiGetPlayerPoliciesResponse>;\r\n\r\n}\r\n\r\n/**\r\n * PlayerPolicyApi - object-oriented interface\r\n * @export\r\n * @class PlayerPolicyApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class PlayerPolicyApi extends BaseAPI implements PlayerPolicyApiInterface {\r\n    /**\r\n     * \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApi\r\n     */\r\n    public v1PlayerPoliciesAllValuesGet(options?: any) {\r\n        return PlayerPolicyApiFp(this.configuration).v1PlayerPoliciesAllValuesGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApi\r\n     */\r\n    public v1PlayerPoliciesClientGet(options?: any) {\r\n        return PlayerPolicyApiFp(this.configuration).v1PlayerPoliciesClientGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} userId \r\n     * @param {string} ipAddress \r\n     * @param {string} userAgent \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlayerPolicyApi\r\n     */\r\n    public v1PlayerPoliciesRccGet(userId: number, ipAddress: string, userAgent: string, options?: any) {\r\n        return PlayerPolicyApiFp(this.configuration).v1PlayerPoliciesRccGet(userId, ipAddress, userAgent, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SourceLanguageApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SourceLanguageApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SourceLanguageGamesGameIdGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SourceLanguageGamesGameIdGet.');\r\n            }\r\n            const localVarPath = `/v1/source-language/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {string} languageCode \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SourceLanguageGamesGameIdPatch: async (gameId: number, languageCode: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SourceLanguageGamesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1SourceLanguageGamesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/source-language/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (languageCode !== undefined) {\r\n                localVarQueryParameter['languageCode'] = languageCode;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SourceLanguageApi - functional programming interface\r\n * @export\r\n */\r\nexport const SourceLanguageApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SourceLanguageGamesGameIdGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiLanguage>> {\r\n            const localVarAxiosArgs = await SourceLanguageApiAxiosParamCreator(configuration).v1SourceLanguageGamesGameIdGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {string} languageCode \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SourceLanguageGamesGameIdPatch(gameId: number, languageCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await SourceLanguageApiAxiosParamCreator(configuration).v1SourceLanguageGamesGameIdPatch(gameId, languageCode, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SourceLanguageApi - factory interface\r\n * @export\r\n */\r\nexport const SourceLanguageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SourceLanguageGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiLanguage> {\r\n            return SourceLanguageApiFp(configuration).v1SourceLanguageGamesGameIdGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets the source language of a game\r\n         * @param {number} gameId \r\n         * @param {string} languageCode \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SourceLanguageGamesGameIdPatch(gameId: number, languageCode: string, options?: any): AxiosPromise<object> {\r\n            return SourceLanguageApiFp(configuration).v1SourceLanguageGamesGameIdPatch(gameId, languageCode, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * SourceLanguageApi - interface\r\n * @export\r\n * @interface SourceLanguageApi\r\n */\r\nexport interface SourceLanguageApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the source language of a game\r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SourceLanguageApiInterface\r\n     */\r\n    v1SourceLanguageGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxGameInternationalizationApiLanguage>;\r\n\r\n    /**\r\n     * \r\n     * @summary Sets the source language of a game\r\n     * @param {number} gameId \r\n     * @param {string} languageCode \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SourceLanguageApiInterface\r\n     */\r\n    v1SourceLanguageGamesGameIdPatch(gameId: number, languageCode: string, options?: any): AxiosPromise<object>;\r\n\r\n}\r\n\r\n/**\r\n * SourceLanguageApi - object-oriented interface\r\n * @export\r\n * @class SourceLanguageApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SourceLanguageApi extends BaseAPI implements SourceLanguageApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the source language of a game\r\n     * @param {number} gameId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SourceLanguageApi\r\n     */\r\n    public v1SourceLanguageGamesGameIdGet(gameId: number, options?: any) {\r\n        return SourceLanguageApiFp(this.configuration).v1SourceLanguageGamesGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Sets the source language of a game\r\n     * @param {number} gameId \r\n     * @param {string} languageCode \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SourceLanguageApi\r\n     */\r\n    public v1SourceLanguageGamesGameIdPatch(gameId: number, languageCode: string, options?: any) {\r\n        return SourceLanguageApiFp(this.configuration).v1SourceLanguageGamesGameIdPatch(gameId, languageCode, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SupportedLanguagesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SupportedLanguagesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the automatic translation status of supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}/automatic-translation-status`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get the supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdGet.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enable or disable automatic translation for a game and language.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {string} languageCode The language to enable or disable for automatic translation.\r\n         * @param {boolean} enableAutomaticTranslation Flag to indicate if automatic translation should be enabled or disabled.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch: async (gameId: number, languageCode: string, enableAutomaticTranslation: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch.');\r\n            }\r\n            // verify required parameter 'enableAutomaticTranslation' is not null or undefined\r\n            if (enableAutomaticTranslation === null || enableAutomaticTranslation === undefined) {\r\n                throw new RequiredError('enableAutomaticTranslation','Required parameter enableAutomaticTranslation was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}/languages/{languageCode}/automatic-translation-status`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof enableAutomaticTranslation !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enableAutomaticTranslation !== undefined ? enableAutomaticTranslation : {}) : (enableAutomaticTranslation || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update the switch which controls if the UniverseDisplayInformation should be automatically translated.\r\n         * @param {number} gameId The game id.\r\n         * @param {string} languageCode \r\n         * @param {boolean} enableUniverseDisplayInfoAutomaticTranslation \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch: async (gameId: number, languageCode: string, enableUniverseDisplayInfoAutomaticTranslation: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch.');\r\n            }\r\n            // verify required parameter 'languageCode' is not null or undefined\r\n            if (languageCode === null || languageCode === undefined) {\r\n                throw new RequiredError('languageCode','Required parameter languageCode was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch.');\r\n            }\r\n            // verify required parameter 'enableUniverseDisplayInfoAutomaticTranslation' is not null or undefined\r\n            if (enableUniverseDisplayInfoAutomaticTranslation === null || enableUniverseDisplayInfoAutomaticTranslation === undefined) {\r\n                throw new RequiredError('enableUniverseDisplayInfoAutomaticTranslation','Required parameter enableUniverseDisplayInfoAutomaticTranslation was null or undefined when calling v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}/languages/{languageCode}/universe-display-info-automatic-translation-settings`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"languageCode\"}}`, encodeURIComponent(String(languageCode)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof enableUniverseDisplayInfoAutomaticTranslation !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enableUniverseDisplayInfoAutomaticTranslation !== undefined ? enableUniverseDisplayInfoAutomaticTranslation : {}) : (enableUniverseDisplayInfoAutomaticTranslation || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Add or remove supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {Array<RobloxGameInternationalizationApiPatchLanguage>} languages The languages to add or remove. LanguageCodeType can be \\&quot;Language\\&quot; or \\&quot;Locale\\&quot;.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdPatch: async (gameId: number, languages: Array<RobloxGameInternationalizationApiPatchLanguage>, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'languages' is not null or undefined\r\n            if (languages === null || languages === undefined) {\r\n                throw new RequiredError('languages','Required parameter languages was null or undefined when calling v1SupportedLanguagesGamesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof languages !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(languages !== undefined ? languages : {}) : (languages || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get UniverseDisplayInfo automatic translation settings..\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet.');\r\n            }\r\n            const localVarPath = `/v1/supported-languages/games/{gameId}/universe-display-info-automatic-translation-settings`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for supported languages of a game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/supported-languages/metadata`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - functional programming interface\r\n * @export\r\n */\r\nexport const SupportedLanguagesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the automatic translation status of supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get the supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enable or disable automatic translation for a game and language.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {string} languageCode The language to enable or disable for automatic translation.\r\n         * @param {boolean} enableAutomaticTranslation Flag to indicate if automatic translation should be enabled or disabled.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId: number, languageCode: string, enableAutomaticTranslation: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId, languageCode, enableAutomaticTranslation, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update the switch which controls if the UniverseDisplayInformation should be automatically translated.\r\n         * @param {number} gameId The game id.\r\n         * @param {string} languageCode \r\n         * @param {boolean} enableUniverseDisplayInfoAutomaticTranslation \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId: number, languageCode: string, enableUniverseDisplayInfoAutomaticTranslation: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId, languageCode, enableUniverseDisplayInfoAutomaticTranslation, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Add or remove supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {Array<RobloxGameInternationalizationApiPatchLanguage>} languages The languages to add or remove. LanguageCodeType can be \\&quot;Language\\&quot; or \\&quot;Locale\\&quot;.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdPatch(gameId: number, languages: Array<RobloxGameInternationalizationApiPatchLanguage>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdPatch(gameId, languages, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get UniverseDisplayInfo automatic translation settings..\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for supported languages of a game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1SupportedLanguagesMetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse>> {\r\n            const localVarAxiosArgs = await SupportedLanguagesApiAxiosParamCreator(configuration).v1SupportedLanguagesMetadataGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - factory interface\r\n * @export\r\n */\r\nexport const SupportedLanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the automatic translation status of supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get the supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enable or disable automatic translation for a game and language.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {string} languageCode The language to enable or disable for automatic translation.\r\n         * @param {boolean} enableAutomaticTranslation Flag to indicate if automatic translation should be enabled or disabled.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId: number, languageCode: string, enableAutomaticTranslation: boolean, options?: any): AxiosPromise<RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId, languageCode, enableAutomaticTranslation, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Update the switch which controls if the UniverseDisplayInformation should be automatically translated.\r\n         * @param {number} gameId The game id.\r\n         * @param {string} languageCode \r\n         * @param {boolean} enableUniverseDisplayInfoAutomaticTranslation \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId: number, languageCode: string, enableUniverseDisplayInfoAutomaticTranslation: boolean, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId, languageCode, enableUniverseDisplayInfoAutomaticTranslation, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Add or remove supported languages for a game.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {Array<RobloxGameInternationalizationApiPatchLanguage>} languages The languages to add or remove. LanguageCodeType can be \\&quot;Language\\&quot; or \\&quot;Locale\\&quot;.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdPatch(gameId: number, languages: Array<RobloxGameInternationalizationApiPatchLanguage>, options?: any): AxiosPromise<object> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdPatch(gameId, languages, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get UniverseDisplayInfo automatic translation settings..\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Rollout settings for supported languages of a game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1SupportedLanguagesMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse> {\r\n            return SupportedLanguagesApiFp(configuration).v1SupportedLanguagesMetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - interface\r\n * @export\r\n * @interface SupportedLanguagesApi\r\n */\r\nexport interface SupportedLanguagesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the automatic translation status of supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get the supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale>;\r\n\r\n    /**\r\n     * \r\n     * @summary Enable or disable automatic translation for a game and language.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {string} languageCode The language to enable or disable for automatic translation.\r\n     * @param {boolean} enableAutomaticTranslation Flag to indicate if automatic translation should be enabled or disabled.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId: number, languageCode: string, enableAutomaticTranslation: boolean, options?: any): AxiosPromise<RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Update the switch which controls if the UniverseDisplayInformation should be automatically translated.\r\n     * @param {number} gameId The game id.\r\n     * @param {string} languageCode \r\n     * @param {boolean} enableUniverseDisplayInfoAutomaticTranslation \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId: number, languageCode: string, enableUniverseDisplayInfoAutomaticTranslation: boolean, options?: any): AxiosPromise<RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Add or remove supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {Array<RobloxGameInternationalizationApiPatchLanguage>} languages The languages to add or remove. LanguageCodeType can be \\&quot;Language\\&quot; or \\&quot;Locale\\&quot;.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdPatch(gameId: number, languages: Array<RobloxGameInternationalizationApiPatchLanguage>, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get UniverseDisplayInfo automatic translation settings..\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings>;\r\n\r\n    /**\r\n     * \r\n     * @summary Rollout settings for supported languages of a game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApiInterface\r\n     */\r\n    v1SupportedLanguagesMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse>;\r\n\r\n}\r\n\r\n/**\r\n * SupportedLanguagesApi - object-oriented interface\r\n * @export\r\n * @class SupportedLanguagesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SupportedLanguagesApi extends BaseAPI implements SupportedLanguagesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the automatic translation status of supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId: number, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get the supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdGet(gameId: number, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Enable or disable automatic translation for a game and language.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {string} languageCode The language to enable or disable for automatic translation.\r\n     * @param {boolean} enableAutomaticTranslation Flag to indicate if automatic translation should be enabled or disabled.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId: number, languageCode: string, enableAutomaticTranslation: boolean, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId, languageCode, enableAutomaticTranslation, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Update the switch which controls if the UniverseDisplayInformation should be automatically translated.\r\n     * @param {number} gameId The game id.\r\n     * @param {string} languageCode \r\n     * @param {boolean} enableUniverseDisplayInfoAutomaticTranslation \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId: number, languageCode: string, enableUniverseDisplayInfoAutomaticTranslation: boolean, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId, languageCode, enableUniverseDisplayInfoAutomaticTranslation, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Add or remove supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {Array<RobloxGameInternationalizationApiPatchLanguage>} languages The languages to add or remove. LanguageCodeType can be \\&quot;Language\\&quot; or \\&quot;Locale\\&quot;.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdPatch(gameId: number, languages: Array<RobloxGameInternationalizationApiPatchLanguage>, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdPatch(gameId, languages, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get UniverseDisplayInfo automatic translation settings..\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId: number, options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Rollout settings for supported languages of a game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SupportedLanguagesApi\r\n     */\r\n    public v1SupportedLanguagesMetadataGet(options?: any) {\r\n        return SupportedLanguagesApiFp(this.configuration).v1SupportedLanguagesMetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * TranslationAnalyticsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const TranslationAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Download translation analytics report after the report is ready\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {string} startDateTime The inclusive start dateTime of report in UTC\r\n         * @param {string} endDateTime The exclusive end dateTime of report in UTC\r\n         * @param {'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test'} reportType The report type\r\n         * @param {number} reportSubjectTargetId The translator group id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet: async (gameId: number, startDateTime: string, endDateTime: string, reportType: 'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test', reportSubjectTargetId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet.');\r\n            }\r\n            // verify required parameter 'startDateTime' is not null or undefined\r\n            if (startDateTime === null || startDateTime === undefined) {\r\n                throw new RequiredError('startDateTime','Required parameter startDateTime was null or undefined when calling v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet.');\r\n            }\r\n            // verify required parameter 'endDateTime' is not null or undefined\r\n            if (endDateTime === null || endDateTime === undefined) {\r\n                throw new RequiredError('endDateTime','Required parameter endDateTime was null or undefined when calling v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet.');\r\n            }\r\n            // verify required parameter 'reportType' is not null or undefined\r\n            if (reportType === null || reportType === undefined) {\r\n                throw new RequiredError('reportType','Required parameter reportType was null or undefined when calling v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet.');\r\n            }\r\n            // verify required parameter 'reportSubjectTargetId' is not null or undefined\r\n            if (reportSubjectTargetId === null || reportSubjectTargetId === undefined) {\r\n                throw new RequiredError('reportSubjectTargetId','Required parameter reportSubjectTargetId was null or undefined when calling v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet.');\r\n            }\r\n            const localVarPath = `/v1/translation-analytics/games/{gameId}/download-translation-analytics-report`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (startDateTime !== undefined) {\r\n                localVarQueryParameter['startDateTime'] = startDateTime;\r\n            }\r\n\r\n            if (endDateTime !== undefined) {\r\n                localVarQueryParameter['endDateTime'] = endDateTime;\r\n            }\r\n\r\n            if (reportType !== undefined) {\r\n                localVarQueryParameter['reportType'] = reportType;\r\n            }\r\n\r\n            if (reportSubjectTargetId !== undefined) {\r\n                localVarQueryParameter['reportSubjectTargetId'] = reportSubjectTargetId;\r\n            }\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Request translation analytics report to be generated\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost: async (gameId: number, request: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost.');\r\n            }\r\n            const localVarPath = `/v1/translation-analytics/games/{gameId}/request-translation-analytics-report`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            const needsSerialization = (typeof request !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata related to UI and rollout settings\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/translation-analytics/metadata`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * TranslationAnalyticsApi - functional programming interface\r\n * @export\r\n */\r\nexport const TranslationAnalyticsApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Download translation analytics report after the report is ready\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {string} startDateTime The inclusive start dateTime of report in UTC\r\n         * @param {string} endDateTime The exclusive end dateTime of report in UTC\r\n         * @param {'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test'} reportType The report type\r\n         * @param {number} reportSubjectTargetId The translator group id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId: number, startDateTime: string, endDateTime: string, reportType: 'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test', reportSubjectTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await TranslationAnalyticsApiAxiosParamCreator(configuration).v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId, startDateTime, endDateTime, reportType, reportSubjectTargetId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Request translation analytics report to be generated\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId: number, request: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse>> {\r\n            const localVarAxiosArgs = await TranslationAnalyticsApiAxiosParamCreator(configuration).v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata related to UI and rollout settings\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1TranslationAnalyticsMetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse>> {\r\n            const localVarAxiosArgs = await TranslationAnalyticsApiAxiosParamCreator(configuration).v1TranslationAnalyticsMetadataGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * TranslationAnalyticsApi - factory interface\r\n * @export\r\n */\r\nexport const TranslationAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Download translation analytics report after the report is ready\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {string} startDateTime The inclusive start dateTime of report in UTC\r\n         * @param {string} endDateTime The exclusive end dateTime of report in UTC\r\n         * @param {'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test'} reportType The report type\r\n         * @param {number} reportSubjectTargetId The translator group id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId: number, startDateTime: string, endDateTime: string, reportType: 'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test', reportSubjectTargetId: number, options?: any): AxiosPromise<object> {\r\n            return TranslationAnalyticsApiFp(configuration).v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId, startDateTime, endDateTime, reportType, reportSubjectTargetId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Request translation analytics report to be generated\r\n         * @param {number} gameId The game\\&#39;s id\r\n         * @param {RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId: number, request: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse> {\r\n            return TranslationAnalyticsApiFp(configuration).v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata related to UI and rollout settings\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1TranslationAnalyticsMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse> {\r\n            return TranslationAnalyticsApiFp(configuration).v1TranslationAnalyticsMetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * TranslationAnalyticsApi - interface\r\n * @export\r\n * @interface TranslationAnalyticsApi\r\n */\r\nexport interface TranslationAnalyticsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Download translation analytics report after the report is ready\r\n     * @param {number} gameId The game\\&#39;s id\r\n     * @param {string} startDateTime The inclusive start dateTime of report in UTC\r\n     * @param {string} endDateTime The exclusive end dateTime of report in UTC\r\n     * @param {'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test'} reportType The report type\r\n     * @param {number} reportSubjectTargetId The translator group id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApiInterface\r\n     */\r\n    v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId: number, startDateTime: string, endDateTime: string, reportType: 'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test', reportSubjectTargetId: number, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Request translation analytics report to be generated\r\n     * @param {number} gameId The game\\&#39;s id\r\n     * @param {RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest} request The request body\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApiInterface\r\n     */\r\n    v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId: number, request: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest, options?: any): AxiosPromise<RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get metadata related to UI and rollout settings\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApiInterface\r\n     */\r\n    v1TranslationAnalyticsMetadataGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse>;\r\n\r\n}\r\n\r\n/**\r\n * TranslationAnalyticsApi - object-oriented interface\r\n * @export\r\n * @class TranslationAnalyticsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class TranslationAnalyticsApi extends BaseAPI implements TranslationAnalyticsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Download translation analytics report after the report is ready\r\n     * @param {number} gameId The game\\&#39;s id\r\n     * @param {string} startDateTime The inclusive start dateTime of report in UTC\r\n     * @param {string} endDateTime The exclusive end dateTime of report in UTC\r\n     * @param {'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test'} reportType The report type\r\n     * @param {number} reportSubjectTargetId The translator group id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApi\r\n     */\r\n    public v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId: number, startDateTime: string, endDateTime: string, reportType: 'GameTranslationStatus' | 'GameTranslationStatusForTranslatorGroup' | 'GameTranslationStatusForTranslator' | 'Test', reportSubjectTargetId: number, options?: any) {\r\n        return TranslationAnalyticsApiFp(this.configuration).v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(gameId, startDateTime, endDateTime, reportType, reportSubjectTargetId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Request translation analytics report to be generated\r\n     * @param {number} gameId The game\\&#39;s id\r\n     * @param {RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest} request The request body\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApi\r\n     */\r\n    public v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId: number, request: RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest, options?: any) {\r\n        return TranslationAnalyticsApiFp(this.configuration).v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get metadata related to UI and rollout settings\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof TranslationAnalyticsApi\r\n     */\r\n    public v1TranslationAnalyticsMetadataGet(options?: any) {\r\n        return TranslationAnalyticsApiFp(this.configuration).v1TranslationAnalyticsMetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * UiConfigurationsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const UiConfigurationsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get ui configurations for frontend to use.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UiConfigurationsGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/ui-configurations`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * UiConfigurationsApi - functional programming interface\r\n * @export\r\n */\r\nexport const UiConfigurationsApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get ui configurations for frontend to use.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UiConfigurationsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGameInternationalizationApiGetUiConfigurationsResponse>> {\r\n            const localVarAxiosArgs = await UiConfigurationsApiAxiosParamCreator(configuration).v1UiConfigurationsGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * UiConfigurationsApi - factory interface\r\n * @export\r\n */\r\nexport const UiConfigurationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get ui configurations for frontend to use.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UiConfigurationsGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetUiConfigurationsResponse> {\r\n            return UiConfigurationsApiFp(configuration).v1UiConfigurationsGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * UiConfigurationsApi - interface\r\n * @export\r\n * @interface UiConfigurationsApi\r\n */\r\nexport interface UiConfigurationsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get ui configurations for frontend to use.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof UiConfigurationsApiInterface\r\n     */\r\n    v1UiConfigurationsGet(options?: any): AxiosPromise<RobloxGameInternationalizationApiGetUiConfigurationsResponse>;\r\n\r\n}\r\n\r\n/**\r\n * UiConfigurationsApi - object-oriented interface\r\n * @export\r\n * @class UiConfigurationsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class UiConfigurationsApi extends BaseAPI implements UiConfigurationsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get ui configurations for frontend to use.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof UiConfigurationsApi\r\n     */\r\n    public v1UiConfigurationsGet(options?: any) {\r\n        return UiConfigurationsApiFp(this.configuration).v1UiConfigurationsGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * LocalizationTables Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n import { EnvironmentUrls } from 'Roblox';\r\n import { Configuration } from './configuration';\r\n import { httpClient as globalAxios } from '../../../http/http';\r\n import { AxiosPromise, AxiosInstance } from 'axios';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\n\r\nexport const BASE_PATH = EnvironmentUrls.localizationTablesApi.replace(/\\/+$/, '');\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\n export const COLLECTION_FORMATS = {\r\n    csv: ',',\r\n    ssv: ' ',\r\n    tsv: '\\t',\r\n    pipes: '|'\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * LocalizationTables Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n import { Configuration } from \"./configuration\";\r\n import { RequiredError,　RequestArgs } from \"./base\";\r\n import { AxiosInstance } from 'axios';\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const DUMMY_BASE_URL = 'https://example.com'\r\n \r\n /**\r\n  *\r\n  * @throws {RequiredError}\r\n  * @export\r\n  */\r\n export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\r\n     if (paramValue === null || paramValue === undefined) {\r\n         throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\r\n     }\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\r\n     if (configuration && configuration.apiKey) {\r\n         const localVarApiKeyValue = typeof configuration.apiKey === 'function'\r\n             ? await configuration.apiKey(keyParamName)\r\n             : await configuration.apiKey;\r\n         object[keyParamName] = localVarApiKeyValue;\r\n     }\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\r\n     if (configuration && (configuration.username || configuration.password)) {\r\n         object[\"auth\"] = { username: configuration.username, password: configuration.password };\r\n     }\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\r\n     if (configuration && configuration.accessToken) {\r\n         const accessToken = typeof configuration.accessToken === 'function'\r\n             ? await configuration.accessToken()\r\n             : await configuration.accessToken;\r\n         object[\"Authorization\"] = \"Bearer \" + accessToken;\r\n     }\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\r\n     if (configuration && configuration.accessToken) {\r\n         const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\r\n             ? await configuration.accessToken(name, scopes)\r\n             : await configuration.accessToken;\r\n         object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\r\n     }\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const setSearchParams = function (url: URL, ...objects: any[]) {\r\n     const searchParams = new URLSearchParams(url.search);\r\n     for (const object of objects) {\r\n         for (const key in object) {\r\n             searchParams.set(key, object[key]);\r\n         }\r\n     }\r\n     url.search = searchParams.toString();\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\r\n     const nonString = typeof value !== 'string';\r\n     const needsSerialization = nonString && configuration && configuration.isJsonMime\r\n         ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\r\n         : nonString;\r\n     return needsSerialization\r\n         ? JSON.stringify(value !== undefined ? value : {})\r\n         : (value || \"\");\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const toPathString = function (url: URL) {\r\n     return url.pathname + url.search + url.hash\r\n }\r\n \r\n /**\r\n  *\r\n  * @export\r\n  */\r\n export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\r\n     return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n         const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\r\n         return axios.request(axiosRequestArgs);\r\n     };\r\n }\r\n ","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * LocalizationTables Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from './configuration';\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxInGameContentTablesClientGameLocation\r\n */\r\nexport interface RobloxInGameContentTablesClientGameLocation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxInGameContentTablesClientGameLocation\r\n     */\r\n    path?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiAutoScrapeEntry\r\n */\r\nexport interface RobloxLocalizationTablesApiAutoScrapeEntry {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntry\r\n     */\r\n    context?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntry\r\n     */\r\n    source?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiAutoScrapeEntryMetadata}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntry\r\n     */\r\n    meta?: RobloxLocalizationTablesApiAutoScrapeEntryMetadata;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiAutoScrapeEntryMetadata\r\n */\r\nexport interface RobloxLocalizationTablesApiAutoScrapeEntryMetadata {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntryMetadata\r\n     */\r\n    text?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntryMetadata\r\n     */\r\n    userId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntryMetadata\r\n     */\r\n    osPlatform?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiAutoScrapeEntryMetadata\r\n     */\r\n    sessionId?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiCreateTableRequest\r\n */\r\nexport interface RobloxLocalizationTablesApiCreateTableRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiCreateTableRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiCreateTableRequest\r\n     */\r\n    ownerType?: RobloxLocalizationTablesApiCreateTableRequestOwnerTypeEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiCreateTableRequest\r\n     */\r\n    ownerId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxLocalizationTablesApiCreateTableRequestOwnerTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiCreateTableResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiCreateTableResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiCreateTableResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiCreateTableResponse\r\n     */\r\n    assetId?: number;\r\n}\r\n/**\r\n * A model that contains an entry identifier and an associated cursor for paged lookups.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiCursorEntryIdentifier\r\n */\r\nexport interface RobloxLocalizationTablesApiCursorEntryIdentifier {\r\n    /**\r\n     * The location to begin our query.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiCursorEntryIdentifier\r\n     */\r\n    cursor?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiCursorEntryIdentifier\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * The translation history count to get.\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiCursorEntryIdentifier\r\n     */\r\n    count?: number;\r\n    /**\r\n     * In which order the data is sorted.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiCursorEntryIdentifier\r\n     */\r\n    sortOrder?: RobloxLocalizationTablesApiCursorEntryIdentifierSortOrderEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxLocalizationTablesApiCursorEntryIdentifierSortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiEntry\r\n */\r\nexport interface RobloxLocalizationTablesApiEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiEntry\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryMetadata}\r\n     * @memberof RobloxLocalizationTablesApiEntry\r\n     */\r\n    metadata?: RobloxLocalizationTablesApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiTranslation>}\r\n     * @memberof RobloxLocalizationTablesApiEntry\r\n     */\r\n    translations?: Array<RobloxLocalizationTablesApiTranslation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiEntryIdentifier\r\n */\r\nexport interface RobloxLocalizationTablesApiEntryIdentifier {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiEntryIdentifier\r\n     */\r\n    key?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiEntryIdentifier\r\n     */\r\n    context?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiEntryIdentifier\r\n     */\r\n    source?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiEntryMetadata\r\n */\r\nexport interface RobloxLocalizationTablesApiEntryMetadata {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiEntryMetadata\r\n     */\r\n    example?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxInGameContentTablesClientGameLocation>}\r\n     * @memberof RobloxLocalizationTablesApiEntryMetadata\r\n     */\r\n    gameLocations?: Array<RobloxInGameContentTablesClientGameLocation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiEntryOperationLimits\r\n */\r\nexport interface RobloxLocalizationTablesApiEntryOperationLimits {\r\n    /**\r\n     * Maximum character limit for entry context\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiEntryOperationLimits\r\n     */\r\n    maxContextLength?: number;\r\n    /**\r\n     * Maximum character limit for entry key\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiEntryOperationLimits\r\n     */\r\n    maxKeyLength?: number;\r\n    /**\r\n     * Maximum character limit for entry source text\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiEntryOperationLimits\r\n     */\r\n    maxSourceLength?: number;\r\n    /**\r\n     * Maximum character limit for entry example\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiEntryOperationLimits\r\n     */\r\n    maxExampleLength?: number;\r\n    /**\r\n     * Maximum character limit for game location path\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiEntryOperationLimits\r\n     */\r\n    maxGameLocationPathLength?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiEntryTranslationHistoryPaged\r\n */\r\nexport interface RobloxLocalizationTablesApiEntryTranslationHistoryPaged {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiEntryTranslationHistoryPaged\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * A batch of TranslationHistory for the given entry identifier.\r\n     * @type {Array<RobloxLocalizationTablesApiTranslationHistory>}\r\n     * @memberof RobloxLocalizationTablesApiEntryTranslationHistoryPaged\r\n     */\r\n    history?: Array<RobloxLocalizationTablesApiTranslationHistory>;\r\n    /**\r\n     * The cursor to send up on the next request if more history data is required.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiEntryTranslationHistoryPaged\r\n     */\r\n    nextCursor?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiError\r\n */\r\nexport interface RobloxLocalizationTablesApiError {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiError\r\n     */\r\n    errorCode?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiError\r\n     */\r\n    errorMessage?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiFailedEntry\r\n */\r\nexport interface RobloxLocalizationTablesApiFailedEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiError}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntry\r\n     */\r\n    error?: RobloxLocalizationTablesApiError;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntry\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryMetadata}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntry\r\n     */\r\n    metadata?: RobloxLocalizationTablesApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiTranslation>}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntry\r\n     */\r\n    translations?: Array<RobloxLocalizationTablesApiTranslation>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged\r\n */\r\nexport interface RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    count?: number;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiError}\r\n     * @memberof RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged\r\n     */\r\n    error?: RobloxLocalizationTablesApiError;\r\n}\r\n/**\r\n * Response model for GetLanguageTranslationCountsForTable.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse {\r\n    /**\r\n     * Id of the table that the translation counts were retrieved for.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse\r\n     */\r\n    tableId?: string;\r\n    /**\r\n     * Id of the game that the translation counts were retrieved for.\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * The translation counts with relevant language information.\r\n     * @type {Array<RobloxLocalizationTablesApiLanguageTranslationCount>}\r\n     * @memberof RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse\r\n     */\r\n    languageTranslationCounts?: Array<RobloxLocalizationTablesApiLanguageTranslationCount>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetLimitsResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetLimitsResponse {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryOperationLimits}\r\n     * @memberof RobloxLocalizationTablesApiGetLimitsResponse\r\n     */\r\n    entryOperationLimits?: RobloxLocalizationTablesApiEntryOperationLimits;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiTableOperationLimits}\r\n     * @memberof RobloxLocalizationTablesApiGetLimitsResponse\r\n     */\r\n    tableOperationLimits?: RobloxLocalizationTablesApiTableOperationLimits;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetTableEntriesPagedResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetTableEntriesPagedResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesPagedResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesPagedResponse\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiEntry>}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesPagedResponse\r\n     */\r\n    data?: Array<RobloxLocalizationTablesApiEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest\r\n */\r\nexport interface RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiCursorEntryIdentifier>}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest\r\n     */\r\n    entries?: Array<RobloxLocalizationTablesApiCursorEntryIdentifier>;\r\n}\r\n/**\r\n * A response model for GetTableEntriesTranslationHistory.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse {\r\n    /**\r\n     * The entries\\' tableId.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    tableId?: string;\r\n    /**\r\n     * The locale of the translations.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * The entries with their identifier, translation history, and next cursor.\r\n     * @type {Array<RobloxLocalizationTablesApiEntryTranslationHistoryPaged>}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    entries?: Array<RobloxLocalizationTablesApiEntryTranslationHistoryPaged>;\r\n    /**\r\n     * The failed entries.\r\n     * @type {Array<RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged>}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse\r\n     */\r\n    failedEntries?: Array<RobloxLocalizationTablesApiFailedEntryTranslationHistoryPaged>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetTableEntryCountResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetTableEntryCountResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntryCountResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiGetTableEntryCountResponse\r\n     */\r\n    entryCount?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiGetTableResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiGetTableResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiGetTableResponse\r\n     */\r\n    ownerType?: RobloxLocalizationTablesApiGetTableResponseOwnerTypeEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiGetTableResponse\r\n     */\r\n    ownerId?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiGetTableResponse\r\n     */\r\n    assetId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxLocalizationTablesApiGetTableResponseOwnerTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * An ingest content request to IngestAutoScrapedContentForGame.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest\r\n */\r\nexport interface RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest {\r\n    /**\r\n     * The entries of an ingest content request.\r\n     * @type {Array<RobloxLocalizationTablesApiAutoScrapeEntry>}\r\n     * @memberof RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest\r\n     */\r\n    entries?: Array<RobloxLocalizationTablesApiAutoScrapeEntry>;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiIngestContentMetadata}\r\n     * @memberof RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest\r\n     */\r\n    metadata?: RobloxLocalizationTablesApiIngestContentMetadata;\r\n}\r\n/**\r\n * The metadata of an ingest content request.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiIngestContentMetadata\r\n */\r\nexport interface RobloxLocalizationTablesApiIngestContentMetadata {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation}\r\n     * @memberof RobloxLocalizationTablesApiIngestContentMetadata\r\n     */\r\n    placeInformation?: RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation;\r\n}\r\n/**\r\n * The place information metadata of an ingest content request.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation\r\n */\r\nexport interface RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation {\r\n    /**\r\n     * The place id of an ingest content request.\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation\r\n     */\r\n    placeId?: number;\r\n    /**\r\n     * The place version number of an ingest content request.\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiIngestContentMetadataPlaceInformation\r\n     */\r\n    placeVersionNumber?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiLanguage\r\n */\r\nexport interface RobloxLocalizationTablesApiLanguage {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiLanguage\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiLanguage\r\n     */\r\n    nativeName?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiLanguage\r\n     */\r\n    languageCode?: string;\r\n}\r\n/**\r\n * Model containing a translation count for a language and relevant language information.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiLanguageTranslationCount\r\n */\r\nexport interface RobloxLocalizationTablesApiLanguageTranslationCount {\r\n    /**\r\n     * The locale of the language.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiLanguageTranslationCount\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * The translation count value.\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiLanguageTranslationCount\r\n     */\r\n    translationCount?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiLocalizationTablesMetadataResponse {\r\n    /**\r\n     * Is bulk upload feature enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isBulkUploadFeatureEnabled?: boolean;\r\n    /**\r\n     * Is CSV download feature enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isCsvDownloadEnabled?: boolean;\r\n    /**\r\n     * Is access to translation metadata feature enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isAccessToTranslationMetaDataEnabled?: boolean;\r\n    /**\r\n     * Is access to translation metadata feature enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isTranslationManagementRedirectionEnabled?: boolean;\r\n    /**\r\n     * Is untranslated filter on UI is enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isUntranslatedFilterEnabled?: boolean;\r\n    /**\r\n     * Is filter for automatic translations on UI is enabled\r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiLocalizationTablesMetadataResponse\r\n     */\r\n    isAutomaticTranslationFilterEnabled?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiPatchEntry\r\n */\r\nexport interface RobloxLocalizationTablesApiPatchEntry {\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryIdentifier}\r\n     * @memberof RobloxLocalizationTablesApiPatchEntry\r\n     */\r\n    identifier?: RobloxLocalizationTablesApiEntryIdentifier;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiEntryMetadata}\r\n     * @memberof RobloxLocalizationTablesApiPatchEntry\r\n     */\r\n    metadata?: RobloxLocalizationTablesApiEntryMetadata;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiPatchTranslation>}\r\n     * @memberof RobloxLocalizationTablesApiPatchEntry\r\n     */\r\n    translations?: Array<RobloxLocalizationTablesApiPatchTranslation>;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiPatchEntry\r\n     */\r\n    _delete?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiPatchTranslation\r\n */\r\nexport interface RobloxLocalizationTablesApiPatchTranslation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiPatchTranslation\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiPatchTranslation\r\n     */\r\n    translationText?: string;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxLocalizationTablesApiPatchTranslation\r\n     */\r\n    _delete?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest\r\n */\r\nexport interface RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest {\r\n    /**\r\n     * The time range to remove entries from. Following ISO 8601 Durations format\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest\r\n     */\r\n    maxAgeForFlush?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiTableOperationLimits\r\n */\r\nexport interface RobloxLocalizationTablesApiTableOperationLimits {\r\n    /**\r\n     * Maximum number of entries for a patch request\r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiTableOperationLimits\r\n     */\r\n    maxEntriesPerUpdate?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiTranslation\r\n */\r\nexport interface RobloxLocalizationTablesApiTranslation {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiTranslation\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiTranslation\r\n     */\r\n    translationText?: string;\r\n}\r\n/**\r\n * A model containing a translation, translator, and translation time.\r\n * @export\r\n * @interface RobloxLocalizationTablesApiTranslationHistory\r\n */\r\nexport interface RobloxLocalizationTablesApiTranslationHistory {\r\n    /**\r\n     * The translation provided by the translator.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiTranslationHistory\r\n     */\r\n    translationText?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxLocalizationTablesApiTranslator}\r\n     * @memberof RobloxLocalizationTablesApiTranslationHistory\r\n     */\r\n    translator?: RobloxLocalizationTablesApiTranslator;\r\n    /**\r\n     * The time the translation was provided.\r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiTranslationHistory\r\n     */\r\n    created?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiTranslator\r\n */\r\nexport interface RobloxLocalizationTablesApiTranslator {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxLocalizationTablesApiTranslator\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiTranslator\r\n     */\r\n    agentType?: RobloxLocalizationTablesApiTranslatorAgentTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxLocalizationTablesApiTranslatorAgentTypeEnum {\r\n    User = 'User',\r\n    Automation = 'Automation'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiUpdateTableContentsRequest\r\n */\r\nexport interface RobloxLocalizationTablesApiUpdateTableContentsRequest {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxLocalizationTablesApiUpdateTableContentsRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiPatchEntry>}\r\n     * @memberof RobloxLocalizationTablesApiUpdateTableContentsRequest\r\n     */\r\n    entries?: Array<RobloxLocalizationTablesApiPatchEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxLocalizationTablesApiUpdateTableContentsResponse\r\n */\r\nexport interface RobloxLocalizationTablesApiUpdateTableContentsResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiFailedEntry>}\r\n     * @memberof RobloxLocalizationTablesApiUpdateTableContentsResponse\r\n     */\r\n    failedEntriesAndTranslations?: Array<RobloxLocalizationTablesApiFailedEntry>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxLocalizationTablesApiLanguage>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage\r\n     */\r\n    data?: Array<RobloxLocalizationTablesApiLanguage>;\r\n}\r\n\r\n/**\r\n * AutoLocalizationTableApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AutoLocalizationTableApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost: async (gameId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            assertParamExists('v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost', 'gameId', gameId)\r\n            const localVarPath = `/v1/auto-localization-table/games/{gameId}/assets-generation-request`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to flush the auto scraped entries which doesn\\'t have translations.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost: async (gameId: number, request: RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            assertParamExists('v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost', 'gameId', gameId)\r\n            // verify required parameter 'request' is not null or undefined\r\n            assertParamExists('v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost', 'request', request)\r\n            const localVarPath = `/v1/auto-localization-table/games/{gameId}/auto-scrape-cleanup-request`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization. Only available for game servers.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {string} [robloxGameId] The id of the game instance from RCC.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdPatch: async (gameId: number, request: RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest, robloxGameId?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            assertParamExists('v1AutoLocalizationTableGamesGameIdPatch', 'gameId', gameId)\r\n            // verify required parameter 'request' is not null or undefined\r\n            assertParamExists('v1AutoLocalizationTableGamesGameIdPatch', 'request', request)\r\n            const localVarPath = `/v1/auto-localization-table/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (robloxGameId !== undefined && robloxGameId !== null) {\r\n                localVarHeaderParameter['Roblox-Game-Id'] = String(robloxGameId);\r\n            }\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutoLocalizationTableApi - functional programming interface\r\n * @export\r\n */\r\nexport const AutoLocalizationTableApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = AutoLocalizationTableApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to flush the auto scraped entries which doesn\\'t have translations.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId: number, request: RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId, request, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization. Only available for game servers.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {string} [robloxGameId] The id of the game instance from RCC.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AutoLocalizationTableGamesGameIdPatch(gameId: number, request: RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest, robloxGameId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoLocalizationTableGamesGameIdPatch(gameId, request, robloxGameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AutoLocalizationTableApi - factory interface\r\n * @export\r\n */\r\nexport const AutoLocalizationTableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = AutoLocalizationTableApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Generates localization asset of a game.\r\n         * @param {number} gameId The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): AxiosPromise<object> {\r\n            return localVarFp.v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Enqueues an event to flush the auto scraped entries which doesn\\'t have translations.\r\n         * @param {number} gameId The id of the game.\r\n         * @param {RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId: number, request: RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): AxiosPromise<object> {\r\n            return localVarFp.v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId, request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Ingests entries for auto localization. Only available for game servers.\r\n         * @param {number} gameId The game id.\r\n         * @param {RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n         * @param {string} [robloxGameId] The id of the game instance from RCC.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AutoLocalizationTableGamesGameIdPatch(gameId: number, request: RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest, robloxGameId?: string, options?: any): AxiosPromise<object> {\r\n            return localVarFp.v1AutoLocalizationTableGamesGameIdPatch(gameId, request, robloxGameId, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AutoLocalizationTableApi - interface\r\n * @export\r\n * @interface AutoLocalizationTableApi\r\n */\r\nexport interface AutoLocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Generates localization asset of a game.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApiInterface\r\n     */\r\n    v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Enqueues an event to flush the auto scraped entries which doesn\\'t have translations.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApiInterface\r\n     */\r\n    v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId: number, request: RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Ingests entries for auto localization. Only available for game servers.\r\n     * @param {number} gameId The game id.\r\n     * @param {RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n     * @param {string} [robloxGameId] The id of the game instance from RCC.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApiInterface\r\n     */\r\n    v1AutoLocalizationTableGamesGameIdPatch(gameId: number, request: RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest, robloxGameId?: string, options?: any): AxiosPromise<object>;\r\n\r\n}\r\n\r\n/**\r\n * AutoLocalizationTableApi - object-oriented interface\r\n * @export\r\n * @class AutoLocalizationTableApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AutoLocalizationTableApi extends BaseAPI implements AutoLocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Generates localization asset of a game.\r\n     * @param {number} gameId The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApi\r\n     */\r\n    public v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId: number, options?: any) {\r\n        return AutoLocalizationTableApiFp(this.configuration).v1AutoLocalizationTableGamesGameIdAssetsGenerationRequestPost(gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Enqueues an event to flush the auto scraped entries which doesn\\'t have translations.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApi\r\n     */\r\n    public v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId: number, request: RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest, options?: any) {\r\n        return AutoLocalizationTableApiFp(this.configuration).v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId, request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Ingests entries for auto localization. Only available for game servers.\r\n     * @param {number} gameId The game id.\r\n     * @param {RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest} request The request body.\r\n     * @param {string} [robloxGameId] The id of the game instance from RCC.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AutoLocalizationTableApi\r\n     */\r\n    public v1AutoLocalizationTableGamesGameIdPatch(gameId: number, request: RobloxLocalizationTablesApiIngestAutoScrapedContentForGameRequest, robloxGameId?: string, options?: any) {\r\n        return AutoLocalizationTableApiFp(this.configuration).v1AutoLocalizationTableGamesGameIdPatch(gameId, request, robloxGameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * LocalizationTableApi - axios parameter creator\r\n * @export\r\n */\r\nexport const LocalizationTableApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableAvailableLanguagesGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/localization-table/available-languages`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get limits for translation table entries operations\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableLimitsGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/localization-table/limits`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata for localization UI\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableMetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/localization-table/metadata`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the assetId of the table.\r\n         * @param {number} assetId The asset id associated with the table.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesAssetIdGet: async (assetId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'assetId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesAssetIdGet', 'assetId', assetId)\r\n            const localVarPath = `/v1/localization-table/tables/{assetId}`\r\n                .replace(`{${\"assetId\"}}`, encodeURIComponent(String(assetId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Creates a Localization Table with the given data.\r\n         * @param {RobloxLocalizationTablesApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesPost: async (request: RobloxLocalizationTablesApiCreateTableRequest, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'request' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesPost', 'request', request)\r\n            const localVarPath = `/v1/localization-table/tables`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a batch of entries for a table.\r\n         * @param {string} tableId \r\n         * @param {string} [cursor] If null, there are no more entries in the table and you\\&#39;ve reached the last page.\r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntriesGet: async (tableId: string, cursor?: string, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdEntriesGet', 'tableId', tableId)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}/entries`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost: async (tableId: string, request: RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost', 'tableId', tableId)\r\n            // verify required parameter 'request' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost', 'request', request)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}/entries/translation-history`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntryCountGet: async (tableId: string, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdEntryCountGet', 'tableId', tableId)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}/entry-count`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the id of the table.\r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdGet: async (tableId: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdGet', 'tableId', tableId)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {string} tableId The table id\r\n         * @param {Array<string>} locales The locales corresponding to the language translation counts to retrieve. This will return 0 for the translation count of locales that do not exist for the given table.\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdLanguageTranslationCountsGet: async (tableId: string, locales: Array<string>, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdLanguageTranslationCountsGet', 'tableId', tableId)\r\n            // verify required parameter 'locales' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdLanguageTranslationCountsGet', 'locales', locales)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}/language-translation-counts`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (locales) {\r\n                localVarQueryParameter['locales'] = locales;\r\n            }\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxLocalizationTablesApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdPatch: async (tableId: string, request: RobloxLocalizationTablesApiUpdateTableContentsRequest, gameId?: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'tableId' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdPatch', 'tableId', tableId)\r\n            // verify required parameter 'request' is not null or undefined\r\n            assertParamExists('v1LocalizationTableTablesTableIdPatch', 'request', request)\r\n            const localVarPath = `/v1/localization-table/tables/{tableId}`\r\n                .replace(`{${\"tableId\"}}`, encodeURIComponent(String(tableId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gameId !== undefined) {\r\n                localVarQueryParameter['gameId'] = gameId;\r\n            }\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - functional programming interface\r\n * @export\r\n */\r\nexport const LocalizationTableApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = LocalizationTableApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableAvailableLanguagesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableAvailableLanguagesGet(options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get limits for translation table entries operations\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableLimitsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetLimitsResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableLimitsGet(options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata for localization UI\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableMetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiLocalizationTablesMetadataResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableMetadataGet(options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the assetId of the table.\r\n         * @param {number} assetId The asset id associated with the table.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesAssetIdGet(assetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetTableResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesAssetIdGet(assetId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Creates a Localization Table with the given data.\r\n         * @param {RobloxLocalizationTablesApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesPost(request: RobloxLocalizationTablesApiCreateTableRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiCreateTableResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesPost(request, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a batch of entries for a table.\r\n         * @param {string} tableId \r\n         * @param {string} [cursor] If null, there are no more entries in the table and you\\&#39;ve reached the last page.\r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesPagedResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdEntriesGet(tableId, cursor, gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetTableEntryCountResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdEntryCountGet(tableId, gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the id of the table.\r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdGet(tableId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetTableResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdGet(tableId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {string} tableId The table id\r\n         * @param {Array<string>} locales The locales corresponding to the language translation counts to retrieve. This will return 0 for the translation count of locales that do not exist for the given table.\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId: string, locales: Array<string>, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId, locales, gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxLocalizationTablesApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1LocalizationTableTablesTableIdPatch(tableId: string, request: RobloxLocalizationTablesApiUpdateTableContentsRequest, gameId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxLocalizationTablesApiUpdateTableContentsResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocalizationTableTablesTableIdPatch(tableId, request, gameId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - factory interface\r\n * @export\r\n */\r\nexport const LocalizationTableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = LocalizationTableApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the supported language codes that can be used by localization tables.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableAvailableLanguagesGet(options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage> {\r\n            return localVarFp.v1LocalizationTableAvailableLanguagesGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get limits for translation table entries operations\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableLimitsGet(options?: any): AxiosPromise<RobloxLocalizationTablesApiGetLimitsResponse> {\r\n            return localVarFp.v1LocalizationTableLimitsGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get metadata for localization UI\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableMetadataGet(options?: any): AxiosPromise<RobloxLocalizationTablesApiLocalizationTablesMetadataResponse> {\r\n            return localVarFp.v1LocalizationTableMetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the assetId of the table.\r\n         * @param {number} assetId The asset id associated with the table.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesAssetIdGet(assetId: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableResponse> {\r\n            return localVarFp.v1LocalizationTableTablesAssetIdGet(assetId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Creates a Localization Table with the given data.\r\n         * @param {RobloxLocalizationTablesApiCreateTableRequest} request \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesPost(request: RobloxLocalizationTablesApiCreateTableRequest, options?: any): AxiosPromise<RobloxLocalizationTablesApiCreateTableResponse> {\r\n            return localVarFp.v1LocalizationTableTablesPost(request, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a batch of entries for a table.\r\n         * @param {string} tableId \r\n         * @param {string} [cursor] If null, there are no more entries in the table and you\\&#39;ve reached the last page.\r\n         * @param {number} [gameId] \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesPagedResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdEntriesGet(tableId, cursor, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the translation history for each entry passed in.\r\n         * @param {string} tableId The entries\\&#39; tableId.\r\n         * @param {RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the number of entries in the specified table\r\n         * @param {string} tableId The table id\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntryCountResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdEntryCountGet(tableId, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get table information by the id of the table.\r\n         * @param {string} tableId \r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdGet(tableId: string, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdGet(tableId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n         * @param {string} tableId The table id\r\n         * @param {Array<string>} locales The locales corresponding to the language translation counts to retrieve. This will return 0 for the translation count of locales that do not exist for the given table.\r\n         * @param {number} [gameId] The game id\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId: string, locales: Array<string>, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId, locales, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Updates the tables contents based on what is provided.\r\n         * @param {string} tableId The table guid for the table to update.\r\n         * @param {RobloxLocalizationTablesApiUpdateTableContentsRequest} request The metadata object is optional.\r\n         * @param {number} [gameId] The game id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalizationTableTablesTableIdPatch(tableId: string, request: RobloxLocalizationTablesApiUpdateTableContentsRequest, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiUpdateTableContentsResponse> {\r\n            return localVarFp.v1LocalizationTableTablesTableIdPatch(tableId, request, gameId, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * LocalizationTableApi - interface\r\n * @export\r\n * @interface LocalizationTableApi\r\n */\r\nexport interface LocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the supported language codes that can be used by localization tables.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableAvailableLanguagesGet(options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxLocalizationTablesApiLanguage>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get limits for translation table entries operations\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableLimitsGet(options?: any): AxiosPromise<RobloxLocalizationTablesApiGetLimitsResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get metadata for localization UI\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableMetadataGet(options?: any): AxiosPromise<RobloxLocalizationTablesApiLocalizationTablesMetadataResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get table information by the assetId of the table.\r\n     * @param {number} assetId The asset id associated with the table.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesAssetIdGet(assetId: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Creates a Localization Table with the given data.\r\n     * @param {RobloxLocalizationTablesApiCreateTableRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesPost(request: RobloxLocalizationTablesApiCreateTableRequest, options?: any): AxiosPromise<RobloxLocalizationTablesApiCreateTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets a batch of entries for a table.\r\n     * @param {string} tableId \r\n     * @param {string} [cursor] If null, there are no more entries in the table and you\\&#39;ve reached the last page.\r\n     * @param {number} [gameId] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesPagedResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the translation history for each entry passed in.\r\n     * @param {string} tableId The entries\\&#39; tableId.\r\n     * @param {RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the number of entries in the specified table\r\n     * @param {string} tableId The table id\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableEntryCountResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get table information by the id of the table.\r\n     * @param {string} tableId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdGet(tableId: string, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n     * @param {string} tableId The table id\r\n     * @param {Array<string>} locales The locales corresponding to the language translation counts to retrieve. This will return 0 for the translation count of locales that do not exist for the given table.\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId: string, locales: Array<string>, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiGetLanguageTranslationCountsForTableResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Updates the tables contents based on what is provided.\r\n     * @param {string} tableId The table guid for the table to update.\r\n     * @param {RobloxLocalizationTablesApiUpdateTableContentsRequest} request The metadata object is optional.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApiInterface\r\n     */\r\n    v1LocalizationTableTablesTableIdPatch(tableId: string, request: RobloxLocalizationTablesApiUpdateTableContentsRequest, gameId?: number, options?: any): AxiosPromise<RobloxLocalizationTablesApiUpdateTableContentsResponse>;\r\n\r\n}\r\n\r\n/**\r\n * LocalizationTableApi - object-oriented interface\r\n * @export\r\n * @class LocalizationTableApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class LocalizationTableApi extends BaseAPI implements LocalizationTableApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the supported language codes that can be used by localization tables.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableAvailableLanguagesGet(options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableAvailableLanguagesGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get limits for translation table entries operations\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableLimitsGet(options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableLimitsGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get metadata for localization UI\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableMetadataGet(options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableMetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get table information by the assetId of the table.\r\n     * @param {number} assetId The asset id associated with the table.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesAssetIdGet(assetId: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesAssetIdGet(assetId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Creates a Localization Table with the given data.\r\n     * @param {RobloxLocalizationTablesApiCreateTableRequest} request \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesPost(request: RobloxLocalizationTablesApiCreateTableRequest, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesPost(request, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets a batch of entries for a table.\r\n     * @param {string} tableId \r\n     * @param {string} [cursor] If null, there are no more entries in the table and you\\&#39;ve reached the last page.\r\n     * @param {number} [gameId] \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdEntriesGet(tableId: string, cursor?: string, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdEntriesGet(tableId, cursor, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the translation history for each entry passed in.\r\n     * @param {string} tableId The entries\\&#39; tableId.\r\n     * @param {RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest} request A request body containing all relevant data for entry history lookup.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId: string, request: RobloxLocalizationTablesApiGetTableEntriesTranslationHistoryRequest, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdEntriesTranslationHistoryPost(tableId, request, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the number of entries in the specified table\r\n     * @param {string} tableId The table id\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdEntryCountGet(tableId: string, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdEntryCountGet(tableId, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get table information by the id of the table.\r\n     * @param {string} tableId \r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdGet(tableId: string, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdGet(tableId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the language translation counts for the specified table.  The languages to retrieve must be provided.\r\n     * @param {string} tableId The table id\r\n     * @param {Array<string>} locales The locales corresponding to the language translation counts to retrieve. This will return 0 for the translation count of locales that do not exist for the given table.\r\n     * @param {number} [gameId] The game id\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId: string, locales: Array<string>, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdLanguageTranslationCountsGet(tableId, locales, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Updates the tables contents based on what is provided.\r\n     * @param {string} tableId The table guid for the table to update.\r\n     * @param {RobloxLocalizationTablesApiUpdateTableContentsRequest} request The metadata object is optional.\r\n     * @param {number} [gameId] The game id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocalizationTableApi\r\n     */\r\n    public v1LocalizationTableTablesTableIdPatch(tableId: string, request: RobloxLocalizationTablesApiUpdateTableContentsRequest, gameId?: number, options?: any) {\r\n        return LocalizationTableApiFp(this.configuration).v1LocalizationTableTablesTableIdPatch(tableId, request, gameId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n","import { AxiosPromise } from 'axios';\r\nimport\r\n    * as\r\n    GameInternationalizationProvider\r\n    from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\nimport\r\n    * as\r\n    LocalizationTablesProvider\r\n    from '../../providers/localizationTables/localizationTablesProvider';\r\n\r\nconst autoLocalizationApiInstance = new GameInternationalizationProvider.AutolocalizationApi();\r\nconst localizationTablesApiInstance = new LocalizationTablesProvider.AutoLocalizationTableApi();\r\n\r\nconst getAutolocalizationConfiguration = (gameId: number) : AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGameAutolocalizationInformationResponse> => {\r\n    return autoLocalizationApiInstance.v1AutolocalizationGamesGameIdAutolocalizationtablePost(gameId, { withCredentials: true });\r\n};\r\n\r\nconst setAutolocalizationConfiguration = (gameId: number, isAutolocalizationEnabled: boolean) : AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGameAutolocalizationInformationResponse> => {\r\n    const patchPayload: GameInternationalizationProvider.RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest = {\r\n        isAutolocalizationEnabled\r\n    }\r\n    return autoLocalizationApiInstance.v1AutolocalizationGamesGameIdSettingsPatch(gameId, patchPayload, { withCredentials: true });\r\n};\r\n\r\nconst setUseAutoLocalizationTable = (gameId: number, shouldUseLocalizationTable: boolean) : AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGameAutolocalizationInformationResponse> => {\r\n    const patchPayload: GameInternationalizationProvider.RobloxGameInternationalizationApiSetAutolocalizationSettingsForGameRequest = {\r\n        shouldUseLocalizationTable,\r\n    }\r\n    return autoLocalizationApiInstance.v1AutolocalizationGamesGameIdSettingsPatch(gameId, patchPayload, { withCredentials: true });\r\n};\r\n\r\nconst flushAutoLocalizationTable = (gameId: number, maxAgeForFlush: string): AxiosPromise<any> => {\r\n    const cleanupRequest: LocalizationTablesProvider.RobloxLocalizationTablesApiRaiseEventForAutoScrapedEntriesCleanupRequest = {\r\n        maxAgeForFlush\r\n    }\r\n    return localizationTablesApiInstance.v1AutoLocalizationTableGamesGameIdAutoScrapeCleanupRequestPost(gameId, cleanupRequest, { withCredentials: true });\r\n}\r\n\r\nconst getMetadata = (): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiAutoLocalizationMetadataResponse> => {\r\n    return autoLocalizationApiInstance.v1AutolocalizationMetadataGet({ withCredentials: true });\r\n}\r\n\r\nexport default {\r\n    getAutolocalizationConfiguration,\r\n    setAutolocalizationConfiguration,\r\n    setUseAutoLocalizationTable,\r\n    flushAutoLocalizationTable,\r\n    getMetadata\r\n};\r\n","// tslint:disable\r\n// / <reference path=\"./custom.d.ts\" />\r\n/**\r\n * GameInternationalization Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\n\r\nexport const BASE_PATH = EnvironmentUrls.gameInternationalizationApi.replace(/\\/+$/, '');\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n  csv: ',',\r\n  ssv: ' ',\r\n  tsv: '\\t',\r\n  pipes: '|'\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n  url: string;\r\n  options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n  protected configuration: Configuration | undefined;\r\n\r\n  constructor(\r\n    configuration?: Configuration,\r\n    protected basePath: string = BASE_PATH,\r\n    protected axios: AxiosInstance = globalAxios\r\n  ) {\r\n    if (configuration) {\r\n      this.configuration = configuration;\r\n      this.basePath = configuration.basePath || this.basePath;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n  name: 'RequiredError' = 'RequiredError';\r\n\r\n  constructor(public field: string, msg?: string) {\r\n    super(msg);\r\n  }\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport * as GameInternationalizationProvider from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\n\r\nconst automaticTranslationApiInstance = new GameInternationalizationProvider.AutomaticTranslationApi();\r\n\r\nconst getGameFeatureStatus = (\r\n  gameId: number\r\n): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGetAutomaticTranslationFeatureStatusForGameResponse> => {\r\n  return automaticTranslationApiInstance.v1AutomaticTranslationGamesGameIdFeatureStatusGet(gameId, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getTargetLanguages = (\r\n  sourceLanguageCode: string,\r\n  targetLanguageCodes: string[]\r\n): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGetAllowedAutomaticTranslationStatusForLanguagesResponse> => {\r\n  return automaticTranslationApiInstance.v1AutomaticTranslationLanguagesLanguageCodeTargetLanguagesGet(\r\n    sourceLanguageCode,\r\n    targetLanguageCodes,\r\n    { withCredentials: true }\r\n  );\r\n};\r\n\r\nconst getGameAutoLocalizationQuota = (\r\n  gameId: number\r\n): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGetAutomaticTranslationQuotaForGameResponse> => {\r\n  return automaticTranslationApiInstance.v1AutomaticTranslationGamesGameIdQuotaGet(gameId, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nexport default {\r\n  getGameFeatureStatus,\r\n  getTargetLanguages,\r\n  getGameAutoLocalizationQuota\r\n};\r\n","// tslint:disable\r\n/**\r\n * GameInternationalization Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { Configuration } from './configuration';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGameInternationalizationApiLanguage\r\n */\r\nexport interface RobloxGameInternationalizationApiLanguage {\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxGameInternationalizationApiLanguage\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxGameInternationalizationApiLanguage\r\n   */\r\n  nativeName?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxGameInternationalizationApiLanguage\r\n   */\r\n  languageCode?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGameInternationalizationApiLanguageWithLocales\r\n */\r\nexport interface RobloxGameInternationalizationApiLanguageWithLocales {\r\n  /**\r\n   *\r\n   * @type {RobloxGameInternationalizationApiLanguage}\r\n   * @memberof RobloxGameInternationalizationApiLanguageWithLocales\r\n   */\r\n  languageFamily?: RobloxGameInternationalizationApiLanguage;\r\n  /**\r\n   *\r\n   * @type {Array<RobloxLocalizationClientSupportedLocale>}\r\n   * @memberof RobloxGameInternationalizationApiLanguageWithLocales\r\n   */\r\n  childLocales?: Array<RobloxLocalizationClientSupportedLocale>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxLocalizationClientLanguageFamily\r\n */\r\nexport interface RobloxLocalizationClientLanguageFamily {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxLocalizationClientLanguageFamily\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientLanguageFamily\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientLanguageFamily\r\n   */\r\n  nativeName?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientLanguageFamily\r\n   */\r\n  languageCode?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxLocalizationClientSupportedLocale\r\n */\r\nexport interface RobloxLocalizationClientSupportedLocale {\r\n  /**\r\n   *\r\n   * @type {number}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  id?: number;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  locale?: RobloxLocalizationClientSupportedLocaleLocaleEnum;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  localeCode?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  name?: string;\r\n  /**\r\n   *\r\n   * @type {string}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  nativeName?: string;\r\n  /**\r\n   *\r\n   * @type {RobloxLocalizationClientLanguageFamily}\r\n   * @memberof RobloxLocalizationClientSupportedLocale\r\n   */\r\n  language?: RobloxLocalizationClientLanguageFamily;\r\n}\r\n\r\n/**\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum RobloxLocalizationClientSupportedLocaleLocaleEnum {\r\n  EnUs = 'en_us',\r\n  EsEs = 'es_es',\r\n  FrFr = 'fr_fr',\r\n  IdId = 'id_id',\r\n  ItIt = 'it_it',\r\n  JaJp = 'ja_jp',\r\n  KoKr = 'ko_kr',\r\n  RuRu = 'ru_ru',\r\n  ThTh = 'th_th',\r\n  TrTr = 'tr_tr',\r\n  ViVn = 'vi_vn',\r\n  PtBr = 'pt_br',\r\n  DeDe = 'de_de',\r\n  ZhCn = 'zh_cn',\r\n  ZhTw = 'zh_tw',\r\n  BgBg = 'bg_bg',\r\n  BnBd = 'bn_bd',\r\n  CsCz = 'cs_cz',\r\n  DaDk = 'da_dk',\r\n  ElGr = 'el_gr',\r\n  EtEe = 'et_ee',\r\n  FiFi = 'fi_fi',\r\n  HiIn = 'hi_in',\r\n  HrHr = 'hr_hr',\r\n  HuHu = 'hu_hu',\r\n  KaGe = 'ka_ge',\r\n  KkKz = 'kk_kz',\r\n  KmKh = 'km_kh',\r\n  LtLt = 'lt_lt',\r\n  LvLv = 'lv_lv',\r\n  MsMy = 'ms_my',\r\n  MyMm = 'my_mm',\r\n  NbNo = 'nb_no',\r\n  NlNl = 'nl_nl',\r\n  FilPh = 'fil_ph',\r\n  PlPl = 'pl_pl',\r\n  RoRo = 'ro_ro',\r\n  UkUa = 'uk_ua',\r\n  SiLk = 'si_lk',\r\n  SkSk = 'sk_sk',\r\n  SlSl = 'sl_sl',\r\n  SqAl = 'sq_al',\r\n  BsBa = 'bs_ba',\r\n  SrRs = 'sr_rs',\r\n  SvSe = 'sv_se',\r\n  ZhCjv = 'zh_cjv'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales {\r\n  /**\r\n   *\r\n   * @type {Array<RobloxGameInternationalizationApiLanguageWithLocales>}\r\n   * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales\r\n   */\r\n  data?: Array<RobloxGameInternationalizationApiLanguageWithLocales>;\r\n}\r\n\r\n/**\r\n * SupportedLanguagesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SupportedLanguagesV2ApiAxiosParamCreator = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Get the supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v2SupportedLanguagesGamesGameIdGet: async (\r\n      gameId: number,\r\n      options: any = {}\r\n    ): Promise<RequestArgs> => {\r\n      // verify required parameter 'gameId' is not null or undefined\r\n      if (gameId === null || gameId === undefined) {\r\n        throw new RequiredError(\r\n          'gameId',\r\n          'Required parameter gameId was null or undefined when calling v2SupportedLanguagesGamesGameIdGet.'\r\n        );\r\n      }\r\n      const localVarPath = `/v2/supported-languages/games/{gameId}`.replace(\r\n        `{${'gameId'}}`,\r\n        encodeURIComponent(String(gameId))\r\n      );\r\n      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n      let baseOptions;\r\n      if (configuration) {\r\n        baseOptions = configuration.baseOptions;\r\n      }\r\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\r\n      const localVarHeaderParameter = {} as any;\r\n      const localVarQueryParameter = {} as any;\r\n\r\n      localVarUrlObj.query = {\r\n        ...localVarUrlObj.query,\r\n        ...localVarQueryParameter,\r\n        ...options.query\r\n      };\r\n      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n      delete localVarUrlObj.search;\r\n      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n      localVarRequestOptions.headers = {\r\n        ...localVarHeaderParameter,\r\n        ...headersFromBaseOptions,\r\n        ...options.headers\r\n      };\r\n\r\n      return {\r\n        url: globalImportUrl.format(localVarUrlObj),\r\n        options: localVarRequestOptions\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - functional programming interface\r\n * @export\r\n */\r\nexport const SupportedLanguagesV2ApiFp = function(configuration?: Configuration) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Get the supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    async v2SupportedLanguagesGamesGameIdGet(\r\n      gameId: number,\r\n      options?: any\r\n    ): Promise<\r\n      (\r\n        axios?: AxiosInstance,\r\n        basePath?: string\r\n      ) => AxiosPromise<\r\n        RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales\r\n      >\r\n    > {\r\n      const localVarAxiosArgs = await SupportedLanguagesV2ApiAxiosParamCreator(\r\n        configuration\r\n      ).v2SupportedLanguagesGamesGameIdGet(gameId, options);\r\n      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {\r\n          ...localVarAxiosArgs.options,\r\n          url: basePath + localVarAxiosArgs.url\r\n        };\r\n        return axios.request(axiosRequestArgs);\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - factory interface\r\n * @export\r\n */\r\nexport const SupportedLanguagesV2ApiFactory = function(\r\n  configuration?: Configuration,\r\n  basePath?: string,\r\n  axios?: AxiosInstance\r\n) {\r\n  return {\r\n    /**\r\n     *\r\n     * @summary Get the supported languages for a game.\r\n     * @param {number} gameId The id of the game.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     */\r\n    v2SupportedLanguagesGamesGameIdGet(\r\n      gameId: number,\r\n      options?: any\r\n    ): AxiosPromise<\r\n      RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales\r\n    > {\r\n      return SupportedLanguagesV2ApiFp(configuration)\r\n        .v2SupportedLanguagesGamesGameIdGet(gameId, options)\r\n        .then(request => request(axios, basePath));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * SupportedLanguagesApi - interface\r\n * @export\r\n * @interface SupportedLanguagesV2Api\r\n */\r\nexport interface SupportedLanguagesV2ApiInterface {\r\n  /**\r\n   *\r\n   * @summary Get the supported languages for a game.\r\n   * @param {number} gameId The id of the game.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SupportedLanguagesV2ApiInterface\r\n   */\r\n  v2SupportedLanguagesGamesGameIdGet(\r\n    gameId: number,\r\n    options?: any\r\n  ): AxiosPromise<\r\n    RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales\r\n  >;\r\n}\r\n\r\n/**\r\n * SupportedLanguagesApi - object-oriented interface\r\n * @export\r\n * @class SupportedLanguagesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SupportedLanguagesV2Api extends BaseAPI implements SupportedLanguagesV2ApiInterface {\r\n  /**\r\n   *\r\n   * @summary Get the supported languages for a game.\r\n   * @param {number} gameId The id of the game.\r\n   * @param {*} [options] Override http request option.\r\n   * @throws {RequiredError}\r\n   * @memberof SupportedLanguagesV2Api\r\n   */\r\n  public v2SupportedLanguagesGamesGameIdGet(gameId: number, options?: any) {\r\n    return SupportedLanguagesV2ApiFp(this.configuration)\r\n      .v2SupportedLanguagesGamesGameIdGet(gameId, options)\r\n      .then(request => request(this.axios, this.basePath));\r\n  }\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport\r\n    * as\r\n    GameInternationalizationProvider\r\n    from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\nimport\r\n    * as\r\n    GameInternationalizationProviderV2\r\n    from '../../providers/gameInternationalizationV2/gameInternationalizationV2Provider';\r\n\r\nconst supportedLanguagesApiInstance = new GameInternationalizationProvider.SupportedLanguagesApi();\r\nconst supportedLanguagesV2ApiInstance = new GameInternationalizationProviderV2.SupportedLanguagesV2Api();\r\nconst localizationTableApiInstance = new GameInternationalizationProvider.LocalizationTableApi();\r\n\r\nconst getGameLanguageRolloutSettings = (): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiSupportedLanguagesMetadataResponse> => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesMetadataGet({ withCredentials: true });\r\n}\r\n\r\nconst getGameLanguages = (gameId: number): AxiosPromise<GameInternationalizationProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocale> => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdGet(gameId, { withCredentials: true });\r\n};\r\n\r\nconst getGameLanguagesV2 = (gameId: number): AxiosPromise<GameInternationalizationProviderV2.RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageWithLocales> => {\r\n    return supportedLanguagesV2ApiInstance.v2SupportedLanguagesGamesGameIdGet(gameId, { withCredentials: true });\r\n};\r\n\r\nconst addLanguages = (gameId: number, languageCodesToAdd: string[]): AxiosPromise<object> => {\r\n\r\n    const languagesToAdd: GameInternationalizationProvider.RobloxGameInternationalizationApiPatchLanguage[] = languageCodesToAdd\r\n        .map((languageCode) => {\r\n            return {\r\n                languageCodeType: GameInternationalizationProvider.RobloxGameInternationalizationApiPatchLanguageLanguageCodeTypeEnum.Language,\r\n                languageCode: languageCode\r\n            }\r\n        });\r\n\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdPatch(gameId, languagesToAdd, { withCredentials: true });\r\n};\r\n\r\nconst deleteLanguages = (gameId: number, languageCodesToDelete: string[]): AxiosPromise<object> => {\r\n\r\n    const languageToDelete: GameInternationalizationProvider.RobloxGameInternationalizationApiPatchLanguage[] = languageCodesToDelete\r\n        .map((languageCode) => {\r\n            return {\r\n                languageCodeType: GameInternationalizationProvider.RobloxGameInternationalizationApiPatchLanguageLanguageCodeTypeEnum.Language,\r\n                languageCode: languageCode,\r\n                delete: true\r\n            }\r\n        });\r\n\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdPatch(gameId, languageToDelete, { withCredentials: true });\r\n};\r\n\r\n// remove after rollout of non-official langauges feature\r\nconst getAvailableLanguages = (): AxiosPromise<GameInternationalizationProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguage> => {\r\n    return localizationTableApiInstance.v1LocalizationtableAvailableLanguagesGet();\r\n}\r\n\r\nconst getAutomaticTranslationStatus = (gameId: number): AxiosPromise<GameInternationalizationProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiLanguageOrLocaleSettings> => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdAutomaticTranslationStatusGet(gameId, { withCredentials: true });\r\n};\r\n\r\nconst setAutomaticTranslationStatus = (gameId: number, enableAutomaticTranslation: boolean, languageCode: string): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiEditAutomaticTranslationStatusForGameAndLanguageResponse> => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeAutomaticTranslationStatusPatch(gameId, languageCode, enableAutomaticTranslation, { withCredentials: true });\r\n};\r\n\r\nconst getAutomaticTranslationSwitchesValues = (gameId: number): AxiosPromise<GameInternationalizationProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGameInternationalizationApiUniverseDisplayInfoAutomaticTranslationSettings> => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdUniverseDisplayInfoAutomaticTranslationSettingsGet(gameId, { withCredentials: true });\r\n};\r\n\r\nconst setAutomaticTranslationSwitchesValue = (gameId: number, enableUniverseDisplayInfoAutomaticTranslation: boolean, languageCode: string): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiUpdateUniverseDisplayInfoAutomaticTranslationSettingsResponse > => {\r\n    return supportedLanguagesApiInstance.v1SupportedLanguagesGamesGameIdLanguagesLanguageCodeUniverseDisplayInfoAutomaticTranslationSettingsPatch(gameId, languageCode, enableUniverseDisplayInfoAutomaticTranslation, { withCredentials: true });\r\n};\r\n\r\nexport default {\r\n    getGameLanguageRolloutSettings,\r\n    getGameLanguages,\r\n    getGameLanguagesV2,\r\n    addLanguages,\r\n    deleteLanguages,\r\n    getAvailableLanguages,\r\n    getAutomaticTranslationStatus,\r\n    setAutomaticTranslationStatus,\r\n    getAutomaticTranslationSwitchesValues,\r\n    setAutomaticTranslationSwitchesValue\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Thumbnails Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { Configuration } from './configuration';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.thumbnailsApi.replace(/\\/+$/, '');\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n  csv: ',',\r\n  ssv: ' ',\r\n  tsv: '\\t',\r\n  pipes: '|'\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n  url: string;\r\n  options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n  protected configuration: Configuration | undefined;\r\n\r\n  constructor(\r\n    configuration?: Configuration,\r\n    protected basePath: string = BASE_PATH,\r\n    protected axios: AxiosInstance = globalAxios\r\n  ) {\r\n    if (configuration) {\r\n      this.configuration = configuration;\r\n      this.basePath = configuration.basePath || this.basePath;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n  name: 'RequiredError' = 'RequiredError';\r\n\r\n  constructor(public field: string, msg?: string) {\r\n    super(msg);\r\n  }\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport\r\n    * as\r\n    GameInternationalizationProvider\r\n    from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\n\r\nconst sourceLanguageApiInstance = new GameInternationalizationProvider.SourceLanguageApi();\r\n\r\nconst getSourceLanguage = (gameId: number) : AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiLanguage> => {\r\n    return sourceLanguageApiInstance.v1SourceLanguageGamesGameIdGet(gameId, { withCredentials: true });\r\n};\r\n\r\nconst updateSourceLanguage = (gameId: number, sourceLanguageCode: string) : AxiosPromise<object> => {\r\n    return sourceLanguageApiInstance.v1SourceLanguageGamesGameIdPatch(gameId, sourceLanguageCode, { withCredentials: true });\r\n};\r\n\r\nexport default {\r\n    getSourceLanguage,\r\n    updateSourceLanguage\r\n};\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Thumbnails Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from \"./configuration\";\r\nimport { RequiredError,　RequestArgs } from \"./base\";\r\nimport { AxiosInstance } from 'axios';\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const DUMMY_BASE_URL = 'https://example.com'\r\n\r\n/**\r\n *\r\n * @throws {RequiredError}\r\n * @export\r\n */\r\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\r\n    if (paramValue === null || paramValue === undefined) {\r\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\r\n    if (configuration && configuration.apiKey) {\r\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\r\n            ? await configuration.apiKey(keyParamName)\r\n            : await configuration.apiKey;\r\n        object[keyParamName] = localVarApiKeyValue;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\r\n    if (configuration && (configuration.username || configuration.password)) {\r\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\r\n    if (configuration && configuration.accessToken) {\r\n        const accessToken = typeof configuration.accessToken === 'function'\r\n            ? await configuration.accessToken()\r\n            : await configuration.accessToken;\r\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\r\n    if (configuration && configuration.accessToken) {\r\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\r\n            ? await configuration.accessToken(name, scopes)\r\n            : await configuration.accessToken;\r\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\r\n    const searchParams = new URLSearchParams(url.search);\r\n    for (const object of objects) {\r\n        for (const key in object) {\r\n            searchParams.set(key, object[key]);\r\n        }\r\n    }\r\n    url.search = searchParams.toString();\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\r\n    const nonString = typeof value !== 'string';\r\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\r\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\r\n        : nonString;\r\n    return needsSerialization\r\n        ? JSON.stringify(value !== undefined ? value : {})\r\n        : (value || \"\");\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const toPathString = function (url: URL) {\r\n    return url.pathname + url.search + url.hash\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\r\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\r\n        return axios.request(axiosRequestArgs);\r\n    };\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Thumbnails Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from './configuration';\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * A response model for thumbnails which belong to a specific universe ID\r\n * @export\r\n * @interface RobloxThumbnailsApiModelsThumbnailMetaDataResponse\r\n */\r\nexport interface RobloxThumbnailsApiModelsThumbnailMetaDataResponse {\r\n    /**\r\n     * webapp use cache\r\n     * @type {boolean}\r\n     * @memberof RobloxThumbnailsApiModelsThumbnailMetaDataResponse\r\n     */\r\n    isWebappUseCacheEnabled?: boolean;\r\n    /**\r\n     * webapp caching expiration in ms\r\n     * @type {string}\r\n     * @memberof RobloxThumbnailsApiModelsThumbnailMetaDataResponse\r\n     */\r\n    webappCacheExpirationTimspan?: string;\r\n}\r\n/**\r\n * A response model for thumbnails which belong to a specific universe ID\r\n * @export\r\n * @interface RobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n */\r\nexport interface RobloxThumbnailsApiModelsUniverseThumbnailsResponse {\r\n    /**\r\n     * Integer universe ID\r\n     * @type {number}\r\n     * @memberof RobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n     */\r\n    universeId?: number;\r\n    /**\r\n     * \r\n     * @type {RobloxWebWebAPIModelsApiErrorModel}\r\n     * @memberof RobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n     */\r\n    error?: RobloxWebWebAPIModelsApiErrorModel;\r\n    /**\r\n     * An array of ThumbnailResponse objects\r\n     * @type {Array<RobloxWebResponsesThumbnailsThumbnailResponse>}\r\n     * @memberof RobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n     */\r\n    thumbnails?: Array<RobloxWebResponsesThumbnailsThumbnailResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n */\r\nexport interface RobloxThumbnailsApisModelsThumbnailBatchRequest {\r\n    /**\r\n     * The request id. (Generated client side, used to represent the items in the request)\r\n     * @type {string}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    requestId?: string;\r\n    /**\r\n     * The thumbnail target id\r\n     * @type {number}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    targetId?: number;\r\n    /**\r\n     * The type of the thumbnails\r\n     * @type {string}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    token?: string;\r\n    /**\r\n     * The type of the thumbnails\r\n     * @type {string}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    type?: RobloxThumbnailsApisModelsThumbnailBatchRequestTypeEnum;\r\n    /**\r\n     * The thumbnail size\r\n     * @type {string}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    size?: string;\r\n    /**\r\n     * Is the thumbnail circular shape\r\n     * @type {boolean}\r\n     * @memberof RobloxThumbnailsApisModelsThumbnailBatchRequest\r\n     */\r\n    isCircular?: boolean;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxThumbnailsApisModelsThumbnailBatchRequestTypeEnum {\r\n    Avatar = 'Avatar',\r\n    AvatarHeadShot = 'AvatarHeadShot',\r\n    GameIcon = 'GameIcon',\r\n    BadgeIcon = 'BadgeIcon',\r\n    GameThumbnail = 'GameThumbnail',\r\n    GamePass = 'GamePass',\r\n    Asset = 'Asset',\r\n    BundleThumbnail = 'BundleThumbnail',\r\n    Outfit = 'Outfit',\r\n    GroupIcon = 'GroupIcon',\r\n    DeveloperProduct = 'DeveloperProduct',\r\n    AvatarBust = 'AvatarBust',\r\n    AutoGeneratedAsset = 'AutoGeneratedAsset'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxThumbsImageParameters\r\n */\r\nexport interface RobloxThumbsImageParameters {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    Width?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    Height?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    Format?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    ThumbnailFormatID?: number;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    IsCircular?: boolean;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    FileExtension?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxThumbsImageParameters\r\n     */\r\n    MimeType?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n */\r\nexport interface RobloxWebResponsesThumbnailsThumbnailBatchResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    requestId?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    errorCode?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    errorMessage?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    targetId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    state?: RobloxWebResponsesThumbnailsThumbnailBatchResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    imageUrl?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxWebResponsesThumbnailsThumbnailBatchResponseStateEnum {\r\n    Error = 'Error',\r\n    Completed = 'Completed',\r\n    InReview = 'InReview',\r\n    Pending = 'Pending',\r\n    Blocked = 'Blocked'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesThumbnailsThumbnailResponse\r\n */\r\nexport interface RobloxWebResponsesThumbnailsThumbnailResponse {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailResponse\r\n     */\r\n    targetId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailResponse\r\n     */\r\n    state?: RobloxWebResponsesThumbnailsThumbnailResponseStateEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesThumbnailsThumbnailResponse\r\n     */\r\n    imageUrl?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxWebResponsesThumbnailsThumbnailResponseStateEnum {\r\n    Error = 'Error',\r\n    Completed = 'Completed',\r\n    InReview = 'InReview',\r\n    Pending = 'Pending',\r\n    Blocked = 'Blocked'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxThumbnailsApiModelsUniverseThumbnailsResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n     */\r\n    data?: Array<RobloxThumbnailsApiModelsUniverseThumbnailsResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxWebResponsesThumbnailsThumbnailBatchResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n     */\r\n    data?: Array<RobloxWebResponsesThumbnailsThumbnailBatchResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxWebResponsesThumbnailsThumbnailResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n     */\r\n    data?: Array<RobloxWebResponsesThumbnailsThumbnailResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiErrorModel\r\n */\r\nexport interface RobloxWebWebAPIModelsApiErrorModel {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebWebAPIModelsApiErrorModel\r\n     */\r\n    code?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiErrorModel\r\n     */\r\n    message?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiErrorModel\r\n     */\r\n    userFacingMessage?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiErrorModel\r\n     */\r\n    field?: string;\r\n    /**\r\n     * \r\n     * @type {object}\r\n     * @memberof RobloxWebWebAPIModelsApiErrorModel\r\n     */\r\n    fieldData?: object;\r\n}\r\n\r\n/**\r\n * AssetsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {Array<number>} assetIds The asset ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).\r\n         * @param {'30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AssetsGet: async (assetIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'assetIds' is not null or undefined\r\n            assertParamExists('v1AssetsGet', 'assetIds', assetIds)\r\n            const localVarPath = `/v1/assets`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (assetIds) {\r\n                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (returnPolicy !== undefined) {\r\n                localVarQueryParameter['returnPolicy'] = returnPolicy;\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {number} assetId The asset id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AssetsThumbnail3dGet: async (assetId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'assetId' is not null or undefined\r\n            assertParamExists('v1AssetsThumbnail3dGet', 'assetId', assetId)\r\n            const localVarPath = `/v1/assets-thumbnail-3d`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (assetId !== undefined) {\r\n                localVarQueryParameter['assetId'] = assetId;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AssetsApi - functional programming interface\r\n * @export\r\n */\r\nexport const AssetsApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {Array<number>} assetIds The asset ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).\r\n         * @param {'30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AssetsGet(assetIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssetsGet(assetIds, returnPolicy, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {number} assetId The asset id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1AssetsThumbnail3dGet(assetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssetsThumbnail3dGet(assetId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AssetsApi - factory interface\r\n * @export\r\n */\r\nexport const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = AssetsApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {Array<number>} assetIds The asset ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).\r\n         * @param {'30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AssetsGet(assetIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1AssetsGet(assetIds, returnPolicy, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Thumbnails assets.\r\n         * @param {number} assetId The asset id.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1AssetsThumbnail3dGet(assetId: number, options?: any): AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1AssetsThumbnail3dGet(assetId, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AssetsApi - interface\r\n * @export\r\n * @interface AssetsApi\r\n */\r\nexport interface AssetsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails assets.\r\n     * @param {Array<number>} assetIds The asset ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).\r\n     * @param {'30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApiInterface\r\n     */\r\n    v1AssetsGet(assetIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Thumbnails assets.\r\n     * @param {number} assetId The asset id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApiInterface\r\n     */\r\n    v1AssetsThumbnail3dGet(assetId: number, options?: any): AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * AssetsApi - object-oriented interface\r\n * @export\r\n * @class AssetsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AssetsApi extends BaseAPI implements AssetsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails assets.\r\n     * @param {Array<number>} assetIds The asset ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder).\r\n     * @param {'30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApi\r\n     */\r\n    public v1AssetsGet(assetIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '30x30' | '42x42' | '50x50' | '60x62' | '75x75' | '110x110' | '140x140' | '150x150' | '160x100' | '160x600' | '250x250' | '256x144' | '300x250' | '304x166' | '384x216' | '396x216' | '420x420' | '480x270' | '512x512' | '576x324' | '700x700' | '728x90' | '768x432', format?: number, isCircular?: boolean, options?: any) {\r\n        return AssetsApiFp(this.configuration).v1AssetsGet(assetIds, returnPolicy, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Thumbnails assets.\r\n     * @param {number} assetId The asset id.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApi\r\n     */\r\n    public v1AssetsThumbnail3dGet(assetId: number, options?: any) {\r\n        return AssetsApiFp(this.configuration).v1AssetsThumbnail3dGet(assetId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * AvatarApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AvatarApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get Avatar 3d object for a user\r\n         * @param {number} userId user Id for avatar\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatar3dGet: async (userId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userId' is not null or undefined\r\n            assertParamExists('v1UsersAvatar3dGet', 'userId', userId)\r\n            const localVarPath = `/v1/users/avatar-3d`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userId !== undefined) {\r\n                localVarQueryParameter['userId'] = userId;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Busts for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'50x50' | '60x60' | '75x75'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarBustGet: async (userIds: Array<number>, size?: '50x50' | '60x60' | '75x75', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userIds' is not null or undefined\r\n            assertParamExists('v1UsersAvatarBustGet', 'userIds', userIds)\r\n            const localVarPath = `/v1/users/avatar-bust`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userIds) {\r\n                localVarQueryParameter['userIds'] = userIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Full body shots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar full body shots\r\n         * @param {'30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarGet: async (userIds: Array<number>, size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userIds' is not null or undefined\r\n            assertParamExists('v1UsersAvatarGet', 'userIds', userIds)\r\n            const localVarPath = `/v1/users/avatar`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userIds) {\r\n                localVarQueryParameter['userIds'] = userIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Headshots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarHeadshotGet: async (userIds: Array<number>, size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userIds' is not null or undefined\r\n            assertParamExists('v1UsersAvatarHeadshotGet', 'userIds', userIds)\r\n            const localVarPath = `/v1/users/avatar-headshot`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userIds) {\r\n                localVarQueryParameter['userIds'] = userIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AvatarApi - functional programming interface\r\n * @export\r\n */\r\nexport const AvatarApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = AvatarApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get Avatar 3d object for a user\r\n         * @param {number} userId user Id for avatar\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UsersAvatar3dGet(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAvatar3dGet(userId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Busts for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'50x50' | '60x60' | '75x75'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UsersAvatarBustGet(userIds: Array<number>, size?: '50x50' | '60x60' | '75x75', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAvatarBustGet(userIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Full body shots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar full body shots\r\n         * @param {'30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UsersAvatarGet(userIds: Array<number>, size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAvatarGet(userIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Headshots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UsersAvatarHeadshotGet(userIds: Array<number>, size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersAvatarHeadshotGet(userIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AvatarApi - factory interface\r\n * @export\r\n */\r\nexport const AvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = AvatarApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get Avatar 3d object for a user\r\n         * @param {number} userId user Id for avatar\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatar3dGet(userId: number, options?: any): AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1UsersAvatar3dGet(userId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Busts for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'50x50' | '60x60' | '75x75'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarBustGet(userIds: Array<number>, size?: '50x50' | '60x60' | '75x75', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1UsersAvatarBustGet(userIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Full body shots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar full body shots\r\n         * @param {'30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarGet(userIds: Array<number>, size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1UsersAvatarGet(userIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get Avatar Headshots for the given CSV of userIds\r\n         * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n         * @param {'48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersAvatarHeadshotGet(userIds: Array<number>, size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1UsersAvatarHeadshotGet(userIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AvatarApi - interface\r\n * @export\r\n * @interface AvatarApi\r\n */\r\nexport interface AvatarApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get Avatar 3d object for a user\r\n     * @param {number} userId user Id for avatar\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApiInterface\r\n     */\r\n    v1UsersAvatar3dGet(userId: number, options?: any): AxiosPromise<RobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Busts for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n     * @param {'50x50' | '60x60' | '75x75'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApiInterface\r\n     */\r\n    v1UsersAvatarBustGet(userIds: Array<number>, size?: '50x50' | '60x60' | '75x75', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Full body shots for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar full body shots\r\n     * @param {'30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApiInterface\r\n     */\r\n    v1UsersAvatarGet(userIds: Array<number>, size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Headshots for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n     * @param {'48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApiInterface\r\n     */\r\n    v1UsersAvatarHeadshotGet(userIds: Array<number>, size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * AvatarApi - object-oriented interface\r\n * @export\r\n * @class AvatarApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AvatarApi extends BaseAPI implements AvatarApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get Avatar 3d object for a user\r\n     * @param {number} userId user Id for avatar\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApi\r\n     */\r\n    public v1UsersAvatar3dGet(userId: number, options?: any) {\r\n        return AvatarApiFp(this.configuration).v1UsersAvatar3dGet(userId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Busts for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n     * @param {'50x50' | '60x60' | '75x75'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApi\r\n     */\r\n    public v1UsersAvatarBustGet(userIds: Array<number>, size?: '50x50' | '60x60' | '75x75', format?: number, isCircular?: boolean, options?: any) {\r\n        return AvatarApiFp(this.configuration).v1UsersAvatarBustGet(userIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Full body shots for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar full body shots\r\n     * @param {'30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApi\r\n     */\r\n    public v1UsersAvatarGet(userIds: Array<number>, size?: '30x30' | '48x48' | '60x60' | '75x75' | '100x100' | '110x110' | '140x140' | '150x150' | '150x200' | '180x180' | '250x250' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any) {\r\n        return AvatarApiFp(this.configuration).v1UsersAvatarGet(userIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get Avatar Headshots for the given CSV of userIds\r\n     * @param {Array<number>} userIds CSV for the userIds to get avatar headshots\r\n     * @param {'48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AvatarApi\r\n     */\r\n    public v1UsersAvatarHeadshotGet(userIds: Array<number>, size?: '48x48' | '50x50' | '60x60' | '75x75' | '100x100' | '110x110' | '150x150' | '180x180' | '352x352' | '420x420' | '720x720', format?: number, isCircular?: boolean, options?: any) {\r\n        return AvatarApiFp(this.configuration).v1UsersAvatarHeadshotGet(userIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * BadgesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const BadgesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails badge icons.\r\n         * @param {Array<number>} badgeIds The badge ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesIconsGet: async (badgeIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'badgeIds' is not null or undefined\r\n            assertParamExists('v1BadgesIconsGet', 'badgeIds', badgeIds)\r\n            const localVarPath = `/v1/badges/icons`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (badgeIds) {\r\n                localVarQueryParameter['badgeIds'] = badgeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BadgesApi - functional programming interface\r\n * @export\r\n */\r\nexport const BadgesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = BadgesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails badge icons.\r\n         * @param {Array<number>} badgeIds The badge ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BadgesIconsGet(badgeIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BadgesIconsGet(badgeIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BadgesApi - factory interface\r\n * @export\r\n */\r\nexport const BadgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = BadgesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails badge icons.\r\n         * @param {Array<number>} badgeIds The badge ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BadgesIconsGet(badgeIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1BadgesIconsGet(badgeIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * BadgesApi - interface\r\n * @export\r\n * @interface BadgesApi\r\n */\r\nexport interface BadgesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails badge icons.\r\n     * @param {Array<number>} badgeIds The badge ids.\r\n     * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgesApiInterface\r\n     */\r\n    v1BadgesIconsGet(badgeIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * BadgesApi - object-oriented interface\r\n * @export\r\n * @class BadgesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class BadgesApi extends BaseAPI implements BadgesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails badge icons.\r\n     * @param {Array<number>} badgeIds The badge ids.\r\n     * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BadgesApi\r\n     */\r\n    public v1BadgesIconsGet(badgeIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any) {\r\n        return BadgesApiFp(this.configuration).v1BadgesIconsGet(badgeIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * BatchApi - axios parameter creator\r\n * @export\r\n */\r\nexport const BatchApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Returns a list of thumbnails with varying types and sizes\r\n         * @param {Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>} requests List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BatchPost: async (requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'requests' is not null or undefined\r\n            assertParamExists('v1BatchPost', 'requests', requests)\r\n            const localVarPath = `/v1/batch`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n            localVarRequestOptions.data = serializeDataIfNeeded(requests, localVarRequestOptions, configuration)\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BatchApi - functional programming interface\r\n * @export\r\n */\r\nexport const BatchApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Returns a list of thumbnails with varying types and sizes\r\n         * @param {Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>} requests List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BatchPost(requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BatchPost(requests, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BatchApi - factory interface\r\n * @export\r\n */\r\nexport const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = BatchApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Returns a list of thumbnails with varying types and sizes\r\n         * @param {Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>} requests List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BatchPost(requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse> {\r\n            return localVarFp.v1BatchPost(requests, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * BatchApi - interface\r\n * @export\r\n * @interface BatchApi\r\n */\r\nexport interface BatchApiInterface {\r\n    /**\r\n     * \r\n     * @summary Returns a list of thumbnails with varying types and sizes\r\n     * @param {Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>} requests List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BatchApiInterface\r\n     */\r\n    v1BatchPost(requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse>;\r\n\r\n}\r\n\r\n/**\r\n * BatchApi - object-oriented interface\r\n * @export\r\n * @class BatchApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class BatchApi extends BaseAPI implements BatchApiInterface {\r\n    /**\r\n     * \r\n     * @summary Returns a list of thumbnails with varying types and sizes\r\n     * @param {Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>} requests List of ThumbnailBatchRequest objects, may contain the following request types:              1. Avatar              2. AvatarHeadShot              3. GameIcon              4. BadgeIcon              5. GameThumbnail              6. GamePass              7. Asset              8. BundleThumbnail              9. Outfit              10. GroupIcon              11. DeveloperProduct              12. AutoGeneratedAsset              13. AvatarBust\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BatchApi\r\n     */\r\n    public v1BatchPost(requests: Array<RobloxThumbnailsApisModelsThumbnailBatchRequest>, options?: any) {\r\n        return BatchApiFp(this.configuration).v1BatchPost(requests, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * BundlesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const BundlesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get bundle thumbnails for the given CSV of bundle ids\r\n         * @param {Array<number>} bundleIds CSV for the bundle ids to get bundle thumbnails\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BundlesThumbnailsGet: async (bundleIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'bundleIds' is not null or undefined\r\n            assertParamExists('v1BundlesThumbnailsGet', 'bundleIds', bundleIds)\r\n            const localVarPath = `/v1/bundles/thumbnails`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (bundleIds) {\r\n                localVarQueryParameter['bundleIds'] = bundleIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BundlesApi - functional programming interface\r\n * @export\r\n */\r\nexport const BundlesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = BundlesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get bundle thumbnails for the given CSV of bundle ids\r\n         * @param {Array<number>} bundleIds CSV for the bundle ids to get bundle thumbnails\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1BundlesThumbnailsGet(bundleIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1BundlesThumbnailsGet(bundleIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * BundlesApi - factory interface\r\n * @export\r\n */\r\nexport const BundlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = BundlesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get bundle thumbnails for the given CSV of bundle ids\r\n         * @param {Array<number>} bundleIds CSV for the bundle ids to get bundle thumbnails\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1BundlesThumbnailsGet(bundleIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1BundlesThumbnailsGet(bundleIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * BundlesApi - interface\r\n * @export\r\n * @interface BundlesApi\r\n */\r\nexport interface BundlesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get bundle thumbnails for the given CSV of bundle ids\r\n     * @param {Array<number>} bundleIds CSV for the bundle ids to get bundle thumbnails\r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BundlesApiInterface\r\n     */\r\n    v1BundlesThumbnailsGet(bundleIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * BundlesApi - object-oriented interface\r\n * @export\r\n * @class BundlesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class BundlesApi extends BaseAPI implements BundlesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get bundle thumbnails for the given CSV of bundle ids\r\n     * @param {Array<number>} bundleIds CSV for the bundle ids to get bundle thumbnails\r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof BundlesApi\r\n     */\r\n    public v1BundlesThumbnailsGet(bundleIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any) {\r\n        return BundlesApiFp(this.configuration).v1BundlesThumbnailsGet(bundleIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * DeveloperProductsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const DeveloperProductsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails developer product icons.\r\n         * @param {Array<number>} developerProductIds The developer product ids.\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsIconsGet: async (developerProductIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'developerProductIds' is not null or undefined\r\n            assertParamExists('v1DeveloperProductsIconsGet', 'developerProductIds', developerProductIds)\r\n            const localVarPath = `/v1/developer-products/icons`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (developerProductIds) {\r\n                localVarQueryParameter['developerProductIds'] = developerProductIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DeveloperProductsApi - functional programming interface\r\n * @export\r\n */\r\nexport const DeveloperProductsApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = DeveloperProductsApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails developer product icons.\r\n         * @param {Array<number>} developerProductIds The developer product ids.\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1DeveloperProductsIconsGet(developerProductIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DeveloperProductsIconsGet(developerProductIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * DeveloperProductsApi - factory interface\r\n * @export\r\n */\r\nexport const DeveloperProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = DeveloperProductsApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails developer product icons.\r\n         * @param {Array<number>} developerProductIds The developer product ids.\r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1DeveloperProductsIconsGet(developerProductIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1DeveloperProductsIconsGet(developerProductIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * DeveloperProductsApi - interface\r\n * @export\r\n * @interface DeveloperProductsApi\r\n */\r\nexport interface DeveloperProductsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails developer product icons.\r\n     * @param {Array<number>} developerProductIds The developer product ids.\r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductsApiInterface\r\n     */\r\n    v1DeveloperProductsIconsGet(developerProductIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * DeveloperProductsApi - object-oriented interface\r\n * @export\r\n * @class DeveloperProductsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class DeveloperProductsApi extends BaseAPI implements DeveloperProductsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails developer product icons.\r\n     * @param {Array<number>} developerProductIds The developer product ids.\r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof DeveloperProductsApi\r\n     */\r\n    public v1DeveloperProductsIconsGet(developerProductIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any) {\r\n        return DeveloperProductsApiFp(this.configuration).v1DeveloperProductsIconsGet(developerProductIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * GamePassesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamePassesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails game pass icons.\r\n         * @param {Array<number>} gamePassIds The game pass ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGet: async (gamePassIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'gamePassIds' is not null or undefined\r\n            assertParamExists('v1GamePassesGet', 'gamePassIds', gamePassIds)\r\n            const localVarPath = `/v1/game-passes`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (gamePassIds) {\r\n                localVarQueryParameter['gamePassIds'] = gamePassIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamePassesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = GamePassesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails game pass icons.\r\n         * @param {Array<number>} gamePassIds The game pass ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamePassesGet(gamePassIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GamePassesGet(gamePassIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassesApi - factory interface\r\n * @export\r\n */\r\nexport const GamePassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = GamePassesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Thumbnails game pass icons.\r\n         * @param {Array<number>} gamePassIds The game pass ids.\r\n         * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamePassesGet(gamePassIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1GamePassesGet(gamePassIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamePassesApi - interface\r\n * @export\r\n * @interface GamePassesApi\r\n */\r\nexport interface GamePassesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails game pass icons.\r\n     * @param {Array<number>} gamePassIds The game pass ids.\r\n     * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassesApiInterface\r\n     */\r\n    v1GamePassesGet(gamePassIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GamePassesApi - object-oriented interface\r\n * @export\r\n * @class GamePassesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamePassesApi extends BaseAPI implements GamePassesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Thumbnails game pass icons.\r\n     * @param {Array<number>} gamePassIds The game pass ids.\r\n     * @param {'150x150'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassesApi\r\n     */\r\n    public v1GamePassesGet(gamePassIds: Array<number>, size?: '150x150', format?: number, isCircular?: boolean, options?: any) {\r\n        return GamePassesApiFp(this.configuration).v1GamePassesGet(gamePassIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * GamesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of universes\\' root places. Ids that do not correspond to a valid universe will be filtered out.\r\n         * @param {Array<number>} universeIds The universe ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesIconsGet: async (universeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            assertParamExists('v1GamesIconsGet', 'universeIds', universeIds)\r\n            const localVarPath = `/v1/games/icons`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (returnPolicy !== undefined) {\r\n                localVarQueryParameter['returnPolicy'] = returnPolicy;\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetch game thumbnail URLs for a list of universe IDs.\r\n         * @param {Array<number>} universeIds comma-delimited list of universe IDs\r\n         * @param {number} [countPerUniverse] max number of thumbnails to return per universe\r\n         * @param {boolean} [defaults] true if defaults (if any) should be returned if no media exists\r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetThumbnailsGet: async (universeIds: Array<number>, countPerUniverse?: number, defaults?: boolean, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            assertParamExists('v1GamesMultigetThumbnailsGet', 'universeIds', universeIds)\r\n            const localVarPath = `/v1/games/multiget/thumbnails`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (countPerUniverse !== undefined) {\r\n                localVarQueryParameter['countPerUniverse'] = countPerUniverse;\r\n            }\r\n\r\n            if (defaults !== undefined) {\r\n                localVarQueryParameter['defaults'] = defaults;\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetches game thumbnail URLs for a list of universes\\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.\r\n         * @param {number} universeId \r\n         * @param {Array<number>} thumbnailIds \r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdThumbnailsGet: async (universeId: number, thumbnailIds: Array<number>, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            assertParamExists('v1GamesUniverseIdThumbnailsGet', 'universeId', universeId)\r\n            // verify required parameter 'thumbnailIds' is not null or undefined\r\n            assertParamExists('v1GamesUniverseIdThumbnailsGet', 'thumbnailIds', thumbnailIds)\r\n            const localVarPath = `/v1/games/{universeId}/thumbnails`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (thumbnailIds) {\r\n                localVarQueryParameter['thumbnailIds'] = thumbnailIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of universes\\' root places. Ids that do not correspond to a valid universe will be filtered out.\r\n         * @param {Array<number>} universeIds The universe ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamesIconsGet(universeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GamesIconsGet(universeIds, returnPolicy, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetch game thumbnail URLs for a list of universe IDs.\r\n         * @param {Array<number>} universeIds comma-delimited list of universe IDs\r\n         * @param {number} [countPerUniverse] max number of thumbnails to return per universe\r\n         * @param {boolean} [defaults] true if defaults (if any) should be returned if no media exists\r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamesMultigetThumbnailsGet(universeIds: Array<number>, countPerUniverse?: number, defaults?: boolean, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GamesMultigetThumbnailsGet(universeIds, countPerUniverse, defaults, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetches game thumbnail URLs for a list of universes\\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.\r\n         * @param {number} universeId \r\n         * @param {Array<number>} thumbnailIds \r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GamesUniverseIdThumbnailsGet(universeId: number, thumbnailIds: Array<number>, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GamesUniverseIdThumbnailsGet(universeId, thumbnailIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - factory interface\r\n * @export\r\n */\r\nexport const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = GamesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of universes\\' root places. Ids that do not correspond to a valid universe will be filtered out.\r\n         * @param {Array<number>} universeIds The universe ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesIconsGet(universeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1GamesIconsGet(universeIds, returnPolicy, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetch game thumbnail URLs for a list of universe IDs.\r\n         * @param {Array<number>} universeIds comma-delimited list of universe IDs\r\n         * @param {number} [countPerUniverse] max number of thumbnails to return per universe\r\n         * @param {boolean} [defaults] true if defaults (if any) should be returned if no media exists\r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetThumbnailsGet(universeIds: Array<number>, countPerUniverse?: number, defaults?: boolean, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse> {\r\n            return localVarFp.v1GamesMultigetThumbnailsGet(universeIds, countPerUniverse, defaults, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Fetches game thumbnail URLs for a list of universes\\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.\r\n         * @param {number} universeId \r\n         * @param {Array<number>} thumbnailIds \r\n         * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdThumbnailsGet(universeId: number, thumbnailIds: Array<number>, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1GamesUniverseIdThumbnailsGet(universeId, thumbnailIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamesApi - interface\r\n * @export\r\n * @interface GamesApi\r\n */\r\nexport interface GamesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches game icon URLs for a list of universes\\' root places. Ids that do not correspond to a valid universe will be filtered out.\r\n     * @param {Array<number>} universeIds The universe ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n     * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesIconsGet(universeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Fetch game thumbnail URLs for a list of universe IDs.\r\n     * @param {Array<number>} universeIds comma-delimited list of universe IDs\r\n     * @param {number} [countPerUniverse] max number of thumbnails to return per universe\r\n     * @param {boolean} [defaults] true if defaults (if any) should be returned if no media exists\r\n     * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesMultigetThumbnailsGet(universeIds: Array<number>, countPerUniverse?: number, defaults?: boolean, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Fetches game thumbnail URLs for a list of universes\\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.\r\n     * @param {number} universeId \r\n     * @param {Array<number>} thumbnailIds \r\n     * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesUniverseIdThumbnailsGet(universeId: number, thumbnailIds: Array<number>, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GamesApi - object-oriented interface\r\n * @export\r\n * @class GamesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamesApi extends BaseAPI implements GamesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches game icon URLs for a list of universes\\' root places. Ids that do not correspond to a valid universe will be filtered out.\r\n     * @param {Array<number>} universeIds The universe ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n     * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesIconsGet(universeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesIconsGet(universeIds, returnPolicy, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Fetch game thumbnail URLs for a list of universe IDs.\r\n     * @param {Array<number>} universeIds comma-delimited list of universe IDs\r\n     * @param {number} [countPerUniverse] max number of thumbnails to return per universe\r\n     * @param {boolean} [defaults] true if defaults (if any) should be returned if no media exists\r\n     * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesMultigetThumbnailsGet(universeIds: Array<number>, countPerUniverse?: number, defaults?: boolean, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesMultigetThumbnailsGet(universeIds, countPerUniverse, defaults, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Fetches game thumbnail URLs for a list of universes\\' thumbnail ids. Ids that do not correspond to a valid thumbnail will be filtered out.\r\n     * @param {number} universeId \r\n     * @param {Array<number>} thumbnailIds \r\n     * @param {'768x432' | '576x324' | '480x270' | '384x216' | '256x144'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesUniverseIdThumbnailsGet(universeId: number, thumbnailIds: Array<number>, size?: '768x432' | '576x324' | '480x270' | '384x216' | '256x144', format?: number, isCircular?: boolean, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesUniverseIdThumbnailsGet(universeId, thumbnailIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * GroupEmblemApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GroupEmblemApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.\r\n         * @param {Array<number>} groupIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GroupsIconsGet: async (groupIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'groupIds' is not null or undefined\r\n            assertParamExists('v1GroupsIconsGet', 'groupIds', groupIds)\r\n            const localVarPath = `/v1/groups/icons`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (groupIds) {\r\n                localVarQueryParameter['groupIds'] = groupIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GroupEmblemApi - functional programming interface\r\n * @export\r\n */\r\nexport const GroupEmblemApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = GroupEmblemApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.\r\n         * @param {Array<number>} groupIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1GroupsIconsGet(groupIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1GroupsIconsGet(groupIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GroupEmblemApi - factory interface\r\n * @export\r\n */\r\nexport const GroupEmblemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = GroupEmblemApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.\r\n         * @param {Array<number>} groupIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GroupsIconsGet(groupIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1GroupsIconsGet(groupIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GroupEmblemApi - interface\r\n * @export\r\n * @interface GroupEmblemApi\r\n */\r\nexport interface GroupEmblemApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.\r\n     * @param {Array<number>} groupIds \r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GroupEmblemApiInterface\r\n     */\r\n    v1GroupsIconsGet(groupIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GroupEmblemApi - object-oriented interface\r\n * @export\r\n * @class GroupEmblemApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GroupEmblemApi extends BaseAPI implements GroupEmblemApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches thumbnail URLs for a list of groups. Ids that do not correspond to groups will be filtered out.\r\n     * @param {Array<number>} groupIds \r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GroupEmblemApi\r\n     */\r\n    public v1GroupsIconsGet(groupIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any) {\r\n        return GroupEmblemApiFp(this.configuration).v1GroupsIconsGet(groupIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * MetaDataApi - axios parameter creator\r\n * @export\r\n */\r\nexport const MetaDataApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Return list of thumbnail meta data.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1MetadataGet: async (options: any = {}): Promise<RequestArgs> => {\r\n            const localVarPath = `/v1/metadata`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * MetaDataApi - functional programming interface\r\n * @export\r\n */\r\nexport const MetaDataApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = MetaDataApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Return list of thumbnail meta data.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1MetadataGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxThumbnailsApiModelsThumbnailMetaDataResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MetadataGet(options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * MetaDataApi - factory interface\r\n * @export\r\n */\r\nexport const MetaDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = MetaDataApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Return list of thumbnail meta data.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1MetadataGet(options?: any): AxiosPromise<RobloxThumbnailsApiModelsThumbnailMetaDataResponse> {\r\n            return localVarFp.v1MetadataGet(options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * MetaDataApi - interface\r\n * @export\r\n * @interface MetaDataApi\r\n */\r\nexport interface MetaDataApiInterface {\r\n    /**\r\n     * \r\n     * @summary Return list of thumbnail meta data.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof MetaDataApiInterface\r\n     */\r\n    v1MetadataGet(options?: any): AxiosPromise<RobloxThumbnailsApiModelsThumbnailMetaDataResponse>;\r\n\r\n}\r\n\r\n/**\r\n * MetaDataApi - object-oriented interface\r\n * @export\r\n * @class MetaDataApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class MetaDataApi extends BaseAPI implements MetaDataApiInterface {\r\n    /**\r\n     * \r\n     * @summary Return list of thumbnail meta data.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof MetaDataApi\r\n     */\r\n    public v1MetadataGet(options?: any) {\r\n        return MetaDataApiFp(this.configuration).v1MetadataGet(options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * OutfitsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const OutfitsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get outfits for the given CSV of userIds\r\n         * @param {Array<number>} userOutfitIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersOutfitsGet: async (userOutfitIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userOutfitIds' is not null or undefined\r\n            assertParamExists('v1UsersOutfitsGet', 'userOutfitIds', userOutfitIds)\r\n            const localVarPath = `/v1/users/outfits`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (userOutfitIds) {\r\n                localVarQueryParameter['userOutfitIds'] = userOutfitIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * OutfitsApi - functional programming interface\r\n * @export\r\n */\r\nexport const OutfitsApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = OutfitsApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get outfits for the given CSV of userIds\r\n         * @param {Array<number>} userOutfitIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1UsersOutfitsGet(userOutfitIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersOutfitsGet(userOutfitIds, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * OutfitsApi - factory interface\r\n * @export\r\n */\r\nexport const OutfitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = OutfitsApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get outfits for the given CSV of userIds\r\n         * @param {Array<number>} userOutfitIds \r\n         * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1UsersOutfitsGet(userOutfitIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1UsersOutfitsGet(userOutfitIds, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * OutfitsApi - interface\r\n * @export\r\n * @interface OutfitsApi\r\n */\r\nexport interface OutfitsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get outfits for the given CSV of userIds\r\n     * @param {Array<number>} userOutfitIds \r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof OutfitsApiInterface\r\n     */\r\n    v1UsersOutfitsGet(userOutfitIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * OutfitsApi - object-oriented interface\r\n * @export\r\n * @class OutfitsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class OutfitsApi extends BaseAPI implements OutfitsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get outfits for the given CSV of userIds\r\n     * @param {Array<number>} userOutfitIds \r\n     * @param {'150x150' | '420x420'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof OutfitsApi\r\n     */\r\n    public v1UsersOutfitsGet(userOutfitIds: Array<number>, size?: '150x150' | '420x420', format?: number, isCircular?: boolean, options?: any) {\r\n        return OutfitsApiFp(this.configuration).v1UsersOutfitsGet(userOutfitIds, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * PlacesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const PlacesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.\r\n         * @param {Array<number>} placeIds The place ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlacesGameiconsGet: async (placeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'placeIds' is not null or undefined\r\n            assertParamExists('v1PlacesGameiconsGet', 'placeIds', placeIds)\r\n            const localVarPath = `/v1/places/gameicons`;\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (placeIds) {\r\n                localVarQueryParameter['placeIds'] = placeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n            if (returnPolicy !== undefined) {\r\n                localVarQueryParameter['returnPolicy'] = returnPolicy;\r\n            }\r\n\r\n            if (size !== undefined) {\r\n                localVarQueryParameter['size'] = size;\r\n            }\r\n\r\n            if (format !== undefined) {\r\n                localVarQueryParameter['format'] = format;\r\n            }\r\n\r\n            if (isCircular !== undefined) {\r\n                localVarQueryParameter['isCircular'] = isCircular;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * PlacesApi - functional programming interface\r\n * @export\r\n */\r\nexport const PlacesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = PlacesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.\r\n         * @param {Array<number>} placeIds The place ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v1PlacesGameiconsGet(placeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v1PlacesGameiconsGet(placeIds, returnPolicy, size, format, isCircular, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * PlacesApi - factory interface\r\n * @export\r\n */\r\nexport const PlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = PlacesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.\r\n         * @param {Array<number>} placeIds The place ids.\r\n         * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n         * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n         * @param {number} [format] The thumbnail format\r\n         * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1PlacesGameiconsGet(placeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> {\r\n            return localVarFp.v1PlacesGameiconsGet(placeIds, returnPolicy, size, format, isCircular, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * PlacesApi - interface\r\n * @export\r\n * @interface PlacesApi\r\n */\r\nexport interface PlacesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.\r\n     * @param {Array<number>} placeIds The place ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n     * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlacesApiInterface\r\n     */\r\n    v1PlacesGameiconsGet(placeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>;\r\n\r\n}\r\n\r\n/**\r\n * PlacesApi - object-oriented interface\r\n * @export\r\n * @class PlacesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class PlacesApi extends BaseAPI implements PlacesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Fetches game icon URLs for a list of places. Ids that do not correspond to a valid place will be filtered out.\r\n     * @param {Array<number>} placeIds The place ids.\r\n     * @param {'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated'} [returnPolicy] Optional policy to use in selecting game icon to return (default &#x3D; PlaceHolder).\r\n     * @param {'50x50' | '128x128' | '150x150' | '256x256' | '512x512'} [size] The thumbnail size, formatted widthxheight\r\n     * @param {number} [format] The thumbnail format\r\n     * @param {boolean} [isCircular] The circle thumbnail output parameter, true or false\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof PlacesApi\r\n     */\r\n    public v1PlacesGameiconsGet(placeIds: Array<number>, returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated', size?: '50x50' | '128x128' | '150x150' | '256x256' | '512x512', format?: number, isCircular?: boolean, options?: any) {\r\n        return PlacesApiFp(this.configuration).v1PlacesGameiconsGet(placeIds, returnPolicy, size, format, isCircular, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n","import { AxiosPromise } from 'axios';\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { httpService } from '../../../http/http';\r\nimport * as ThumbnailsProvider from '../../providers/thumbnails/thumbnailsProvider';\r\n\r\nconst { thumbnailsApi } = EnvironmentUrls;\r\n\r\nconst gameThumbnailsApiInstance = new ThumbnailsProvider.GamesApi();\r\nconst gamePassesApiInstance = new ThumbnailsProvider.GamePassesApi();\r\n\r\nenum ReturnPolicy {\r\n  PlaceHolder = 'PlaceHolder',\r\n  AutoGenerated = 'AutoGenerated',\r\n  ForceAutoGenerated = 'ForceAutoGenerated'\r\n}\r\n\r\nenum Size {\r\n  Large = '150x150',\r\n  Default = '50x50'\r\n}\r\n\r\nenum GameThumbnailSize {\r\n  width768 = '768x432',\r\n  width576 = '576x324',\r\n  width480 = '480x270',\r\n  width384 = '384x216',\r\n  width256 = '256x144'\r\n}\r\n\r\nenum FileType {\r\n  Png = 'Png'\r\n}\r\n\r\nconst getIcons = (\r\n  universeIds: Array<number>,\r\n  returnPolicy?: ReturnPolicy,\r\n  size?: Size,\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return gameThumbnailsApiInstance.v1GamesIconsGet(\r\n    universeIds,\r\n    returnPolicy,\r\n    size,\r\n    format,\r\n    isCircular,\r\n    { withCredentials: true }\r\n  );\r\n};\r\n// deprecated remove after rollout\r\nconst getUniverseThumbnails = (\r\n  universeIds: Array<number>,\r\n  size?: GameThumbnailSize,\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return gameThumbnailsApiInstance\r\n    .v1GamesMultigetThumbnailsGet(universeIds, 1, true, size, format, isCircular, {\r\n      withCredentials: true\r\n    })\r\n    .then(({ data, status, statusText, headers, request }) => {\r\n      const formattedData = data?.data?.map(item => {\r\n        const thumbnail = item.thumbnails?.[0];\r\n        return {\r\n          targetId: item.universeId,\r\n          state: thumbnail?.state,\r\n          imageUrl: thumbnail?.imageUrl\r\n        };\r\n      });\r\n      return {\r\n        data: {\r\n          data: formattedData\r\n        },\r\n        status,\r\n        statusText,\r\n        headers,\r\n        request\r\n      };\r\n    }) as AxiosPromise<\r\n    ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n  >;\r\n};\r\n\r\nconst getAllUniverseThumbnails = (\r\n  universeIds: Array<number>,\r\n  size?: GameThumbnailSize,\r\n  format?: number,\r\n  isCircular?: boolean,\r\n  limit = 10\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxThumbnailsApiModelsUniverseThumbnailsResponse\r\n> => {\r\n  return gameThumbnailsApiInstance.v1GamesMultigetThumbnailsGet(\r\n    universeIds,\r\n    limit,\r\n    true,\r\n    size,\r\n    format,\r\n    isCircular,\r\n    { withCredentials: true }\r\n  );\r\n};\r\n\r\nconst getGamePassIcons = (\r\n  gamePassIds: Array<number>,\r\n  size?: '150x150',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return gamePassesApiInstance.v1GamePassesGet(gamePassIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getThumbnailsByThumbnailIds = (\r\n  universeId: number,\r\n  thumbnailIds: Array<number>,\r\n  size?: GameThumbnailSize,\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return gameThumbnailsApiInstance.v1GamesUniverseIdThumbnailsGet(\r\n    universeId,\r\n    thumbnailIds,\r\n    size,\r\n    format,\r\n    isCircular,\r\n    {\r\n      withCredentials: true\r\n    }\r\n  );\r\n};\r\n\r\nconst getPlacesGameIcons = (\r\n  placeIds: Array<number>,\r\n  returnPolicy?: ReturnPolicy,\r\n  size?: Size,\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  const urlConfig = {\r\n    url: `${thumbnailsApi}/v1/places/gameicons`,\r\n    withCredentials: true,\r\n    retryable: true\r\n  };\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n  return httpService.get(urlConfig, {\r\n    placeIds,\r\n    returnPolicy,\r\n    size,\r\n    format,\r\n    isCircular\r\n  });\r\n};\r\n\r\nexport default {\r\n  getIcons,\r\n  getUniverseThumbnails,\r\n  getAllUniverseThumbnails,\r\n  getGamePassIcons,\r\n  getThumbnailsByThumbnailIds,\r\n  getPlacesGameIcons,\r\n  ReturnPolicy,\r\n  Size,\r\n  GameThumbnailSize,\r\n  FileType\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Games Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.gamesApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport * as GameInternationalizationProvider from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\n\r\nconst translationAnalyticsApiInstance = new GameInternationalizationProvider.TranslationAnalyticsApi();\r\n\r\nconst getMetadata = (): AxiosPromise<\r\n  GameInternationalizationProvider.RobloxGameInternationalizationApiTranslationAnalyticsMetadataResponse\r\n> => {\r\n  return translationAnalyticsApiInstance.v1TranslationAnalyticsMetadataGet({ withCredentials: true });\r\n};\r\n\r\nconst requestReport = (\r\n  gameId: number,\r\n  startDateTime: string,\r\n  endDateTime: string,\r\n  reportType: GameInternationalizationProvider.RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequestReportTypeEnum,\r\n  reportSubjectTargetId: number\r\n): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiRequestTranslationAnalyticsReportResponse> => {\r\n  const requestPayload: GameInternationalizationProvider.RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequest = {\r\n    startDateTime,\r\n    endDateTime,\r\n    reportType,\r\n    reportSubjectTargetId\r\n  };\r\n  return translationAnalyticsApiInstance.v1TranslationAnalyticsGamesGameIdRequestTranslationAnalyticsReportPost(\r\n    gameId,\r\n    requestPayload,\r\n    { withCredentials: true }\r\n  );\r\n};\r\n\r\nconst downloadReport = (\r\n  gameId: number,\r\n  startDateTime: string,\r\n  endDateTime: string,\r\n  reportType: GameInternationalizationProvider.RobloxGameInternationalizationApiRequestTranslationAnalyticsReportRequestReportTypeEnum,\r\n  reportSubjectTargetid: number\r\n): AxiosPromise<Object> => {\r\n  return translationAnalyticsApiInstance.v1TranslationAnalyticsGamesGameIdDownloadTranslationAnalyticsReportGet(\r\n    gameId,\r\n    startDateTime,\r\n    endDateTime,\r\n    reportType,\r\n    reportSubjectTargetid,\r\n    { withCredentials: true, responseType: 'arraybuffer' }\r\n  );\r\n};\r\n\r\nexport default {\r\n  getMetadata,\r\n  requestReport,\r\n  downloadReport\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Games Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n *\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * An create request for a vip server\r\n * @export\r\n * @interface RobloxGamesApiCreateVipServersRequest\r\n */\r\nexport interface RobloxGamesApiCreateVipServersRequest {\r\n    /**\r\n     * The name new vip server will be\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiCreateVipServersRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     * the expected price of the vip server\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiCreateVipServersRequest\r\n     */\r\n    expectedPrice?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiGameResponse\r\n */\r\nexport interface RobloxGamesApiGameResponse {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiGameResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiGameResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {RobloxGamesApiPlaceResponse}\r\n     * @memberof RobloxGamesApiGameResponse\r\n     */\r\n    rootPlace?: RobloxGamesApiPlaceResponse;\r\n}\r\n/**\r\n * Game favorite request model.\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestGameFavoriteResponse\r\n */\r\nexport interface RobloxGamesApiModelsRequestGameFavoriteResponse {\r\n    /**\r\n     * Is it a favorite game.\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsRequestGameFavoriteResponse\r\n     */\r\n    isFavorited?: boolean;\r\n}\r\n/**\r\n * Game favorite request model.\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestGameFavoritesRequest\r\n */\r\nexport interface RobloxGamesApiModelsRequestGameFavoritesRequest {\r\n    /**\r\n     * true for favor the game, false for unfavor the game.\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsRequestGameFavoritesRequest\r\n     */\r\n    isFavorited?: boolean;\r\n}\r\n/**\r\n * Game recommendations request model.\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestGameRecommendationsRequest\r\n */\r\nexport interface RobloxGamesApiModelsRequestGameRecommendationsRequest {\r\n    /**\r\n     * The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGameRecommendationsRequest\r\n     */\r\n    paginationKey?: string;\r\n    /**\r\n     * The requested number of rows.\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGameRecommendationsRequest\r\n     */\r\n    maxRows?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestGameSortsRequest\r\n */\r\nexport interface RobloxGamesApiModelsRequestGameSortsRequest {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGameSortsRequest\r\n     */\r\n    gameSortsContext?: RobloxGamesApiModelsRequestGameSortsRequestGameSortsContextEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGamesApiModelsRequestGameSortsRequestGameSortsContextEnum {\r\n    GamesDefaultSorts = 'GamesDefaultSorts',\r\n    GamesAllSorts = 'GamesAllSorts',\r\n    HomeSorts = 'HomeSorts',\r\n    ChatSorts = 'ChatSorts',\r\n    UnifiedHomeSorts = 'UnifiedHomeSorts',\r\n    AbTestSorts = 'AbTestSorts',\r\n    GamesPageAbTestSorts1 = 'GamesPageAbTestSorts1',\r\n    GamesPageAbTestSorts2 = 'GamesPageAbTestSorts2'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestGamesSearchRequest\r\n */\r\nexport interface RobloxGamesApiModelsRequestGamesSearchRequest {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    sortToken?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    gameFilter?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    timeFilter?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    genreFilter?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    exclusiveStartId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    sortOrder?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    gameSetTargetId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    keyword?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    startRows?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    maxRows?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    isKeywordSuggestionEnabled?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    contextCountryRegionId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    contextUniverseId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    pageId?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsRequestGamesSearchRequest\r\n     */\r\n    sortPosition?: number;\r\n}\r\n/**\r\n * A request for set user\\'s vote for a game\r\n * @export\r\n * @interface RobloxGamesApiModelsRequestSetUserGameVoteRequest\r\n */\r\nexport interface RobloxGamesApiModelsRequestSetUserGameVoteRequest {\r\n    /**\r\n     * The vote to set\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsRequestSetUserGameVoteRequest\r\n     */\r\n    vote?: boolean;\r\n}\r\n/**\r\n * Response model for getting the game creator\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameCreator\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameCreator {\r\n    /**\r\n     * The game creator id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameCreator\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The game creator name\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameCreator\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The game creator type\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameCreator\r\n     */\r\n    type?: string;\r\n}\r\n/**\r\n * Response model for getting the game detail\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameDetailResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameDetailResponse {\r\n    /**\r\n     * The game universe id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The game root place id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    rootPlaceId?: number;\r\n    /**\r\n     * The game name\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The game description\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    description?: string;\r\n    /**\r\n     *\r\n     * @type {RobloxGamesApiModelsResponseGameCreator}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    creator?: RobloxGamesApiModelsResponseGameCreator;\r\n    /**\r\n     * The game paid access price\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    price?: number;\r\n    /**\r\n     * Whether the game is experimental\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    isExperimental?: boolean;\r\n    /**\r\n     * The game allowed gear genres\r\n     * @type {Array<string>}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    allowedGearGenres?: Array<string>;\r\n    /**\r\n     * The game allowed gear categoris\r\n     * @type {Array<string>}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    allowedGearCategories?: Array<string>;\r\n    /**\r\n     * Current player count of the game\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    playing?: number;\r\n    /**\r\n     * The total visits to the game\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    visits?: number;\r\n    /**\r\n     * The game max players\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    maxPlayers?: number;\r\n    /**\r\n     * The game created time\r\n     * @type {Date}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    created?: Date;\r\n    /**\r\n     * The game updated time\r\n     * @type {Date}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    updated?: Date;\r\n    /**\r\n     * The setting of IsStudioAccessToApisAllowed of the universe\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    studioAccessToApisAllowed?: boolean;\r\n    /**\r\n     * Avatar type. Possible values are MorphToR6, MorphToR15, and PlayerChoice\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    universeAvatarType?: RobloxGamesApiModelsResponseGameDetailResponseUniverseAvatarTypeEnum;\r\n    /**\r\n     * The game genre display name\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    genre?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGamesApiModelsResponseGameDetailResponseUniverseAvatarTypeEnum {\r\n    MorphToR6 = 'MorphToR6',\r\n    PlayerChoice = 'PlayerChoice',\r\n    MorphToR15 = 'MorphToR15'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameFavoritesCountResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameFavoritesCountResponse {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameFavoritesCountResponse\r\n     */\r\n    favoritesCount?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameFilter\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameFilter {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameFilter\r\n     */\r\n    token?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameFilter\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameFilter\r\n     */\r\n    tokenExpiryInSeconds?: number;\r\n}\r\n/**\r\n * Response model for getting the game icon.\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameIconResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameIconResponse {\r\n    /**\r\n     * The icon image id or null - if the default icon is used.\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameIconResponse\r\n     */\r\n    imageId?: number;\r\n}\r\n/**\r\n * Response model for getting the game media item\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameMediaItem\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameMediaItem {\r\n    /**\r\n     * The media item id.\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The media item type id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    assetTypeId?: number;\r\n    /**\r\n     * The media item type, Image or YouTubeVideo\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    assetType?: string;\r\n    /**\r\n     * The media item image id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    imageId?: number;\r\n    /**\r\n     * The media item video hash\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    videoHash?: string;\r\n    /**\r\n     * The video title for video items.\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    videoTitle?: string;\r\n    /**\r\n     * The media item is approved or not\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    approved?: boolean;\r\n}\r\n/**\r\n * Response model for getting game passes\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGamePassResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGamePassResponse {\r\n    /**\r\n     * The game pass id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The game pass name\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The game pass product id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    productId?: number;\r\n    /**\r\n     * The game pass price\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    price?: number;\r\n}\r\n/**\r\n * Response model for getting the game product information\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameProductResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameProductResponse {\r\n    /**\r\n     * The game universe id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    universeId?: number;\r\n    /**\r\n     * The game purchasability\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    isForSale?: boolean;\r\n    /**\r\n     * The game product id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    productId?: number;\r\n    /**\r\n     * The game price\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    price?: number;\r\n    /**\r\n     * The game seller id  User ID for users, Agent ID for groups\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    sellerId?: number;\r\n}\r\n/**\r\n * Game recommendations response model.\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameRecommendationsResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameRecommendationsResponse {\r\n    /**\r\n     * The recommended games.\r\n     * @type {Array<RobloxGamesApiModelsResponseGameResponseModel>}\r\n     * @memberof RobloxGamesApiModelsResponseGameRecommendationsResponse\r\n     */\r\n    games?: Array<RobloxGamesApiModelsResponseGameResponseModel>;\r\n    /**\r\n     * The pagination key for next page query.  It will be null if there is no more data.\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameRecommendationsResponse\r\n     */\r\n    nextPaginationKey?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameResponseModel\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameResponseModel {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    creatorId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    creatorName?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    creatorType?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    totalUpVotes?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    totalDownVotes?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    universeId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    placeId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    playerCount?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    imageToken?: string;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseUser>}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    users?: Array<RobloxGamesApiModelsResponseUser>;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    isSponsored?: boolean;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    nativeAdData?: string;\r\n    /**\r\n     * The game paid access price\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    price?: number;\r\n    /**\r\n     * Provide all necessary information which helps analytics for improvement, for example, the algorithm, dataset version, position, etc..\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameResponseModel\r\n     */\r\n    analyticsIdentifier?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameSort\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameSort {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    token?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    displayName?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    gameSetTargetId?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    timeOptionsAvailable?: boolean;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    genreOptionsAvailable?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    numberOfRows?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    numberOfGames?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    isDefaultSort?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    contextUniverseId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    contextCountryRegionId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameSort\r\n     */\r\n    tokenExpiryInSeconds?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameSortsResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameSortsResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameSort>}\r\n     * @memberof RobloxGamesApiModelsResponseGameSortsResponse\r\n     */\r\n    sorts?: Array<RobloxGamesApiModelsResponseGameSort>;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseTimeFilter>}\r\n     * @memberof RobloxGamesApiModelsResponseGameSortsResponse\r\n     */\r\n    timeFilters?: Array<RobloxGamesApiModelsResponseTimeFilter>;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGenreFilter>}\r\n     * @memberof RobloxGamesApiModelsResponseGameSortsResponse\r\n     */\r\n    genreFilters?: Array<RobloxGamesApiModelsResponseGenreFilter>;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameFilter>}\r\n     * @memberof RobloxGamesApiModelsResponseGameSortsResponse\r\n     */\r\n    gameFilters?: Array<RobloxGamesApiModelsResponseGameFilter>;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGameSortsResponse\r\n     */\r\n    pageId?: string;\r\n}\r\n/**\r\n * Response model for getting the game vote\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGameVoteResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGameVoteResponse {\r\n    /**\r\n     * The game universe id\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameVoteResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The game up votes\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameVoteResponse\r\n     */\r\n    upVotes?: number;\r\n    /**\r\n     * The game down votes\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGameVoteResponse\r\n     */\r\n    downVotes?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGamesSearchResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseGamesSearchResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameResponseModel>}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    games?: Array<RobloxGamesApiModelsResponseGameResponseModel>;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    suggestedKeyword?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    correctedKeyword?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    filteredKeyword?: string;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    hasMoreRows?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    nextPageExclusiveStartId?: number;\r\n    /**\r\n     * Position of the sort on the page.\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    sortPosition?: number;\r\n    /**\r\n     * PageId tying all sorts on the page.\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    pageId?: string;\r\n    /**\r\n     * Pagenumber of fetch for the sort or search.\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGamesSearchResponse\r\n     */\r\n    page?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseGenreFilter\r\n */\r\nexport interface RobloxGamesApiModelsResponseGenreFilter {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGenreFilter\r\n     */\r\n    token?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseGenreFilter\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseGenreFilter\r\n     */\r\n    tokenExpiryInSeconds?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponsePlaceDetails\r\n */\r\nexport interface RobloxGamesApiModelsResponsePlaceDetails {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    placeId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    description?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    url?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    builder?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    builderId?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    isPlayable?: boolean;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    reasonProhibited?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    universeId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    universeRootPlaceId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    price?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlaceDetails\r\n     */\r\n    imageToken?: string;\r\n}\r\n/**\r\n * Response model for getting a universe\\'s playability status for a user\r\n * @export\r\n * @interface RobloxGamesApiModelsResponsePlayabilityStatusResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponsePlayabilityStatusResponse {\r\n    /**\r\n     * The actual playability status of the universe including the reason if unplayable\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponsePlayabilityStatusResponse\r\n     */\r\n    playabilityStatus?: RobloxGamesApiModelsResponsePlayabilityStatusResponsePlayabilityStatusEnum;\r\n    /**\r\n     * Whether or not the universe is playable for the user\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponsePlayabilityStatusResponse\r\n     */\r\n    isPlayable?: boolean;\r\n    /**\r\n     * The universeId of the requested universe to help with batching requests\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponsePlayabilityStatusResponse\r\n     */\r\n    universeId?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGamesApiModelsResponsePlayabilityStatusResponsePlayabilityStatusEnum {\r\n    UnplayableOtherReason = 'UnplayableOtherReason',\r\n    Playable = 'Playable',\r\n    GuestProhibited = 'GuestProhibited',\r\n    GameUnapproved = 'GameUnapproved',\r\n    IncorrectConfiguration = 'IncorrectConfiguration',\r\n    UniverseRootPlaceIsPrivate = 'UniverseRootPlaceIsPrivate',\r\n    InsufficientPermissionFriendsOnly = 'InsufficientPermissionFriendsOnly',\r\n    InsufficientPermissionGroupOnly = 'InsufficientPermissionGroupOnly',\r\n    DeviceRestricted = 'DeviceRestricted',\r\n    UnderReview = 'UnderReview',\r\n    PurchaseRequired = 'PurchaseRequired',\r\n    AccountRestricted = 'AccountRestricted',\r\n    TemporarilyUnavailable = 'TemporarilyUnavailable'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseThumbnail\r\n */\r\nexport interface RobloxGamesApiModelsResponseThumbnail {\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    _final?: boolean;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    url?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    cdnUrl?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    retryToken?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    universeId?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseThumbnail\r\n     */\r\n    placeId?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseTimeFilter\r\n */\r\nexport interface RobloxGamesApiModelsResponseTimeFilter {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseTimeFilter\r\n     */\r\n    token?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseTimeFilter\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseTimeFilter\r\n     */\r\n    tokenExpiryInSeconds?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseUser\r\n */\r\nexport interface RobloxGamesApiModelsResponseUser {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiModelsResponseUser\r\n     */\r\n    userId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseUser\r\n     */\r\n    gameId?: string;\r\n}\r\n/**\r\n * Response model for getting the user vote status for a game\r\n * @export\r\n * @interface RobloxGamesApiModelsResponseUserGameVoteResponse\r\n */\r\nexport interface RobloxGamesApiModelsResponseUserGameVoteResponse {\r\n    /**\r\n     * Whether the user can vote the game\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseUserGameVoteResponse\r\n     */\r\n    canVote?: boolean;\r\n    /**\r\n     * The user\\'s vote status for the game\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiModelsResponseUserGameVoteResponse\r\n     */\r\n    userVote?: boolean;\r\n    /**\r\n     * The reason why the user can\\'t vote\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiModelsResponseUserGameVoteResponse\r\n     */\r\n    reasonForNotVoteable?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiPlaceResponse\r\n */\r\nexport interface RobloxGamesApiPlaceResponse {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiPlaceResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiPlaceResponse\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n * Model for setting metadata\r\n * @export\r\n * @interface RobloxGamesApiReportPlaceMetadataRequest\r\n */\r\nexport interface RobloxGamesApiReportPlaceMetadataRequest {\r\n    /**\r\n     * How many points to award to the user.\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiReportPlaceMetadataRequest\r\n     */\r\n    filteringEnabled?: boolean;\r\n}\r\n/**\r\n * A social link for a game\r\n * @export\r\n * @interface RobloxGamesApiSocialLinkResponse\r\n */\r\nexport interface RobloxGamesApiSocialLinkResponse {\r\n    /**\r\n     * The id of the social link\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiSocialLinkResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     * The title given to the social link\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiSocialLinkResponse\r\n     */\r\n    title?: string;\r\n    /**\r\n     * The url of the social link\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiSocialLinkResponse\r\n     */\r\n    url?: string;\r\n    /**\r\n     * The type (Facebook/Twitter) of the social link.\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiSocialLinkResponse\r\n     */\r\n    type?: RobloxGamesApiSocialLinkResponseTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGamesApiSocialLinkResponseTypeEnum {\r\n    Facebook = 'Facebook',\r\n    Twitter = 'Twitter',\r\n    YouTube = 'YouTube',\r\n    Twitch = 'Twitch',\r\n    GooglePlus = 'GooglePlus',\r\n    Discord = 'Discord',\r\n    RobloxGroup = 'RobloxGroup',\r\n    Amazon = 'Amazon'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiUserResponse\r\n */\r\nexport interface RobloxGamesApiUserResponse {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiUserResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiUserResponse\r\n     */\r\n    name?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerPermissionsResponse\r\n */\r\nexport interface RobloxGamesApiVipServerPermissionsResponse {\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerPermissionsResponse\r\n     */\r\n    clanAllowed?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiVipServerPermissionsResponse\r\n     */\r\n    enemyClanId?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerPermissionsResponse\r\n     */\r\n    friendsAllowed?: boolean;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiUserResponse>}\r\n     * @memberof RobloxGamesApiVipServerPermissionsResponse\r\n     */\r\n    users?: Array<RobloxGamesApiUserResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerResponse\r\n */\r\nexport interface RobloxGamesApiVipServerResponse {\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {RobloxGamesApiGameResponse}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    game?: RobloxGamesApiGameResponse;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    joinCode?: string;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     *\r\n     * @type {RobloxGamesApiVipServerSubscriptionResponse}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    subscription?: RobloxGamesApiVipServerSubscriptionResponse;\r\n    /**\r\n     *\r\n     * @type {RobloxGamesApiVipServerPermissionsResponse}\r\n     * @memberof RobloxGamesApiVipServerResponse\r\n     */\r\n    permissions?: RobloxGamesApiVipServerPermissionsResponse;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerSubscriptionResponse\r\n */\r\nexport interface RobloxGamesApiVipServerSubscriptionResponse {\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerSubscriptionResponse\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerSubscriptionResponse\r\n     */\r\n    expired?: boolean;\r\n    /**\r\n     *\r\n     * @type {Date}\r\n     * @memberof RobloxGamesApiVipServerSubscriptionResponse\r\n     */\r\n    expirationDate?: Date;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiVipServerSubscriptionResponse\r\n     */\r\n    price?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerUpdatePermissionsRequest\r\n */\r\nexport interface RobloxGamesApiVipServerUpdatePermissionsRequest {\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerUpdatePermissionsRequest\r\n     */\r\n    clanAllowed?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiVipServerUpdatePermissionsRequest\r\n     */\r\n    enemyClanId?: number;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerUpdatePermissionsRequest\r\n     */\r\n    friendsAllowed?: boolean;\r\n    /**\r\n     *\r\n     * @type {Array<number>}\r\n     * @memberof RobloxGamesApiVipServerUpdatePermissionsRequest\r\n     */\r\n    usersToAdd?: Array<number>;\r\n    /**\r\n     *\r\n     * @type {Array<number>}\r\n     * @memberof RobloxGamesApiVipServerUpdatePermissionsRequest\r\n     */\r\n    usersToRemove?: Array<number>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerUpdateRequest\r\n */\r\nexport interface RobloxGamesApiVipServerUpdateRequest {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxGamesApiVipServerUpdateRequest\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerUpdateRequest\r\n     */\r\n    newJoinCode?: boolean;\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerUpdateRequest\r\n     */\r\n    active?: boolean;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxGamesApiVipServerUpdateSubscriptionRequest\r\n */\r\nexport interface RobloxGamesApiVipServerUpdateSubscriptionRequest {\r\n    /**\r\n     *\r\n     * @type {boolean}\r\n     * @memberof RobloxGamesApiVipServerUpdateSubscriptionRequest\r\n     */\r\n    active?: boolean;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxGamesApiVipServerUpdateSubscriptionRequest\r\n     */\r\n    price?: number;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64 {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    sortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    pagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    count?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum {\r\n    Forward = 'Forward',\r\n    Backward = 'Backward'\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebResponsesGamesGameServerResponse\r\n */\r\nexport interface RobloxWebResponsesGamesGameServerResponse {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    id?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    maxPlayers?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    playing?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    fps?: number;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    ping?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    name?: string;\r\n    /**\r\n     *\r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    vipServerId?: number;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    accessCode?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestSystemInt64 {\r\n    /**\r\n     *\r\n     * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n     */\r\n    exclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n     */\r\n    cursorRecipe?: string;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameDetailResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse\r\n     */\r\n    data?: Array<RobloxGamesApiModelsResponseGameDetailResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameMediaItem\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameMediaItem {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameMediaItem>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameMediaItem\r\n     */\r\n    data?: Array<RobloxGamesApiModelsResponseGameMediaItem>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameProductResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse\r\n     */\r\n    data?: Array<RobloxGamesApiModelsResponseGameProductResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameVoteResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameVoteResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGameVoteResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameVoteResponse\r\n     */\r\n    data?: Array<RobloxGamesApiModelsResponseGameVoteResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiSocialLinkResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiSocialLinkResponse {\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiSocialLinkResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiSocialLinkResponse\r\n     */\r\n    data?: Array<RobloxGamesApiSocialLinkResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxGamesApiModelsResponseGamePassResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse\r\n     */\r\n    data?: Array<RobloxGamesApiModelsResponseGamePassResponse>;\r\n}\r\n/**\r\n *\r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse\r\n */\r\nexport interface RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse {\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     *\r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     *\r\n     * @type {Array<RobloxWebResponsesGamesGameServerResponse>}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse\r\n     */\r\n    data?: Array<RobloxWebResponsesGamesGameServerResponse>;\r\n}\r\n\r\n/**\r\n * FavoritesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const FavoritesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the favorites count of the a specific game\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesCountGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdFavoritesCountGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/favorites/count`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Returns if a game was marked as favorite for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdFavoritesGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/favorites`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Favors (or unfavors) a game for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestGameFavoritesRequest} request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesPost(universeId: number, request: RobloxGamesApiModelsRequestGameFavoritesRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdFavoritesPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GamesUniverseIdFavoritesPost.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/favorites`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiModelsRequestGameFavoritesRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * FavoritesApi - functional programming interface\r\n * @export\r\n */\r\nexport const FavoritesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the favorites count of the a specific game\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesCountGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameFavoritesCountResponse> {\r\n            const localVarAxiosArgs = FavoritesApiAxiosParamCreator(configuration).v1GamesUniverseIdFavoritesCountGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Returns if a game was marked as favorite for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsRequestGameFavoriteResponse> {\r\n            const localVarAxiosArgs = FavoritesApiAxiosParamCreator(configuration).v1GamesUniverseIdFavoritesGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Favors (or unfavors) a game for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestGameFavoritesRequest} request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesPost(universeId: number, request: RobloxGamesApiModelsRequestGameFavoritesRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\r\n            const localVarAxiosArgs = FavoritesApiAxiosParamCreator(configuration).v1GamesUniverseIdFavoritesPost(universeId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * FavoritesApi - factory interface\r\n * @export\r\n */\r\nexport const FavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the favorites count of the a specific game\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesCountGet(universeId: number, options?: any) {\r\n            return FavoritesApiFp(configuration).v1GamesUniverseIdFavoritesCountGet(universeId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Returns if a game was marked as favorite for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesGet(universeId: number, options?: any) {\r\n            return FavoritesApiFp(configuration).v1GamesUniverseIdFavoritesGet(universeId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Favors (or unfavors) a game for the authenticated user\r\n         * @param {number} universeId The Id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestGameFavoritesRequest} request\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdFavoritesPost(universeId: number, request: RobloxGamesApiModelsRequestGameFavoritesRequest, options?: any) {\r\n            return FavoritesApiFp(configuration).v1GamesUniverseIdFavoritesPost(universeId, request, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * FavoritesApi - interface\r\n * @export\r\n * @interface FavoritesApi\r\n */\r\nexport interface FavoritesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get the favorites count of the a specific game\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApiInterface\r\n     */\r\n    v1GamesUniverseIdFavoritesCountGet(universeId: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameFavoritesCountResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Returns if a game was marked as favorite for the authenticated user\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApiInterface\r\n     */\r\n    v1GamesUniverseIdFavoritesGet(universeId: number, options?: any): AxiosPromise<RobloxGamesApiModelsRequestGameFavoriteResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Favors (or unfavors) a game for the authenticated user\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {RobloxGamesApiModelsRequestGameFavoritesRequest} request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApiInterface\r\n     */\r\n    v1GamesUniverseIdFavoritesPost(universeId: number, request: RobloxGamesApiModelsRequestGameFavoritesRequest, options?: any): AxiosPromise<object>;\r\n\r\n}\r\n\r\n/**\r\n * FavoritesApi - object-oriented interface\r\n * @export\r\n * @class FavoritesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class FavoritesApi extends BaseAPI implements FavoritesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get the favorites count of the a specific game\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApi\r\n     */\r\n    public v1GamesUniverseIdFavoritesCountGet(universeId: number, options?: any) {\r\n        return FavoritesApiFp(this.configuration).v1GamesUniverseIdFavoritesCountGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Returns if a game was marked as favorite for the authenticated user\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApi\r\n     */\r\n    public v1GamesUniverseIdFavoritesGet(universeId: number, options?: any) {\r\n        return FavoritesApiFp(this.configuration).v1GamesUniverseIdFavoritesGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Favors (or unfavors) a game for the authenticated user\r\n     * @param {number} universeId The Id of the universe.\r\n     * @param {RobloxGamesApiModelsRequestGameFavoritesRequest} request\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof FavoritesApi\r\n     */\r\n    public v1GamesUniverseIdFavoritesPost(universeId: number, request: RobloxGamesApiModelsRequestGameFavoritesRequest, options?: any) {\r\n        return FavoritesApiFp(this.configuration).v1GamesUniverseIdFavoritesPost(universeId, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GamePassesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamePassesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the game\\'s game passes\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdGamePassesGet(universeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdGamePassesGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/game-passes`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamePassesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the game\\'s game passes\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdGamePassesGet(universeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse> {\r\n            const localVarAxiosArgs = GamePassesApiAxiosParamCreator(configuration).v1GamesUniverseIdGamePassesGet(universeId, sortOrder, limit, cursor, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamePassesApi - factory interface\r\n * @export\r\n */\r\nexport const GamePassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get the game\\'s game passes\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdGamePassesGet(universeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n            return GamePassesApiFp(configuration).v1GamesUniverseIdGamePassesGet(universeId, sortOrder, limit, cursor, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamePassesApi - interface\r\n * @export\r\n * @interface GamePassesApi\r\n */\r\nexport interface GamePassesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get the game\\'s game passes\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassesApiInterface\r\n     */\r\n    v1GamesUniverseIdGamePassesGet(universeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GamePassesApi - object-oriented interface\r\n * @export\r\n * @class GamePassesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamePassesApi extends BaseAPI implements GamePassesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get the game\\'s game passes\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamePassesApi\r\n     */\r\n    public v1GamesUniverseIdGamePassesGet(universeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return GamePassesApiFp(this.configuration).v1GamesUniverseIdGamePassesGet(universeId, sortOrder, limit, cursor, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * GamesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get a single game thumbnail\r\n         * @param {string} imageToken\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailGet(imageToken: string, height?: number, width?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'imageToken' is not null or undefined\r\n            if (imageToken === null || imageToken === undefined) {\r\n                throw new RequiredError('imageToken','Required parameter imageToken was null or undefined when calling v1GamesGameThumbnailGet.');\r\n            }\r\n            const localVarPath = `/v1/games/game-thumbnail`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (imageToken !== undefined) {\r\n                localVarQueryParameter['imageToken'] = imageToken;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of game thumbnails\r\n         * @param {Array<string>} imageTokens\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailsGet(imageTokens: Array<string>, height?: number, width?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'imageTokens' is not null or undefined\r\n            if (imageTokens === null || imageTokens === undefined) {\r\n                throw new RequiredError('imageTokens','Required parameter imageTokens was null or undefined when calling v1GamesGameThumbnailsGet.');\r\n            }\r\n            const localVarPath = `/v1/games/game-thumbnails`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (imageTokens) {\r\n                localVarQueryParameter['imageTokens'] = imageTokens;\r\n            }\r\n\r\n            if (height !== undefined) {\r\n                localVarQueryParameter['height'] = height;\r\n            }\r\n\r\n            if (width !== undefined) {\r\n                localVarQueryParameter['width'] = width;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' product info, used to purchase a game\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGamesProductInfoGet(universeIds: Array<number>, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            if (universeIds === null || universeIds === undefined) {\r\n                throw new RequiredError('universeIds','Required parameter universeIds was null or undefined when calling v1GamesGamesProductInfoGet.');\r\n            }\r\n            const localVarPath = `/v1/games/games-product-info`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' detail\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGet(universeIds: Array<number>, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            if (universeIds === null || universeIds === undefined) {\r\n                throw new RequiredError('universeIds','Required parameter universeIds was null or undefined when calling v1GamesGet.');\r\n            }\r\n            const localVarPath = `/v1/games`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\r\n         * @param {string} [modelSortToken]\r\n         * @param {string} [modelGameFilter]\r\n         * @param {string} [modelTimeFilter]\r\n         * @param {string} [modelGenreFilter]\r\n         * @param {number} [modelExclusiveStartId]\r\n         * @param {number} [modelSortOrder]\r\n         * @param {number} [modelGameSetTargetId]\r\n         * @param {string} [modelKeyword]\r\n         * @param {number} [modelStartRows]\r\n         * @param {number} [modelMaxRows]\r\n         * @param {boolean} [modelIsKeywordSuggestionEnabled]\r\n         * @param {number} [modelContextCountryRegionId]\r\n         * @param {number} [modelContextUniverseId]\r\n         * @param {string} [modelPageId]\r\n         * @param {number} [modelSortPosition]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesListGet(modelSortToken?: string, modelGameFilter?: string, modelTimeFilter?: string, modelGenreFilter?: string, modelExclusiveStartId?: number, modelSortOrder?: number, modelGameSetTargetId?: number, modelKeyword?: string, modelStartRows?: number, modelMaxRows?: number, modelIsKeywordSuggestionEnabled?: boolean, modelContextCountryRegionId?: number, modelContextUniverseId?: number, modelPageId?: string, modelSortPosition?: number, options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/games/list`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (modelSortToken !== undefined) {\r\n                localVarQueryParameter['model.sortToken'] = modelSortToken;\r\n            }\r\n\r\n            if (modelGameFilter !== undefined) {\r\n                localVarQueryParameter['model.gameFilter'] = modelGameFilter;\r\n            }\r\n\r\n            if (modelTimeFilter !== undefined) {\r\n                localVarQueryParameter['model.timeFilter'] = modelTimeFilter;\r\n            }\r\n\r\n            if (modelGenreFilter !== undefined) {\r\n                localVarQueryParameter['model.genreFilter'] = modelGenreFilter;\r\n            }\r\n\r\n            if (modelExclusiveStartId !== undefined) {\r\n                localVarQueryParameter['model.exclusiveStartId'] = modelExclusiveStartId;\r\n            }\r\n\r\n            if (modelSortOrder !== undefined) {\r\n                localVarQueryParameter['model.sortOrder'] = modelSortOrder;\r\n            }\r\n\r\n            if (modelGameSetTargetId !== undefined) {\r\n                localVarQueryParameter['model.gameSetTargetId'] = modelGameSetTargetId;\r\n            }\r\n\r\n            if (modelKeyword !== undefined) {\r\n                localVarQueryParameter['model.keyword'] = modelKeyword;\r\n            }\r\n\r\n            if (modelStartRows !== undefined) {\r\n                localVarQueryParameter['model.startRows'] = modelStartRows;\r\n            }\r\n\r\n            if (modelMaxRows !== undefined) {\r\n                localVarQueryParameter['model.maxRows'] = modelMaxRows;\r\n            }\r\n\r\n            if (modelIsKeywordSuggestionEnabled !== undefined) {\r\n                localVarQueryParameter['model.isKeywordSuggestionEnabled'] = modelIsKeywordSuggestionEnabled;\r\n            }\r\n\r\n            if (modelContextCountryRegionId !== undefined) {\r\n                localVarQueryParameter['model.contextCountryRegionId'] = modelContextCountryRegionId;\r\n            }\r\n\r\n            if (modelContextUniverseId !== undefined) {\r\n                localVarQueryParameter['model.contextUniverseId'] = modelContextUniverseId;\r\n            }\r\n\r\n            if (modelPageId !== undefined) {\r\n                localVarQueryParameter['model.pageId'] = modelPageId;\r\n            }\r\n\r\n            if (modelSortPosition !== undefined) {\r\n                localVarQueryParameter['model.sortPosition'] = modelSortPosition;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get place details\r\n         * @param {Array<number>} placeIds List of placeId to uniquely Identify a place\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlaceDetailsGet(placeIds: Array<number>, options: any = {}): RequestArgs {\r\n            // verify required parameter 'placeIds' is not null or undefined\r\n            if (placeIds === null || placeIds === undefined) {\r\n                throw new RequiredError('placeIds','Required parameter placeIds was null or undefined when calling v1GamesMultigetPlaceDetailsGet.');\r\n            }\r\n            const localVarPath = `/v1/games/multiget-place-details`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (placeIds) {\r\n                localVarQueryParameter['placeIds'] = placeIds;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe playability statuses for the authenticated user\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlayabilityStatusGet(universeIds: Array<number>, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            if (universeIds === null || universeIds === undefined) {\r\n                throw new RequiredError('universeIds','Required parameter universeIds was null or undefined when calling v1GamesMultigetPlayabilityStatusGet.');\r\n            }\r\n            const localVarPath = `/v1/games/multiget-playability-status`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game server list\r\n         * @param {number} placeId The Id of the place we are geting the server list for.\r\n         * @param {'Public' | 'Friend' | 'VIP'} serverType The type of the server we geting the server list for.\r\n         * @param {'Asc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlaceIdServersServerTypeGet(placeId: number, serverType: 'Public' | 'Friend' | 'VIP', sortOrder?: 'Asc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'placeId' is not null or undefined\r\n            if (placeId === null || placeId === undefined) {\r\n                throw new RequiredError('placeId','Required parameter placeId was null or undefined when calling v1GamesPlaceIdServersServerTypeGet.');\r\n            }\r\n            // verify required parameter 'serverType' is not null or undefined\r\n            if (serverType === null || serverType === undefined) {\r\n                throw new RequiredError('serverType','Required parameter serverType was null or undefined when calling v1GamesPlaceIdServersServerTypeGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{placeId}/servers/{serverType}`\r\n                .replace(`{${\"placeId\"}}`, encodeURIComponent(String(placeId)))\r\n                .replace(`{${\"serverType\"}}`, encodeURIComponent(String(serverType)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Used by the GameServer to set a place\\'s metadata, including whether it is filtering enabled.\r\n         * @param {number} placeId The Id of the place we are setting the metadata for.\r\n         * @param {RobloxGamesApiReportPlaceMetadataRequest} request An {Roblox.Games.Api.ReportPlaceMetadataRequest}.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlacesPlaceIdMetadataPost(placeId: number, request: RobloxGamesApiReportPlaceMetadataRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'placeId' is not null or undefined\r\n            if (placeId === null || placeId === undefined) {\r\n                throw new RequiredError('placeId','Required parameter placeId was null or undefined when calling v1GamesPlacesPlaceIdMetadataPost.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GamesPlacesPlaceIdMetadataPost.');\r\n            }\r\n            const localVarPath = `/v1/games/places/{placeId}/metadata`\r\n                .replace(`{${\"placeId\"}}`, encodeURIComponent(String(placeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiReportPlaceMetadataRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations\r\n         * @param {string} algorithmName The algorithm name of recommendations\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName: string, modelPaginationKey?: string, modelMaxRows?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'algorithmName' is not null or undefined\r\n            if (algorithmName === null || algorithmName === undefined) {\r\n                throw new RequiredError('algorithmName','Required parameter algorithmName was null or undefined when calling v1GamesRecommendationsAlgorithmAlgorithmNameGet.');\r\n            }\r\n            const localVarPath = `/v1/games/recommendations/algorithm/{algorithmName}`\r\n                .replace(`{${\"algorithmName\"}}`, encodeURIComponent(String(algorithmName)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (modelPaginationKey !== undefined) {\r\n                localVarQueryParameter['model.paginationKey'] = modelPaginationKey;\r\n            }\r\n\r\n            if (modelMaxRows !== undefined) {\r\n                localVarQueryParameter['model.maxRows'] = modelMaxRows;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations based on a given universe\r\n         * @param {number} universeId The universe to base recommendations on\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsGameUniverseIdGet(universeId: number, modelPaginationKey?: string, modelMaxRows?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesRecommendationsGameUniverseIdGet.');\r\n            }\r\n            const localVarPath = `/v1/games/recommendations/game/{universeId}`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (modelPaginationKey !== undefined) {\r\n                localVarQueryParameter['model.paginationKey'] = modelPaginationKey;\r\n            }\r\n\r\n            if (modelMaxRows !== undefined) {\r\n                localVarQueryParameter['model.maxRows'] = modelMaxRows;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets an ordered list of all sorts\r\n         * @param {'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2'} [modelGameSortsContext]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesSortsGet(modelGameSortsContext?: 'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2', options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/games/sorts`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (modelGameSortsContext !== undefined) {\r\n                localVarQueryParameter['model.gameSortsContext'] = modelGameSortsContext;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game icon\r\n         * @param {number} universeId The id of the universe to get the icon for.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdIconGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdIconGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/icon`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdMediaGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdMediaGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/media`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get a single game thumbnail\r\n         * @param {string} imageToken\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailGet(imageToken: string, height?: number, width?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesGameThumbnailGet(imageToken, height, width, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of game thumbnails\r\n         * @param {Array<string>} imageTokens\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailsGet(imageTokens: Array<string>, height?: number, width?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RobloxGamesApiModelsResponseThumbnail>> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesGameThumbnailsGet(imageTokens, height, width, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' product info, used to purchase a game\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGamesProductInfoGet(universeIds: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesGamesProductInfoGet(universeIds, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' detail\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGet(universeIds: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesGet(universeIds, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\r\n         * @param {string} [modelSortToken]\r\n         * @param {string} [modelGameFilter]\r\n         * @param {string} [modelTimeFilter]\r\n         * @param {string} [modelGenreFilter]\r\n         * @param {number} [modelExclusiveStartId]\r\n         * @param {number} [modelSortOrder]\r\n         * @param {number} [modelGameSetTargetId]\r\n         * @param {string} [modelKeyword]\r\n         * @param {number} [modelStartRows]\r\n         * @param {number} [modelMaxRows]\r\n         * @param {boolean} [modelIsKeywordSuggestionEnabled]\r\n         * @param {number} [modelContextCountryRegionId]\r\n         * @param {number} [modelContextUniverseId]\r\n         * @param {string} [modelPageId]\r\n         * @param {number} [modelSortPosition]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesListGet(modelSortToken?: string, modelGameFilter?: string, modelTimeFilter?: string, modelGenreFilter?: string, modelExclusiveStartId?: number, modelSortOrder?: number, modelGameSetTargetId?: number, modelKeyword?: string, modelStartRows?: number, modelMaxRows?: number, modelIsKeywordSuggestionEnabled?: boolean, modelContextCountryRegionId?: number, modelContextUniverseId?: number, modelPageId?: string, modelSortPosition?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGamesSearchResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesListGet(modelSortToken, modelGameFilter, modelTimeFilter, modelGenreFilter, modelExclusiveStartId, modelSortOrder, modelGameSetTargetId, modelKeyword, modelStartRows, modelMaxRows, modelIsKeywordSuggestionEnabled, modelContextCountryRegionId, modelContextUniverseId, modelPageId, modelSortPosition, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get place details\r\n         * @param {Array<number>} placeIds List of placeId to uniquely Identify a place\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlaceDetailsGet(placeIds: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RobloxGamesApiModelsResponsePlaceDetails>> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesMultigetPlaceDetailsGet(placeIds, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe playability statuses for the authenticated user\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlayabilityStatusGet(universeIds: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RobloxGamesApiModelsResponsePlayabilityStatusResponse>> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesMultigetPlayabilityStatusGet(universeIds, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game server list\r\n         * @param {number} placeId The Id of the place we are geting the server list for.\r\n         * @param {'Public' | 'Friend' | 'VIP'} serverType The type of the server we geting the server list for.\r\n         * @param {'Asc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlaceIdServersServerTypeGet(placeId: number, serverType: 'Public' | 'Friend' | 'VIP', sortOrder?: 'Asc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesPlaceIdServersServerTypeGet(placeId, serverType, sortOrder, limit, cursor, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Used by the GameServer to set a place\\'s metadata, including whether it is filtering enabled.\r\n         * @param {number} placeId The Id of the place we are setting the metadata for.\r\n         * @param {RobloxGamesApiReportPlaceMetadataRequest} request An {Roblox.Games.Api.ReportPlaceMetadataRequest}.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlacesPlaceIdMetadataPost(placeId: number, request: RobloxGamesApiReportPlaceMetadataRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesPlacesPlaceIdMetadataPost(placeId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations\r\n         * @param {string} algorithmName The algorithm name of recommendations\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName: string, modelPaginationKey?: string, modelMaxRows?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameRecommendationsResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName, modelPaginationKey, modelMaxRows, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations based on a given universe\r\n         * @param {number} universeId The universe to base recommendations on\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsGameUniverseIdGet(universeId: number, modelPaginationKey?: string, modelMaxRows?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameRecommendationsResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesRecommendationsGameUniverseIdGet(universeId, modelPaginationKey, modelMaxRows, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets an ordered list of all sorts\r\n         * @param {'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2'} [modelGameSortsContext]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesSortsGet(modelGameSortsContext?: 'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameSortsResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesSortsGet(modelGameSortsContext, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game icon\r\n         * @param {number} universeId The id of the universe to get the icon for.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdIconGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameIconResponse> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesUniverseIdIconGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdMediaGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameMediaItem> {\r\n            const localVarAxiosArgs = GamesApiAxiosParamCreator(configuration).v1GamesUniverseIdMediaGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - factory interface\r\n * @export\r\n */\r\nexport const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get a single game thumbnail\r\n         * @param {string} imageToken\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailGet(imageToken: string, height?: number, width?: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesGameThumbnailGet(imageToken, height, width, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of game thumbnails\r\n         * @param {Array<string>} imageTokens\r\n         * @param {number} [height]\r\n         * @param {number} [width]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGameThumbnailsGet(imageTokens: Array<string>, height?: number, width?: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesGameThumbnailsGet(imageTokens, height, width, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' product info, used to purchase a game\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGamesProductInfoGet(universeIds: Array<number>, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesGamesProductInfoGet(universeIds, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\\' detail\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesGet(universeIds: Array<number>, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesGet(universeIds, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of games\r\n         * @param {string} [modelSortToken]\r\n         * @param {string} [modelGameFilter]\r\n         * @param {string} [modelTimeFilter]\r\n         * @param {string} [modelGenreFilter]\r\n         * @param {number} [modelExclusiveStartId]\r\n         * @param {number} [modelSortOrder]\r\n         * @param {number} [modelGameSetTargetId]\r\n         * @param {string} [modelKeyword]\r\n         * @param {number} [modelStartRows]\r\n         * @param {number} [modelMaxRows]\r\n         * @param {boolean} [modelIsKeywordSuggestionEnabled]\r\n         * @param {number} [modelContextCountryRegionId]\r\n         * @param {number} [modelContextUniverseId]\r\n         * @param {string} [modelPageId]\r\n         * @param {number} [modelSortPosition]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesListGet(modelSortToken?: string, modelGameFilter?: string, modelTimeFilter?: string, modelGenreFilter?: string, modelExclusiveStartId?: number, modelSortOrder?: number, modelGameSetTargetId?: number, modelKeyword?: string, modelStartRows?: number, modelMaxRows?: number, modelIsKeywordSuggestionEnabled?: boolean, modelContextCountryRegionId?: number, modelContextUniverseId?: number, modelPageId?: string, modelSortPosition?: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesListGet(modelSortToken, modelGameFilter, modelTimeFilter, modelGenreFilter, modelExclusiveStartId, modelSortOrder, modelGameSetTargetId, modelKeyword, modelStartRows, modelMaxRows, modelIsKeywordSuggestionEnabled, modelContextCountryRegionId, modelContextUniverseId, modelPageId, modelSortPosition, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get place details\r\n         * @param {Array<number>} placeIds List of placeId to uniquely Identify a place\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlaceDetailsGet(placeIds: Array<number>, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesMultigetPlaceDetailsGet(placeIds, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe playability statuses for the authenticated user\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesMultigetPlayabilityStatusGet(universeIds: Array<number>, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesMultigetPlayabilityStatusGet(universeIds, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game server list\r\n         * @param {number} placeId The Id of the place we are geting the server list for.\r\n         * @param {'Public' | 'Friend' | 'VIP'} serverType The type of the server we geting the server list for.\r\n         * @param {'Asc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlaceIdServersServerTypeGet(placeId: number, serverType: 'Public' | 'Friend' | 'VIP', sortOrder?: 'Asc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesPlaceIdServersServerTypeGet(placeId, serverType, sortOrder, limit, cursor, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Used by the GameServer to set a place\\'s metadata, including whether it is filtering enabled.\r\n         * @param {number} placeId The Id of the place we are setting the metadata for.\r\n         * @param {RobloxGamesApiReportPlaceMetadataRequest} request An {Roblox.Games.Api.ReportPlaceMetadataRequest}.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesPlacesPlaceIdMetadataPost(placeId: number, request: RobloxGamesApiReportPlaceMetadataRequest, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesPlacesPlaceIdMetadataPost(placeId, request, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations\r\n         * @param {string} algorithmName The algorithm name of recommendations\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName: string, modelPaginationKey?: string, modelMaxRows?: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName, modelPaginationKey, modelMaxRows, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get games recommendations based on a given universe\r\n         * @param {number} universeId The universe to base recommendations on\r\n         * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n         * @param {number} [modelMaxRows] The requested number of rows.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesRecommendationsGameUniverseIdGet(universeId: number, modelPaginationKey?: string, modelMaxRows?: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesRecommendationsGameUniverseIdGet(universeId, modelPaginationKey, modelMaxRows, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets an ordered list of all sorts\r\n         * @param {'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2'} [modelGameSortsContext]\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesSortsGet(modelGameSortsContext?: 'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2', options?: any) {\r\n            return GamesApiFp(configuration).v1GamesSortsGet(modelGameSortsContext, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game icon\r\n         * @param {number} universeId The id of the universe to get the icon for.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdIconGet(universeId: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesUniverseIdIconGet(universeId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdMediaGet(universeId: number, options?: any) {\r\n            return GamesApiFp(configuration).v1GamesUniverseIdMediaGet(universeId, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamesApi - interface\r\n * @export\r\n * @interface GamesApi\r\n */\r\nexport interface GamesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get a single game thumbnail\r\n     * @param {string} imageToken\r\n     * @param {number} [height]\r\n     * @param {number} [width]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesGameThumbnailGet(imageToken: string, height?: number, width?: number, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of game thumbnails\r\n     * @param {Array<string>} imageTokens\r\n     * @param {number} [height]\r\n     * @param {number} [width]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesGameThumbnailsGet(imageTokens: Array<string>, height?: number, width?: number, options?: any): AxiosPromise<Array<RobloxGamesApiModelsResponseThumbnail>>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\\' product info, used to purchase a game\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesGamesProductInfoGet(universeIds: Array<number>, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\\' detail\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesGet(universeIds: Array<number>, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\r\n     * @param {string} [modelSortToken]\r\n     * @param {string} [modelGameFilter]\r\n     * @param {string} [modelTimeFilter]\r\n     * @param {string} [modelGenreFilter]\r\n     * @param {number} [modelExclusiveStartId]\r\n     * @param {number} [modelSortOrder]\r\n     * @param {number} [modelGameSetTargetId]\r\n     * @param {string} [modelKeyword]\r\n     * @param {number} [modelStartRows]\r\n     * @param {number} [modelMaxRows]\r\n     * @param {boolean} [modelIsKeywordSuggestionEnabled]\r\n     * @param {number} [modelContextCountryRegionId]\r\n     * @param {number} [modelContextUniverseId]\r\n     * @param {string} [modelPageId]\r\n     * @param {number} [modelSortPosition]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesListGet(modelSortToken?: string, modelGameFilter?: string, modelTimeFilter?: string, modelGenreFilter?: string, modelExclusiveStartId?: number, modelSortOrder?: number, modelGameSetTargetId?: number, modelKeyword?: string, modelStartRows?: number, modelMaxRows?: number, modelIsKeywordSuggestionEnabled?: boolean, modelContextCountryRegionId?: number, modelContextUniverseId?: number, modelPageId?: string, modelSortPosition?: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGamesSearchResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get place details\r\n     * @param {Array<number>} placeIds List of placeId to uniquely Identify a place\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesMultigetPlaceDetailsGet(placeIds: Array<number>, options?: any): AxiosPromise<Array<RobloxGamesApiModelsResponsePlaceDetails>>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of universe playability statuses for the authenticated user\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesMultigetPlayabilityStatusGet(universeIds: Array<number>, options?: any): AxiosPromise<Array<RobloxGamesApiModelsResponsePlayabilityStatusResponse>>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game server list\r\n     * @param {number} placeId The Id of the place we are geting the server list for.\r\n     * @param {'Public' | 'Friend' | 'VIP'} serverType The type of the server we geting the server list for.\r\n     * @param {'Asc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesPlaceIdServersServerTypeGet(placeId: number, serverType: 'Public' | 'Friend' | 'VIP', sortOrder?: 'Asc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameServerResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Used by the GameServer to set a place\\'s metadata, including whether it is filtering enabled.\r\n     * @param {number} placeId The Id of the place we are setting the metadata for.\r\n     * @param {RobloxGamesApiReportPlaceMetadataRequest} request An {Roblox.Games.Api.ReportPlaceMetadataRequest}.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesPlacesPlaceIdMetadataPost(placeId: number, request: RobloxGamesApiReportPlaceMetadataRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get games recommendations\r\n     * @param {string} algorithmName The algorithm name of recommendations\r\n     * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n     * @param {number} [modelMaxRows] The requested number of rows.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName: string, modelPaginationKey?: string, modelMaxRows?: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameRecommendationsResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get games recommendations based on a given universe\r\n     * @param {number} universeId The universe to base recommendations on\r\n     * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n     * @param {number} [modelMaxRows] The requested number of rows.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesRecommendationsGameUniverseIdGet(universeId: number, modelPaginationKey?: string, modelMaxRows?: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameRecommendationsResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets an ordered list of all sorts\r\n     * @param {'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2'} [modelGameSortsContext]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesSortsGet(modelGameSortsContext?: 'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2', options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameSortsResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game icon\r\n     * @param {number} universeId The id of the universe to get the icon for.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesUniverseIdIconGet(universeId: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameIconResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game media data\r\n     * @param {number} universeId The id of the universe we get media data from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v1GamesUniverseIdMediaGet(universeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameMediaItem>;\r\n\r\n}\r\n\r\n/**\r\n * GamesApi - object-oriented interface\r\n * @export\r\n * @class GamesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamesApi extends BaseAPI implements GamesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get a single game thumbnail\r\n     * @param {string} imageToken\r\n     * @param {number} [height]\r\n     * @param {number} [width]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesGameThumbnailGet(imageToken: string, height?: number, width?: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesGameThumbnailGet(imageToken, height, width, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of game thumbnails\r\n     * @param {Array<string>} imageTokens\r\n     * @param {number} [height]\r\n     * @param {number} [width]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesGameThumbnailsGet(imageTokens: Array<string>, height?: number, width?: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesGameThumbnailsGet(imageTokens, height, width, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\\' product info, used to purchase a game\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesGamesProductInfoGet(universeIds: Array<number>, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesGamesProductInfoGet(universeIds, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\\' detail\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesGet(universeIds: Array<number>, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesGet(universeIds, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of games\r\n     * @param {string} [modelSortToken]\r\n     * @param {string} [modelGameFilter]\r\n     * @param {string} [modelTimeFilter]\r\n     * @param {string} [modelGenreFilter]\r\n     * @param {number} [modelExclusiveStartId]\r\n     * @param {number} [modelSortOrder]\r\n     * @param {number} [modelGameSetTargetId]\r\n     * @param {string} [modelKeyword]\r\n     * @param {number} [modelStartRows]\r\n     * @param {number} [modelMaxRows]\r\n     * @param {boolean} [modelIsKeywordSuggestionEnabled]\r\n     * @param {number} [modelContextCountryRegionId]\r\n     * @param {number} [modelContextUniverseId]\r\n     * @param {string} [modelPageId]\r\n     * @param {number} [modelSortPosition]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesListGet(modelSortToken?: string, modelGameFilter?: string, modelTimeFilter?: string, modelGenreFilter?: string, modelExclusiveStartId?: number, modelSortOrder?: number, modelGameSetTargetId?: number, modelKeyword?: string, modelStartRows?: number, modelMaxRows?: number, modelIsKeywordSuggestionEnabled?: boolean, modelContextCountryRegionId?: number, modelContextUniverseId?: number, modelPageId?: string, modelSortPosition?: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesListGet(modelSortToken, modelGameFilter, modelTimeFilter, modelGenreFilter, modelExclusiveStartId, modelSortOrder, modelGameSetTargetId, modelKeyword, modelStartRows, modelMaxRows, modelIsKeywordSuggestionEnabled, modelContextCountryRegionId, modelContextUniverseId, modelPageId, modelSortPosition, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get place details\r\n     * @param {Array<number>} placeIds List of placeId to uniquely Identify a place\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesMultigetPlaceDetailsGet(placeIds: Array<number>, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesMultigetPlaceDetailsGet(placeIds, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of universe playability statuses for the authenticated user\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesMultigetPlayabilityStatusGet(universeIds: Array<number>, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesMultigetPlayabilityStatusGet(universeIds, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game server list\r\n     * @param {number} placeId The Id of the place we are geting the server list for.\r\n     * @param {'Public' | 'Friend' | 'VIP'} serverType The type of the server we geting the server list for.\r\n     * @param {'Asc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesPlaceIdServersServerTypeGet(placeId: number, serverType: 'Public' | 'Friend' | 'VIP', sortOrder?: 'Asc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesPlaceIdServersServerTypeGet(placeId, serverType, sortOrder, limit, cursor, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Used by the GameServer to set a place\\'s metadata, including whether it is filtering enabled.\r\n     * @param {number} placeId The Id of the place we are setting the metadata for.\r\n     * @param {RobloxGamesApiReportPlaceMetadataRequest} request An {Roblox.Games.Api.ReportPlaceMetadataRequest}.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesPlacesPlaceIdMetadataPost(placeId: number, request: RobloxGamesApiReportPlaceMetadataRequest, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesPlacesPlaceIdMetadataPost(placeId, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get games recommendations\r\n     * @param {string} algorithmName The algorithm name of recommendations\r\n     * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n     * @param {number} [modelMaxRows] The requested number of rows.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName: string, modelPaginationKey?: string, modelMaxRows?: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesRecommendationsAlgorithmAlgorithmNameGet(algorithmName, modelPaginationKey, modelMaxRows, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get games recommendations based on a given universe\r\n     * @param {number} universeId The universe to base recommendations on\r\n     * @param {string} [modelPaginationKey] The key of a page, which includes the start row index and all other necessary information to query the data.  This parameter is usually not needed for the first page.\r\n     * @param {number} [modelMaxRows] The requested number of rows.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesRecommendationsGameUniverseIdGet(universeId: number, modelPaginationKey?: string, modelMaxRows?: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesRecommendationsGameUniverseIdGet(universeId, modelPaginationKey, modelMaxRows, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets an ordered list of all sorts\r\n     * @param {'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2'} [modelGameSortsContext]\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesSortsGet(modelGameSortsContext?: 'GamesDefaultSorts' | 'GamesAllSorts' | 'HomeSorts' | 'ChatSorts' | 'UnifiedHomeSorts' | 'AbTestSorts' | 'GamesPageAbTestSorts1' | 'GamesPageAbTestSorts2', options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesSortsGet(modelGameSortsContext, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game icon\r\n     * @param {number} universeId The id of the universe to get the icon for.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesUniverseIdIconGet(universeId: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesUniverseIdIconGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game media data\r\n     * @param {number} universeId The id of the universe we get media data from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v1GamesUniverseIdMediaGet(universeId: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v1GamesUniverseIdMediaGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SocialLinksApi - axios parameter creator\r\n * @export\r\n */\r\nexport const SocialLinksApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get social link data associated with a game\r\n         * @param {number} universeId The Id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdSocialLinksListGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdSocialLinksListGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/social-links/list`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SocialLinksApi - functional programming interface\r\n * @export\r\n */\r\nexport const SocialLinksApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get social link data associated with a game\r\n         * @param {number} universeId The Id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdSocialLinksListGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiSocialLinkResponse> {\r\n            const localVarAxiosArgs = SocialLinksApiAxiosParamCreator(configuration).v1GamesUniverseIdSocialLinksListGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * SocialLinksApi - factory interface\r\n * @export\r\n */\r\nexport const SocialLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Get social link data associated with a game\r\n         * @param {number} universeId The Id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdSocialLinksListGet(universeId: number, options?: any) {\r\n            return SocialLinksApiFp(configuration).v1GamesUniverseIdSocialLinksListGet(universeId, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * SocialLinksApi - interface\r\n * @export\r\n * @interface SocialLinksApi\r\n */\r\nexport interface SocialLinksApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get social link data associated with a game\r\n     * @param {number} universeId The Id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SocialLinksApiInterface\r\n     */\r\n    v1GamesUniverseIdSocialLinksListGet(universeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiSocialLinkResponse>;\r\n\r\n}\r\n\r\n/**\r\n * SocialLinksApi - object-oriented interface\r\n * @export\r\n * @class SocialLinksApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class SocialLinksApi extends BaseAPI implements SocialLinksApiInterface {\r\n    /**\r\n     *\r\n     * @summary Get social link data associated with a game\r\n     * @param {number} universeId The Id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof SocialLinksApi\r\n     */\r\n    public v1GamesUniverseIdSocialLinksListGet(universeId: number, options?: any) {\r\n        return SocialLinksApiFp(this.configuration).v1GamesUniverseIdSocialLinksListGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * VipServersApi - axios parameter creator\r\n * @export\r\n */\r\nexport const VipServersApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Create VIP server for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiCreateVipServersRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVipServersUniverseIdPost(universeId: number, requestBody: RobloxGamesApiCreateVipServersRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesVipServersUniverseIdPost.');\r\n            }\r\n            // verify required parameter 'requestBody' is not null or undefined\r\n            if (requestBody === null || requestBody === undefined) {\r\n                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling v1GamesVipServersUniverseIdPost.');\r\n            }\r\n            const localVarPath = `/v1/games/vip-servers/{universeId}`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiCreateVipServersRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get necessary data to generate webpage\r\n         * @param {number} id The VIP Server ID\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdGet(id: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'id' is not null or undefined\r\n            if (id === null || id === undefined) {\r\n                throw new RequiredError('id','Required parameter id was null or undefined when calling v1VipServersIdGet.');\r\n            }\r\n            const localVarPath = `/v1/vip-servers/{id}`\r\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateRequest} request The {Roblox.Games.Api.VipServerUpdateRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPatch(id: number, request: RobloxGamesApiVipServerUpdateRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'id' is not null or undefined\r\n            if (id === null || id === undefined) {\r\n                throw new RequiredError('id','Required parameter id was null or undefined when calling v1VipServersIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1VipServersIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/vip-servers/{id}`\r\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiVipServerUpdateRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Update friend/clan access and allowed friends/clan list\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdatePermissionsRequest} request The {Roblox.Games.Api.VipServerUpdatePermissionsRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPermissionsPatch(id: number, request: RobloxGamesApiVipServerUpdatePermissionsRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'id' is not null or undefined\r\n            if (id === null || id === undefined) {\r\n                throw new RequiredError('id','Required parameter id was null or undefined when calling v1VipServersIdPermissionsPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1VipServersIdPermissionsPatch.');\r\n            }\r\n            const localVarPath = `/v1/vip-servers/{id}/permissions`\r\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiVipServerUpdatePermissionsRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates subscription status of a vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateSubscriptionRequest} request The {Roblox.Games.Api.VipServerUpdateSubscriptionRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdSubscriptionPatch(id: number, request: RobloxGamesApiVipServerUpdateSubscriptionRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'id' is not null or undefined\r\n            if (id === null || id === undefined) {\r\n                throw new RequiredError('id','Required parameter id was null or undefined when calling v1VipServersIdSubscriptionPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1VipServersIdSubscriptionPatch.');\r\n            }\r\n            const localVarPath = `/v1/vip-servers/{id}/subscription`\r\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiVipServerUpdateSubscriptionRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * VipServersApi - functional programming interface\r\n * @export\r\n */\r\nexport const VipServersApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Create VIP server for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiCreateVipServersRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVipServersUniverseIdPost(universeId: number, requestBody: RobloxGamesApiCreateVipServersRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebResponsesGamesGameServerResponse> {\r\n            const localVarAxiosArgs = VipServersApiAxiosParamCreator(configuration).v1GamesVipServersUniverseIdPost(universeId, requestBody, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get necessary data to generate webpage\r\n         * @param {number} id The VIP Server ID\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiVipServerResponse> {\r\n            const localVarAxiosArgs = VipServersApiAxiosParamCreator(configuration).v1VipServersIdGet(id, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateRequest} request The {Roblox.Games.Api.VipServerUpdateRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPatch(id: number, request: RobloxGamesApiVipServerUpdateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiVipServerResponse> {\r\n            const localVarAxiosArgs = VipServersApiAxiosParamCreator(configuration).v1VipServersIdPatch(id, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Update friend/clan access and allowed friends/clan list\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdatePermissionsRequest} request The {Roblox.Games.Api.VipServerUpdatePermissionsRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPermissionsPatch(id: number, request: RobloxGamesApiVipServerUpdatePermissionsRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiVipServerPermissionsResponse> {\r\n            const localVarAxiosArgs = VipServersApiAxiosParamCreator(configuration).v1VipServersIdPermissionsPatch(id, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates subscription status of a vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateSubscriptionRequest} request The {Roblox.Games.Api.VipServerUpdateSubscriptionRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdSubscriptionPatch(id: number, request: RobloxGamesApiVipServerUpdateSubscriptionRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiVipServerSubscriptionResponse> {\r\n            const localVarAxiosArgs = VipServersApiAxiosParamCreator(configuration).v1VipServersIdSubscriptionPatch(id, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * VipServersApi - factory interface\r\n * @export\r\n */\r\nexport const VipServersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Create VIP server for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiCreateVipServersRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVipServersUniverseIdPost(universeId: number, requestBody: RobloxGamesApiCreateVipServersRequest, options?: any) {\r\n            return VipServersApiFp(configuration).v1GamesVipServersUniverseIdPost(universeId, requestBody, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get necessary data to generate webpage\r\n         * @param {number} id The VIP Server ID\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdGet(id: number, options?: any) {\r\n            return VipServersApiFp(configuration).v1VipServersIdGet(id, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateRequest} request The {Roblox.Games.Api.VipServerUpdateRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPatch(id: number, request: RobloxGamesApiVipServerUpdateRequest, options?: any) {\r\n            return VipServersApiFp(configuration).v1VipServersIdPatch(id, request, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Update friend/clan access and allowed friends/clan list\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdatePermissionsRequest} request The {Roblox.Games.Api.VipServerUpdatePermissionsRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdPermissionsPatch(id: number, request: RobloxGamesApiVipServerUpdatePermissionsRequest, options?: any) {\r\n            return VipServersApiFp(configuration).v1VipServersIdPermissionsPatch(id, request, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Updates subscription status of a vip server\r\n         * @param {number} id The VIP Server ID\r\n         * @param {RobloxGamesApiVipServerUpdateSubscriptionRequest} request The {Roblox.Games.Api.VipServerUpdateSubscriptionRequest}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1VipServersIdSubscriptionPatch(id: number, request: RobloxGamesApiVipServerUpdateSubscriptionRequest, options?: any) {\r\n            return VipServersApiFp(configuration).v1VipServersIdSubscriptionPatch(id, request, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * VipServersApi - interface\r\n * @export\r\n * @interface VipServersApi\r\n */\r\nexport interface VipServersApiInterface {\r\n    /**\r\n     *\r\n     * @summary Create VIP server for a game\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {RobloxGamesApiCreateVipServersRequest} requestBody The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApiInterface\r\n     */\r\n    v1GamesVipServersUniverseIdPost(universeId: number, requestBody: RobloxGamesApiCreateVipServersRequest, options?: any): AxiosPromise<RobloxWebResponsesGamesGameServerResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get necessary data to generate webpage\r\n     * @param {number} id The VIP Server ID\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApiInterface\r\n     */\r\n    v1VipServersIdGet(id: number, options?: any): AxiosPromise<RobloxGamesApiVipServerResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Updates vip server\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdateRequest} request The {Roblox.Games.Api.VipServerUpdateRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApiInterface\r\n     */\r\n    v1VipServersIdPatch(id: number, request: RobloxGamesApiVipServerUpdateRequest, options?: any): AxiosPromise<RobloxGamesApiVipServerResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Update friend/clan access and allowed friends/clan list\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdatePermissionsRequest} request The {Roblox.Games.Api.VipServerUpdatePermissionsRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApiInterface\r\n     */\r\n    v1VipServersIdPermissionsPatch(id: number, request: RobloxGamesApiVipServerUpdatePermissionsRequest, options?: any): AxiosPromise<RobloxGamesApiVipServerPermissionsResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Updates subscription status of a vip server\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdateSubscriptionRequest} request The {Roblox.Games.Api.VipServerUpdateSubscriptionRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApiInterface\r\n     */\r\n    v1VipServersIdSubscriptionPatch(id: number, request: RobloxGamesApiVipServerUpdateSubscriptionRequest, options?: any): AxiosPromise<RobloxGamesApiVipServerSubscriptionResponse>;\r\n\r\n}\r\n\r\n/**\r\n * VipServersApi - object-oriented interface\r\n * @export\r\n * @class VipServersApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class VipServersApi extends BaseAPI implements VipServersApiInterface {\r\n    /**\r\n     *\r\n     * @summary Create VIP server for a game\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {RobloxGamesApiCreateVipServersRequest} requestBody The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApi\r\n     */\r\n    public v1GamesVipServersUniverseIdPost(universeId: number, requestBody: RobloxGamesApiCreateVipServersRequest, options?: any) {\r\n        return VipServersApiFp(this.configuration).v1GamesVipServersUniverseIdPost(universeId, requestBody, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get necessary data to generate webpage\r\n     * @param {number} id The VIP Server ID\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApi\r\n     */\r\n    public v1VipServersIdGet(id: number, options?: any) {\r\n        return VipServersApiFp(this.configuration).v1VipServersIdGet(id, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Updates vip server\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdateRequest} request The {Roblox.Games.Api.VipServerUpdateRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApi\r\n     */\r\n    public v1VipServersIdPatch(id: number, request: RobloxGamesApiVipServerUpdateRequest, options?: any) {\r\n        return VipServersApiFp(this.configuration).v1VipServersIdPatch(id, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Update friend/clan access and allowed friends/clan list\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdatePermissionsRequest} request The {Roblox.Games.Api.VipServerUpdatePermissionsRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApi\r\n     */\r\n    public v1VipServersIdPermissionsPatch(id: number, request: RobloxGamesApiVipServerUpdatePermissionsRequest, options?: any) {\r\n        return VipServersApiFp(this.configuration).v1VipServersIdPermissionsPatch(id, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Updates subscription status of a vip server\r\n     * @param {number} id The VIP Server ID\r\n     * @param {RobloxGamesApiVipServerUpdateSubscriptionRequest} request The {Roblox.Games.Api.VipServerUpdateSubscriptionRequest}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VipServersApi\r\n     */\r\n    public v1VipServersIdSubscriptionPatch(id: number, request: RobloxGamesApiVipServerUpdateSubscriptionRequest, options?: any) {\r\n        return VipServersApiFp(this.configuration).v1VipServersIdSubscriptionPatch(id, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * VotesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const VotesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Set the user\\'s vote for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestSetUserGameVoteRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdUserVotesPatch(universeId: number, requestBody: RobloxGamesApiModelsRequestSetUserGameVoteRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdUserVotesPatch.');\r\n            }\r\n            // verify required parameter 'requestBody' is not null or undefined\r\n            if (requestBody === null || requestBody === undefined) {\r\n                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling v1GamesUniverseIdUserVotesPatch.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/user-votes`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxGamesApiModelsRequestSetUserGameVoteRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game vote status\r\n         * @param {number} universeId The id of the universe we get vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdVotesGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/votes`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the user\\'s vote status for a game\r\n         * @param {number} universeId The id of the universe we get user vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesUserGet(universeId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            if (universeId === null || universeId === undefined) {\r\n                throw new RequiredError('universeId','Required parameter universeId was null or undefined when calling v1GamesUniverseIdVotesUserGet.');\r\n            }\r\n            const localVarPath = `/v1/games/{universeId}/votes/user`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe vote status\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVotesGet(universeIds: Array<number>, options: any = {}): RequestArgs {\r\n            // verify required parameter 'universeIds' is not null or undefined\r\n            if (universeIds === null || universeIds === undefined) {\r\n                throw new RequiredError('universeIds','Required parameter universeIds was null or undefined when calling v1GamesVotesGet.');\r\n            }\r\n            const localVarPath = `/v1/games/votes`;\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (universeIds) {\r\n                localVarQueryParameter['universeIds'] = universeIds.join(COLLECTION_FORMATS.csv);\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * VotesApi - functional programming interface\r\n * @export\r\n */\r\nexport const VotesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Set the user\\'s vote for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestSetUserGameVoteRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdUserVotesPatch(universeId: number, requestBody: RobloxGamesApiModelsRequestSetUserGameVoteRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\r\n            const localVarAxiosArgs = VotesApiAxiosParamCreator(configuration).v1GamesUniverseIdUserVotesPatch(universeId, requestBody, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game vote status\r\n         * @param {number} universeId The id of the universe we get vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseGameVoteResponse> {\r\n            const localVarAxiosArgs = VotesApiAxiosParamCreator(configuration).v1GamesUniverseIdVotesGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the user\\'s vote status for a game\r\n         * @param {number} universeId The id of the universe we get user vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesUserGet(universeId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxGamesApiModelsResponseUserGameVoteResponse> {\r\n            const localVarAxiosArgs = VotesApiAxiosParamCreator(configuration).v1GamesUniverseIdVotesUserGet(universeId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe vote status\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVotesGet(universeIds: Array<number>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameVoteResponse> {\r\n            const localVarAxiosArgs = VotesApiAxiosParamCreator(configuration).v1GamesVotesGet(universeIds, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * VotesApi - factory interface\r\n * @export\r\n */\r\nexport const VotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         *\r\n         * @summary Set the user\\'s vote for a game\r\n         * @param {number} universeId The id of the universe.\r\n         * @param {RobloxGamesApiModelsRequestSetUserGameVoteRequest} requestBody The request body.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdUserVotesPatch(universeId: number, requestBody: RobloxGamesApiModelsRequestSetUserGameVoteRequest, options?: any) {\r\n            return VotesApiFp(configuration).v1GamesUniverseIdUserVotesPatch(universeId, requestBody, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the game vote status\r\n         * @param {number} universeId The id of the universe we get vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesGet(universeId: number, options?: any) {\r\n            return VotesApiFp(configuration).v1GamesUniverseIdVotesGet(universeId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Get the user\\'s vote status for a game\r\n         * @param {number} universeId The id of the universe we get user vote status from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesUniverseIdVotesUserGet(universeId: number, options?: any) {\r\n            return VotesApiFp(configuration).v1GamesUniverseIdVotesUserGet(universeId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         *\r\n         * @summary Gets a list of universe vote status\r\n         * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GamesVotesGet(universeIds: Array<number>, options?: any) {\r\n            return VotesApiFp(configuration).v1GamesVotesGet(universeIds, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * VotesApi - interface\r\n * @export\r\n * @interface VotesApi\r\n */\r\nexport interface VotesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Set the user\\'s vote for a game\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {RobloxGamesApiModelsRequestSetUserGameVoteRequest} requestBody The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApiInterface\r\n     */\r\n    v1GamesUniverseIdUserVotesPatch(universeId: number, requestBody: RobloxGamesApiModelsRequestSetUserGameVoteRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game vote status\r\n     * @param {number} universeId The id of the universe we get vote status from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApiInterface\r\n     */\r\n    v1GamesUniverseIdVotesGet(universeId: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseGameVoteResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Get the user\\'s vote status for a game\r\n     * @param {number} universeId The id of the universe we get user vote status from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApiInterface\r\n     */\r\n    v1GamesUniverseIdVotesUserGet(universeId: number, options?: any): AxiosPromise<RobloxGamesApiModelsResponseUserGameVoteResponse>;\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of universe vote status\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApiInterface\r\n     */\r\n    v1GamesVotesGet(universeIds: Array<number>, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameVoteResponse>;\r\n\r\n}\r\n\r\n/**\r\n * VotesApi - object-oriented interface\r\n * @export\r\n * @class VotesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class VotesApi extends BaseAPI implements VotesApiInterface {\r\n    /**\r\n     *\r\n     * @summary Set the user\\'s vote for a game\r\n     * @param {number} universeId The id of the universe.\r\n     * @param {RobloxGamesApiModelsRequestSetUserGameVoteRequest} requestBody The request body.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApi\r\n     */\r\n    public v1GamesUniverseIdUserVotesPatch(universeId: number, requestBody: RobloxGamesApiModelsRequestSetUserGameVoteRequest, options?: any) {\r\n        return VotesApiFp(this.configuration).v1GamesUniverseIdUserVotesPatch(universeId, requestBody, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get the game vote status\r\n     * @param {number} universeId The id of the universe we get vote status from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApi\r\n     */\r\n    public v1GamesUniverseIdVotesGet(universeId: number, options?: any) {\r\n        return VotesApiFp(this.configuration).v1GamesUniverseIdVotesGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Get the user\\'s vote status for a game\r\n     * @param {number} universeId The id of the universe we get user vote status from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApi\r\n     */\r\n    public v1GamesUniverseIdVotesUserGet(universeId: number, options?: any) {\r\n        return VotesApiFp(this.configuration).v1GamesUniverseIdVotesUserGet(universeId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @summary Gets a list of universe vote status\r\n     * @param {Array<number>} universeIds A list of universe Ids. Cannot exceed a maximum of 100 IDs.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof VotesApi\r\n     */\r\n    public v1GamesVotesGet(universeIds: Array<number>, options?: any) {\r\n        return VotesApiFp(this.configuration).v1GamesVotesGet(universeIds, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Games Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.gamesApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Games Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from \"./configuration\";\r\nimport { RequiredError,　RequestArgs } from \"./base\";\r\nimport { AxiosInstance } from 'axios';\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const DUMMY_BASE_URL = 'https://example.com'\r\n\r\n/**\r\n *\r\n * @throws {RequiredError}\r\n * @export\r\n */\r\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\r\n    if (paramValue === null || paramValue === undefined) {\r\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\r\n    if (configuration && configuration.apiKey) {\r\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\r\n            ? await configuration.apiKey(keyParamName)\r\n            : await configuration.apiKey;\r\n        object[keyParamName] = localVarApiKeyValue;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\r\n    if (configuration && (configuration.username || configuration.password)) {\r\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\r\n    if (configuration && configuration.accessToken) {\r\n        const accessToken = typeof configuration.accessToken === 'function'\r\n            ? await configuration.accessToken()\r\n            : await configuration.accessToken;\r\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\r\n    if (configuration && configuration.accessToken) {\r\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\r\n            ? await configuration.accessToken(name, scopes)\r\n            : await configuration.accessToken;\r\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\r\n    const searchParams = new URLSearchParams(url.search);\r\n    for (const object of objects) {\r\n        for (const key in object) {\r\n            searchParams.set(key, object[key]);\r\n        }\r\n    }\r\n    url.search = searchParams.toString();\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\r\n    const nonString = typeof value !== 'string';\r\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\r\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\r\n        : nonString;\r\n    return needsSerialization\r\n        ? JSON.stringify(value !== undefined ? value : {})\r\n        : (value || \"\");\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const toPathString = function (url: URL) {\r\n    return url.pathname + url.search + url.hash\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\r\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\r\n        return axios.request(axiosRequestArgs);\r\n    };\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Games Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { Configuration } from './configuration';\r\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\r\n// Some imports not used depending on template conditions\r\n// @ts-ignore\r\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\r\n// @ts-ignore\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32 {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n     */\r\n    SortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32SortOrderEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n     */\r\n    PagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32PagingDirectionEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32\r\n     */\r\n    Count?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32SortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32PagingDirectionEnum {\r\n    Forward = 'Forward',\r\n    Backward = 'Backward'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n */\r\nexport interface RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64 {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    SortOrder?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    PagingDirection?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64\r\n     */\r\n    Count?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64SortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64PagingDirectionEnum {\r\n    Forward = 'Forward',\r\n    Backward = 'Backward'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesGamesGameMediaItemResponseV2\r\n */\r\nexport interface RobloxWebResponsesGamesGameMediaItemResponseV2 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    assetTypeId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    assetType?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    imageId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    videoHash?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    videoTitle?: string;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof RobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    approved?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesGamesGameResponseV2\r\n */\r\nexport interface RobloxWebResponsesGamesGameResponseV2 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    description?: string;\r\n    /**\r\n     * \r\n     * @type {RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    creator?: RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType;\r\n    /**\r\n     * \r\n     * @type {RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    rootPlace?: RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    created?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    updated?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    placeVisits?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType\r\n */\r\nexport interface RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType\r\n     */\r\n    type?: RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetTypeTypeEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetType\r\n     */\r\n    name?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformAssetsAssetTypeTypeEnum {\r\n    Image = 'Image',\r\n    TShirt = 'TShirt',\r\n    Audio = 'Audio',\r\n    Mesh = 'Mesh',\r\n    Lua = 'Lua',\r\n    Html = 'HTML',\r\n    Text = 'Text',\r\n    Hat = 'Hat',\r\n    Place = 'Place',\r\n    Model = 'Model',\r\n    Shirt = 'Shirt',\r\n    Pants = 'Pants',\r\n    Decal = 'Decal',\r\n    Avatar = 'Avatar',\r\n    Head = 'Head',\r\n    Face = 'Face',\r\n    Gear = 'Gear',\r\n    Badge = 'Badge',\r\n    GroupEmblem = 'GroupEmblem',\r\n    Animation = 'Animation',\r\n    Arms = 'Arms',\r\n    Legs = 'Legs',\r\n    Torso = 'Torso',\r\n    RightArm = 'RightArm',\r\n    LeftArm = 'LeftArm',\r\n    LeftLeg = 'LeftLeg',\r\n    RightLeg = 'RightLeg',\r\n    Package = 'Package',\r\n    YouTubeVideo = 'YouTubeVideo',\r\n    GamePass = 'GamePass',\r\n    App = 'App',\r\n    Code = 'Code',\r\n    Plugin = 'Plugin',\r\n    SolidModel = 'SolidModel',\r\n    MeshPart = 'MeshPart',\r\n    HairAccessory = 'HairAccessory',\r\n    FaceAccessory = 'FaceAccessory',\r\n    NeckAccessory = 'NeckAccessory',\r\n    ShoulderAccessory = 'ShoulderAccessory',\r\n    FrontAccessory = 'FrontAccessory',\r\n    BackAccessory = 'BackAccessory',\r\n    WaistAccessory = 'WaistAccessory',\r\n    ClimbAnimation = 'ClimbAnimation',\r\n    DeathAnimation = 'DeathAnimation',\r\n    FallAnimation = 'FallAnimation',\r\n    IdleAnimation = 'IdleAnimation',\r\n    JumpAnimation = 'JumpAnimation',\r\n    RunAnimation = 'RunAnimation',\r\n    SwimAnimation = 'SwimAnimation',\r\n    WalkAnimation = 'WalkAnimation',\r\n    PoseAnimation = 'PoseAnimation',\r\n    LocalizationTableManifest = 'LocalizationTableManifest',\r\n    LocalizationTableTranslation = 'LocalizationTableTranslation',\r\n    EmoteAnimation = 'EmoteAnimation',\r\n    Video = 'Video',\r\n    TexturePack = 'TexturePack'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType\r\n */\r\nexport interface RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType\r\n     */\r\n    type?: RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorTypeTypeEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorType\r\n     */\r\n    name?: string;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxWebResponsesRelatedEntityTypeResponseRobloxPlatformCoreCreatorTypeTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestSystemInt32 {\r\n    /**\r\n     * \r\n     * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n     */\r\n    ExclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt32;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt32\r\n     */\r\n    CursorRecipe?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n */\r\nexport interface RobloxWebWebAPIExclusiveStartRequestSystemInt64 {\r\n    /**\r\n     * \r\n     * @type {RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n     */\r\n    ExclusiveStartKeyInfo?: RobloxPlatformCoreExclusiveStartPagingIExclusiveStartKeyInfoSystemInt64;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIExclusiveStartRequestSystemInt64\r\n     */\r\n    CursorRecipe?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2 {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxWebResponsesGamesGameMediaItemResponseV2>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2\r\n     */\r\n    data?: Array<RobloxWebResponsesGamesGameMediaItemResponseV2>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2\r\n */\r\nexport interface RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2 {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {Array<RobloxWebResponsesGamesGameResponseV2>}\r\n     * @memberof RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2\r\n     */\r\n    data?: Array<RobloxWebResponsesGamesGameResponseV2>;\r\n}\r\n\r\n/**\r\n * GamesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GamesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GamesUniverseIdMediaGet: async (universeId: number, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'universeId' is not null or undefined\r\n            assertParamExists('v2GamesUniverseIdMediaGet', 'universeId', universeId)\r\n            const localVarPath = `/v2/games/{universeId}/media`\r\n                .replace(`{${\"universeId\"}}`, encodeURIComponent(String(universeId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GroupsGroupIdGamesGet: async (groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'groupId' is not null or undefined\r\n            assertParamExists('v2GroupsGroupIdGamesGet', 'groupId', groupId)\r\n            const localVarPath = `/v2/groups/{groupId}/games`\r\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (accessFilter !== undefined) {\r\n                localVarQueryParameter['accessFilter'] = accessFilter;\r\n            }\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GroupsGroupIdGamesV2Get: async (groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'groupId' is not null or undefined\r\n            assertParamExists('v2GroupsGroupIdGamesV2Get', 'groupId', groupId)\r\n            const localVarPath = `/v2/groups/{groupId}/gamesV2`\r\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (accessFilter !== undefined) {\r\n                localVarQueryParameter['accessFilter'] = accessFilter;\r\n            }\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets users favorite games.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdFavoriteGamesGet: async (userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userId' is not null or undefined\r\n            assertParamExists('v2UsersUserIdFavoriteGamesGet', 'userId', userId)\r\n            const localVarPath = `/v2/users/{userId}/favorite/games`\r\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (accessFilter !== undefined) {\r\n                localVarQueryParameter['accessFilter'] = accessFilter;\r\n            }\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified user.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdGamesGet: async (userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options: any = {}): Promise<RequestArgs> => {\r\n            // verify required parameter 'userId' is not null or undefined\r\n            assertParamExists('v2UsersUserIdGamesGet', 'userId', userId)\r\n            const localVarPath = `/v2/users/{userId}/games`\r\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\r\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\r\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (accessFilter !== undefined) {\r\n                localVarQueryParameter['accessFilter'] = accessFilter;\r\n            }\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n    \r\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\r\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\r\n\r\n            return {\r\n                url: toPathString(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GamesApiFp = function(configuration?: Configuration) {\r\n    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v2GamesUniverseIdMediaGet(universeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v2GamesUniverseIdMediaGet(universeId, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v2GroupsGroupIdGamesGet(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v2GroupsGroupIdGamesGet(groupId, accessFilter, sortOrder, limit, cursor, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v2GroupsGroupIdGamesV2Get(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v2GroupsGroupIdGamesV2Get(groupId, accessFilter, sortOrder, limit, cursor, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets users favorite games.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v2UsersUserIdFavoriteGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersUserIdFavoriteGamesGet(userId, accessFilter, sortOrder, limit, cursor, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified user.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        async v2UsersUserIdGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>> {\r\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v2UsersUserIdGamesGet(userId, accessFilter, sortOrder, limit, cursor, options);\r\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GamesApi - factory interface\r\n * @export\r\n */\r\nexport const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    const localVarFp = GamesApiFp(configuration)\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get the game media data\r\n         * @param {number} universeId The id of the universe we get media data from.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GamesUniverseIdMediaGet(universeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2> {\r\n            return localVarFp.v2GamesUniverseIdMediaGet(universeId, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GroupsGroupIdGamesGet(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2> {\r\n            return localVarFp.v2GroupsGroupIdGamesGet(groupId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.\r\n         * @param {number} groupId The group Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2GroupsGroupIdGamesV2Get(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2> {\r\n            return localVarFp.v2GroupsGroupIdGamesV2Get(groupId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets users favorite games.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdFavoriteGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2> {\r\n            return localVarFp.v2UsersUserIdFavoriteGamesGet(userId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(axios, basePath));\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets games created by the specified user.\r\n         * @param {number} userId The user Id.\r\n         * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2> {\r\n            return localVarFp.v2UsersUserIdGamesGet(userId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(axios, basePath));\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GamesApi - interface\r\n * @export\r\n * @interface GamesApi\r\n */\r\nexport interface GamesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the game media data\r\n     * @param {number} universeId The id of the universe we get media data from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v2GamesUniverseIdMediaGet(universeId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified group.\r\n     * @param {number} groupId The group Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v2GroupsGroupIdGamesGet(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.\r\n     * @param {number} groupId The group Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v2GroupsGroupIdGamesV2Get(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets users favorite games.\r\n     * @param {number} userId The user Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v2UsersUserIdFavoriteGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified user.\r\n     * @param {number} userId The user Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApiInterface\r\n     */\r\n    v2UsersUserIdGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiPageResponseRobloxWebResponsesGamesGameResponseV2>;\r\n\r\n}\r\n\r\n/**\r\n * GamesApi - object-oriented interface\r\n * @export\r\n * @class GamesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GamesApi extends BaseAPI implements GamesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get the game media data\r\n     * @param {number} universeId The id of the universe we get media data from.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v2GamesUniverseIdMediaGet(universeId: number, options?: any) {\r\n        return GamesApiFp(this.configuration).v2GamesUniverseIdMediaGet(universeId, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified group.\r\n     * @param {number} groupId The group Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v2GroupsGroupIdGamesGet(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return GamesApiFp(this.configuration).v2GroupsGroupIdGamesGet(groupId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified group. This will replace V1 after validation. Note that this can only used for public/all universes.\r\n     * @param {number} groupId The group Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v2GroupsGroupIdGamesV2Get(groupId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return GamesApiFp(this.configuration).v2GroupsGroupIdGamesV2Get(groupId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets users favorite games.\r\n     * @param {number} userId The user Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v2UsersUserIdFavoriteGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any) {\r\n        return GamesApiFp(this.configuration).v2UsersUserIdFavoriteGamesGet(userId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets games created by the specified user.\r\n     * @param {number} userId The user Id.\r\n     * @param {'All' | 'Public' | 'Private'} [accessFilter] Filtering option via access level.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GamesApi\r\n     */\r\n    public v2UsersUserIdGamesGet(userId: number, accessFilter?: 'All' | 'Public' | 'Private', sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50, cursor?: string, options?: any) {\r\n        return GamesApiFp(this.configuration).v2UsersUserIdGamesGet(userId, accessFilter, sortOrder, limit, cursor, options).then((request) => request(this.axios, this.basePath));\r\n    }\r\n}\r\n\r\n\r\n","import { AxiosPromise } from 'axios';\r\nimport * as GamesProvider from '../../providers/games/gamesProvider';\r\nimport * as GamesV2Provider from '../../providers/gamesV2/gamesV2Provider';\r\n\r\nconst gamesApiInstance = new GamesProvider.GamesApi();\r\nconst gamesV2ApiInstance = new GamesV2Provider.GamesApi();\r\nconst gamePassesApiInstance = new GamesProvider.GamePassesApi();\r\n\r\nconst getUniverseMedia = (\r\n  universeId: number\r\n): AxiosPromise<GamesV2Provider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesGamesGameMediaItemResponseV2> => {\r\n  return gamesV2ApiInstance.v2GamesUniverseIdMediaGet(universeId, { withCredentials: true });\r\n};\r\n\r\nconst getPlayabilityStatus = (\r\n  universeIds: number[]\r\n): AxiosPromise<GamesProvider.RobloxGamesApiModelsResponsePlayabilityStatusResponse[]> => {\r\n  return gamesApiInstance.v1GamesMultigetPlayabilityStatusGet(universeIds, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getPlaceDetails = (\r\n  placeIds: number[]\r\n): AxiosPromise<GamesProvider.RobloxGamesApiModelsResponsePlaceDetails[]> => {\r\n  return gamesApiInstance.v1GamesMultigetPlaceDetailsGet(placeIds, { withCredentials: true });\r\n};\r\n\r\nconst getProductInfo = (\r\n  universeIds: number[]\r\n): AxiosPromise<GamesProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameProductResponse> => {\r\n  return gamesApiInstance.v1GamesGamesProductInfoGet(universeIds, { withCredentials: true });\r\n};\r\n\r\nconst getGameDetails = (\r\n  universeIds: number[]\r\n): AxiosPromise<GamesProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxGamesApiModelsResponseGameDetailResponse> => {\r\n  return gamesApiInstance.v1GamesGet(universeIds, { withCredentials: true });\r\n};\r\n\r\nconst getGamePasses = (\r\n  universeId: number,\r\n  sortOrder?: 'Asc' | 'Desc',\r\n  limit?: 10 | 25 | 50 | 100,\r\n  cursor?: string\r\n): AxiosPromise<GamesProvider.RobloxWebWebAPIModelsApiPageResponseRobloxGamesApiModelsResponseGamePassResponse> => {\r\n  return gamePassesApiInstance.v1GamesUniverseIdGamePassesGet(universeId, sortOrder, limit, cursor);\r\n};\r\n\r\nconst getGamesSorts = (\r\n  modelGameSortsContext?:\r\n    | 'GamesDefaultSorts'\r\n    | 'GamesAllSorts'\r\n    | 'HomeSorts'\r\n    | 'ChatSorts'\r\n    | 'UnifiedHomeSorts'\r\n    | 'AbTestSorts'\r\n    | 'GamesPageAbTestSorts1'\r\n    | 'GamesPageAbTestSorts2'\r\n): AxiosPromise<GamesProvider.RobloxGamesApiModelsResponseGameSortsResponse> => {\r\n  return gamesApiInstance.v1GamesSortsGet(modelGameSortsContext);\r\n};\r\n\r\nconst getGamesList = (\r\n  modelSortToken?: string,\r\n  modelGameFilter?: string,\r\n  modelTimeFilter?: string,\r\n  modelGenreFilter?: string,\r\n  modelExclusiveStartId?: number,\r\n  modelSortOrder?: number,\r\n  modelGameSetTargetId?: number,\r\n  modelKeyword?: string,\r\n  modelStartRows?: number,\r\n  modelMaxRows?: number,\r\n  modelIsKeywordSuggestionEnabled?: boolean,\r\n  modelContextCountryRegionId?: number,\r\n  modelContextUniverseId?: number,\r\n  modelPageId?: string,\r\n  modelSortPosition?: number,\r\n  options?: any\r\n): AxiosPromise<GamesProvider.RobloxGamesApiModelsResponseGamesSearchResponse> => {\r\n  return gamesApiInstance.v1GamesListGet(\r\n    modelSortToken,\r\n    modelGameFilter,\r\n    modelTimeFilter,\r\n    modelGenreFilter,\r\n    modelExclusiveStartId,\r\n    modelSortOrder,\r\n    modelGameSetTargetId,\r\n    modelKeyword,\r\n    modelStartRows,\r\n    modelMaxRows,\r\n    modelIsKeywordSuggestionEnabled,\r\n    modelContextCountryRegionId,\r\n    modelContextUniverseId,\r\n    modelPageId,\r\n    modelSortPosition,\r\n    options\r\n  );\r\n};\r\n\r\nexport default {\r\n  getUniverseMedia,\r\n  getPlayabilityStatus,\r\n  getPlaceDetails,\r\n  getProductInfo,\r\n  getGameDetails,\r\n  getGamePasses,\r\n  getGamesSorts,\r\n  getGamesList\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Inventory Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.inventoryApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Inventory Api v2\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v2\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface ApiLegacyPageResponseRecommendationViewModelV2A\r\n */\r\nexport interface ApiLegacyPageResponseRecommendationViewModelV2A {\r\n    /**\r\n     * \r\n     * @type {Array<RecommendationViewModelV2A>}\r\n     * @memberof ApiLegacyPageResponseRecommendationViewModelV2A\r\n     */\r\n    data?: Array<RecommendationViewModelV2A>;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ApiLegacyPageResponseRecommendationViewModelV2A\r\n     */\r\n    total?: number;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ApiPageResponseAssetOwnerResponse\r\n */\r\nexport interface ApiPageResponseAssetOwnerResponse {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ApiPageResponseAssetOwnerResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ApiPageResponseAssetOwnerResponse\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {Array<AssetOwnerResponse>}\r\n     * @memberof ApiPageResponseAssetOwnerResponse\r\n     */\r\n    data?: Array<AssetOwnerResponse>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ApiPageResponseUserAssetModel\r\n */\r\nexport interface ApiPageResponseUserAssetModel {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ApiPageResponseUserAssetModel\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ApiPageResponseUserAssetModel\r\n     */\r\n    nextPageCursor?: string;\r\n    /**\r\n     * \r\n     * @type {Array<UserAssetModel>}\r\n     * @memberof ApiPageResponseUserAssetModel\r\n     */\r\n    data?: Array<UserAssetModel>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface AssetOwnerResponse\r\n */\r\nexport interface AssetOwnerResponse {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof AssetOwnerResponse\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof AssetOwnerResponse\r\n     */\r\n    serialNumber?: number;\r\n    /**\r\n     * \r\n     * @type {RelatedEntityTypeResponseAgentType}\r\n     * @memberof AssetOwnerResponse\r\n     */\r\n    owner?: RelatedEntityTypeResponseAgentType;\r\n    /**\r\n     * \r\n     * @type {Date}\r\n     * @memberof AssetOwnerResponse\r\n     */\r\n    created?: Date;\r\n    /**\r\n     * \r\n     * @type {Date}\r\n     * @memberof AssetOwnerResponse\r\n     */\r\n    updated?: Date;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface CreatorContainerV2\r\n */\r\nexport interface CreatorContainerV2 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof CreatorContainerV2\r\n     */\r\n    creatorId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof CreatorContainerV2\r\n     */\r\n    creatorType?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof CreatorContainerV2\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof CreatorContainerV2\r\n     */\r\n    creatorProfileLink?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ExclusiveStartRequestInt64\r\n */\r\nexport interface ExclusiveStartRequestInt64 {\r\n    /**\r\n     * \r\n     * @type {IExclusiveStartKeyInfoInt64}\r\n     * @memberof ExclusiveStartRequestInt64\r\n     */\r\n    exclusiveStartKeyInfo?: IExclusiveStartKeyInfoInt64;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ExclusiveStartRequestInt64\r\n     */\r\n    cursorRecipe?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface IExclusiveStartKeyInfoInt64\r\n */\r\nexport interface IExclusiveStartKeyInfoInt64 {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof IExclusiveStartKeyInfoInt64\r\n     */\r\n    sortOrder?: IExclusiveStartKeyInfoInt64SortOrderEnum;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof IExclusiveStartKeyInfoInt64\r\n     */\r\n    pagingDirection?: IExclusiveStartKeyInfoInt64PagingDirectionEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof IExclusiveStartKeyInfoInt64\r\n     */\r\n    count?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum IExclusiveStartKeyInfoInt64SortOrderEnum {\r\n    Asc = 'Asc',\r\n    Desc = 'Desc'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum IExclusiveStartKeyInfoInt64PagingDirectionEnum {\r\n    Forward = 'Forward',\r\n    Backward = 'Backward'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface ItemContainerV2\r\n */\r\nexport interface ItemContainerV2 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ItemContainerV2\r\n     */\r\n    assetId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ItemContainerV2\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ItemContainerV2\r\n     */\r\n    price?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ItemContainerV2\r\n     */\r\n    absoluteUrl?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ItemContainerV2\r\n     */\r\n    audioUrl?: string;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface ProductContainerV2\r\n */\r\nexport interface ProductContainerV2 {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    priceInRobux?: number;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isForSale?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isPublicDomain?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isResellable?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isLimited?: boolean;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isLimitedUnique?: boolean;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    serialNumber?: number;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isRental?: boolean;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    rentalDurationInHours?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    bcRequirement?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    totalPrivateSales?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    sellerId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    sellerName?: string;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    lowestPrivateSaleUserAssetId?: number;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isXboxExclusiveItem?: boolean;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    offsaleDeadline?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    noPriceText?: string;\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ProductContainerV2\r\n     */\r\n    isFree?: boolean;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RecommendationViewModelV2A\r\n */\r\nexport interface RecommendationViewModelV2A {\r\n    /**\r\n     * \r\n     * @type {ThumbResultContainerV2}\r\n     * @memberof RecommendationViewModelV2A\r\n     */\r\n    thumbnail?: ThumbResultContainerV2;\r\n    /**\r\n     * \r\n     * @type {ItemContainerV2}\r\n     * @memberof RecommendationViewModelV2A\r\n     */\r\n    item?: ItemContainerV2;\r\n    /**\r\n     * \r\n     * @type {CreatorContainerV2}\r\n     * @memberof RecommendationViewModelV2A\r\n     */\r\n    creator?: CreatorContainerV2;\r\n    /**\r\n     * \r\n     * @type {ProductContainerV2}\r\n     * @memberof RecommendationViewModelV2A\r\n     */\r\n    product?: ProductContainerV2;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RelatedEntityTypeResponseAgentType\r\n */\r\nexport interface RelatedEntityTypeResponseAgentType {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RelatedEntityTypeResponseAgentType\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RelatedEntityTypeResponseAgentType\r\n     */\r\n    type?: RelatedEntityTypeResponseAgentTypeTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RelatedEntityTypeResponseAgentTypeTypeEnum {\r\n    User = 'User',\r\n    Group = 'Group'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface ThumbResultContainerV2\r\n */\r\nexport interface ThumbResultContainerV2 {\r\n    /**\r\n     * \r\n     * @type {boolean}\r\n     * @memberof ThumbResultContainerV2\r\n     */\r\n    _final?: boolean;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThumbResultContainerV2\r\n     */\r\n    url?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof ThumbResultContainerV2\r\n     */\r\n    retryUrl?: string;\r\n}\r\n/**\r\n * A model containing information about a {Roblox.Platform.AssetOwnership.UserAsset}\r\n * @export\r\n * @interface UserAssetModel\r\n */\r\nexport interface UserAssetModel {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof UserAssetModel\r\n     */\r\n    userAssetId?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof UserAssetModel\r\n     */\r\n    assetId?: number;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof UserAssetModel\r\n     */\r\n    serialNumber?: number;\r\n    /**\r\n     * \r\n     * @type {UserModel}\r\n     * @memberof UserAssetModel\r\n     */\r\n    owner?: UserModel;\r\n    /**\r\n     * \r\n     * @type {Date}\r\n     * @memberof UserAssetModel\r\n     */\r\n    created?: Date;\r\n    /**\r\n     * \r\n     * @type {Date}\r\n     * @memberof UserAssetModel\r\n     */\r\n    updated?: Date;\r\n}\r\n/**\r\n * A model representing data about an {Roblox.Platform.Membership.IUser}\r\n * @export\r\n * @interface UserModel\r\n */\r\nexport interface UserModel {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof UserModel\r\n     */\r\n    userId?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof UserModel\r\n     */\r\n    username?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof UserModel\r\n     */\r\n    buildersClubMembershipType?: UserModelBuildersClubMembershipTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum UserModelBuildersClubMembershipTypeEnum {\r\n    None = 'None',\r\n    BC = 'BC',\r\n    TBC = 'TBC',\r\n    OBC = 'OBC',\r\n    RobloxPremium = 'RobloxPremium'\r\n}\r\n\r\n\r\n/**\r\n * AssetsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a list of owners of an asset.\r\n         * @param {number} assetId The asset id.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] Sorted by userAssetId\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2AssetsAssetIdOwnersGet(assetId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'assetId' is not null or undefined\r\n            if (assetId === null || assetId === undefined) {\r\n                throw new RequiredError('assetId','Required parameter assetId was null or undefined when calling v2AssetsAssetIdOwnersGet.');\r\n            }\r\n            const localVarPath = `/v2/assets/{assetId}/owners`\r\n                .replace(`{${\"assetId\"}}`, encodeURIComponent(String(assetId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a list of recommended assets, given an asset type\r\n         * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n         * @param {number} [numItems] The number of recommended items to return.\r\n         * @param {number} [contextAssetId] \r\n         * @param {number} [thumbWidth] Thumbnail Width\r\n         * @param {number} [thumbHeight] Thumbnail Height\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2RecommendationsAssetTypeIdGet(assetTypeId: number, numItems?: number, contextAssetId?: number, thumbWidth?: number, thumbHeight?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'assetTypeId' is not null or undefined\r\n            if (assetTypeId === null || assetTypeId === undefined) {\r\n                throw new RequiredError('assetTypeId','Required parameter assetTypeId was null or undefined when calling v2RecommendationsAssetTypeIdGet.');\r\n            }\r\n            const localVarPath = `/v2/recommendations/{assetTypeId}`\r\n                .replace(`{${\"assetTypeId\"}}`, encodeURIComponent(String(assetTypeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (numItems !== undefined) {\r\n                localVarQueryParameter['numItems'] = numItems;\r\n            }\r\n\r\n            if (contextAssetId !== undefined) {\r\n                localVarQueryParameter['contextAssetId'] = contextAssetId;\r\n            }\r\n\r\n            if (thumbWidth !== undefined) {\r\n                localVarQueryParameter['thumbWidth'] = thumbWidth;\r\n            }\r\n\r\n            if (thumbHeight !== undefined) {\r\n                localVarQueryParameter['thumbHeight'] = thumbHeight;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AssetsApi - functional programming interface\r\n * @export\r\n */\r\nexport const AssetsApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a list of owners of an asset.\r\n         * @param {number} assetId The asset id.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] Sorted by userAssetId\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2AssetsAssetIdOwnersGet(assetId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiPageResponseAssetOwnerResponse> {\r\n            const localVarAxiosArgs = AssetsApiAxiosParamCreator(configuration).v2AssetsAssetIdOwnersGet(assetId, sortOrder, limit, cursor, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a list of recommended assets, given an asset type\r\n         * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n         * @param {number} [numItems] The number of recommended items to return.\r\n         * @param {number} [contextAssetId] \r\n         * @param {number} [thumbWidth] Thumbnail Width\r\n         * @param {number} [thumbHeight] Thumbnail Height\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2RecommendationsAssetTypeIdGet(assetTypeId: number, numItems?: number, contextAssetId?: number, thumbWidth?: number, thumbHeight?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLegacyPageResponseRecommendationViewModelV2A> {\r\n            const localVarAxiosArgs = AssetsApiAxiosParamCreator(configuration).v2RecommendationsAssetTypeIdGet(assetTypeId, numItems, contextAssetId, thumbWidth, thumbHeight, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * AssetsApi - factory interface\r\n * @export\r\n */\r\nexport const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets a list of owners of an asset.\r\n         * @param {number} assetId The asset id.\r\n         * @param {'Asc' | 'Desc'} [sortOrder] Sorted by userAssetId\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2AssetsAssetIdOwnersGet(assetId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n            return AssetsApiFp(configuration).v2AssetsAssetIdOwnersGet(assetId, sortOrder, limit, cursor, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets a list of recommended assets, given an asset type\r\n         * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n         * @param {number} [numItems] The number of recommended items to return.\r\n         * @param {number} [contextAssetId] \r\n         * @param {number} [thumbWidth] Thumbnail Width\r\n         * @param {number} [thumbHeight] Thumbnail Height\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2RecommendationsAssetTypeIdGet(assetTypeId: number, numItems?: number, contextAssetId?: number, thumbWidth?: number, thumbHeight?: number, options?: any) {\r\n            return AssetsApiFp(configuration).v2RecommendationsAssetTypeIdGet(assetTypeId, numItems, contextAssetId, thumbWidth, thumbHeight, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * AssetsApi - interface\r\n * @export\r\n * @interface AssetsApi\r\n */\r\nexport interface AssetsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets a list of owners of an asset.\r\n     * @param {number} assetId The asset id.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] Sorted by userAssetId\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApiInterface\r\n     */\r\n    v2AssetsAssetIdOwnersGet(assetId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<ApiPageResponseAssetOwnerResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets a list of recommended assets, given an asset type\r\n     * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {number} [contextAssetId] \r\n     * @param {number} [thumbWidth] Thumbnail Width\r\n     * @param {number} [thumbHeight] Thumbnail Height\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApiInterface\r\n     */\r\n    v2RecommendationsAssetTypeIdGet(assetTypeId: number, numItems?: number, contextAssetId?: number, thumbWidth?: number, thumbHeight?: number, options?: any): AxiosPromise<ApiLegacyPageResponseRecommendationViewModelV2A>;\r\n\r\n}\r\n\r\n/**\r\n * AssetsApi - object-oriented interface\r\n * @export\r\n * @class AssetsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class AssetsApi extends BaseAPI implements AssetsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets a list of owners of an asset.\r\n     * @param {number} assetId The asset id.\r\n     * @param {'Asc' | 'Desc'} [sortOrder] Sorted by userAssetId\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApi\r\n     */\r\n    public v2AssetsAssetIdOwnersGet(assetId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return AssetsApiFp(this.configuration).v2AssetsAssetIdOwnersGet(assetId, sortOrder, limit, cursor, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets a list of recommended assets, given an asset type\r\n     * @param {number} assetTypeId The asset type id {Roblox.AssetType}\r\n     * @param {number} [numItems] The number of recommended items to return.\r\n     * @param {number} [contextAssetId] \r\n     * @param {number} [thumbWidth] Thumbnail Width\r\n     * @param {number} [thumbHeight] Thumbnail Height\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof AssetsApi\r\n     */\r\n    public v2RecommendationsAssetTypeIdGet(assetTypeId: number, numItems?: number, contextAssetId?: number, thumbWidth?: number, thumbHeight?: number, options?: any) {\r\n        return AssetsApiFp(this.configuration).v2RecommendationsAssetTypeIdGet(assetTypeId, numItems, contextAssetId, thumbWidth, thumbHeight, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * InventoryApi - axios parameter creator\r\n * @export\r\n */\r\nexport const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets user\\'s inventory based on specific asset type.\r\n         * @param {number} userId \r\n         * @param {number} assetTypeId \r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdInventoryAssetTypeIdGet(userId: number, assetTypeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options: any = {}): RequestArgs {\r\n            // verify required parameter 'userId' is not null or undefined\r\n            if (userId === null || userId === undefined) {\r\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling v2UsersUserIdInventoryAssetTypeIdGet.');\r\n            }\r\n            // verify required parameter 'assetTypeId' is not null or undefined\r\n            if (assetTypeId === null || assetTypeId === undefined) {\r\n                throw new RequiredError('assetTypeId','Required parameter assetTypeId was null or undefined when calling v2UsersUserIdInventoryAssetTypeIdGet.');\r\n            }\r\n            const localVarPath = `/v2/users/{userId}/inventory/{assetTypeId}`\r\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)))\r\n                .replace(`{${\"assetTypeId\"}}`, encodeURIComponent(String(assetTypeId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (sortOrder !== undefined) {\r\n                localVarQueryParameter['sortOrder'] = sortOrder;\r\n            }\r\n\r\n            if (limit !== undefined) {\r\n                localVarQueryParameter['limit'] = limit;\r\n            }\r\n\r\n            if (cursor !== undefined) {\r\n                localVarQueryParameter['cursor'] = cursor;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * InventoryApi - functional programming interface\r\n * @export\r\n */\r\nexport const InventoryApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets user\\'s inventory based on specific asset type.\r\n         * @param {number} userId \r\n         * @param {number} assetTypeId \r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdInventoryAssetTypeIdGet(userId: number, assetTypeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiPageResponseUserAssetModel> {\r\n            const localVarAxiosArgs = InventoryApiAxiosParamCreator(configuration).v2UsersUserIdInventoryAssetTypeIdGet(userId, assetTypeId, sortOrder, limit, cursor, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * InventoryApi - factory interface\r\n * @export\r\n */\r\nexport const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets user\\'s inventory based on specific asset type.\r\n         * @param {number} userId \r\n         * @param {number} assetTypeId \r\n         * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n         * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n         * @param {string} [cursor] The paging cursor for the previous or next page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v2UsersUserIdInventoryAssetTypeIdGet(userId: number, assetTypeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n            return InventoryApiFp(configuration).v2UsersUserIdInventoryAssetTypeIdGet(userId, assetTypeId, sortOrder, limit, cursor, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * InventoryApi - interface\r\n * @export\r\n * @interface InventoryApi\r\n */\r\nexport interface InventoryApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets user\\'s inventory based on specific asset type.\r\n     * @param {number} userId \r\n     * @param {number} assetTypeId \r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof InventoryApiInterface\r\n     */\r\n    v2UsersUserIdInventoryAssetTypeIdGet(userId: number, assetTypeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any): AxiosPromise<ApiPageResponseUserAssetModel>;\r\n\r\n}\r\n\r\n/**\r\n * InventoryApi - object-oriented interface\r\n * @export\r\n * @class InventoryApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class InventoryApi extends BaseAPI implements InventoryApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets user\\'s inventory based on specific asset type.\r\n     * @param {number} userId \r\n     * @param {number} assetTypeId \r\n     * @param {'Asc' | 'Desc'} [sortOrder] The order the results are sorted in.\r\n     * @param {10 | 25 | 50 | 100} [limit] The amount of results per request.\r\n     * @param {string} [cursor] The paging cursor for the previous or next page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof InventoryApi\r\n     */\r\n    public v2UsersUserIdInventoryAssetTypeIdGet(userId: number, assetTypeId: number, sortOrder?: 'Asc' | 'Desc', limit?: 10 | 25 | 50 | 100, cursor?: string, options?: any) {\r\n        return InventoryApiFp(this.configuration).v2UsersUserIdInventoryAssetTypeIdGet(userId, assetTypeId, sortOrder, limit, cursor, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { AxiosPromise } from 'axios';\r\nimport \r\n    * as\r\n    InventoryProvider\r\n from '../../providers/inventory/inventoryProvider';\r\n\r\nconst assetsApiInstance = new InventoryProvider.AssetsApi();\r\n\r\nconst getRecommendations = (assetTypeId: number, numItems?: number, contextAssetId?: number): AxiosPromise<InventoryProvider.ApiLegacyPageResponseRecommendationViewModelV2A> => {\r\n    return assetsApiInstance.v2RecommendationsAssetTypeIdGet(assetTypeId, numItems, contextAssetId);\r\n}\r\n\r\nexport default {\r\n    getRecommendations\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Locale Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * OpenAPI spec version: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.localeApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","import { LocalStorage } from 'Roblox';\r\n\r\nfunction handler(e) {\r\n  console.debug('Successfully communicate with other tab');\r\n  console.debug('Received data: ' + localStorage.getItem('data'));\r\n}\r\n\r\nexport default {\r\n  getUserKey: function (userId) {\r\n    return 'user_' + userId;\r\n  },\r\n\r\n  storage: function () {\r\n    if (LocalStorage) {\r\n      return LocalStorage.isAvailable();\r\n    }\r\n    return localStorage;\r\n  },\r\n\r\n  getLength: function () {\r\n    if (this.storage()) {\r\n      return localStorage.length;\r\n    }\r\n    return 0;\r\n  },\r\n\r\n  getKey: function (i) {\r\n    if (this.storage()) {\r\n      return localStorage.key(i);\r\n    }\r\n    return '';\r\n  },\r\n\r\n  setLocalStorage: function (key, value) {\r\n    if (this.storage()) {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n  },\r\n\r\n  getLocalStorage: function (key) {\r\n    if (this.storage()) {\r\n      return JSON.parse(localStorage.getItem(key));\r\n    }\r\n  },\r\n\r\n  listenLocalStorage: function (handlerCallback) {\r\n    if (this.storage() && typeof handlerCallback !== 'undefined') {\r\n      if (window.addEventListener) {\r\n        // Normal browsers\r\n        window.addEventListener('storage', handlerCallback, false);\r\n      } else {\r\n        // for IE (why make your life more difficult)\r\n        window.attachEvent('onstorage', handlerCallback);\r\n      }\r\n    }\r\n  },\r\n\r\n  removeLocalStorage: function (key) {\r\n    if (this.storage()) {\r\n      localStorage.removeItem(key);\r\n    }\r\n  },\r\n\r\n  saveDataByTimeStamp: function (key, data) {\r\n    var currentTime = new Date().getTime();\r\n    var existingData = this.getLocalStorage(key);\r\n    if (!existingData) {\r\n      existingData = {};\r\n    }\r\n    existingData['data'] = data;\r\n    existingData['timeStamp'] = currentTime;\r\n    this.setLocalStorage(key, existingData);\r\n  },\r\n\r\n  fetchNonExpiredCachedData: function (key, expirationMS) {\r\n    var currentTimeStamp = new Date().getTime();\r\n    var cachedData = this.getLocalStorage(key);\r\n    if (cachedData && cachedData['timeStamp']) {\r\n      var cachedTimeStamp = cachedData['timeStamp'];\r\n      expirationMS = expirationMS || 30000; // default is 30s\r\n      if (currentTimeStamp - cachedTimeStamp < expirationMS) {\r\n        return cachedData;\r\n      } else {\r\n        // if cache is expired, remove it from localstorage\r\n        this.removeLocalStorage(key);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * Locale Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * OpenAPI spec version: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport * as url from 'url';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface ApiArrayResponseLanguage\r\n */\r\nexport interface ApiArrayResponseLanguage {\r\n    /**\r\n     * \r\n     * @type {Array<Language>}\r\n     * @memberof ApiArrayResponseLanguage\r\n     */\r\n    data?: Array<Language>;\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface ApiArrayResponseSupportedLocaleLocus\r\n */\r\nexport interface ApiArrayResponseSupportedLocaleLocus {\r\n    /**\r\n     * \r\n     * @type {Array<SupportedLocaleLocus>}\r\n     * @memberof ApiArrayResponseSupportedLocaleLocus\r\n     */\r\n    data?: Array<SupportedLocaleLocus>;\r\n}\r\n\r\n/**\r\n * Model for Country Regions\r\n * @export\r\n * @interface CountryRegion\r\n */\r\nexport interface CountryRegion {\r\n    /**\r\n     * id of country region\r\n     * @type {number}\r\n     * @memberof CountryRegion\r\n     */\r\n    id?: number;\r\n    /**\r\n     * name of country region. Example \\\"Afghanistan\\\"\r\n     * @type {string}\r\n     * @memberof CountryRegion\r\n     */\r\n    displayName?: string;\r\n}\r\n\r\n/**\r\n * Returns list of supported country/regions\r\n * @export\r\n * @interface CountryRegionListResponse\r\n */\r\nexport interface CountryRegionListResponse {\r\n    /**\r\n     * List of supported country/regions. Will be empty on error.\r\n     * @type {Array<CountryRegion>}\r\n     * @memberof CountryRegionListResponse\r\n     */\r\n    countryRegionList?: Array<CountryRegion>;\r\n}\r\n\r\n/**\r\n * Model for Language\r\n * @export\r\n * @interface Language\r\n */\r\nexport interface Language {\r\n    /**\r\n     * id of language\r\n     * @type {number}\r\n     * @memberof Language\r\n     */\r\n    id?: number;\r\n    /**\r\n     * name of language\r\n     * @type {string}\r\n     * @memberof Language\r\n     */\r\n    name?: string;\r\n    /**\r\n     * native name of language\r\n     * @type {string}\r\n     * @memberof Language\r\n     */\r\n    nativeName?: string;\r\n    /**\r\n     * language code of language\r\n     * @type {string}\r\n     * @memberof Language\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\n/**\r\n * Request entity to set Supported Locale for user\r\n * @export\r\n * @interface SetSupportedLocaleForUserRequest\r\n */\r\nexport interface SetSupportedLocaleForUserRequest {\r\n    /**\r\n     * SupportedLocale code\r\n     * @type {string}\r\n     * @memberof SetSupportedLocaleForUserRequest\r\n     */\r\n    supportedLocaleCode?: string;\r\n}\r\n\r\n/**\r\n * Request entity to set country for user\r\n * @export\r\n * @interface SetUserCountryRegionRequest\r\n */\r\nexport interface SetUserCountryRegionRequest {\r\n    /**\r\n     * Country id\r\n     * @type {number}\r\n     * @memberof SetUserCountryRegionRequest\r\n     */\r\n    countryId?: number;\r\n}\r\n\r\n/**\r\n * Tells the operation is successful or not\r\n * @export\r\n * @interface SuccessResponse\r\n */\r\nexport interface SuccessResponse {\r\n    /**\r\n     * Returns true on success otherwise false\r\n     * @type {boolean}\r\n     * @memberof SuccessResponse\r\n     */\r\n    success?: boolean;\r\n}\r\n\r\n/**\r\n * Model for Supported locale\r\n * @export\r\n * @interface SupportedLocale\r\n */\r\nexport interface SupportedLocale {\r\n    /**\r\n     * id of supported locale\r\n     * @type {number}\r\n     * @memberof SupportedLocale\r\n     */\r\n    id?: number;\r\n    /**\r\n     * locale of supported locale. Example \\\"en-us\\\"\r\n     * @type {string}\r\n     * @memberof SupportedLocale\r\n     */\r\n    locale?: string;\r\n    /**\r\n     * name of supported locale. Example \\\"English(US)\\\"\r\n     * @type {string}\r\n     * @memberof SupportedLocale\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Name of supported locale in native language. Example \\\"English\\\"\r\n     * @type {string}\r\n     * @memberof SupportedLocale\r\n     */\r\n    nativeName?: string;\r\n    /**\r\n     * \r\n     * @type {Language}\r\n     * @memberof SupportedLocale\r\n     */\r\n    language?: Language;\r\n}\r\n\r\n/**\r\n * Model for Supported locale with user locus information\r\n * @export\r\n * @interface SupportedLocaleLocus\r\n */\r\nexport interface SupportedLocaleLocus {\r\n    /**\r\n     * \r\n     * @type {SupportedLocale}\r\n     * @memberof SupportedLocaleLocus\r\n     */\r\n    locale?: SupportedLocale;\r\n    /**\r\n     * Is locale enabled for full experience\r\n     * @type {boolean}\r\n     * @memberof SupportedLocaleLocus\r\n     */\r\n    isEnabledForFullExperience?: boolean;\r\n    /**\r\n     * Is locale enabled for signup and login\r\n     * @type {boolean}\r\n     * @memberof SupportedLocaleLocus\r\n     */\r\n    isEnabledForSignupAndLogin?: boolean;\r\n}\r\n\r\n/**\r\n * Returns list of supported locales\r\n * @export\r\n * @interface SupportedLocalesResponse\r\n */\r\nexport interface SupportedLocalesResponse {\r\n    /**\r\n     * List of supported locales. Will be empty on error.\r\n     * @type {Array<SupportedLocale>}\r\n     * @memberof SupportedLocalesResponse\r\n     */\r\n    supportedLocales?: Array<SupportedLocale>;\r\n}\r\n\r\n/**\r\n * Returns user's Country/region\r\n * @export\r\n * @interface UserCountryRegionResponse\r\n */\r\nexport interface UserCountryRegionResponse {\r\n    /**\r\n     * \r\n     * @type {CountryRegion}\r\n     * @memberof UserCountryRegionResponse\r\n     */\r\n    userCountryRegion?: CountryRegion;\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface UserLocaleResponse\r\n */\r\nexport interface UserLocaleResponse {\r\n    /**\r\n     * \r\n     * @type {SupportedLocale}\r\n     * @memberof UserLocaleResponse\r\n     */\r\n    supportedLocale?: SupportedLocale;\r\n    /**\r\n     * \r\n     * @type {Language}\r\n     * @memberof UserLocaleResponse\r\n     */\r\n    nativeLanguage?: Language;\r\n}\r\n\r\n/**\r\n * Returns available {Roblox.Locale.Api.SupportedLocale} models.\r\n * @export\r\n * @interface UserLocalizationLocusLocalesResponse\r\n */\r\nexport interface UserLocalizationLocusLocalesResponse {\r\n    /**\r\n     * \r\n     * @type {SupportedLocale}\r\n     * @memberof UserLocalizationLocusLocalesResponse\r\n     */\r\n    signupAndLogin?: SupportedLocale;\r\n    /**\r\n     * \r\n     * @type {SupportedLocale}\r\n     * @memberof UserLocalizationLocusLocalesResponse\r\n     */\r\n    generalExperience?: SupportedLocale;\r\n    /**\r\n     * \r\n     * @type {SupportedLocale}\r\n     * @memberof UserLocalizationLocusLocalesResponse\r\n     */\r\n    ugc?: SupportedLocale;\r\n}\r\n\r\n\r\n/**\r\n * CountryRegionsApi - axios parameter creator\r\n * @export\r\n */\r\nexport const CountryRegionsApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of country regions sorted by Name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/country-regions`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user's country region.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/country-regions/user-country-region`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's countrt region.\r\n         * @param {SetUserCountryRegionRequest} userRequest Country ID that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionPatch(userRequest: SetUserCountryRegionRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'userRequest' is not null or undefined\r\n            if (userRequest === null || userRequest === undefined) {\r\n                throw new RequiredError('userRequest','Required parameter userRequest was null or undefined when calling v1CountryRegionsUserCountryRegionPatch.');\r\n            }\r\n            const localVarPath = `/v1/country-regions/user-country-region`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"SetUserCountryRegionRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRequest !== undefined ? userRequest : {}) : (userRequest || \"\");\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * CountryRegionsApi - functional programming interface\r\n * @export\r\n */\r\nexport const CountryRegionsApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of country regions sorted by Name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryRegionListResponse> {\r\n            const localVarAxiosArgs = CountryRegionsApiAxiosParamCreator(configuration).v1CountryRegionsGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user's country region.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCountryRegionResponse> {\r\n            const localVarAxiosArgs = CountryRegionsApiAxiosParamCreator(configuration).v1CountryRegionsUserCountryRegionGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's countrt region.\r\n         * @param {SetUserCountryRegionRequest} userRequest Country ID that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionPatch(userRequest: SetUserCountryRegionRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse> {\r\n            const localVarAxiosArgs = CountryRegionsApiAxiosParamCreator(configuration).v1CountryRegionsUserCountryRegionPatch(userRequest, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * CountryRegionsApi - factory interface\r\n * @export\r\n */\r\nexport const CountryRegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of country regions sorted by Name\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsGet(options?: any) {\r\n            return CountryRegionsApiFp(configuration).v1CountryRegionsGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user's country region.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionGet(options?: any) {\r\n            return CountryRegionsApiFp(configuration).v1CountryRegionsUserCountryRegionGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's countrt region.\r\n         * @param {SetUserCountryRegionRequest} userRequest Country ID that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1CountryRegionsUserCountryRegionPatch(userRequest: SetUserCountryRegionRequest, options?: any) {\r\n            return CountryRegionsApiFp(configuration).v1CountryRegionsUserCountryRegionPatch(userRequest, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * CountryRegionsApi - interface\r\n * @export\r\n * @interface CountryRegionsApi\r\n */\r\nexport interface CountryRegionsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get list of country regions sorted by Name\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApiInterface\r\n     */\r\n    v1CountryRegionsGet(options?: any): AxiosPromise<CountryRegionListResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets user's country region.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApiInterface\r\n     */\r\n    v1CountryRegionsUserCountryRegionGet(options?: any): AxiosPromise<UserCountryRegionResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Sets user's countrt region.\r\n     * @param {SetUserCountryRegionRequest} userRequest Country ID that needs to be set for user\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApiInterface\r\n     */\r\n    v1CountryRegionsUserCountryRegionPatch(userRequest: SetUserCountryRegionRequest, options?: any): AxiosPromise<SuccessResponse>;\r\n\r\n}\r\n\r\n/**\r\n * CountryRegionsApi - object-oriented interface\r\n * @export\r\n * @class CountryRegionsApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class CountryRegionsApi extends BaseAPI implements CountryRegionsApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get list of country regions sorted by Name\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApi\r\n     */\r\n    public v1CountryRegionsGet(options?: any) {\r\n        return CountryRegionsApiFp(this.configuration).v1CountryRegionsGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets user's country region.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApi\r\n     */\r\n    public v1CountryRegionsUserCountryRegionGet(options?: any) {\r\n        return CountryRegionsApiFp(this.configuration).v1CountryRegionsUserCountryRegionGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Sets user's countrt region.\r\n     * @param {SetUserCountryRegionRequest} userRequest Country ID that needs to be set for user\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof CountryRegionsApi\r\n     */\r\n    public v1CountryRegionsUserCountryRegionPatch(userRequest: SetUserCountryRegionRequest, options?: any) {\r\n        return CountryRegionsApiFp(this.configuration).v1CountryRegionsUserCountryRegionPatch(userRequest, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * LanguageApi - axios parameter creator\r\n * @export\r\n */\r\nexport const LanguageApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/languages`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox for user generated content.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesUserGeneratedContentGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/languages/user-generated-content`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LanguageApi - functional programming interface\r\n * @export\r\n */\r\nexport const LanguageApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiArrayResponseLanguage> {\r\n            const localVarAxiosArgs = LanguageApiAxiosParamCreator(configuration).v1LanguagesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox for user generated content.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesUserGeneratedContentGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiArrayResponseLanguage> {\r\n            const localVarAxiosArgs = LanguageApiAxiosParamCreator(configuration).v1LanguagesUserGeneratedContentGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LanguageApi - factory interface\r\n * @export\r\n */\r\nexport const LanguageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesGet(options?: any) {\r\n            return LanguageApiFp(configuration).v1LanguagesGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of languages available on Roblox for user generated content.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LanguagesUserGeneratedContentGet(options?: any) {\r\n            return LanguageApiFp(configuration).v1LanguagesUserGeneratedContentGet(options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * LanguageApi - interface\r\n * @export\r\n * @interface LanguageApi\r\n */\r\nexport interface LanguageApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the list of languages available on Roblox.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LanguageApiInterface\r\n     */\r\n    v1LanguagesGet(options?: any): AxiosPromise<ApiArrayResponseLanguage>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the list of languages available on Roblox for user generated content.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LanguageApiInterface\r\n     */\r\n    v1LanguagesUserGeneratedContentGet(options?: any): AxiosPromise<ApiArrayResponseLanguage>;\r\n\r\n}\r\n\r\n/**\r\n * LanguageApi - object-oriented interface\r\n * @export\r\n * @class LanguageApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class LanguageApi extends BaseAPI implements LanguageApiInterface {\r\n    /**\r\n     * \r\n     * @summary Gets the list of languages available on Roblox.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LanguageApi\r\n     */\r\n    public v1LanguagesGet(options?: any) {\r\n        return LanguageApiFp(this.configuration).v1LanguagesGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the list of languages available on Roblox for user generated content.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LanguageApi\r\n     */\r\n    public v1LanguagesUserGeneratedContentGet(options?: any) {\r\n        return LanguageApiFp(this.configuration).v1LanguagesUserGeneratedContentGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * LocaleApi - axios parameter creator\r\n * @export\r\n */\r\nexport const LocaleApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of Supported locales with user locus information.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/locales`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's supported locale.  Null supported locale will clear out user's supported locale (set users' supported locale to null)\r\n         * @param {SetSupportedLocaleForUserRequest} userRequest Supported locale code that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSetUserSupportedLocalePost(userRequest: SetSupportedLocaleForUserRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'userRequest' is not null or undefined\r\n            if (userRequest === null || userRequest === undefined) {\r\n                throw new RequiredError('userRequest','Required parameter userRequest was null or undefined when calling v1LocalesSetUserSupportedLocalePost.');\r\n            }\r\n            const localVarPath = `/v1/locales/set-user-supported-locale`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"SetSupportedLocaleForUserRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRequest !== undefined ? userRequest : {}) : (userRequest || \"\");\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get list of supported locales sorted by the Native Name property.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSupportedLocalesGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/locales/supported-locales`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user locale. If user is absent returns, locale from http request object.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocaleGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/locales/user-locale`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that  have been defined by the International team which need independent locale support.  If the user is null we will attempt to return the locales appropriate for the user's device language.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocalizationLocusSupportedLocalesGet(options: any = {}): RequestArgs {\r\n            const localVarPath = `/v1/locales/user-localization-locus-supported-locales`;\r\n            const localVarUrlObj = url.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: url.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocaleApi - functional programming interface\r\n * @export\r\n */\r\nexport const LocaleApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of Supported locales with user locus information.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiArrayResponseSupportedLocaleLocus> {\r\n            const localVarAxiosArgs = LocaleApiAxiosParamCreator(configuration).v1LocalesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's supported locale.  Null supported locale will clear out user's supported locale (set users' supported locale to null)\r\n         * @param {SetSupportedLocaleForUserRequest} userRequest Supported locale code that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSetUserSupportedLocalePost(userRequest: SetSupportedLocaleForUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse> {\r\n            const localVarAxiosArgs = LocaleApiAxiosParamCreator(configuration).v1LocalesSetUserSupportedLocalePost(userRequest, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get list of supported locales sorted by the Native Name property.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSupportedLocalesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedLocalesResponse> {\r\n            const localVarAxiosArgs = LocaleApiAxiosParamCreator(configuration).v1LocalesSupportedLocalesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user locale. If user is absent returns, locale from http request object.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocaleGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLocaleResponse> {\r\n            const localVarAxiosArgs = LocaleApiAxiosParamCreator(configuration).v1LocalesUserLocaleGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that  have been defined by the International team which need independent locale support.  If the user is null we will attempt to return the locales appropriate for the user's device language.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocalizationLocusSupportedLocalesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLocalizationLocusLocalesResponse> {\r\n            const localVarAxiosArgs = LocaleApiAxiosParamCreator(configuration).v1LocalesUserLocalizationLocusSupportedLocalesGet(options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * LocaleApi - factory interface\r\n * @export\r\n */\r\nexport const LocaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Get list of Supported locales with user locus information.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesGet(options?: any) {\r\n            return LocaleApiFp(configuration).v1LocalesGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Sets user's supported locale.  Null supported locale will clear out user's supported locale (set users' supported locale to null)\r\n         * @param {SetSupportedLocaleForUserRequest} userRequest Supported locale code that needs to be set for user\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSetUserSupportedLocalePost(userRequest: SetSupportedLocaleForUserRequest, options?: any) {\r\n            return LocaleApiFp(configuration).v1LocalesSetUserSupportedLocalePost(userRequest, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Get list of supported locales sorted by the Native Name property.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesSupportedLocalesGet(options?: any) {\r\n            return LocaleApiFp(configuration).v1LocalesSupportedLocalesGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets user locale. If user is absent returns, locale from http request object.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocaleGet(options?: any) {\r\n            return LocaleApiFp(configuration).v1LocalesUserLocaleGet(options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that  have been defined by the International team which need independent locale support.  If the user is null we will attempt to return the locales appropriate for the user's device language.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1LocalesUserLocalizationLocusSupportedLocalesGet(options?: any) {\r\n            return LocaleApiFp(configuration).v1LocalesUserLocalizationLocusSupportedLocalesGet(options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * LocaleApi - interface\r\n * @export\r\n * @interface LocaleApi\r\n */\r\nexport interface LocaleApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get list of Supported locales with user locus information.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApiInterface\r\n     */\r\n    v1LocalesGet(options?: any): AxiosPromise<ApiArrayResponseSupportedLocaleLocus>;\r\n\r\n    /**\r\n     * \r\n     * @summary Sets user's supported locale.  Null supported locale will clear out user's supported locale (set users' supported locale to null)\r\n     * @param {SetSupportedLocaleForUserRequest} userRequest Supported locale code that needs to be set for user\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApiInterface\r\n     */\r\n    v1LocalesSetUserSupportedLocalePost(userRequest: SetSupportedLocaleForUserRequest, options?: any): AxiosPromise<SuccessResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Get list of supported locales sorted by the Native Name property.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApiInterface\r\n     */\r\n    v1LocalesSupportedLocalesGet(options?: any): AxiosPromise<SupportedLocalesResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets user locale. If user is absent returns, locale from http request object.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApiInterface\r\n     */\r\n    v1LocalesUserLocaleGet(options?: any): AxiosPromise<UserLocaleResponse>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that  have been defined by the International team which need independent locale support.  If the user is null we will attempt to return the locales appropriate for the user's device language.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApiInterface\r\n     */\r\n    v1LocalesUserLocalizationLocusSupportedLocalesGet(options?: any): AxiosPromise<UserLocalizationLocusLocalesResponse>;\r\n\r\n}\r\n\r\n/**\r\n * LocaleApi - object-oriented interface\r\n * @export\r\n * @class LocaleApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class LocaleApi extends BaseAPI implements LocaleApiInterface {\r\n    /**\r\n     * \r\n     * @summary Get list of Supported locales with user locus information.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApi\r\n     */\r\n    public v1LocalesGet(options?: any) {\r\n        return LocaleApiFp(this.configuration).v1LocalesGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Sets user's supported locale.  Null supported locale will clear out user's supported locale (set users' supported locale to null)\r\n     * @param {SetSupportedLocaleForUserRequest} userRequest Supported locale code that needs to be set for user\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApi\r\n     */\r\n    public v1LocalesSetUserSupportedLocalePost(userRequest: SetSupportedLocaleForUserRequest, options?: any) {\r\n        return LocaleApiFp(this.configuration).v1LocalesSetUserSupportedLocalePost(userRequest, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Get list of supported locales sorted by the Native Name property.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApi\r\n     */\r\n    public v1LocalesSupportedLocalesGet(options?: any) {\r\n        return LocaleApiFp(this.configuration).v1LocalesSupportedLocalesGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets user locale. If user is absent returns, locale from http request object.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApi\r\n     */\r\n    public v1LocalesUserLocaleGet(options?: any) {\r\n        return LocaleApiFp(this.configuration).v1LocalesUserLocaleGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets each of a user's localization locus supported locales. A localization locus supported locale is a page (or group of pages) that  have been defined by the International team which need independent locale support.  If the user is null we will attempt to return the locales appropriate for the user's device language.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof LocaleApi\r\n     */\r\n    public v1LocalesUserLocalizationLocusSupportedLocalesGet(options?: any) {\r\n        return LocaleApiFp(this.configuration).v1LocalesUserLocalizationLocusSupportedLocalesGet(options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { AxiosPromise } from 'axios';\r\nimport localStorageService from '../../../services/localStorageService/localStorageService';\r\nimport \r\n    * as\r\n    LocaleProvider\r\n from '../../providers/locale/localeProvider';\r\n\r\nconst localeApiInstance = new LocaleProvider.LocaleApi();\r\n\r\nconst enum localeStorageCacheKeys {\r\n    getLocales = 'Roblox.Api.Locales.getLocales'\r\n};\r\n\r\nconst getLocales = (): AxiosPromise<LocaleProvider.ApiArrayResponseSupportedLocaleLocus> => {\r\n    return localeApiInstance.v1LocalesGet({ withCredentials: true });\r\n};\r\n\r\nconst getUserLocale = (): AxiosPromise<LocaleProvider.UserLocalizationLocusLocalesResponse> => {\r\n    return localeApiInstance.v1LocalesUserLocalizationLocusSupportedLocalesGet({ withCredentials: true });\r\n}\r\n\r\nconst setUserLocale = (localeCode: string): AxiosPromise<LocaleProvider.SuccessResponse> => {\r\n    const payload: LocaleProvider.SetSupportedLocaleForUserRequest = {\r\n        supportedLocaleCode: localeCode\r\n    };\r\n    return localeApiInstance.v1LocalesSetUserSupportedLocalePost(payload, { withCredentials: true });\r\n};\r\n\r\nconst requestDataFromCacheOrNetwork = (networkCaller: Function, localeStorageKey: string, cacheDurationInMs: number) => {\r\n    return new Promise((resolve, reject) => {\r\n        const localStorageData = localStorageService.fetchNonExpiredCachedData(localeStorageKey, cacheDurationInMs);\r\n        if(!localStorageData){\r\n            networkCaller().then((response: any) => {\r\n                localStorageService.saveDataByTimeStamp(localeStorageKey, response.data);\r\n                resolve(response.data);\r\n            }, (error: Error) => reject(error));\r\n        } else {\r\n            resolve(localStorageData.data);\r\n        }\r\n    });\r\n}\r\n\r\nconst getLocalesWithCache = (cacheDurationInMs: number) => {\r\n    return requestDataFromCacheOrNetwork(getLocales, localeStorageCacheKeys.getLocales, cacheDurationInMs);\r\n};\r\n\r\nexport default {\r\n    getLocales,\r\n    getUserLocale,\r\n    setUserLocale,\r\n    getLocalesWithCache\r\n};\r\n","import { AxiosPromise } from 'axios';\r\nimport\r\n    * as\r\n    GameInternationalizationProvider\r\n    from '../../providers/gameInternationalization/gameInternationalizationProvider';\r\n\r\nconst gameLocalizationStatusApiInstance = new GameInternationalizationProvider.GameLocalizationStatusApi();\r\nenum LanguageOrLocaleTypeEnum {\r\n    Language = 'Language',\r\n    Locale = 'Locale',\r\n};\r\n\r\nconst getTranslationProgress = (universeIds: number[], languageCode: string): AxiosPromise<GameInternationalizationProvider.RobloxGameInternationalizationApiGetTranslationCountsForLanguageOrLocaleResponse> =>{\r\n    return gameLocalizationStatusApiInstance.v1GameLocalizationStatusTranslationCountsForLanguageOrLocaleGet(universeIds, languageCode, LanguageOrLocaleTypeEnum.Language, { withCredentials: true });\r\n}\r\n\r\nexport default {\r\n    getTranslationProgress\r\n};","import { AxiosPromise } from 'axios';\r\nimport * as ThumbnailsProvider from '../../providers/thumbnails/thumbnailsProvider';\r\n\r\nconst assetsApiInstance = new ThumbnailsProvider.AssetsApi();\r\nconst bundlesApiInstance = new ThumbnailsProvider.BundlesApi();\r\nconst avatarApiInstance = new ThumbnailsProvider.AvatarApi();\r\nconst groupEmblemApiInstance = new ThumbnailsProvider.GroupEmblemApi();\r\nconst badgesApiInstance = new ThumbnailsProvider.BadgesApi();\r\nconst developerProductsApiInstance = new ThumbnailsProvider.DeveloperProductsApi();\r\nconst outfitApiInstance = new ThumbnailsProvider.OutfitsApi();\r\nconst batchApiInstance = new ThumbnailsProvider.BatchApi();\r\n\r\nconst getAssets = (\r\n  assetIds: Array<number>,\r\n  returnPolicy?: 'PlaceHolder' | 'AutoGenerated' | 'ForceAutoGenerated',\r\n  size?: '150x150' | '420x420' | '768x432',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return assetsApiInstance.v1AssetsGet(assetIds, returnPolicy, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\nconst getAvatars = (\r\n  userIds: Array<number>,\r\n  size?: '100x100' | '352x352' | '720x720',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return avatarApiInstance.v1UsersAvatarGet(userIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getAvatarHeadshots = (\r\n  userIds: Array<number>,\r\n  size?: '48x48' | '60x60' | '150x150',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return avatarApiInstance.v1UsersAvatarHeadshotGet(userIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getBundles = (\r\n  bundleIds: Array<number>,\r\n  size?: '150x150' | '420x420',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return bundlesApiInstance.v1BundlesThumbnailsGet(bundleIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getGroupIcons = (\r\n  groupIds: Array<number>,\r\n  size?: '150x150' | '420x420',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return groupEmblemApiInstance.v1GroupsIconsGet(groupIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getBadgeIcons = (\r\n  badgeIds: Array<number>,\r\n  size?: '150x150',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return badgesApiInstance.v1BadgesIconsGet(badgeIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getDeveloperProductIcons = (\r\n  developerProductIds: Array<number>,\r\n  size?: '150x150',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return developerProductsApiInstance.v1DeveloperProductsIconsGet(\r\n    developerProductIds,\r\n    size,\r\n    format,\r\n    isCircular,\r\n    { withCredentials: true }\r\n  );\r\n};\r\n\r\nconst getUserOutfits = (\r\n  userOutfitIds: Array<number>,\r\n  size?: '150x150' | '420x420',\r\n  format?: number,\r\n  isCircular?: boolean\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse\r\n> => {\r\n  return outfitApiInstance.v1UsersOutfitsGet(userOutfitIds, size, format, isCircular, {\r\n    withCredentials: true\r\n  });\r\n};\r\n\r\nconst getBatchThumbnails = (\r\n  requests: Array<ThumbnailsProvider.RobloxThumbnailsApisModelsThumbnailBatchRequest>\r\n): AxiosPromise<\r\n  ThumbnailsProvider.RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailBatchResponse\r\n> => {\r\n  return batchApiInstance.v1BatchPost(requests, { withCredentials: true });\r\n};\r\nexport default {\r\n  getAssets,\r\n  getAvatars,\r\n  getAvatarHeadshots,\r\n  getGroupIcons,\r\n  getBadgeIcons,\r\n  getDeveloperProductIcons,\r\n  getBundles,\r\n  getUserOutfits,\r\n  getBatchThumbnails\r\n};\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * TranslationRoles Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport { EnvironmentUrls } from 'Roblox';\r\nimport { Configuration } from \"./configuration\";\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\n\r\nexport const BASE_PATH = EnvironmentUrls.translationRolesApi.replace(/\\/+$/, \"\");\r\n\r\n/**\r\n *\r\n * @export\r\n */\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface RequestArgs\r\n */\r\nexport interface RequestArgs {\r\n    url: string;\r\n    options: any;\r\n}\r\n\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nexport class BaseAPI {\r\n    protected configuration: Configuration | undefined;\r\n\r\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @export\r\n * @class RequiredError\r\n * @extends {Error}\r\n */\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n","// tslint:disable\r\n/// <reference path=\"./custom.d.ts\" />\r\n/**\r\n * TranslationRoles Api v1\r\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\r\n *\r\n * The version of the OpenAPI document: v1\r\n * \r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nimport * as globalImportUrl from 'url';\r\nimport { Configuration } from './configuration';\r\nimport { httpClient as globalAxios } from '../../../http/http';\r\nimport { AxiosPromise, AxiosInstance } from 'axios';\r\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameLocalizationClientGameLocalizationRolesAssignee\r\n */\r\nexport interface RobloxGameLocalizationClientGameLocalizationRolesAssignee {\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxGameLocalizationClientGameLocalizationRolesAssignee\r\n     */\r\n    assigneeType?: RobloxGameLocalizationClientGameLocalizationRolesAssigneeAssigneeTypeEnum;\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameLocalizationClientGameLocalizationRolesAssignee\r\n     */\r\n    id?: number;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxGameLocalizationClientGameLocalizationRolesAssigneeAssigneeTypeEnum {\r\n    User = 'user',\r\n    Group = 'group',\r\n    GroupRole = 'groupRole'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment\r\n */\r\nexport interface RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment\r\n     */\r\n    gameId?: number;\r\n    /**\r\n     * \r\n     * @type {RobloxGameLocalizationClientGameLocalizationRolesAssignee}\r\n     * @memberof RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment\r\n     */\r\n    assignee?: RobloxGameLocalizationClientGameLocalizationRolesAssignee;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxTranslationRolesApiAssignee\r\n */\r\nexport interface RobloxTranslationRolesApiAssignee {\r\n    /**\r\n     * \r\n     * @type {number}\r\n     * @memberof RobloxTranslationRolesApiAssignee\r\n     */\r\n    id?: number;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiAssignee\r\n     */\r\n    name?: string;\r\n    /**\r\n     * \r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiAssignee\r\n     */\r\n    type?: RobloxTranslationRolesApiAssigneeTypeEnum;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxTranslationRolesApiAssigneeTypeEnum {\r\n    User = 'user',\r\n    Group = 'group',\r\n    GroupRole = 'groupRole'\r\n}\r\n\r\n/**\r\n * Response model containing a list of games and associated role assignment info for the requested user and role.\r\n * @export\r\n * @interface RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse\r\n */\r\nexport interface RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse {\r\n    /**\r\n     * List of games with associated role assignment info.\r\n     * @type {Array<RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment>}\r\n     * @memberof RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse\r\n     */\r\n    games?: Array<RobloxGameLocalizationClientGameLocalizationRolesGameLocalizationRoleAssignment>;\r\n    /**\r\n     * Cursor which can be used for navigating to previous page.\r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse\r\n     */\r\n    previousPageCursor?: string;\r\n    /**\r\n     * Cursor which can be used for navigating to next page.\r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse\r\n     */\r\n    nextPageCursor?: string;\r\n}\r\n/**\r\n * The request body for update role endpoints\r\n * @export\r\n * @interface RobloxTranslationRolesApiUpdateRoleRequest\r\n */\r\nexport interface RobloxTranslationRolesApiUpdateRoleRequest {\r\n    /**\r\n     * The id of the assignee\r\n     * @type {number}\r\n     * @memberof RobloxTranslationRolesApiUpdateRoleRequest\r\n     */\r\n    assigneeId?: number;\r\n    /**\r\n     * The type of the assignee\r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiUpdateRoleRequest\r\n     */\r\n    assigneeType?: RobloxTranslationRolesApiUpdateRoleRequestAssigneeTypeEnum;\r\n    /**\r\n     * The role to be assigned or revoked\r\n     * @type {string}\r\n     * @memberof RobloxTranslationRolesApiUpdateRoleRequest\r\n     */\r\n    role?: RobloxTranslationRolesApiUpdateRoleRequestRoleEnum;\r\n    /**\r\n     * To assign or to revoke\r\n     * @type {boolean}\r\n     * @memberof RobloxTranslationRolesApiUpdateRoleRequest\r\n     */\r\n    revoke?: boolean;\r\n}\r\n\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxTranslationRolesApiUpdateRoleRequestAssigneeTypeEnum {\r\n    User = 'user',\r\n    Group = 'group',\r\n    GroupRole = 'groupRole'\r\n}\r\n/**\r\n    * @export\r\n    * @enum {string}\r\n    */\r\nexport enum RobloxTranslationRolesApiUpdateRoleRequestRoleEnum {\r\n    Translator = 'translator'\r\n}\r\n\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseRobloxTranslationRolesApiAssignee\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseRobloxTranslationRolesApiAssignee {\r\n    /**\r\n     * \r\n     * @type {Array<RobloxTranslationRolesApiAssignee>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseRobloxTranslationRolesApiAssignee\r\n     */\r\n    data?: Array<RobloxTranslationRolesApiAssignee>;\r\n}\r\n/**\r\n * \r\n * @export\r\n * @interface RobloxWebWebAPIModelsApiArrayResponseSystemString\r\n */\r\nexport interface RobloxWebWebAPIModelsApiArrayResponseSystemString {\r\n    /**\r\n     * \r\n     * @type {Array<string>}\r\n     * @memberof RobloxWebWebAPIModelsApiArrayResponseSystemString\r\n     */\r\n    data?: Array<string>;\r\n}\r\n\r\n/**\r\n * GameLocalizationRolesApi - axios parameter creator\r\n * @export\r\n */\r\nexport const GameLocalizationRolesApiAxiosParamCreator = function (configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Retrieves the list of roles granted to current logged-in user\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-roles/games/{gameId}/current-user/roles`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Assigns or revokes a role\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxTranslationRolesApiUpdateRoleRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdPatch(gameId: number, request: RobloxTranslationRolesApiUpdateRoleRequest, options: any = {}): RequestArgs {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameLocalizationRolesGamesGameIdPatch.');\r\n            }\r\n            // verify required parameter 'request' is not null or undefined\r\n            if (request === null || request === undefined) {\r\n                throw new RequiredError('request','Required parameter request was null or undefined when calling v1GameLocalizationRolesGamesGameIdPatch.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-roles/games/{gameId}`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarHeaderParameter['Content-Type'] = 'application/json';\r\n\r\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n            const needsSerialization = (<any>\"RobloxTranslationRolesApiUpdateRoleRequest\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\r\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || \"\");\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets list of users assigned a specific role in a game.\r\n         * @param {number} gameId The id of the game\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId: number, role: 'translator', options: any = {}): RequestArgs {\r\n            // verify required parameter 'gameId' is not null or undefined\r\n            if (gameId === null || gameId === undefined) {\r\n                throw new RequiredError('gameId','Required parameter gameId was null or undefined when calling v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet.');\r\n            }\r\n            // verify required parameter 'role' is not null or undefined\r\n            if (role === null || role === undefined) {\r\n                throw new RequiredError('role','Required parameter role was null or undefined when calling v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-roles/games/{gameId}/roles/{role}/assignees`\r\n                .replace(`{${\"gameId\"}}`, encodeURIComponent(String(gameId)))\r\n                .replace(`{${\"role\"}}`, encodeURIComponent(String(role)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of games and associated role assignment info for the requested user and role.\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {string} [exclusiveStartKey] Part of pagination. Last primary key of returned items in previous operation.\r\n         * @param {number} [pageSize] Part of pagination. Maximum number of items that might be returned in the page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesRolesRoleCurrentUserGet(role: 'translator', exclusiveStartKey?: string, pageSize?: number, options: any = {}): RequestArgs {\r\n            // verify required parameter 'role' is not null or undefined\r\n            if (role === null || role === undefined) {\r\n                throw new RequiredError('role','Required parameter role was null or undefined when calling v1GameLocalizationRolesRolesRoleCurrentUserGet.');\r\n            }\r\n            const localVarPath = `/v1/game-localization-roles/roles/{role}/current-user`\r\n                .replace(`{${\"role\"}}`, encodeURIComponent(String(role)));\r\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\r\n            let baseOptions;\r\n            if (configuration) {\r\n                baseOptions = configuration.baseOptions;\r\n            }\r\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\r\n            const localVarHeaderParameter = {} as any;\r\n            const localVarQueryParameter = {} as any;\r\n\r\n            if (exclusiveStartKey !== undefined) {\r\n                localVarQueryParameter['exclusiveStartKey'] = exclusiveStartKey;\r\n            }\r\n\r\n            if (pageSize !== undefined) {\r\n                localVarQueryParameter['pageSize'] = pageSize;\r\n            }\r\n\r\n\r\n                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\r\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\r\n            delete localVarUrlObj.search;\r\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\r\n\r\n            return {\r\n                url: globalImportUrl.format(localVarUrlObj),\r\n                options: localVarRequestOptions,\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameLocalizationRolesApi - functional programming interface\r\n * @export\r\n */\r\nexport const GameLocalizationRolesApiFp = function(configuration?: Configuration) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Retrieves the list of roles granted to current logged-in user\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseSystemString> {\r\n            const localVarAxiosArgs = GameLocalizationRolesApiAxiosParamCreator(configuration).v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Assigns or revokes a role\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxTranslationRolesApiUpdateRoleRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdPatch(gameId: number, request: RobloxTranslationRolesApiUpdateRoleRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\r\n            const localVarAxiosArgs = GameLocalizationRolesApiAxiosParamCreator(configuration).v1GameLocalizationRolesGamesGameIdPatch(gameId, request, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets list of users assigned a specific role in a game.\r\n         * @param {number} gameId The id of the game\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId: number, role: 'translator', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxTranslationRolesApiAssignee> {\r\n            const localVarAxiosArgs = GameLocalizationRolesApiAxiosParamCreator(configuration).v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId, role, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of games and associated role assignment info for the requested user and role.\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {string} [exclusiveStartKey] Part of pagination. Last primary key of returned items in previous operation.\r\n         * @param {number} [pageSize] Part of pagination. Maximum number of items that might be returned in the page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesRolesRoleCurrentUserGet(role: 'translator', exclusiveStartKey?: string, pageSize?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse> {\r\n            const localVarAxiosArgs = GameLocalizationRolesApiAxiosParamCreator(configuration).v1GameLocalizationRolesRolesRoleCurrentUserGet(role, exclusiveStartKey, pageSize, options);\r\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\r\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\r\n                return axios.request(axiosRequestArgs);\r\n            };\r\n        },\r\n    }\r\n};\r\n\r\n/**\r\n * GameLocalizationRolesApi - factory interface\r\n * @export\r\n */\r\nexport const GameLocalizationRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\r\n    return {\r\n        /**\r\n         * \r\n         * @summary Retrieves the list of roles granted to current logged-in user\r\n         * @param {number} gameId The id of the game\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId: number, options?: any) {\r\n            return GameLocalizationRolesApiFp(configuration).v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Assigns or revokes a role\r\n         * @param {number} gameId The id of the game\r\n         * @param {RobloxTranslationRolesApiUpdateRoleRequest} request The request body\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdPatch(gameId: number, request: RobloxTranslationRolesApiUpdateRoleRequest, options?: any) {\r\n            return GameLocalizationRolesApiFp(configuration).v1GameLocalizationRolesGamesGameIdPatch(gameId, request, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets list of users assigned a specific role in a game.\r\n         * @param {number} gameId The id of the game\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId: number, role: 'translator', options?: any) {\r\n            return GameLocalizationRolesApiFp(configuration).v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId, role, options)(axios, basePath);\r\n        },\r\n        /**\r\n         * \r\n         * @summary Gets the list of games and associated role assignment info for the requested user and role.\r\n         * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n         * @param {string} [exclusiveStartKey] Part of pagination. Last primary key of returned items in previous operation.\r\n         * @param {number} [pageSize] Part of pagination. Maximum number of items that might be returned in the page.\r\n         * @param {*} [options] Override http request option.\r\n         * @throws {RequiredError}\r\n         */\r\n        v1GameLocalizationRolesRolesRoleCurrentUserGet(role: 'translator', exclusiveStartKey?: string, pageSize?: number, options?: any) {\r\n            return GameLocalizationRolesApiFp(configuration).v1GameLocalizationRolesRolesRoleCurrentUserGet(role, exclusiveStartKey, pageSize, options)(axios, basePath);\r\n        },\r\n    };\r\n};\r\n\r\n/**\r\n * GameLocalizationRolesApi - interface\r\n * @export\r\n * @interface GameLocalizationRolesApi\r\n */\r\nexport interface GameLocalizationRolesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Retrieves the list of roles granted to current logged-in user\r\n     * @param {number} gameId The id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApiInterface\r\n     */\r\n    v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId: number, options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseSystemString>;\r\n\r\n    /**\r\n     * \r\n     * @summary Assigns or revokes a role\r\n     * @param {number} gameId The id of the game\r\n     * @param {RobloxTranslationRolesApiUpdateRoleRequest} request The request body\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApiInterface\r\n     */\r\n    v1GameLocalizationRolesGamesGameIdPatch(gameId: number, request: RobloxTranslationRolesApiUpdateRoleRequest, options?: any): AxiosPromise<object>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets list of users assigned a specific role in a game.\r\n     * @param {number} gameId The id of the game\r\n     * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApiInterface\r\n     */\r\n    v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId: number, role: 'translator', options?: any): AxiosPromise<RobloxWebWebAPIModelsApiArrayResponseRobloxTranslationRolesApiAssignee>;\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the list of games and associated role assignment info for the requested user and role.\r\n     * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n     * @param {string} [exclusiveStartKey] Part of pagination. Last primary key of returned items in previous operation.\r\n     * @param {number} [pageSize] Part of pagination. Maximum number of items that might be returned in the page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApiInterface\r\n     */\r\n    v1GameLocalizationRolesRolesRoleCurrentUserGet(role: 'translator', exclusiveStartKey?: string, pageSize?: number, options?: any): AxiosPromise<RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse>;\r\n\r\n}\r\n\r\n/**\r\n * GameLocalizationRolesApi - object-oriented interface\r\n * @export\r\n * @class GameLocalizationRolesApi\r\n * @extends {BaseAPI}\r\n */\r\nexport class GameLocalizationRolesApi extends BaseAPI implements GameLocalizationRolesApiInterface {\r\n    /**\r\n     * \r\n     * @summary Retrieves the list of roles granted to current logged-in user\r\n     * @param {number} gameId The id of the game\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApi\r\n     */\r\n    public v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId: number, options?: any) {\r\n        return GameLocalizationRolesApiFp(this.configuration).v1GameLocalizationRolesGamesGameIdCurrentUserRolesGet(gameId, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Assigns or revokes a role\r\n     * @param {number} gameId The id of the game\r\n     * @param {RobloxTranslationRolesApiUpdateRoleRequest} request The request body\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApi\r\n     */\r\n    public v1GameLocalizationRolesGamesGameIdPatch(gameId: number, request: RobloxTranslationRolesApiUpdateRoleRequest, options?: any) {\r\n        return GameLocalizationRolesApiFp(this.configuration).v1GameLocalizationRolesGamesGameIdPatch(gameId, request, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets list of users assigned a specific role in a game.\r\n     * @param {number} gameId The id of the game\r\n     * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApi\r\n     */\r\n    public v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId: number, role: 'translator', options?: any) {\r\n        return GameLocalizationRolesApiFp(this.configuration).v1GameLocalizationRolesGamesGameIdRolesRoleAssigneesGet(gameId, role, options)(this.axios, this.basePath);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @summary Gets the list of games and associated role assignment info for the requested user and role.\r\n     * @param {'translator'} role The {Roblox.GameLocalization.Client.GameLocalizationRoles.GameLocalizationRoleType}\r\n     * @param {string} [exclusiveStartKey] Part of pagination. Last primary key of returned items in previous operation.\r\n     * @param {number} [pageSize] Part of pagination. Maximum number of items that might be returned in the page.\r\n     * @param {*} [options] Override http request option.\r\n     * @throws {RequiredError}\r\n     * @memberof GameLocalizationRolesApi\r\n     */\r\n    public v1GameLocalizationRolesRolesRoleCurrentUserGet(role: 'translator', exclusiveStartKey?: string, pageSize?: number, options?: any) {\r\n        return GameLocalizationRolesApiFp(this.configuration).v1GameLocalizationRolesRolesRoleCurrentUserGet(role, exclusiveStartKey, pageSize, options)(this.axios, this.basePath);\r\n    }\r\n\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport \r\n    * as\r\n    TranslationRolesProvider\r\n from '../../providers/translationRoles/translationRolesProvider';\r\n\r\nconst rolesApiInstance = new TranslationRolesProvider.GameLocalizationRolesApi();\r\n\r\nenum LocalizationRoles{\r\n    Translator = 'translator'\r\n};\r\nconst getGamesListForTranslator = (pageSize: number, exclusiveStartKey: string ): AxiosPromise<TranslationRolesProvider.RobloxTranslationRolesApiGetGameLocalizationRoleAssignmentsForUserResponse> => {\r\n    return rolesApiInstance.v1GameLocalizationRolesRolesRoleCurrentUserGet(LocalizationRoles.Translator, exclusiveStartKey, pageSize, { withCredentials: true });\r\n};\r\n\r\nexport default {\r\n    getGamesListForTranslator,\r\n};","export const DefaultProcessBatchWaitTime = 10;\r\n\r\nexport const DefaultExpirationWindowMS = 30000; // 30s\r\n\r\nexport const DefaultCooldown = 1000;\r\n\r\nexport const DefaultMaxRetryAttempts = 2;\r\n\r\nexport const DefaultBatchSize = 100;\r\n\r\nexport const DefaultConcurrentRequestCount = 1;\r\n\r\nexport const DefaultCacheProperties = {\r\n  useCache: false,\r\n  expirationWindowMS: DefaultExpirationWindowMS\r\n};\r\n\r\nexport enum BatchRequestError {\r\n  processFailure = 'processFailure',\r\n  unretriableFailure = 'unretriableFailure',\r\n  maxAttemptsReached = 'maxAttemptsReached'\r\n}\r\n\r\nexport type CacheObject = {\r\n  data: any;\r\n};\r\n\r\n// remove number after rollout\r\nexport type BatchIdSerializer<T> = (item: T | number) => string;\r\n\r\nexport type BatchItemProcessor<T> = (ids: Array<QueueItem<T>>) => Promise<ItemProcessorResult>;\r\n\r\nexport type FailureCooldownProcessor = (attempts: number) => number;\r\n\r\nexport type ItemExpirationProcessor = (key: string) => any;\r\n\r\nexport interface CacheProperties {\r\n  useCache?: boolean;\r\n  expirationWindowMS?: number;\r\n  refreshCache?: boolean;\r\n}\r\nexport interface BatchRequestProperties {\r\n  getFailureCooldown?: FailureCooldownProcessor;\r\n  maxRetryAttempts?: number;\r\n  batchSize: number;\r\n  processBatchWaitTime?: number;\r\n  getItemExpiration?: ItemExpirationProcessor;\r\n  cacheProperties?: CacheProperties;\r\n  debugMode?: boolean;\r\n  concurrentRequestCount?: number;\r\n}\r\n\r\nexport interface QueueItem<T> {\r\n  key: string;\r\n  itemId?: T | number; // deprecated remove after rollout\r\n  data: T;\r\n  retryAttempts: number;\r\n  queueAfter: number;\r\n  startTime: Date;\r\n  cacheProperties: CacheProperties;\r\n  resolve: QueueResolver;\r\n  reject: QueueRejecter;\r\n}\r\n\r\nexport type QueueResolver = (item: any) => any;\r\nexport type QueueRejecter = (error: BatchRequestError) => any;\r\n\r\nexport type ItemProcessorResult = { [key: string]: any };\r\n\r\nexport const CacheStorePrefix = 'CacheStore:BatchRequestProcessor:';\r\n","import { BatchRequestProperties, DefaultCooldown } from './batchRequestConstants';\r\nexport const createExponentialBackoffCooldown = (\r\n  minimumCooldown: number,\r\n  maximumCooldown: number\r\n) => {\r\n  return (attempts: number) => {\r\n    const exponentialCooldown = Math.pow(2, attempts - 1) * minimumCooldown;\r\n    return Math.min(maximumCooldown, exponentialCooldown);\r\n  };\r\n};\r\n\r\nexport const getFailureCooldown = (attempts: number, properties: BatchRequestProperties) => {\r\n  if (properties.getFailureCooldown) {\r\n    return properties.getFailureCooldown(attempts);\r\n  }\r\n\r\n  return DefaultCooldown;\r\n};\r\n","import localStorageService from '../../services/localStorageService/localStorageService';\r\nimport {\r\n  DefaultExpirationWindowMS,\r\n  CacheProperties,\r\n  CacheObject,\r\n  CacheStorePrefix\r\n} from './batchRequestConstants';\r\n\r\nclass CacheStore {\r\n  private store: Map<string, object> = new Map();\r\n  private useCache: boolean;\r\n  private expirationWindowMS: number;\r\n  private storeKeyPrefix: string;\r\n\r\n  constructor(useCache?: boolean, expirationWindowMS?: number) {\r\n    this.useCache = useCache || false;\r\n    this.expirationWindowMS = expirationWindowMS || DefaultExpirationWindowMS;\r\n    this.storeKeyPrefix = `${CacheStorePrefix}:`;\r\n  }\r\n\r\n  private getCacheKey(key: string) {\r\n    return `${this.storeKeyPrefix}${key}`;\r\n  }\r\n\r\n  public has(key: string, { useCache, expirationWindowMS }: CacheProperties) {\r\n    const storeKey = this.getCacheKey(key);\r\n    if ((useCache || this.useCache) && localStorage) {\r\n      return !!localStorageService.fetchNonExpiredCachedData(\r\n        storeKey,\r\n        expirationWindowMS || this.expirationWindowMS\r\n      );\r\n    }\r\n    return this.store.has(storeKey);\r\n  }\r\n\r\n  public set(key: string, data: object, { useCache }: CacheProperties) {\r\n    const storeKey = this.getCacheKey(key);\r\n    if ((useCache || this.useCache) && localStorage) {\r\n      localStorageService.saveDataByTimeStamp(storeKey, data);\r\n    }\r\n    this.store.set(storeKey, data);\r\n    return;\r\n  }\r\n\r\n  public get(key: string, { useCache, expirationWindowMS }: CacheProperties) {\r\n    const storeKey = this.getCacheKey(key);\r\n    let cache: CacheObject;\r\n    if ((useCache || this.useCache) && localStorage) {\r\n      cache = localStorageService.fetchNonExpiredCachedData(\r\n        storeKey,\r\n        expirationWindowMS || this.expirationWindowMS\r\n      );\r\n      return cache?.data;\r\n    }\r\n    // Sync up store with cache if it exists.\r\n    // All cached item also exist in store\r\n    // But not all store item exists in cache\r\n    if (cache) {\r\n      this.store.set(storeKey, cache?.data);\r\n    }\r\n    return this.store.get(storeKey);\r\n  }\r\n\r\n  public delete(key: string) {\r\n    const storeKey = this.getCacheKey(key);\r\n    if (localStorage) {\r\n      localStorageService.removeLocalStorage(storeKey);\r\n    }\r\n    this.store.delete(storeKey);\r\n  }\r\n\r\n  // clear everything in store\r\n  // and localstorage\r\n  public clear() {\r\n    this.store.clear();\r\n    if (localStorage) {\r\n      const keysToRemove = [];\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const localStorageKey = localStorage.key(i);\r\n        if (localStorageKey.includes(this.storeKeyPrefix)) {\r\n          keysToRemove.push(localStorageKey);\r\n        }\r\n      }\r\n      for (let k = 0; k < keysToRemove.length; k++) {\r\n        localStorage.removeItem(keysToRemove[k]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default CacheStore;\r\n","import {\r\n  BatchRequestProperties,\r\n  BatchIdSerializer,\r\n  BatchRequestError,\r\n  BatchItemProcessor,\r\n  QueueItem,\r\n  ItemProcessorResult,\r\n  ItemExpirationProcessor,\r\n  FailureCooldownProcessor,\r\n  DefaultCooldown,\r\n  CacheProperties\r\n} from './batchRequestConstants';\r\nimport CacheStore from './cacheStore';\r\n\r\nclass BatchRequestProcessor<T> {\r\n  private completeItems: CacheStore;\r\n\r\n  private requestQueue: Array<QueueItem<T>> = [];\r\n\r\n  private concurrentRequestCount = 1;\r\n\r\n  private isQueueActive = false;\r\n\r\n  private debug = false;\r\n\r\n  private processorId: number;\r\n\r\n  private processStartTime: number;\r\n\r\n  private processEndTime: number;\r\n\r\n  private maxRetryAttempts?: number;\r\n\r\n  private getItemExpiration?: ItemExpirationProcessor;\r\n\r\n  private batchSize: number;\r\n\r\n  private processBatchWaitTime?: number;\r\n\r\n  private getFailureCooldown?: FailureCooldownProcessor;\r\n\r\n  private cacheProperties?: CacheProperties;\r\n\r\n  private itemsProcessor: BatchItemProcessor<T>;\r\n\r\n  private itemsSerializer: BatchIdSerializer<T>;\r\n\r\n  constructor(\r\n    itemsProcessor: BatchItemProcessor<T>,\r\n    itemsSerializer: BatchIdSerializer<T>,\r\n    properties: BatchRequestProperties\r\n  ) {\r\n    const {\r\n      cacheProperties,\r\n      processBatchWaitTime,\r\n      batchSize,\r\n      maxRetryAttempts,\r\n      getItemExpiration,\r\n      getFailureCooldown,\r\n      debugMode,\r\n      concurrentRequestCount\r\n    } = properties;\r\n    const { useCache, expirationWindowMS } = cacheProperties;\r\n    this.cacheProperties = cacheProperties;\r\n    this.completeItems = new CacheStore(useCache, expirationWindowMS);\r\n    this.processBatchWaitTime = processBatchWaitTime;\r\n    this.batchSize = batchSize;\r\n    this.maxRetryAttempts = maxRetryAttempts;\r\n    this.getItemExpiration = getItemExpiration;\r\n    this.getFailureCooldown = getFailureCooldown;\r\n    this.itemsProcessor = itemsProcessor;\r\n    this.itemsSerializer = itemsSerializer;\r\n    this.debug = debugMode || false;\r\n    this.processorId = Date.now();\r\n    this.concurrentRequestCount = concurrentRequestCount;\r\n  }\r\n\r\n  handleBatchResult(batch: Array<QueueItem<T>>, error: BatchRequestError) {\r\n    let minimumCooldown = 0;\r\n    const currentDate = new Date().getTime();\r\n    batch.forEach((request: QueueItem<T>) => {\r\n      if (this.completeItems.has(request.key, request.cacheProperties)) {\r\n        const requestCompleteTime = new Date().getTime();\r\n        request.resolve({\r\n          ...this.completeItems.get(request.key, request.cacheProperties),\r\n          ...{ performance: { duration: requestCompleteTime - request.startTime.getTime() } }\r\n        });\r\n      } else if (this.maxRetryAttempts && error !== BatchRequestError.unretriableFailure) {\r\n        const itemCooldown = this.getFailureCooldown\r\n          ? this.getFailureCooldown(request.retryAttempts)\r\n          : DefaultCooldown;\r\n\r\n        if (minimumCooldown > 0) {\r\n          minimumCooldown = Math.min(minimumCooldown, itemCooldown);\r\n        } else {\r\n          minimumCooldown = itemCooldown;\r\n        }\r\n\r\n        if (++request.retryAttempts <= this.maxRetryAttempts) {\r\n          request.queueAfter = currentDate + itemCooldown;\r\n          // Put in front of the queue to make sure duplicate items\r\n          // don't get processed without the cooldown time.\r\n          this.requestQueue.unshift(request);\r\n        } else {\r\n          request.reject(BatchRequestError.maxAttemptsReached);\r\n        }\r\n      } else {\r\n        console.debug(error, request);\r\n        request.reject(error);\r\n      }\r\n    });\r\n\r\n    this.processEndTime = Date.now();\r\n\r\n    if (this.debug) {\r\n      console.debug(`${this.processorId}: process queue ended`, {\r\n        duration: this.processEndTime - this.processStartTime,\r\n        requestQueue: this.requestQueue,\r\n        minimumCooldown,\r\n        processBatchWaitTime: this.processBatchWaitTime\r\n      });\r\n    }\r\n\r\n    if (minimumCooldown > 0) {\r\n      setTimeout(() => this.processQueue(), minimumCooldown + this.processBatchWaitTime);\r\n    }\r\n    this.concurrentRequestCount += 1;\r\n    this.processQueue();\r\n  }\r\n\r\n  processQueue() {\r\n    if (this.concurrentRequestCount === 0 || this.isQueueActive) {\r\n      return;\r\n    }\r\n\r\n    this.processStartTime = Date.now();\r\n\r\n    const batch: Array<QueueItem<T>> = [];\r\n    const batchKeys: Map<string, QueueItem<T>> = new Map();\r\n    const requeueRequests: Array<QueueItem<T>> = [];\r\n\r\n    const currentDate = new Date().getTime();\r\n\r\n    this.isQueueActive = true;\r\n\r\n    while (batch.length < this.batchSize && this.requestQueue.length > 0) {\r\n      const request = this.requestQueue.shift();\r\n      if (request.queueAfter > currentDate) {\r\n        batchKeys.set(request.key, request);\r\n        requeueRequests.push(request);\r\n        continue;\r\n      } else if (this.completeItems.has(request.key, request.cacheProperties)) {\r\n        const requestCompleteTime = new Date().getTime();\r\n        request.resolve({\r\n          ...this.completeItems.get(request.key, request.cacheProperties),\r\n          ...{ performance: { duration: requestCompleteTime - request.startTime.getTime() } }\r\n        });\r\n      } else if (batchKeys.has(request.key)) {\r\n        // Requeue to make sure duplicate requests still get resolved once they're completed.\r\n        requeueRequests.push(request);\r\n      } else {\r\n        batchKeys.set(request.key, request);\r\n        batch.push(request);\r\n      }\r\n    }\r\n\r\n    this.requestQueue.push(...requeueRequests);\r\n    this.isQueueActive = false;\r\n\r\n    if (batch.length <= 0) {\r\n      return;\r\n    }\r\n    this.concurrentRequestCount -= 1;\r\n    this.processQueue();\r\n\r\n    if (this.debug) {\r\n      console.debug(`${this.processorId}: process queue start`, {\r\n        timeSinceLastStart: this.processEndTime ? this.processStartTime - this.processEndTime : 0,\r\n        startTime: this.processStartTime,\r\n        requestQueue: this.requestQueue,\r\n        batch: batch.map(e => e.key)\r\n      });\r\n    }\r\n\r\n    this.itemsProcessor(batch).then(\r\n      (data: ItemProcessorResult) => {\r\n        Object.entries(data).forEach(([key, value]) => {\r\n          const request = batchKeys.get(key);\r\n          this.saveCompleteItem(key, value, request?.cacheProperties);\r\n        });\r\n\r\n        this.handleBatchResult(batch, BatchRequestError.processFailure);\r\n      },\r\n      error => {\r\n        this.handleBatchResult(batch, error);\r\n      }\r\n    );\r\n  }\r\n\r\n  saveCompleteItem(key: string, data: any, cacheProperties?: CacheProperties) {\r\n    this.completeItems.set(key, data, cacheProperties || this.cacheProperties);\r\n    if (this.getItemExpiration) {\r\n      setTimeout(() => {\r\n        this.completeItems.delete(key);\r\n      }, this.getItemExpiration(key));\r\n    }\r\n  }\r\n\r\n  queueItem(item: T, key?: string, cacheProperties?: CacheProperties) {\r\n    return new Promise((resolve, reject) => {\r\n      this.requestQueue.push({\r\n        key: key || this.itemsSerializer(item),\r\n        itemId: item, // Deprecated remove after rollout\r\n        data: item,\r\n        retryAttempts: 0,\r\n        queueAfter: 0,\r\n        startTime: new Date(),\r\n        cacheProperties: cacheProperties || this.cacheProperties,\r\n        resolve,\r\n        reject\r\n      });\r\n      setTimeout(() => this.processQueue(), this.processBatchWaitTime);\r\n    });\r\n  }\r\n\r\n  invalidateItem(item: T, key?: string) {\r\n    const storeKey = key || this.itemsSerializer(item);\r\n    return this.completeItems.delete(storeKey);\r\n  }\r\n\r\n  clearCache() {\r\n    this.completeItems.clear();\r\n  }\r\n}\r\n\r\nexport default BatchRequestProcessor;\r\n","import {\r\n  BatchRequestProperties,\r\n  BatchIdSerializer,\r\n  BatchItemProcessor,\r\n  DefaultProcessBatchWaitTime,\r\n  DefaultMaxRetryAttempts,\r\n  DefaultCacheProperties,\r\n  DefaultConcurrentRequestCount\r\n} from './batchRequestConstants';\r\nimport { createExponentialBackoffCooldown } from './batchRequestUtil';\r\nimport BatchRequestProcessor from './batchRequestProcessor';\r\n\r\nexport class BatchRequestFactory<T> {\r\n  public readonly createExponentialBackoffCooldown = createExponentialBackoffCooldown;\r\n\r\n  createRequestProcessor(\r\n    itemsProcessor: BatchItemProcessor<T>,\r\n    itemSerializer: BatchIdSerializer<T>,\r\n    properties: BatchRequestProperties\r\n  ) {\r\n    if (!properties.processBatchWaitTime) {\r\n      properties.processBatchWaitTime = DefaultProcessBatchWaitTime;\r\n    }\r\n    if (!properties.maxRetryAttempts) {\r\n      properties.maxRetryAttempts = DefaultMaxRetryAttempts;\r\n    }\r\n    if (!properties.cacheProperties) {\r\n      properties.cacheProperties = DefaultCacheProperties;\r\n    }\r\n    if (!properties.concurrentRequestCount) {\r\n      properties.concurrentRequestCount = DefaultConcurrentRequestCount;\r\n    }\r\n    return new BatchRequestProcessor(itemsProcessor, itemSerializer, properties);\r\n  }\r\n}\r\n\r\nexport default new BatchRequestFactory(); // remove after rollout\r\n","import { EnvironmentUrls } from 'Roblox';\r\n\r\nconst { friendsApi, presenceApi, usersApi } = EnvironmentUrls;\r\n\r\nexport type UserDataRequest = {\r\n  userId: number;\r\n  isGuest: boolean;\r\n  cursor?: number;\r\n  sortOrder?: string;\r\n  limit?: number;\r\n};\r\n\r\nexport type UserPresence = { userId: number };\r\nexport type PresenceObject = { data: { userPresences: Array<UserPresence> } };\r\nexport type FriendObject = { id: number; profileUrl: string; presence: object };\r\nexport type UserObject = { id: number };\r\n\r\nexport type FriendsRes = {\r\n  data: {\r\n    data: Array<FriendObject>;\r\n    previousPageCursor: string;\r\n    nextPageCursor: string;\r\n  };\r\n};\r\nexport type FriendsData = { [key: string]: FriendObject };\r\nexport type FriendResult = {\r\n  userData: Array<FriendObject>;\r\n  prevCursor?: string;\r\n  nextCursor?: string;\r\n};\r\n\r\nexport type UserQueueItem = {\r\n  userId: number;\r\n};\r\n\r\nexport const getFriendsApiUrl = (userId: number, name: string) =>\r\n  `${friendsApi}/v1/users/${userId}/${name}`;\r\n\r\nexport const getFriendsRequestUrl = () => `${friendsApi}/v1/my/friends/requests`;\r\n\r\nexport const getUserPresenceUrl = () => `${presenceApi}/v1/presence/users`;\r\n\r\nexport const getUsersUrl = () => `${usersApi}/v1/users`;\r\nexport enum MethodType {\r\n  Friends = 'friends',\r\n  Followers = 'followers',\r\n  Followings = 'followings',\r\n  Requests = 'requests'\r\n}\r\n\r\nexport const DefaultExpirationWindowMS = 30000; // 30s\r\n\r\nexport const DefaultUserBatchSize = 100;\r\n\r\nexport const DefaultUserProcessBatchWaitTime = 1000;\r\n","import {\r\n  getFriendsApiUrl,\r\n  getFriendsRequestUrl,\r\n  getUserPresenceUrl,\r\n  UserDataRequest,\r\n  PresenceObject,\r\n  FriendObject,\r\n  FriendsData,\r\n  MethodType,\r\n  UserPresence\r\n} from './userDataConstants';\r\n\r\nexport const populateFriendsData = (friends: Array<FriendObject>) => {\r\n  const friendsData: FriendsData = {};\r\n  friends.forEach(friend => {\r\n    friendsData[friend.id] = friend;\r\n    friendsData[friend.id].profileUrl = `/users/${friend.id}/profile`;\r\n    friendsData[friend.id].presence = {};\r\n  });\r\n  return friendsData;\r\n};\r\n\r\nexport const populatePresenceData = (friendsData: FriendsData, presenceData: PresenceObject) => {\r\n  if (presenceData?.data?.userPresences?.length > 0) {\r\n    const {\r\n      data: { userPresences }\r\n    } = presenceData;\r\n\r\n    const presences = [...userPresences];\r\n    presences.forEach((userPresence: UserPresence) => {\r\n      friendsData[userPresence.userId].presence = userPresence;\r\n    });\r\n  }\r\n  return friendsData;\r\n};\r\n\r\nexport const getFriendsUrlConfig = (methodName: MethodType, userId: number) => {\r\n  let url = getFriendsApiUrl(userId, methodName);\r\n  if (methodName === MethodType.Requests) {\r\n    url = getFriendsRequestUrl();\r\n  }\r\n  return {\r\n    url,\r\n    retryable: true,\r\n    withCredentials: true\r\n  };\r\n};\r\n\r\nexport const getFriendsParams = ({ cursor, sortOrder, limit }: UserDataRequest) => {\r\n  const params = {};\r\n  if (cursor) {\r\n    Object.assign(params, { cursor });\r\n  }\r\n  if (sortOrder) {\r\n    Object.assign(params, { sortOrder });\r\n  }\r\n  if (limit) {\r\n    Object.assign(params, { limit });\r\n  }\r\n  return params;\r\n};\r\n\r\nexport const getPresenceUrlConfig = () => {\r\n  return {\r\n    url: getUserPresenceUrl(),\r\n    retryable: false,\r\n    withCredentials: true\r\n  };\r\n};\r\n","import {\r\n  BatchRequestProcessor,\r\n  BatchItemProcessor,\r\n  BatchIdSerializer,\r\n  QueueItem,\r\n  BatchRequestError\r\n} from 'core-utilities';\r\nimport { BatchRequestFactory } from '../../../services/batchRequestService/batchRequestFactory';\r\nimport { httpService } from '../../../http/http';\r\nimport { CacheProperties } from '../../../services/batchRequestService/batchRequestConstants';\r\nimport {\r\n  populateFriendsData,\r\n  populatePresenceData,\r\n  getFriendsUrlConfig,\r\n  getPresenceUrlConfig,\r\n  getFriendsParams\r\n} from './userStoreUtil';\r\n\r\nimport {\r\n  UserDataRequest,\r\n  FriendsRes,\r\n  FriendResult,\r\n  MethodType,\r\n  PresenceObject,\r\n  UserQueueItem\r\n} from './userDataConstants';\r\nimport userBatchRequestProcessor from './userBatchRequestProcessor';\r\n\r\nconst batchRequestFactory = new BatchRequestFactory<UserDataRequest>();\r\n\r\nconst processors: Map<string, BatchRequestProcessor<UserDataRequest>> = new Map<\r\n  string,\r\n  BatchRequestProcessor<UserDataRequest>\r\n>();\r\n\r\nconst getIdSerializer = (\r\n  methodName: MethodType,\r\n  { userId, cursor, sortOrder, limit }: UserDataRequest\r\n) => `${methodName}:${userId}:${cursor}:${sortOrder}:${limit}`;\r\n\r\nconst getUserDataRequestProcessor = (\r\n  methodName: string,\r\n  itemProcessor: BatchItemProcessor<UserDataRequest>,\r\n  idSerializer: BatchIdSerializer<UserDataRequest>\r\n) => {\r\n  if (processors.has(methodName)) return processors.get(methodName);\r\n  const processor = batchRequestFactory.createRequestProcessor(itemProcessor, idSerializer, {\r\n    batchSize: 1\r\n  });\r\n  processors.set(methodName, processor);\r\n  return processor;\r\n};\r\n\r\nconst getItemProcessor = (methodName: MethodType) => {\r\n  return ([{ key, data: userDataRequest }]: QueueItem<UserDataRequest>[]) => {\r\n    const { userId, isGuest } = userDataRequest;\r\n    const urlConfig = getFriendsUrlConfig(methodName, userId);\r\n    const params = getFriendsParams(userDataRequest);\r\n\r\n    return httpService\r\n      .get(urlConfig, params)\r\n      .then((friendsRes: FriendsRes) => {\r\n        const results: { [key: string]: FriendResult } = {};\r\n        if (!friendsRes?.data) {\r\n          results[key] = { userData: [] };\r\n          return results;\r\n        }\r\n\r\n        const {\r\n          data: { data: userData, previousPageCursor: prevCursor, nextPageCursor: nextCursor }\r\n        } = friendsRes;\r\n        const friendsData = populateFriendsData(userData);\r\n\r\n        if (isGuest) {\r\n          results[key] = { userData, prevCursor, nextCursor };\r\n          return results;\r\n        }\r\n\r\n        const presenceUrlConfig = getPresenceUrlConfig();\r\n\r\n        const userIds = Object.keys(friendsData).map(id => parseInt(id, 10));\r\n        return httpService\r\n          .post(presenceUrlConfig, { userIds })\r\n          .then((presenceData: PresenceObject) => {\r\n            populatePresenceData(friendsData, presenceData);\r\n            results[key] = { userData, prevCursor, nextCursor };\r\n            return results;\r\n          })\r\n          .catch((error: BatchRequestError) => {\r\n            // do not retry presence call if failed\r\n            console.debug(error);\r\n            results[key] = { userData, prevCursor, nextCursor };\r\n            return results;\r\n          });\r\n      })\r\n      .catch((error: BatchRequestError) => {\r\n        // request will be retried if not successful\r\n        console.debug(error);\r\n        return {};\r\n      });\r\n  };\r\n};\r\n\r\nconst generateUserDataStoreMethod = (methodName: MethodType) => {\r\n  const userDataProcessor = getUserDataRequestProcessor(\r\n    methodName,\r\n    getItemProcessor(methodName),\r\n    ({ userId }: UserDataRequest) => userId?.toString()\r\n  );\r\n\r\n  return (userDataRequest: UserDataRequest, cacheProperties?: CacheProperties) => {\r\n    const requestKey = getIdSerializer(methodName, userDataRequest);\r\n\r\n    if (cacheProperties?.refreshCache) {\r\n      userDataProcessor.invalidateItem(userDataRequest, requestKey);\r\n    }\r\n    return userDataProcessor.queueItem(userDataRequest, requestKey, cacheProperties);\r\n  };\r\n};\r\n\r\nconst clearUserDataStoreCache = () => {\r\n  processors.forEach((processor: BatchRequestProcessor<UserQueueItem>) => {\r\n    processor.clearCache();\r\n  });\r\n};\r\n\r\n// @ts-ignore\r\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\nexport default window.CoreRobloxUtilities?.dataStores?.userDataStoreV2 || {\r\n  getFriends: generateUserDataStoreMethod(MethodType.Friends),\r\n  getFollowers: generateUserDataStoreMethod(MethodType.Followers),\r\n  getFollowings: generateUserDataStoreMethod(MethodType.Followings),\r\n  getFriendsRequests: generateUserDataStoreMethod(MethodType.Requests),\r\n  getUser: (userId: number) => userBatchRequestProcessor.queueItem({ userId }),\r\n  clearUserDataStoreCache\r\n};\r\n","import url from 'url';\r\nimport queryString from 'query-string';\r\nimport { Endpoints } from 'Roblox';\r\n\r\nconst parseQueryString = (searchString = window.location.search) => queryString.parse(searchString);\r\n\r\nconst getQueryParam = paramName => parseQueryString()[paramName];\r\n\r\nconst composeQueryString = (queryParams = {}) => queryString.stringify(queryParams);\r\n\r\nconst getAbsoluteUrl = targetUrl => {\r\n  if (Endpoints) {\r\n    return Endpoints.getAbsoluteUrl(targetUrl);\r\n  }\r\n  return targetUrl;\r\n};\r\n\r\nconst getGameDetailReferralUrls = queryParams => {\r\n  return getAbsoluteUrl(`/games/refer?${composeQueryString(queryParams)}`);\r\n};\r\n\r\nconst getUrlWithQueries = (path, queryParams) => {\r\n  return getAbsoluteUrl(`${path}?${composeQueryString(queryParams)}`);\r\n};\r\n\r\n// Note: Docs for `url` and `querystring` modules can be found on\r\n// url - https://github.com/defunctzombie/node-url\r\n// querystring - https://github.com/sindresorhus/query-string\r\nexport default {\r\n  getAbsoluteUrl,\r\n  parseQueryString,\r\n  composeQueryString,\r\n  getQueryParam,\r\n  formatUrl: url.format,\r\n  resolveUrl: url.resolve,\r\n  parseUrl: url.parse,\r\n  parseUrlAndQueryString: queryString.parseUrl,\r\n  extractQueryString: queryString.extract,\r\n  getGameDetailReferralUrls,\r\n  getUrlWithQueries\r\n};\r\n","import httpService from '../../../http/implementations/httpService';\r\nimport { BatchRequestFactory } from '../../../services/batchRequestService/batchRequestFactory';\r\nimport {\r\n  getUsersUrl,\r\n  DefaultUserBatchSize,\r\n  DefaultUserProcessBatchWaitTime,\r\n  UserObject,\r\n  UserQueueItem\r\n} from './userDataConstants';\r\n\r\nconst batchRequestFactory = new BatchRequestFactory<UserQueueItem>();\r\n\r\nconst userBatchRequestProcessor = batchRequestFactory.createRequestProcessor(\r\n  items => {\r\n    const urlConfig = {\r\n      url: getUsersUrl(),\r\n      retryable: true,\r\n      withCredentials: true\r\n    };\r\n    const userIds = items.map(({ data: { userId } }) => userId);\r\n    return httpService\r\n      .post(urlConfig, { userIds, excludeBannedUsers: true })\r\n      .then(({ data: { data: users } }) => {\r\n        const results: { [key: number]: UserObject } = {};\r\n        users.forEach((user: UserObject) => {\r\n          results[user.id] = user;\r\n        });\r\n        return results;\r\n      });\r\n  },\r\n  ({ userId }: UserQueueItem) => userId?.toString(),\r\n  {\r\n    batchSize: DefaultUserBatchSize,\r\n    processBatchWaitTime: DefaultUserProcessBatchWaitTime\r\n  }\r\n);\r\n\r\nexport default userBatchRequestProcessor;\r\n","import catalogDataStore from './catalog/catalogDataStore';\r\nimport gameAutoLocalizationDataStore from './gameAutoLocalization/gameAutoLocalizationDataStore';\r\nimport gameAutomaticTranslationDataStore from './gameAutomaticTranslation/gameAutomaticTranslationDataStore';\r\nimport gameLanguagesDataStore from './gameLanguages/gameLanguagesDataStore';\r\nimport gameSourceLanguageDataStore from './gameSourceLanguage/gameSourceLanguageDataStore';\r\nimport gameThumbnailsDataStore from './thumbnails/gameThumbnailsDataStore';\r\nimport gameTranslationAnalyticsDataStore from './gameTranslationAnalytics/gameTranslationAnalyticsDataStore';\r\nimport gamesDataStore from './games/gamesDataStore';\r\nimport inventoryDataStore from './inventory/inventoryDataStore';\r\nimport localeDataStore from './locale/localeDataStore';\r\nimport thumbnailsDataStore from './thumbnails/thumbnailsDataStore';\r\nimport translationProgressDataStore from './translationProgress/translationProgressDataStore';\r\nimport translationRolesDataStore from './translationRoles/translationRolesDataStore';\r\nimport userDataStore from './userData/userDataStore';\r\n\r\n// please keep this alphabetical\r\nexport default {\r\n  catalogDataStore,\r\n  gameAutoLocalizationDataStore,\r\n  gameAutomaticTranslationDataStore,\r\n  gameLanguagesDataStore,\r\n  gameSourceLanguageDataStore,\r\n  gameThumbnailsDataStore,\r\n  gameTranslationAnalyticsDataStore,\r\n  gamesDataStore,\r\n  inventoryDataStore,\r\n  localeDataStore,\r\n  thumbnailsDataStore,\r\n  translationProgressDataStore,\r\n  translationRolesDataStore,\r\n  userDataStore,\r\n  // remove after release friends\r\n  userDataStoreV2: userDataStore\r\n};\r\n","import { EnvironmentUrls } from 'Roblox';\r\nimport urlService from '../../../services/urlService';\r\nimport IEntityUrl from '../interfaces/IEntityUrl';\r\n\r\nabstract class EntityUrl implements IEntityUrl {\r\n  // Each inheriting class for an entity should implement this abstract method\r\n  abstract getRelativePath(id: number): string;\r\n\r\n  abstract getReferralPath(): string;\r\n\r\n  getAbsoluteUrl(id: number): string | null {\r\n    if (typeof id !== 'number') {\r\n      return null;\r\n    }\r\n\r\n    const baseUrl = EnvironmentUrls.websiteUrl;\r\n    const relativePath = urlService.formatUrl({ pathname: this.getRelativePath(id) });\r\n    return urlService.resolveUrl(baseUrl, relativePath);\r\n  }\r\n\r\n  navigateTo(id: number): void {\r\n    const url = this.getAbsoluteUrl(id);\r\n    if (url) {\r\n      window.location.assign(url);\r\n    }\r\n  }\r\n}\r\n\r\nexport default EntityUrl;\r\n","import { seoName } from 'core-utilities';\r\nimport EntityUrl from '../EntityUrl';\r\n\r\nclass GameUrl extends EntityUrl {\r\n  getRelativePath(id: number): string {\r\n    return `/games/${id}`;\r\n  }\r\n\r\n  getReferralPath(): string {\r\n    return '/games/refer';\r\n  }\r\n}\r\n\r\nexport default GameUrl;\r\n","import EntityUrl from '../EntityUrl';\r\n\r\nclass GroupUrl extends EntityUrl {\r\n  getRelativePath(id: number): string {\r\n    return `/groups/${id}`;\r\n  }\r\n\r\n  getReferralPath(): string {\r\n    return '/groups/refer';\r\n  }\r\n}\r\n\r\nexport default GroupUrl;\r\n","import EntityUrl from '../EntityUrl';\r\n\r\nclass UserUrl extends EntityUrl {\r\n  getRelativePath(id: number): string {\r\n    return `/users/${id}/profile`;\r\n  }\r\n\r\n  getReferralPath(): string {\r\n    return '/users/refer';\r\n  }\r\n}\r\n\r\nexport default UserUrl;\r\n","import { EventStream, GamePlayEvents } from 'Roblox';\r\nimport { DEFAULT_TARGET_TYPES, EVENT_TYPES } from './eventStreamConstants';\r\n\r\nconst isEventStreamValid = () => typeof EventStream !== 'undefined';\r\n\r\nconst targetTypes = {\r\n  ...DEFAULT_TARGET_TYPES,\r\n  ...(isEventStreamValid() ? EventStream.TargetTypes : {})\r\n};\r\n\r\nconst sendEventWithTarget = (eventName, context, additionalProperties, targetType) => {\r\n  if (isEventStreamValid() && EventStream.SendEventWithTarget) {\r\n    const validatedTargetType = Object.values(targetTypes).includes(targetType)\r\n      ? targetType\r\n      : targetTypes.WWW;\r\n\r\n    EventStream.SendEventWithTarget(eventName, context, additionalProperties, validatedTargetType);\r\n  }\r\n};\r\n\r\nconst sendEvent = (event, additionalParams) => {\r\n  const { name, type, context, requiredParams } = event;\r\n  const eventParams = {\r\n    btn: name,\r\n    ...additionalParams\r\n  };\r\n\r\n  if (Array.isArray(requiredParams)) {\r\n    requiredParams.forEach(requiredParam => {\r\n      if (!Object.prototype.hasOwnProperty.call(eventParams, requiredParam)) {\r\n        // eslint-disable-next-line no-console\r\n        console.info(`A required event parameter '${requiredParam}' is not provided`);\r\n      }\r\n    });\r\n  }\r\n\r\n  sendEventWithTarget(type, context, eventParams);\r\n};\r\n\r\nconst sendGamePlayEvent = (context, placeId, referrerId) => {\r\n  if (GamePlayEvents && GamePlayEvents.SendGamePlayIntent) {\r\n    GamePlayEvents.SendGamePlayIntent(context, placeId, referrerId);\r\n  }\r\n};\r\n\r\nexport default {\r\n  eventTypes: EVENT_TYPES,\r\n  targetTypes,\r\n  sendEvent,\r\n  sendEventWithTarget,\r\n  sendGamePlayEvent\r\n};\r\n","import GameUrl from './implementations/entities/GameUrl';\r\nimport GroupUrl from './implementations/entities/GroupUrl';\r\nimport UserUrl from './implementations/entities/UserUrl';\r\n\r\nexport default {\r\n  game: new GameUrl(),\r\n  group: new GroupUrl(),\r\n  user: new UserUrl()\r\n};\r\n","export const DEFAULT_TARGET_TYPES = {\r\n  DEFAULT: 0,\r\n  WWW: 1,\r\n  STUDIO: 2,\r\n  DIAGNOSTIC: 3\r\n};\r\n\r\nexport const EVENT_TYPES = {\r\n  formInteraction: 'formInteraction',\r\n  modalAction: 'modalAction',\r\n  pageLoad: 'pageLoad'\r\n};\r\n","import { Hybrid } from 'Roblox';\r\n\r\nconst {\r\n    Chat,\r\n    Navigation,\r\n    Overlay,\r\n    Game,\r\n    Localization\r\n} = Hybrid || {};\r\n\r\nfunction getCallback(callback) {\r\n    if (typeof callback === 'undefined') {\r\n        return function () { };\r\n    }\r\n    return callback;\r\n}\r\n\r\nexport default {\r\n    startChatConversation: function (params, callback) { // Android\r\n        if (Chat) {\r\n            Chat.startChatConversation(params, getCallback(callback));\r\n        }\r\n    },\r\n\r\n    startWebChatConversation: function (params, callback) { // iOS\r\n        if (Navigation) {\r\n            Navigation.startWebChatConversation(params, getCallback(callback));\r\n        }\r\n    },\r\n\r\n    navigateToFeature: function (params, callback) {\r\n        if (Navigation) {\r\n            Navigation.navigateToFeature(params, getCallback(callback));\r\n        }\r\n    },\r\n\r\n    openUserProfile: function (params, callback) {\r\n        if (Navigation) {\r\n            Navigation.openUserProfile(params, getCallback(callback));\r\n        }\r\n    },\r\n\r\n    close: function (callback) {\r\n        if (Overlay) {\r\n            Overlay.close(getCallback(callback));\r\n        }\r\n    },\r\n\r\n    launchGame: function (params, callback) {\r\n        if (Game) {\r\n            Game.launchGame(params, getCallback(callback));\r\n        }\r\n    },\r\n\r\n    localization: function(localeCode, callback) {\r\n        if (Localization && Localization.languageChangeTrigger) {\r\n            Localization.languageChangeTrigger(localeCode, getCallback(callback));\r\n        }\r\n    }\r\n}","import { GameLauncher } from 'Roblox';\r\nimport eventStreamService from '../eventStreamService/eventStreamService';\r\n\r\nconst sendEventStream = eventStreamProperties => {\r\n  const { eventName } = eventStreamProperties;\r\n  const { ctx } = eventStreamProperties;\r\n  const additionalProperties = eventStreamProperties.properties;\r\n  eventStreamService.sendEventWithTarget(eventName, ctx, additionalProperties);\r\n};\r\n\r\nconst sendGamePlayIntentEvent = (ctx, rootPlaceId) => {\r\n  eventStreamService.sendGamePlayEvent(ctx, rootPlaceId);\r\n};\r\n\r\nconst joinGameInstance = (placeId, gameInstanceId) => {\r\n  GameLauncher.joinGameInstance(placeId, gameInstanceId, true, true);\r\n};\r\n\r\nconst followPlayer = playerId => {\r\n  GameLauncher.followPlayerIntoGame(playerId);\r\n};\r\n\r\nconst joinMultiPlayer = placeId => {\r\n  GameLauncher.joinMultiplayerGame(placeId);\r\n};\r\n\r\nconst buildPlayGameProperties = (rootPlaceId, placeId, gameInstanceId, playerId) => {\r\n  return {\r\n    rootPlaceId,\r\n    placeId,\r\n    gameInstanceId,\r\n    playerId\r\n  };\r\n};\r\n\r\nconst launchGame = (playGameProperties, eventStreamProperties) => {\r\n  if (GameLauncher) {\r\n    const currentESProperties = eventStreamProperties;\r\n    const { rootPlaceId } = playGameProperties;\r\n    const { placeId } = playGameProperties;\r\n    const { gameInstanceId } = playGameProperties;\r\n    const { playerId } = playGameProperties;\r\n    if (placeId === rootPlaceId && gameInstanceId) {\r\n      currentESProperties.properties.gameInstanceId = gameInstanceId;\r\n      sendEventStream(currentESProperties);\r\n      sendGamePlayIntentEvent(currentESProperties.gamePlayIntentEventCtx, rootPlaceId);\r\n      joinGameInstance(placeId, gameInstanceId);\r\n    } else if (rootPlaceId && playerId) {\r\n      currentESProperties.properties.playerId = playerId;\r\n      sendEventStream(currentESProperties);\r\n      sendGamePlayIntentEvent(currentESProperties.gamePlayIntentEventCtx, rootPlaceId);\r\n      followPlayer(playerId);\r\n    } else {\r\n      sendEventStream(currentESProperties);\r\n      sendGamePlayIntentEvent(currentESProperties.gamePlayIntentEventCtx, placeId);\r\n      joinMultiPlayer(placeId);\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  buildPlayGameProperties,\r\n  launchGame\r\n};\r\n","import { CurrentUser } from 'Roblox';\r\nconst { userId } = CurrentUser || {};\r\nconst USER_TYPE_KEY = {\r\n  friends: 'Friends',\r\n  followers: 'Followers',\r\n  requests: 'Requests',\r\n  followings: 'Followings'\r\n};\r\n\r\nexport default {\r\n  friendsDict: function(type) {\r\n    return `Roblox.${USER_TYPE_KEY[type]}Dict.UserId${userId || 0}`;\r\n  }\r\n};\r\n","import { EnvironmentUrls } from 'Roblox';\r\nconst {\r\n    friendsApi, presenceApi, websiteUrl\r\n} = EnvironmentUrls;\r\n\r\nexport default {\r\n    getUserProfileUrl: function (userId) {\r\n        return `${websiteUrl}/users/${userId}/profile`;\r\n    },\r\n\r\n    getUserFriendsUrl: function (userId) {\r\n        return `${friendsApi}/v1/users/${userId}/friends`;\r\n    },\r\n\r\n    getUsersPresenceUrl: function () {\r\n        return `${presenceApi}/v1/presence/users`;\r\n    },\r\n\r\n    getUserFollowersUrl: function (userId) {\r\n        return `${friendsApi}/v1/users/${userId}/followers`;\r\n    },\r\n\r\n    getUserFollowingsUrl: function (userId) {\r\n        return `${friendsApi}/v1/users/${userId}/followings`;\r\n    },\r\n\r\n    getUserRequestUrl: function () {\r\n        return `${friendsApi}/v1/my/friends/requests`;\r\n    }\r\n}","import { CurrentUser } from 'Roblox';\r\nimport { httpService } from '../http/http';\r\nimport localStorageService from '../services/localStorageService/localStorageService';\r\nimport localStorageNames from '../services/localStorageService/localStorageNames';\r\nimport userInfoConstants from '../services/userInfoService/userInfoConstants';\r\n\r\nconst {\r\n  getUserProfileUrl,\r\n  getUserFriendsUrl,\r\n  getUserFollowersUrl,\r\n  getUserFollowingsUrl,\r\n  getUserRequestUrl,\r\n  getUsersPresenceUrl\r\n} = userInfoConstants;\r\n\r\nconst BATCH_LIMIT = 100;\r\n\r\nconst URL_MAP = {\r\n  friends: getUserFriendsUrl,\r\n  followers: getUserFollowersUrl,\r\n  followings: getUserFollowingsUrl,\r\n  friendrequests: getUserRequestUrl\r\n};\r\n\r\nfunction removeFriendsDictCache(type) {\r\n  document.addEventListener('Roblox.Logout', function() {\r\n    localStorageService.removeLocalStorage(localStorageNames.friendsDict(type));\r\n  });\r\n}\r\n\r\nfunction tryFetchFromCache(type, expirationMS) {\r\n  const cache = localStorageService.fetchNonExpiredCachedData(\r\n    localStorageNames.friendsDict(type),\r\n    expirationMS\r\n  );\r\n  return cache ? cache.data : null;\r\n}\r\n\r\nexport function fetchFromNetwork(friendsDict, type, cacheEnabled) {\r\n  const friendsApi = {\r\n    url: URL_MAP[type](CurrentUser.userId),\r\n    retryable: true,\r\n    withCredentials: true\r\n  };\r\n\r\n  const presenceApi = {\r\n    url: getUsersPresenceUrl(),\r\n    retryable: true,\r\n    withCredentials: true\r\n  };\r\n\r\n  return httpService.get(friendsApi).then(result => {\r\n    const friends = result.data.data || result;\r\n    const userIds = [];\r\n    friendsDict[type] = {};\r\n\r\n    friends.forEach(friend => {\r\n      let userId = friend.id;\r\n      userIds.push(userId);\r\n      friend.profileUrl = getUserProfileUrl(userId);\r\n      friendsDict[type][userId] = friend;\r\n    });\r\n\r\n    return httpService.buildBatchPromises(userIds, BATCH_LIMIT, presenceApi, true).then(data => {\r\n      if (data && data.length > 0) {\r\n        let presences = [];\r\n        data.forEach(({ data: { userPresences } }) => {\r\n          presences = presences.concat(userPresences);\r\n        });\r\n\r\n        presences.forEach(presence => {\r\n          friendsDict[type][presence.userId].presence = presence;\r\n        });\r\n      }\r\n\r\n      if (cacheEnabled) {\r\n        localStorageService.saveDataByTimeStamp(\r\n          localStorageNames.friendsDict(type),\r\n          friendsDict[type]\r\n        );\r\n        removeFriendsDictCache(type);\r\n      }\r\n\r\n      return friendsDict[type];\r\n    });\r\n  });\r\n}\r\n\r\nexport function listenToPresenceUpdate(type, cacheData) {\r\n  if (cacheData) {\r\n    document.addEventListener('Roblox.Presence.Update', function(event, args) {\r\n      if (args) {\r\n        setTimeout(function() {\r\n          args.forEach(function(presence) {\r\n            let {userId} = presence;\r\n            if (cacheData[userId]) {\r\n              cacheData[userId].presence = presence;\r\n            }\r\n          });\r\n          localStorageService.saveDataByTimeStamp(localStorageNames.friendsDict(type), cacheData);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function fetchUsersList(friendsDict, type, cacheCriteria) {\r\n  const { expirationMS, isEnabled: cacheEnabled } = cacheCriteria;\r\n  if (cacheEnabled) {\r\n    const cacheData = tryFetchFromCache(type, expirationMS);\r\n    if (cacheData) {\r\n      return new Promise(function(resolve) {\r\n        resolve(cacheData);\r\n      });\r\n    }\r\n  }\r\n\r\n  return fetchFromNetwork(friendsDict, type, cacheEnabled);\r\n}\r\n","import { fetchUsersList, listenToPresenceUpdate, fetchFromNetwork } from '../../utils/userInfoUtil';\r\n\r\nclass UserInfoService {\r\n    constructor() {\r\n        this.callbacks = new Set();\r\n        this.friendsDict = {};\r\n    }\r\n\r\n    unSubscribe(callback) {\r\n        this.callbacks.delete(callback);\r\n    }\r\n\r\n    subscribe(callback, type, cacheCriteria) {\r\n        const isValidCallback = typeof callback === 'function';\r\n        const cacheEnabled = cacheCriteria && cacheCriteria.isEnabled;\r\n        isValidCallback && this.callbacks.add(callback);\r\n\r\n        if (cacheEnabled && this.friendsDict[type]) {\r\n            isValidCallback && callback(this.friendsDict[type]);\r\n        } else {\r\n            fetchUsersList(this.friendsDict, type, cacheCriteria).then(data => {\r\n                cacheEnabled && listenToPresenceUpdate(type, data);\r\n                this.friendsDict[type] = data;\r\n                this.callbacks.forEach(func => {\r\n                    func(data);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    refreshCacheData(type, cacheCriteria) {\r\n        const { isEnabled } = cacheCriteria;\r\n        return fetchFromNetwork(this.friendsDict, type, isEnabled);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst userInfoService = new UserInfoService();\r\n\r\nuserInfoService.TYPE = {\r\n    FRIENDS: 'friends',\r\n    FOLLOWERS: 'followers',\r\n    FOLLOWINGS: 'followings',\r\n    FRIENDREQUESTS: 'friendrequests'\r\n};\r\n\r\nexport default userInfoService;\r\n","import { EnvironmentUrls } from 'Roblox';\r\n\r\nconst { metricsApi } = EnvironmentUrls;\r\n\r\nexport const getBatchMetricsUrl = () => {\r\n  return `${metricsApi}/v1/performance/measurements`;\r\n};\r\n\r\nexport const DefaultBatchSize = 100;\r\n\r\nexport const DefaultProcessBatchWaitTime = 10000;\r\n\r\nexport interface Measure {\r\n  taskId?: number;\r\n  featureName: string;\r\n  measureName: string;\r\n  value?: number;\r\n  metricsType: 'Counter' | 'Sequence';\r\n  excludeCountry?: boolean;\r\n}\r\n\r\nexport interface MetricsResult {\r\n  [key: string]: boolean;\r\n}\r\n","const getTimeSpanFromString = (timeSpan: string) => {\r\n  if (!timeSpan) return 0;\r\n  const timeSpanFormat = timeSpan.split(':');\r\n  return (\r\n    (parseInt(timeSpanFormat[0], 10) * 60 * 60 +\r\n      parseInt(timeSpanFormat[1], 10) * 60 +\r\n      parseInt(timeSpanFormat[2], 10)) *\r\n    1000\r\n  );\r\n};\r\n\r\nexport default {\r\n  getMetaData: () => {\r\n    const metaElement = document.getElementsByName('performance')[0];\r\n    if (metaElement) {\r\n      return {\r\n        performanceMetricsBatchWaitTime: getTimeSpanFromString(\r\n          metaElement.getAttribute('data-ui-performance-metrics-batch-wait-time')\r\n        ),\r\n        performanceMetricsBatchSize: parseInt(\r\n          metaElement.getAttribute('data-ui-performance-metrics-batch-size'),\r\n          10\r\n        )\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n};\r\n","import { httpService } from '../../http/http';\r\nimport { BatchRequestFactory } from '../batchRequestService/batchRequestFactory';\r\nimport {\r\n  getBatchMetricsUrl,\r\n  Measure,\r\n  MetricsResult,\r\n  DefaultBatchSize,\r\n  DefaultProcessBatchWaitTime\r\n} from './metricsConstants';\r\nimport metricsMetaData from './metricsMetaData';\r\n\r\nconst batchRequestFactory = new BatchRequestFactory<Measure>();\r\nlet idCounter = 0;\r\n\r\nconst {\r\n  performanceMetricsBatchWaitTime,\r\n  performanceMetricsBatchSize\r\n} = metricsMetaData.getMetaData();\r\n\r\nconst metricsBatchRequestProcessor = batchRequestFactory.createRequestProcessor(\r\n  items => {\r\n    const urlConfig = {\r\n      url: getBatchMetricsUrl(),\r\n      retryable: true,\r\n      withCredentials: true\r\n    };\r\n    const measures = items.map(({ data: { taskId, ...otherKeys } }) => ({ ...otherKeys }));\r\n    return httpService.post(urlConfig, measures).then(() => {\r\n      const results: MetricsResult = {};\r\n      items.forEach(({ key }) => {\r\n        results[key] = true;\r\n      });\r\n      return results;\r\n    });\r\n  },\r\n  ({ taskId }: Measure) => taskId?.toString(),\r\n  {\r\n    batchSize: performanceMetricsBatchSize || DefaultBatchSize,\r\n    processBatchWaitTime: performanceMetricsBatchWaitTime || DefaultProcessBatchWaitTime\r\n  }\r\n);\r\n\r\nexport default {\r\n  logMeasurement: (measure: Measure) => {\r\n    const taskId = idCounter;\r\n    idCounter += 1;\r\n    return metricsBatchRequestProcessor.queueItem({ taskId, ...measure });\r\n  }\r\n};\r\n","import dataStores from './dataStoreManagement/stores/dataStores';\r\nimport entityUrl from './utils/entityUrl/entityUrl';\r\nimport eventStreamService from './services/eventStreamService/eventStreamService';\r\nimport hybridService from './services/hybridService';\r\nimport localStorageService from './services/localStorageService/localStorageService';\r\nimport localStorageNames from './services/localStorageService/localStorageNames';\r\nimport playGameService from './services/playGames/playGameService';\r\nimport userInfoService from './services/userInfoService/userInfoService';\r\nimport metricsService from './services/metricsService/metricsService';\r\n\r\nwindow.CoreRobloxUtilities = {\r\n  dataStores,\r\n  entityUrl,\r\n  eventStreamService,\r\n  hybridService,\r\n  localStorageService,\r\n  localStorageNames,\r\n  playGameService,\r\n  userInfoService,\r\n  metricsService\r\n};\r\n"],"sourceRoot":""}