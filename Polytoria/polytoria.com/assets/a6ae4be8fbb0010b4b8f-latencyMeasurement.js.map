{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ts/probnik/requesters/xhr_requester.ts","webpack:///./ts/probnik/probnik.ts","webpack:///./ts/probnik/recipe_providers/http_recipe_provider.ts","webpack:///./ts/probnik/recipe_providers/local_recipe_provider.ts","webpack:///./ts/probnik/testers/http_tester.ts","webpack:///./ts/probnik/testers/testers.ts","webpack:///./ts/probnik/probes/pulse_probe.ts","webpack:///./ts/probnik/probes/browser_probe.ts","webpack:///external \"CoreUtilities\"","webpack:///./js/latencyMeasurement/src/latencyMeasurement.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getXhr","XMLHttpRequest","now","window","performance","Date","getTime","getReport","url","status","size","start","duration","ttfb","headers","report","sc","via","getEntriesByName","entries","length","timing","decodedBodySize","startTime","responseEnd","requestStart","dns","domainLookupEnd","domainLookupStart","rtt","responseStart","tcp","connectEnd","connectStart","secureConnectionStart","tls","undefined","parseHeaders","headerStr","headerPairs","split","headerPair","index","indexOf","substring","toLowerCase","val","timeout","cb","options","req","e","withCookies","withCredentials","open","onreadystatechange","readyState","getAllResponseHeaders","responseText","response","send","getData","body","isObject","isInt","v","isNaN","x","parseFloat","isString","getRecipe","iteration","this","delimiter","RestRecipeProvider","requester","json","JSON","parse","errPrefix","Error","next","pulses","pulse_delay","pulse_timeout","ctx","a","toString","isArray","targets","targetInfo","target","console","error","recipe","run","getTester","type","HttpTester","nextJob","completed","scheduleAfter","stop","cancel","recipeProvider","executeTest","forEachTarget","fn","tester","testerFactory","reports","wg","WaitGroup","handler","done","push","nested","delay","task","finish","handleResult","wait","delayMilliseconds","id","setTimeout","clearTimeout","reporter","data","constructor","total","PulseProbe","BrowserProbe","CoreUtilities","inProd","location","hostname","recipeApi","reportApi","probnik","require","urlConfig","httpService","post","catch"],"mappings":"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","file":"latencyMeasurement.bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 43);\n","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\n/**\r\n * Implements XHR requester to run Probe and get ProbeRecipe\r\n */\r\n\r\nimport { Requester, RequesterCallback, RequesterOptions } from '../probe';\r\n\r\n/**\r\n * A data object that contains HTTP metrics report.\r\n */\r\nexport interface HttpProbePulseSampleReport {\r\n    /** Pulse start. */\r\n    start: number;\r\n    /** Request duration. Pulse end is start + d. */\r\n    d: number;\r\n    /** Status code of the request. */\r\n    sc: number;\r\n    /** Payload size */\r\n    size: number;\r\n    /** Time to First Byte. */\r\n    ttfb: number;\r\n    /** Round Trip Time **/\r\n    rtt?: number;\r\n    /** DNS time. */\r\n    dns?: number;\r\n    /** TCP time. */\r\n    tcp?: number;\r\n    /** TLS time. */\r\n    tls?: number;\r\n    /** Via HTTP header */\r\n    via?: string;\r\n    /** Extra information associated with the response. */\r\n    [key: string]: string | number | undefined;\r\n}\r\n\r\n/**\r\n * HTTP headers\r\n */\r\ninterface HttpHeaders {\r\n    [name: string]: string;\r\n}\r\n\r\n/**\r\n * Represents HTTP response.\r\n */\r\nexport interface HttpGetData {\r\n    readonly body: string | null;\r\n    readonly status: number;\r\n    readonly headers: Readonly<HttpHeaders>;\r\n}\r\n\r\n/**\r\n * Callback to receive result of an HTTP call.\r\n */\r\nexport interface HttpGetDataCallback {\r\n    (status: number, headers: HttpHeaders, body: string | null): void;\r\n}\r\n\r\nfunction getXhr(): XMLHttpRequest {\r\n    return new XMLHttpRequest();\r\n}\r\n\r\nfunction now(): number {\r\n    if (window.performance && window.performance.now) {\r\n        // Use monotonic clock when available\r\n        return performance.now();\r\n    }\r\n    return new Date().getTime();\r\n}\r\n\r\n// Build HttpMetrics with calculated metrics or performance API metrics if available.\r\nfunction getReport(url: string | null, status: number, size: number, start: number, duration: number, ttfb: number, headers?: HttpHeaders): HttpProbePulseSampleReport {\r\n    const report: HttpProbePulseSampleReport = {\r\n        start: start,\r\n        size: size,\r\n        d: duration,\r\n        ttfb: ttfb,\r\n        sc: status\r\n    };\r\n    if (headers) {\r\n        report.via = headers.via;\r\n    }\r\n    if (!url || !window.performance || !window.performance.getEntriesByName) {\r\n        return report;\r\n    }\r\n    let entries = window.performance.getEntriesByName(url);\r\n    if (entries.length == 0) {\r\n        // In the case the URL does not have a path (i.e.: http://domain.com), the browser\r\n        // adds a trailing slash and thus the entry might not match. Try again by adding the\r\n        // slash by ourself.\r\n        entries = window.performance.getEntriesByName(url + '/');\r\n        if (entries.length == 0) {\r\n            return report;\r\n        }\r\n    }\r\n    const timing = entries[entries.length - 1] as PerformanceResourceTiming;\r\n    if ('decodedBodySize' in timing && timing.decodedBodySize > 0) {\r\n        report.size = timing.decodedBodySize;\r\n    }\r\n    if (timing.duration) {\r\n        report.d = timing.duration;\r\n    } else if (timing.startTime && timing.responseEnd) {\r\n        report.d = timing.responseEnd - timing.startTime;\r\n    }\r\n    if (timing.requestStart) {\r\n        report.dns = timing.domainLookupEnd - timing.domainLookupStart;\r\n        report.rtt = timing.responseStart - timing.requestStart;\r\n        report.ttfb = timing.responseStart - timing.startTime;\r\n        report.tcp = timing.connectEnd - timing.connectStart;\r\n        // secureConnectionStart can be 0 instead of timestamp when connection is reused\r\n        if (timing.secureConnectionStart === 0) {\r\n            // Chrome has a known bug setting the secureConnectionStart to 0 when the\r\n            // TLS connection is reused. The spec says that 0 should be used when TLS\r\n            // is not used. Probes are always HTTPS to avoid mixed content issue,\r\n            // so it is safe to assume that 0 means reused and not HTTP.\r\n            report.tls = 0;\r\n        } else if (timing.secureConnectionStart !== undefined) {\r\n            report.tls = timing.connectEnd - timing.secureConnectionStart;\r\n            // The TCP metric must not include the TLS handshake (we want to\r\n            // approximate the TCP handshake time).\r\n            report.tcp -= report.tls;\r\n        }\r\n    }\r\n    return report;\r\n}\r\n\r\nfunction parseHeaders(headerStr: string): HttpHeaders {\r\n    const headers: HttpHeaders = {};\r\n    if (!headerStr) {\r\n      return headers;\r\n    }\r\n    const headerPairs = headerStr.split('\\u000d\\u000a');\r\n    for (let i = 0; i < headerPairs.length; i++) {\r\n      const headerPair = headerPairs[i];\r\n      // Can't use split() here because it does the wrong thing\r\n      // if the header value has the string \": \" in it.\r\n      const index = headerPair.indexOf('\\u003a\\u0020');\r\n      if (index > 0) {\r\n        const key = headerPair.substring(0, index).toLowerCase();\r\n        const val = headerPair.substring(index + 2);\r\n        headers[key] = val;\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n\r\n/**\r\n * Runs HTTP Probe tests using XHR object.\r\n */\r\nexport class XhrHttpRequester implements Requester {\r\n    \r\n    public get(url: string, timeout: number, cb: RequesterCallback, options: RequesterOptions): void {\r\n        let req: XMLHttpRequest;\r\n        try {\r\n            req = getXhr();\r\n        } catch (e) {\r\n            cb(getReport(url, 0, 0, 0, 0, 0));\r\n            return;\r\n        }\r\n        if (!('withCredentials' in req)) {\r\n            // Missing CORS support\r\n            cb(getReport(url, 0, 0, 0, 0, 0));\r\n            return;\r\n        }\r\n        if (options.withCookies) {\r\n            req.withCredentials = true;\r\n        }\r\n        if (timeout) {\r\n            req.timeout = timeout;\r\n        }\r\n        const start = now();\r\n        let ttfb = 0;\r\n        req.open('GET', url, true);\r\n        req.onreadystatechange = function () {\r\n            switch (req.readyState) {\r\n                case 2:\r\n                    ttfb = now() - start;\r\n                    break;\r\n                case 4:\r\n                    let headers = {};\r\n                    if ('getAllResponseHeaders' in req) {\r\n                        headers = parseHeaders(req.getAllResponseHeaders());\r\n                    }\r\n                    const body = req.responseText;\r\n                    let length = body.length;\r\n                    if (req.response) {\r\n                        length = req.response.length;\r\n                    }\r\n                    const duration = now() - start;\r\n                    cb(getReport(url, req.status, length, start, duration, ttfb, headers));\r\n                    break;\r\n            }\r\n        };\r\n        req.send();\r\n    }\r\n\r\n    public getData(url: string, timeout: number, cb: HttpGetDataCallback, options: RequesterOptions): void {\r\n        let req: XMLHttpRequest;\r\n        try {\r\n            req = getXhr();\r\n        } catch (e) {\r\n            cb(0, {}, null)\r\n            return;\r\n        }\r\n        if (!('withCredentials' in req)) {\r\n            // Missing CORS support\r\n            cb(0, {}, null)\r\n            return;\r\n        }\r\n        if (options.withCookies) {\r\n            req.withCredentials = true;\r\n        }\r\n        if (timeout) {\r\n            req.timeout = timeout;\r\n        }\r\n        const start = now();\r\n        req.open('GET', url, true);\r\n        req.onreadystatechange = function () {\r\n            switch (req.readyState) {\r\n                case 4:\r\n                    let headers = {};\r\n                    if ('getAllResponseHeaders' in req) {\r\n                        headers = parseHeaders(req.getAllResponseHeaders());\r\n                    }\r\n                    const body = req.responseText;\r\n                    if (req.response) {\r\n                        const length = req.response.length;\r\n                    }\r\n                    cb(req.status, headers, body);\r\n                    break;\r\n            }\r\n        };\r\n        req.send();\r\n    }\r\n}","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\n/**\r\n * Exports\r\n */\r\n\r\nexport * from './probe';\r\nexport * from './probes/browser_probe';\r\nexport * from './recipe_providers/http_recipe_provider';\r\nexport * from './recipe_providers/local_recipe_provider';","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\nimport { RecipeProvider, ProbeRecipe, RequesterOptions } from '../probe';\r\nimport { XhrHttpRequester, HttpGetDataCallback } from '../requesters/xhr_requester';\r\n\r\nfunction isObject(o: any): boolean {\r\n    return !!(o && (\"object\" === typeof o));\r\n}\r\n\r\nfunction isArray(a: any): boolean {\r\n    return Object.prototype.toString.call(a) === '[object Array]';\r\n}\r\n\r\nfunction isInt(v: any): boolean {\r\n  return !isNaN(v) && (function(x) { return (x | 0) === x; })(parseFloat(v))\r\n}\r\n\r\nfunction isString(v: any): boolean {\r\n    return typeof v === 'string';\r\n}\r\n\r\ninterface HttpDataRequester {\r\n    getData(url: string, timeout: number, cb: HttpGetDataCallback, options: RequesterOptions): void\r\n}\r\n\r\n /**\r\n * Provides Probnik recipe based on an output of a REST HTTP endpoint.\r\n * When acked to provide a recipe, performs an HTTP GET call on a configured URL and provides\r\n * the result back to the caller.\r\n */\r\nexport class RestRecipeProvider implements RecipeProvider {\r\n    /** Requester used to get data */\r\n    public static requester: HttpDataRequester;\r\n\r\n    /**\r\n     * @param url URL of an API endpoint to call to get a recipe.\r\n     */\r\n    constructor(private url: string) {\r\n    }\r\n\r\n    /** Provides recipe to test. */\r\n    public getRecipe(iteration: number, cb: (params: ProbeRecipe | null) => void): void {\r\n        let url = this.url \r\n\r\n        const delimiter = url.indexOf('?') === -1 ? '?' : '&';\r\n        url = `${url}${delimiter}iteration=${iteration}`;\r\n        RestRecipeProvider.requester.getData(url, 0, function (status, headers, body) {\r\n            if (status != 200 || body == null) {\r\n                cb(null);\r\n                return;\r\n            }\r\n            try {\r\n                const json = JSON.parse(body);\r\n                const errPrefix = 'FTLTester: param';\r\n                if (!isObject(json)) {\r\n                    throw new Error(`${errPrefix}: not an object`);\r\n                }\r\n                if (!isInt(json.next)) {\r\n                    throw new Error(`${errPrefix}.next: not an integer`);\r\n                }\r\n                if (!isInt(json.pulses)) {\r\n                    throw new Error(`${errPrefix}.pulses: not an integer`);\r\n                }\r\n                if (!isInt(json.pulse_delay)) {\r\n                    throw new Error(`${errPrefix}.pulse_delay: not an integer`);\r\n                }\r\n                if (!isInt(json.pulse_timeout)) {\r\n                    throw new Error(`${errPrefix}.pulse_timeout: not an integer`);\r\n                }\r\n                if (!isString(json.name)) {\r\n                    throw new Error(`${errPrefix}.name: not a string`);\r\n                }\r\n                if (!isObject(json.ctx)) {\r\n                    throw new Error(`${errPrefix}.ctx: not an object`);\r\n                }\r\n                if (!isArray(json.targets)) {\r\n                    throw new Error(`${errPrefix}.targets: not an array`);\r\n                }\r\n                for (let i = 0, l = json.targets.length; i < l; i++) {\r\n                    const targetInfo = json.targets[i];\r\n                    if (!isObject(targetInfo)) {\r\n                        throw new Error(`${errPrefix}.targets[${i}]: not an object`);\r\n                    }\r\n                    if (!isString(targetInfo.name)) {\r\n                        throw new Error(`${errPrefix}.targets[${i}].name: not a string`);\r\n                    }\r\n                    if (!isString(targetInfo.target)) {\r\n                        throw new Error(`${errPrefix}.targets[${i}].target: not a string`);\r\n                    }\r\n                }\r\n                const params = <ProbeRecipe>json;\r\n                cb(params);\r\n            } catch (e) {\r\n                if (console && console.error) {\r\n                    console.error(e);\r\n                }\r\n                cb(null);\r\n                return;\r\n            }\r\n        }, {withCookies: true});\r\n    }\r\n}\r\n\r\nRestRecipeProvider.requester = new XhrHttpRequester();","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\nimport { RecipeProvider, ProbeRecipe, RequesterOptions } from '../probe';\r\n\r\n/**\r\n * Provides Probnik recipe based on provided provided during an initialization.\r\n */\r\nexport class LocalRecipeProvider implements RecipeProvider {\r\n    private recipe: ProbeRecipe;\r\n\r\n    /**\r\n     * @param url URL of an API endpoint to call to get a recipe.\r\n     */\r\n    constructor(private json: object) {\r\n        this.recipe = <ProbeRecipe>json;\r\n    }\r\n\r\n    /** Provides recipe to test. */\r\n    public getRecipe(iteration: number, cb: (params: ProbeRecipe | null) => void): void {\r\n        cb(this.recipe);\r\n    }\r\n}","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\n\r\nimport { ProbeTester, ProbeTargetInfo, ProbePulseSampleReport, Requester, ProbeRecipe, ProbeTesterFactory } from '../probe';\r\n\r\n/**\r\n * Test performance of HTTP(s) GET endpoint.\r\n */\r\nexport class HttpTester implements ProbeTester {\r\n    constructor(private readonly requester: Requester,  private readonly timeout: number) {\r\n    }\r\n\r\n    public run(target: ProbeTargetInfo, cb: (report: ProbePulseSampleReport) => void) {\r\n        this.requester.get(target.target, this.timeout, cb, {withCookies: false});\r\n    }\r\n}","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\n/**\r\n * Contains implementations of Probe testers.\r\n */\r\n\r\nimport { ProbeTester, Requester, ProbeRecipe, ProbeTesterFactory } from '../probe';\r\nimport { HttpTester } from './http_tester';\r\n\r\n/**\r\n * Initializes ProbeTesters for given recipes.\r\n */\r\nexport class TesterFactory implements ProbeTesterFactory {\r\n    getTester(requester: Requester, recipe: ProbeRecipe): ProbeTester {\r\n        if (recipe.type == 'http_get') {\r\n            return new HttpTester(requester, recipe.pulse_timeout);\r\n        }\r\n        throw new Error(`${recipe.type}: inknown recipe type`);\r\n    }\r\n}\r\n","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\nimport { Probe, RecipeProvider, ProbeReporter, ProbeRecipe, ProbePulseReport, ProbeTargetInfo, ProbePulseSampleReport, Requester, ProbeTesterFactory } from '../probe';\r\nimport { TesterFactory } from '../testers/testers'\r\n\r\n/**\r\n * Probe implementation\r\n */\r\nexport class PulseProbe implements Probe {\r\n    /** Requester used to get data. */\r\n    public static requester: Requester;\r\n\r\n    /** An object that initializes ProbeTest for recipes. */\r\n    public static testerFactory: ProbeTesterFactory\r\n\r\n    private iteration: number;\r\n    private nextJob?: Job;\r\n    private completed: boolean;\r\n    private requester: Requester; // to allow overriding requester in child classes\r\n    private testerFactory: ProbeTesterFactory; // to allow overriding tester factory in child classes\r\n\r\n    /**\r\n     * @param recipeProvider An object that provides Recipe to test against.\r\n     * @param reporter A reporter to use to send Probe results to.\r\n     */\r\n    constructor(public recipeProvider: RecipeProvider, public reporter: ProbeReporter) {\r\n        this.iteration = 0;\r\n        this.completed = false;\r\n        this.requester = (this.constructor as any).requester;\r\n        this.testerFactory = (this.constructor as any).testerFactory;\r\n    }\r\n\r\n    /** Starts/resumes execution of the test. */\r\n    public start(): void {\r\n        if (this.nextJob) {\r\n            // Already started\r\n            return;\r\n        }\r\n        // TODO: should we allow running the test from the same Probnik object several times?\r\n        // Isn't the iteration property created exactly for this purpose?\r\n        if (this.completed) {\r\n            // The test session is completed\r\n            return;\r\n        }\r\n        this.nextJob = this.scheduleAfter(0, this.run.bind(this));\r\n    }\r\n\r\n    /** Stops execution of the test. */\r\n    public stop(): void {\r\n        if (this.nextJob) {\r\n            this.nextJob.cancel();\r\n            this.nextJob = undefined;\r\n        }    \r\n    }\r\n\r\n    /** Runs the test. */\r\n    private run(): void {\r\n        this.recipeProvider.getRecipe(this.iteration, this.executeTest.bind(this))\r\n    }\r\n\r\n    private forEachTarget(recipe: ProbeRecipe, fn: (this: PulseProbe, target: ProbeTargetInfo) => void): void {\r\n        for (let i = 0, l = recipe.targets.length; i < l; i++) {\r\n            fn.bind(this)(recipe.targets[i]);\r\n        }\r\n    }\r\n\r\n    private executeTest(recipe: ProbeRecipe | null): void {\r\n        if (!recipe) {\r\n            // Invalid test recipe, abort\r\n            this.stop();\r\n            return;\r\n        }\r\n        const tester = this.testerFactory.getTester(this.requester, recipe);\r\n\r\n        const reports: ProbePulseReport[] = [];\r\n        const wg = new WaitGroup(recipe.targets.length);\r\n        let scheduleAfter = this.scheduleAfter;\r\n        this.forEachTarget(recipe, function (target) {\r\n            const pulses: ProbePulseSampleReport[] = [];\r\n            const handler = function (done: () => void, report: ProbePulseSampleReport) {\r\n                pulses.push(report);\r\n                done();\r\n            }\r\n            let nested = function finish() {\r\n                reports.push({\r\n                    'name': target.name,\r\n                    'target': target.target,\r\n                    'data': pulses\r\n                });\r\n                wg.done();\r\n            }\r\n            for (let i = recipe.pulses - 1; i >= 0; i--) {\r\n                nested = (function probe(next: () => void, delay: number) {\r\n                    const task = tester.run.bind(tester, target, handler.bind(null, next));\r\n                    scheduleAfter(delay, task);\r\n                }).bind(null, nested, i > 0 ? recipe.pulse_delay : 0);\r\n            }\r\n            // Unwrap timeout(0), probe, timeout(delay), probe, timeout(delay), probe, finish\r\n            nested();\r\n        });\r\n        let finish = this.handleResult.bind(this);\r\n        wg.wait(function () {\r\n            finish(recipe, reports);\r\n        });\r\n    }\r\n\r\n    private scheduleAfter(delayMilliseconds: number, task: Function): Job {\r\n        let id = setTimeout(task, delayMilliseconds);\r\n        return { cancel: function() { clearTimeout(id) } };\r\n    }\r\n\r\n    private handleResult(recipe: ProbeRecipe, reports: ProbePulseReport[]): void {\r\n        // Use the injected logger to log report\r\n        this.reporter({\r\n            ctx: recipe.ctx,\r\n            name: recipe.name,\r\n            type: recipe.type,\r\n            data: reports\r\n        });\r\n        \r\n        // Schedule next round if necessary\r\n        if (!this.nextJob) {\r\n            // Tester is stopped\r\n            return;\r\n        }\r\n        if (recipe.next > 0) {\r\n            this.nextJob = this.scheduleAfter(recipe.next, this.run.bind(this));\r\n        } else {\r\n            this.completed = true;\r\n            this.stop();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Syncronizes ProbeTester runs between pulses.\r\n */\r\nclass WaitGroup {\r\n    private cb?: () => void;\r\n    \r\n    constructor(private total: number) {\r\n    }\r\n\r\n    public done(): void {\r\n        this.total--;\r\n        if (this.total === 0 && this.cb) {\r\n            this.cb();\r\n            this.cb = undefined;\r\n        }\r\n    }\r\n\r\n    public wait(cb: () => void): void {\r\n        if (this.total === 0) {\r\n            cb();\r\n        } else {\r\n            this.cb = cb;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Cancellable job.\r\n */\r\nexport interface Job {\r\n    cancel(): void;\r\n}\r\n\r\nPulseProbe.testerFactory = new TesterFactory();","/**\r\n *\r\n *  Copyright 2019 Netflix, Inc.\r\n *\r\n *     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *     you may not use this file except in compliance with the License.\r\n *     You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *     Unless required by applicable law or agreed to in writing, software\r\n *     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *     See the License for the specific language governing permissions and\r\n *     limitations under the License.\r\n *\r\n */\r\n\r\n/**\r\n * Probe implementation to run in a browser.\r\n */\r\n\r\nimport { PulseProbe } from './pulse_probe'\r\nimport { XhrHttpRequester } from '../requesters/xhr_requester';\r\n\r\n/**\r\n * Probe implementation to run in a browser.\r\n */\r\nexport class BrowserProbe extends PulseProbe {\r\n}\r\n   \r\nBrowserProbe.requester = new XhrHttpRequester();","module.exports = CoreUtilities;","import { httpService } from 'core-utilities';\r\n\r\nconst inProd = window.location.hostname && window.location.hostname.indexOf('test') === -1;\r\nconst recipeApi = inProd\r\n  ? 'https://lms.roblox.com/recipe'\r\n  : 'https://lms.simulpong.com/recipe?maxTargets=4';\r\n\r\nconst reportApi = inProd ? 'https://lms.roblox.com/report' : 'https://lms.simulpong.com/report';\r\n\r\n// function to be called with Probnik test report\r\nfunction onComplete(report) {\r\n  const urlConfig = {\r\n    url: reportApi\r\n  };\r\n  return httpService.post(urlConfig, report).catch(e => {\r\n    console.error(e);\r\n  });\r\n}\r\n\r\nconst probnik = require('../../../ts/probnik/probnik');\r\n// recipe provider to handout test recipe to probe\r\nconst recipeProvider = new probnik.RestRecipeProvider(recipeApi);\r\n\r\n// set up a browser probe\r\nconst probe = new probnik.BrowserProbe(recipeProvider, onComplete);\r\nprobe.start();\r\n"],"sourceRoot":""}