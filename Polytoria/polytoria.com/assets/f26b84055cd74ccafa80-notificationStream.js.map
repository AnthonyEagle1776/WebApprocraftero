{"version":3,"sources":["webpack:///./js/angular/notificationStreamIcon/directives|sync|/.js$","webpack:///./js/angular/notificationStreamIcon/filters|sync|/.js$","webpack:///./js/angular/notificationStreamIcon|sync|/.html$","webpack:///./js/angular/notificationStream/constants|sync|/.js$","webpack:///./js/angular/notificationStream/controllers|sync|/.js$","webpack:///./js/angular/notificationStream/directives|sync|/.js$","webpack:///./js/angular/notificationStream/filters|sync|/.js$","webpack:///./js/angular/notificationStream/services|sync|/.js$","webpack:///./js/angular/notificationStream|sync|/.html$","webpack:///../Roblox.App.Configuration/Roblox_modules/roblox-es6-migration-helper/index.js","webpack:///./js/angular/notificationStreamIcon/directives/notificationIndicatorDirective.js","webpack:///./js/angular/notificationStreamIcon/directives/notificationStreamIconDirective.js","webpack:///./js/angular/notificationStreamIcon/directives/notificationStreamIndicatorDirective.js","webpack:///./js/angular/notificationStreamIcon/filters/abbreviateCountFilter.js","webpack:///./js/angular/notificationStreamIcon/notificationStreamIconModule.js","webpack:///./js/angular/notificationStream/constants/gameUpdatesConstants.js","webpack:///./js/angular/notificationStream/constants/signalR.js","webpack:///./js/angular/notificationStream/controllers/notificationStreamController.js","webpack:///./js/angular/notificationStream/controllers/notificationsController.js","webpack:///./js/angular/notificationStream/directives/clickInCardDirective.js","webpack:///./js/angular/notificationStream/directives/developerMetricsAvailableDirective.js","webpack:///./js/angular/notificationStream/directives/friendRequestDirective.js","webpack:///./js/angular/notificationStream/directives/gameUpdateDirective.js","webpack:///./js/angular/notificationStream/directives/groupMembershipDirective.js","webpack:///./js/angular/notificationStream/directives/lazyLoadingDirective.js","webpack:///./js/angular/notificationStream/directives/notificationCardDirective.js","webpack:///./js/angular/notificationStream/directives/notificationContentDirective.js","webpack:///./js/angular/notificationStream/directives/notificationContentViewDirective.js","webpack:///./js/angular/notificationStream/directives/notificationStreamBaseDirective.js","webpack:///./js/angular/notificationStream/directives/notificationStreamBaseViewDirective.js","webpack:///./js/angular/notificationStream/directives/notificationStreamBodyDirective.js","webpack:///./js/angular/notificationStream/directives/notificationStreamContainerDirective.js","webpack:///./js/angular/notificationStream/directives/privateMessageDirective.js","webpack:///./js/angular/notificationStream/directives/testDirective.js","webpack:///./js/angular/notificationStream/filters/sortGameUpdatesFilter.js","webpack:///./js/angular/notificationStream/filters/sortNotificationsByEventDateDesc.js","webpack:///./js/angular/notificationStream/notificationStreamModule.js","webpack:///./js/angular/notificationStream/services/gameUpdatesService.js","webpack:///./js/angular/notificationStream/services/gameUpdatesUtility.js","webpack:///./js/angular/notificationStream/services/layoutLibraryI18nService.js","webpack:///./js/angular/notificationStream/services/notificationStreamService.js","webpack:///external \"HeaderScripts\"","webpack:///./js/angular/notificationStream/services/notificationStreamUtility.js","webpack:///./js/angular/notificationStreamIcon/directives/templates/notificationIndicator.html","webpack:///./js/angular/notificationStreamIcon/directives/templates/notificationStreamIcon.html","webpack:///./js/angular/notificationStreamIcon/directives/templates/notificationStreamIndicator.html","webpack:///./js/angular/notificationStream/directives/templates/developerMetricsAvailable.html","webpack:///./js/angular/notificationStream/directives/templates/friendRequest.html","webpack:///./js/angular/notificationStream/directives/templates/gameUpdateActionPopoverTemplate.html","webpack:///./js/angular/notificationStream/directives/templates/gameUpdateTemplate.html","webpack:///./js/angular/notificationStream/directives/templates/groupMembership.html","webpack:///./js/angular/notificationStream/directives/templates/notificationContentViewTemplate.html","webpack:///./js/angular/notificationStream/directives/templates/notificationStreamBaseView.html","webpack:///./js/angular/notificationStream/directives/templates/notificationStreamContainer.html","webpack:///./js/angular/notificationStream/directives/templates/privateMessage.html","webpack:///./js/angular/notificationStream/directives/templates/test.html","webpack:///external \"Roblox\"","webpack:///external \"angular\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./js/angular/notificationStream/notificationStreamEntry.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","camelToKebab","str","replace","toLowerCase","extractHtmlFileName","split","pop","ES6MigrationHelper","importFilesUnderPath","ctx","forEach","templateCacheGenerator","angular","moduleName","mainTplCtx","commonTplCtx","run","tc","key","name","put","notificationIndicator","notificationStreamUtility","$document","$log","restrict","scope","templateUrl","templates","notificationIndicatorTemplate","link","bind","event","args","debug","count","$evalAsync","data","layout","unreadNotifications","isNotificationContentOpen","notificationStreamIconModule","notificationStreamIcon","notificationStreamIconTemplate","notificationStreamIndicator","notificationStreamService","notificationStreamIndicatorTemplate","updateLayout","getUnreadNotificationCount","unreadCount","then","catch","error","clearUnread","abbreivateCount","abbreviatedCounts","100","1000","limit","abbreviated","gameUpdatesConstants","endpoints","getInteractedEndpoint","url","EnvironmentUrls","retryable","withCredentials","getReadEndpoint","getGameFollowingsEndpoint","userId","getFollowGameEndpoint","universeId","getGameDetailsEndpoint","getGameUpdatesEndpoint","getAbuseReportUrl","gameUpdateCreatedOn","redirectUrl","apiParams","gameUpdateBatchSize","placeDetailBatchSize","gameNameMaxLength","gameUpdateInteractions","played","seen","unfollowed","notificationStreamModule","signalR","notifications","NotificationStream","ChatPrivacySettingNotifications","types","NewNotification","NotificationsRead","NotificationMarkedInteracted","NotificationRevoked","chatEnabled","chatDisabled","notificationStreamController","$scope","$timeout","eventStreamService","gameUpdatesService","gameUpdatesUtility","buildNotificationsList","userIds","notification","metaDataCollection","metadataCollection","notificationType","notificationSourceType","isNotificationTypeValid","isGameUpdateNotification","userData","user","normalizeUser","userName","library","userIdList","indexOf","push","userLibrary","profileLink","getAbsoluteUrl","links","isClickable","isCardClickable","notificationIds","emptyNotificationEnabled","length","buildGameUpdateNotifications","gameUpdateNotifications","gameUpdateModels","getGameFollowingsForUserAsync","currentUserId","gameFollowings","universeIds","i","getGameUpdatesAsync","gameUpdates","aggregateNotification","aggregateGameUpdateNotifications","unshift","fillGameDetails","singleGameUpdateModel","UniverseId","markGameUpdateInteractedAsync","createdOnKey","getRecentNotifications","getRecentDataInitialized","notificationApiParams","startIndexOfNotifications","pageSizeOfNotifications","recentNotifications","otherNotifications","isGetRecentDataLoadedRequested","entry","isLazyLoadingRequested","loadMoreNotifications","clearUnreadNotifications","triggerHandler","openNotificationStream","resetNotificationStreamData","toggleNotificationContent","forceHidden","inApp","bannerEnabled","bannerText","textTemplate","newNotification","reloadNotificationStreamData","updateNewNotificationInfo","updateSettingsInLibrary","bannerDismissTimeSpan","signalRDisconnectionResponseInMilliseconds","eventStreamMetaData","canLaunchGameFromGameUpdate","handleSignalRSuccess","errorBannerEnabled","handleSignalRError","errorText","noNetworkConnectionText","handleNotificationStreamNotification","Type","signalRType","isStreamBodyInteracted","handleChatPrivacySettingNotification","isChatDisabledByPrivacySetting","message","getChatPrivacySetting","getChatPrivacySettings","closeErrorBanner","closeBanner","initializeRealTimeSubscriptions","realTimeClient","RealTime","SubscribeToConnectionEvents","notificationsName","Subscribe","getUnreadNotificationCountFromDom","unreadNotificationElement","Number","isNaN","parseInt","html","initializeNotificationStream","property","initialize","pageDataInitialized","initializePageData","countOfUnreadNotification","sendEventWithTarget","eventNames","notificationStream","openContent","notificationsController","hybridService","urlService","chatDispatchService","sendEventStream","eventName","notificationId","eventType","contentViews","parseErrorFromApiResponse","response","errors","acceptFriend","targetUserId","interactNotification","acceptFriendV2","onAcceptFriendSuccess","userFacingMessage","friendRequestActionType","chatBtn","IsAccepted","isFlipped","acceptFriendRequest","type","ignoreFriend","ignoreFriendV2","onIgnoreFriend","isSlideOut","ignoreFriendRequest","removeNotification","index","splice","chat","friendId","chatPermissionVerifier","buildPermissionVerifier","uwpApp","hybridRequired","startChat","isInteracted","markInteracted","clickCard","groupId","params","friendRequestReceived","eventCount","friendRequestLink","feature","friendRequestTabName","urlPath","navigateToFeature","status","window","location","href","validData","SenderUserId","openUserProfile","friendRequestAccepted","friendsLink","friendsTabName","privateMessageReceived","inboxLink","inboxMessageDetailQuery","MessageId","inboxTabName","developerMetricsAvailable","groupJoinRequestAccepted","myGroupsLink","groupsTabName","groupLink","AccepterGroupId","contentViewManager","manager","viewScope","viewId","vScope","isActive","isOpen","selectContentView","notificationContentViews","main","clickInCard","$filter","element","target","selectedElm","attr","stopPropagation","preventDefault","settingLinkName","settingTabName","settingLink","friendRequestLinkName","profileLinkName","match","groupLinkName","$window","appMeta","developerMetricsAvailableTemplate","developerMetricsAvailableLayout","month","year","gameName","gameNameLinked","rootPlaceId","gameLinkUrl","gameIconUrl","metaData","months","Intl","getMonthsList","len","value","getMonthName","multiGetGameIconsAsync","gameIcons","hasOwnProperty","viewButtonHandler","init","friendRequest","thumbnailConstants","friendRequestTemplate","userMultipleCount","userOne","userTwo","thumbnailTypes","notificationDisplayText","displayName","htmlTemplate","getUserHtmlTemplate","getFormatString","normalizeYouHaveText","normalizeMultipleDisplayText","requestConfirmedText","normalizeMultipleConfirmedText","normalizeDoubleDisplayText","normalizeDoubleConfirmedText","normalizeSingleDisplayText","normalizeSingleConfirmedText","viewAllBtn","acceptIgnoreBtns","gameUpdate","gameUpdateTemplate","gameUpdateModel","gameUpdateElement","$","isAggregated","aggregatedDisplayText","formatAggregatedDisplayText","GameName","actionMenuTemplate","isActionMenuOpen","goToGameDetails","gameLinkUrlForApp","playButtonHandler","launchGame","placeId","requestType","isPartyLeader","GameLauncher","viewGameUpdates","followGame","followGameAsync","focus","isUnfollowed","updateMessage","unfollowGame","$event","unfollowGameAsync","reportAbuse","Date","createdOn","closeActionMenu","groupMembership","groupMembershipTemplate","groupMultipleCount","groupOne","groupTwo","groupMembershipLayout","group","groupName","AccepterGroupName","getGroupHtmlTemplate","lazyLoading","callbackLazyLoad","notiticationsLazyLoadingEnabled","setupScrollbar","mCustomScrollbar","autoExpandScrollbar","scrollInertia","contentTouchScroll","mouseWheel","callbacks","onTotalScrollOffset","onTotalScroll","onOverflowYNone","destroyScrollbar","watchPageDataInitialized","$watch","newValue","oldValue","Scrollbar","$on","notificationCard","transitions","transitionEvent","t","el","document","createElement","style","whichTransitionEvent","evt","className","search","updateNotificationSetting","isEnabled","updateNotificationSettings","isTurnOff","notificationContent","notificationContentTemplate","notificationContentView","transclude","notificationContentViewTemplate","addContentView","notificationStreamBase","notificationStreamBaseViewTemplate","notificationStreamBaseView","notificationStreamBody","on","has","notificationStreamContainer","notificationStreamContainerTemplate","privateMessage","privateMessageTemplate","privateMessageLayout","displayUserId","displayUserName","messagePreview","isStacked","DisplayNames","BodyPreview","test","testTemplate","Detail","sortGameUpdates","sortGameUpdatesByCreatedDate","sortNotificationsByEventDateDesc","sortNotificationsByEventDate","config","languageResourceProvider","notificationStreamResources","Lang","translationConstants","setLanguageKeysFromFile","httpService","$q","batchMultiGet","endpoint","paramValues","batchSize","paramsBuilder","promises","batchStartIndex","batch","slice","httpGet","all","markGameUpdateReadAsync","toString","httpPost","interactionType","multiGetPlaceDetailsAsync","placeIds","results","placeDetails","result","item","isPlayable","imageToken","reject","multiGetGameUpdatesAsync","httpDelete","encodeURIComponent","AbuseReportDispatcher","layoutLibraryService","parseEpochMilliseconds","game1","game2","otherGameCount","formatDisplayTextDouble","formatDisplayTextMultiple","minEventDate","getTime","createdOnEpoch","truncated","model","content","universeName","truncatedGameName","substr","newRootPlaceIds","placeDetail","maxEventTimeStamp","minEventTimeStamp","maxEventDate","totalEventCount","processed","aggregated","update","eventTimeStamp","eventDate","Math","max","isAscending","models","k","sort","model1","model2","languageResource","lang","stringTemplates","boldLink","userLink","boldDisplayNameLink","displayNameLink","newFriendRequests","numberOfRequests","get","newFriends","numberOfFriends","newGroups","numberOfGroups","friendRequestAcceptedSingle","friendRequestAcceptedDouble","friendRequestAcceptedMultiple","groupJoinRequestAcceptedSingle","groupJoinRequestAcceptedDouble","groupJoinRequestAcceptedMultiple","friendRequestSentSingle","friendRequestSentDouble","friendRequestSentMultiple","confirmAcceptedSingle","confirmAcceptedDouble","confirmAcceptedMultiple","confirmSentSingle","confirmSentDouble","confirmSentMultiple","numberOfNotifications","notificationCount","directiveTemplatesName","friendRequestReceivedTemplate","friendRequestAcceptedTemplate","notificationStreamBaseTemplate","gameUpdateActionPopoverTemplate","gameOne","gameTwo","otherCount","notificationApi","chatApi","friendsApi","this","startIndex","maxRows","eventId","urlConfig","receiverDestinationType","list","HeaderScripts","dateTime","matchResult","exec","firstTimeNotificationStream","notificationsScrollbarSelector","Endpoints","notificationsLazyLoadingEnabled","isNotificationsLoading","isDisplayNamesEnabled","dataBindSelector","dataContainerSelector","prefixLocalStoragekey","DeviceMeta","isInApp","isPhone","isTouch","DeviceFeatureDetection","authenticatedUser","friendRequestReceivedLayout","friendRequestAcceptedLayout","prop","regex","RegExp","isMatch","SenderUserName","SenderDisplayName","AccepterUserId","AccepterUserName","AccepterDisplayName","AuthorUserId","AuthorUserName","AuthorDisplayName","requestCount","targetOne","targetTwo","targetMultipleCount","buildScrollbar","autoHideScrollbar","documentTouchScroll","advanced","autoScrollOnFocus","notificationArray","n1","n2","epoch1","epoch2","Roblox","__webpack_module_cache__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","defineProperty","enumerable","obj","prototype","call","r","Symbol","toStringTag","require","templateContextForIcon","templateContextForBody"],"mappings":"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","file":"notificationStream.bundle.min.js","sourcesContent":["var map = {\n\t\"./notificationIndicatorDirective.js\": 3723,\n\t\"./notificationStreamIconDirective.js\": 332,\n\t\"./notificationStreamIndicatorDirective.js\": 9935\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 965;","var map = {\n\t\"./abbreviateCountFilter.js\": 4991\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6408;","var map = {\n\t\"./directives/templates/notificationIndicator.html\": 5198,\n\t\"./directives/templates/notificationStreamIcon.html\": 3004,\n\t\"./directives/templates/notificationStreamIndicator.html\": 3531\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2594;","var map = {\n\t\"./gameUpdatesConstants.js\": 3793,\n\t\"./signalR.js\": 330\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 8652;","var map = {\n\t\"./notificationStreamController.js\": 1042,\n\t\"./notificationsController.js\": 8431\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 4903;","var map = {\n\t\"./clickInCardDirective.js\": 7141,\n\t\"./developerMetricsAvailableDirective.js\": 2814,\n\t\"./friendRequestDirective.js\": 9912,\n\t\"./gameUpdateDirective.js\": 8331,\n\t\"./groupMembershipDirective.js\": 5958,\n\t\"./lazyLoadingDirective.js\": 8295,\n\t\"./notificationCardDirective.js\": 1354,\n\t\"./notificationContentDirective.js\": 3828,\n\t\"./notificationContentViewDirective.js\": 2422,\n\t\"./notificationStreamBaseDirective.js\": 1695,\n\t\"./notificationStreamBaseViewDirective.js\": 1840,\n\t\"./notificationStreamBodyDirective.js\": 6359,\n\t\"./notificationStreamContainerDirective.js\": 1413,\n\t\"./privateMessageDirective.js\": 1978,\n\t\"./testDirective.js\": 3587\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3702;","var map = {\n\t\"./sortGameUpdatesFilter.js\": 7554,\n\t\"./sortNotificationsByEventDateDesc.js\": 4779\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3748;","var map = {\n\t\"./gameUpdatesService.js\": 4403,\n\t\"./gameUpdatesUtility.js\": 158,\n\t\"./layoutLibraryI18nService.js\": 5978,\n\t\"./notificationStreamService.js\": 9822,\n\t\"./notificationStreamUtility.js\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3545;","var map = {\n\t\"./directives/templates/developerMetricsAvailable.html\": 177,\n\t\"./directives/templates/friendRequest.html\": 6610,\n\t\"./directives/templates/gameUpdateActionPopoverTemplate.html\": 4970,\n\t\"./directives/templates/gameUpdateTemplate.html\": 5931,\n\t\"./directives/templates/groupMembership.html\": 9177,\n\t\"./directives/templates/notificationContentViewTemplate.html\": 6763,\n\t\"./directives/templates/notificationStreamBaseView.html\": 643,\n\t\"./directives/templates/notificationStreamContainer.html\": 5091,\n\t\"./directives/templates/privateMessage.html\": 9488,\n\t\"./directives/templates/test.html\": 5980\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6012;","\r\nfunction camelToKebab(str) {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nfunction extractHtmlFileName(str) {\r\n    let file = str.split('/').pop();\r\n    return file.replace('.html', '');\r\n}\r\n\r\n//we don't touch common template code is it might break other consumers\r\n//so we just remove the surrounding script tags.\r\nfunction removeScriptTag(str) {\r\n    var scriptTagReg = /<\\/?script[^>]*>/gi;\r\n    return str.replace(scriptTagReg, '');\r\n}\r\n\r\nconst ES6MigrationHelper = {\r\n\r\n    importFilesUnderPath: (ctx) => {\r\n        ctx.keys().forEach(ctx);\r\n    },\r\n\r\n    templateCacheGenerator: (angular, moduleName, mainTplCtx, commonTplCtx) => {\r\n        return angular.module(moduleName, [])\r\n            .run(['$templateCache', function (tc) {\r\n                if (mainTplCtx) {\r\n                    mainTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, mainTplCtx(key));\r\n                    });\r\n                }\r\n                if (commonTplCtx) {\r\n                    commonTplCtx.keys().forEach(key => {\r\n                        let name = camelToKebab(extractHtmlFileName(key));\r\n                        tc.put(name, removeScriptTag(commonTplCtx(key)));\r\n                    });\r\n                }\r\n            }]);\r\n    }\r\n};\r\n\r\nmodule.exports = ES6MigrationHelper;","import notificationStreamIconModule from \"../notificationStreamIconModule\";\r\n\r\nfunction notificationIndicator(notificationStreamUtility, $document, $log) {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationIndicatorTemplate,\r\n        link: function (scope, element, attrs) {\r\n            function updateLayout(data) {\r\n                scope.layout = scope.layout || {};\r\n                scope.layout.unreadNotifications = data.count;\r\n                scope.layout.isNotificationContentOpen = data.isNotificationContentOpen;\r\n            }\r\n            $document.bind(\"Roblox.NotificationStream.UnreadNotifications\",\r\n                function (event, args) {\r\n                    $log.debug(\" ----- notificationStreamIconController --- args.count --------\" + args.count);\r\n                    scope.$evalAsync(updateLayout(args));\r\n                });\r\n\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamIconModule.directive(\"notificationIndicator\", notificationIndicator);\r\n\r\nexport default notificationIndicator;","import notificationStreamIconModule from \"../notificationStreamIconModule\";\r\n\r\nfunction notificationStreamIcon(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationStreamIconTemplate\r\n    }\r\n}\r\n\r\nnotificationStreamIconModule.directive(\"notificationStreamIcon\", notificationStreamIcon);\r\n\r\nexport default notificationStreamIcon;","import notificationStreamIconModule from '../notificationStreamIconModule';\r\n\r\nfunction notificationStreamIndicator(\r\n  notificationStreamUtility,\r\n  $document,\r\n  $log,\r\n  notificationStreamService\r\n) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: notificationStreamUtility.templates.notificationStreamIndicatorTemplate,\r\n    link(scope, element, attrs) {\r\n      scope.layout = scope.layout || {};\r\n      scope.getUnreadNotificationCount = function() {\r\n        notificationStreamService\r\n          .unreadCount()\r\n          .then(\r\n            function(data) {\r\n              if (data) {\r\n                const { unreadNotifications } = data;\r\n                scope.layout.unreadNotifications = unreadNotifications;\r\n              }\r\n            },\r\n            function() {\r\n              $log.debug(\r\n                '--- unreadCount call failed from notificationStreamIndicatorDirective----- '\r\n              );\r\n            }\r\n          )\r\n          .catch(e => {\r\n            $log.error(e);\r\n          });\r\n      };\r\n\r\n      function updateLayout(data) {\r\n        scope.layout.unreadNotifications = data.count;\r\n        scope.layout.isNotificationContentOpen = data.isNotificationContentOpen;\r\n      }\r\n\r\n      $document.bind('Roblox.NotificationStream.UnreadNotifications', function(event, args) {\r\n        $log.debug(` ----- notificationStreamIconController --- args.count --------${args.count}`);\r\n        scope.$evalAsync(updateLayout(args));\r\n      });\r\n\r\n      $document.bind('Roblox.NotificationStream.ClearUnreadNotifications', () => {\r\n        if (scope.layout.unreadNotifications > 0) {\r\n          updateLayout({ count: 0, isNotificationContentOpen: true });\r\n          notificationStreamService.clearUnread().then(() => {\r\n            scope.layout.unreadNotifications = 0;\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!scope.layout || !scope.layout.isNotificationContentOpen) {\r\n        scope.getUnreadNotificationCount();\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamIconModule.directive('notificationStreamIndicator', notificationStreamIndicator);\r\n\r\nexport default notificationStreamIndicator;\r\n","import notificationStreamIconModule from \"../notificationStreamIconModule\";\r\n\r\nfunction abbreivateCount() {\r\n    \"ngInject\";\r\n    var threshold = 100;\r\n    var abbreviatedCounts = {\r\n        100: \"99+\",\r\n        1000: \"1K+\"\r\n    }\r\n    //return the percentage width of upvote element;\r\n    return function (count, limit, abbreviated) {\r\n        if (!limit) {\r\n            limit = threshold;\r\n        }\r\n        if (!abbreviated) {\r\n            abbreviated = abbreviatedCounts[limit];\r\n        }\r\n        if (count >= limit) {\r\n            return abbreviated;\r\n        }\r\n        return count;\r\n    }\r\n}\r\nnotificationStreamIconModule.filter(\"abbreivateCount\", abbreivateCount);\r\n\r\nexport default abbreivateCount;","import angular from 'angular';\r\n\r\nconst notificationStreamIcon = angular.module('notificationStreamIcon', [\r\n  'robloxApp',\r\n  'notificationStream',\r\n  'notificationStreamIconHtmlTemplate'\r\n]);\r\n\r\nexport default notificationStreamIcon;\r\n","import { EnvironmentUrls } from 'Roblox';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nconst gameUpdatesConstants = {\r\n  endpoints: {\r\n    getInteractedEndpoint() {\r\n      return {\r\n        url: `${EnvironmentUrls.notificationApi}/v2/stream-notifications/game-update-notification-interacted`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getReadEndpoint() {\r\n      return {\r\n        url: `${EnvironmentUrls.notificationApi}/v2/stream-notifications/game-update-notification-read`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getGameFollowingsEndpoint(userId) {\r\n      return {\r\n        url: `${EnvironmentUrls.followingsApi}/v1/users/${userId}/universes`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getFollowGameEndpoint(userId, universeId) {\r\n      return {\r\n        url: `${EnvironmentUrls.followingsApi}/v1/users/${userId}/universes/${universeId}`,\r\n        retryable: false,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getGameDetailsEndpoint() {\r\n      return {\r\n        url: `${EnvironmentUrls.gamesApi}/v1/games/multiget-place-details`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getGameUpdatesEndpoint() {\r\n      return {\r\n        url: `${EnvironmentUrls.notificationApi}/v2/stream-notifications/get-latest-game-updates`,\r\n        retryable: true,\r\n        withCredentials: true\r\n      };\r\n    },\r\n\r\n    getAbuseReportUrl(universeId, gameUpdateCreatedOn, redirectUrl) {\r\n      // Parameter gameUpdateCreatedOn is unused at this point, as moderation\r\n      // can only take universe ID as the utterance source ID.\r\n      return `${EnvironmentUrls.websiteUrl}/abusereport/gameupdate?id=${universeId}&redirectUrl=${redirectUrl}`;\r\n    }\r\n  },\r\n\r\n  apiParams: {\r\n    gameUpdateBatchSize: 100,\r\n    placeDetailBatchSize: 100\r\n  },\r\n\r\n  gameNameMaxLength: 30,\r\n  gameUpdateInteractions: {\r\n    played: 'Played',\r\n    seen: 'Seen',\r\n    unfollowed: 'Unfollowed'\r\n  }\r\n};\r\n\r\nnotificationStreamModule.constant('gameUpdatesConstants', gameUpdatesConstants);\r\n\r\nexport default gameUpdatesConstants;\r\n","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nconst signalR = {\r\n    notifications: {\r\n        NotificationStream: \"NotificationStream\",\r\n            ChatPrivacySettingNotifications: \"ChatPrivacySettingNotifications\"\r\n    },\r\n    types: {\r\n        NewNotification: 'NewNotification',\r\n            NotificationsRead: 'NotificationsRead',\r\n            NotificationMarkedInteracted: 'NotificationMarkedInteracted',\r\n            NotificationRevoked: 'NotificationRevoked',\r\n            chatEnabled: \"ChatEnabled\",\r\n            chatDisabled: \"ChatDisabled\"\r\n    }\r\n}\r\n\r\nnotificationStreamModule.constant(\"signalR\", signalR);\r\n\r\nexport default signalR;","import { RealTime } from 'Roblox';\r\nimport angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction notificationStreamController(\r\n  $scope,\r\n  $document,\r\n  $timeout,\r\n  notificationStreamService,\r\n  notificationStreamUtility,\r\n  eventStreamService,\r\n  gameUpdatesService,\r\n  gameUpdatesUtility,\r\n  gameUpdatesConstants,\r\n  $log\r\n) {\r\n  'ngInject';\r\n\r\n  $scope.buildNotificationsList = function (notifications) {\r\n    const userIds = [];\r\n\r\n    notifications.forEach(function (notification) {\r\n      const metaDataCollection = notification.metadataCollection;\r\n      const notificationType = notification.notificationSourceType;\r\n      let eventDate;\r\n      let i;\r\n\r\n      if (!notificationStreamUtility.isNotificationTypeValid(notificationType)) {\r\n        return;\r\n      }\r\n\r\n      if (!notificationStreamUtility.isGameUpdateNotification(notificationType)) {\r\n        metaDataCollection.forEach(function (userData) {\r\n          const user = notificationStreamUtility.normalizeUser(notificationType, userData);\r\n          if (user && user.userId != null && user.userName != null) {\r\n            const { userId } = user;\r\n            const { userName } = user;\r\n            if ($scope.library.userIdList.indexOf(userId) > -1) {\r\n              return false;\r\n            }\r\n            userIds.push(userId);\r\n            $scope.library.userIdList.push(userId);\r\n            $scope.library.userLibrary[userId] = {\r\n              id: userId,\r\n              name: userName,\r\n              profileLink: notificationStreamUtility.getAbsoluteUrl(\r\n                notificationStreamUtility.links.profileLink,\r\n                { id: userId }\r\n              )\r\n            };\r\n          }\r\n        });\r\n      }\r\n\r\n      notification.isClickable = notificationStreamUtility.isCardClickable(notification);\r\n\r\n      if ($scope.notificationIds.indexOf(notification.id) < 0) {\r\n        $scope.notificationIds.push(notification.id);\r\n      }\r\n\r\n      $scope.notifications[notification.id] = notification;\r\n    });\r\n\r\n    $scope.layout.emptyNotificationEnabled = $scope.notificationIds.length === 0;\r\n  };\r\n\r\n  // Builds aggregate game update notification and populates\r\n  // the model collection.\r\n  $scope.buildGameUpdateNotifications = function (gameUpdateNotifications) {\r\n    if (!gameUpdateNotifications || gameUpdateNotifications.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const { gameUpdateModels } = $scope.library;\r\n\r\n    // Start getting game followings, for retrieving full list of game updates.\r\n    // This is due to notification stream keeping only latest 3 updates per 12-hour bucket.\r\n    gameUpdatesService\r\n      .getGameFollowingsForUserAsync($scope.library.currentUserId)\r\n      .then(function (gameFollowings) {\r\n        let i;\r\n        const universeIds = [];\r\n\r\n        // Get list of followed universe ids\r\n        for (i = 0; i < gameFollowings.length; i++) {\r\n          universeIds.push(gameFollowings[i].universeId);\r\n        }\r\n\r\n        // Start getting game updates.\r\n        return gameUpdatesUtility.getGameUpdatesAsync(universeIds, gameUpdateModels);\r\n      })\r\n      .then(function (gameUpdates) {\r\n        const aggregateNotification = gameUpdatesUtility.aggregateGameUpdateNotifications(\r\n          gameUpdateNotifications,\r\n          gameUpdateModels\r\n        );\r\n        let singleGameUpdateModel;\r\n\r\n        if (!aggregateNotification) {\r\n          return;\r\n        }\r\n\r\n        // Add aggregated game update to list of all notifications.\r\n        $scope.notifications[aggregateNotification.id] = aggregateNotification;\r\n        $scope.notificationIds.unshift(aggregateNotification.id);\r\n\r\n        // Fill in game details and icons for models that still need them.\r\n        gameUpdatesUtility.fillGameDetails(gameUpdateModels);\r\n\r\n        if (aggregateNotification.metadataCollection.length === 1) {\r\n          singleGameUpdateModel =\r\n            gameUpdateModels[aggregateNotification.metadataCollection[0].UniverseId];\r\n\r\n          // Send metrics event for single notification.\r\n          gameUpdatesService.markGameUpdateInteractedAsync(\r\n            singleGameUpdateModel.universeId,\r\n            singleGameUpdateModel.createdOnKey,\r\n            gameUpdatesConstants.gameUpdateInteractions.seen,\r\n            $scope.library.currentUserId\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  $scope.getRecentNotifications = function () {\r\n    $scope.layout.getRecentDataInitialized = false;\r\n\r\n    notificationStreamService\r\n      .getRecentNotifications(\r\n        $scope.notificationApiParams.startIndexOfNotifications,\r\n        $scope.notificationApiParams.pageSizeOfNotifications\r\n      )\r\n      .then(\r\n        function (recentNotifications) {\r\n          const gameUpdates = [];\r\n          const otherNotifications = [];\r\n\r\n          $scope.layout.getRecentDataInitialized = true;\r\n          $scope.layout.isGetRecentDataLoadedRequested = false;\r\n\r\n          if (recentNotifications && recentNotifications.length > 0) {\r\n            // Separate game updates from other types of notifications.\r\n            angular.forEach(recentNotifications, function (entry) {\r\n              if (\r\n                notificationStreamUtility.isGameUpdateNotification(entry.notificationSourceType)\r\n              ) {\r\n                gameUpdates.push(entry);\r\n              } else {\r\n                otherNotifications.push(entry);\r\n              }\r\n            });\r\n\r\n            $scope.buildNotificationsList(otherNotifications);\r\n\r\n            if (gameUpdates.length > 0) {\r\n              $scope.buildGameUpdateNotifications(gameUpdates);\r\n            }\r\n\r\n            // Paging.\r\n            $scope.layout.isLazyLoadingRequested = true;\r\n            if (\r\n              recentNotifications.length === $scope.notificationApiParams.pageSizeOfNotifications\r\n            ) {\r\n              $scope.notificationApiParams.startIndexOfNotifications =\r\n                $scope.notificationApiParams.startIndexOfNotifications +\r\n                $scope.notificationApiParams.pageSizeOfNotifications;\r\n              $scope.notificationApiParams.loadMoreNotifications = true;\r\n            }\r\n          }\r\n        },\r\n        function () {\r\n          $log.debug('--- getRecentNotifications call failed ----- ');\r\n          $scope.layout.getRecentDataInitialized = true;\r\n        }\r\n      );\r\n  };\r\n\r\n  $scope.clearUnreadNotifications = function () {\r\n    if ($scope.library.unreadNotifications > 0) {\r\n      $scope.library.unreadNotifications = 0;\r\n      $document.triggerHandler('Roblox.NotificationStream.UnreadNotifications', {\r\n        count: 0,\r\n        isNotificationContentOpen: $scope.layout.isNotificationContentOpen\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.openNotificationStream = function () {\r\n    if ($scope.layout.isGetRecentDataLoadedRequested) {\r\n      $scope.resetNotificationStreamData();\r\n      $scope.getRecentNotifications();\r\n    }\r\n\r\n    $document.triggerHandler('Roblox.NotificationStream.ClearUnreadNotifications', {});\r\n    $scope.clearUnreadNotifications();\r\n  };\r\n\r\n  $scope.toggleNotificationContent = function (forceHidden) {\r\n    if (forceHidden) {\r\n      $scope.layout.isNotificationContentOpen = false;\r\n    } else {\r\n      if (!$scope.library.inApp) {\r\n        $scope.layout.isNotificationContentOpen = !$scope.layout.isNotificationContentOpen;\r\n      }\r\n      if ($scope.layout.isNotificationContentOpen && $scope.layout.isGetRecentDataLoadedRequested) {\r\n        $scope.openNotificationStream();\r\n      }\r\n    }\r\n\r\n    if ($scope.layout.isNotificationContentOpen && $scope.layout.bannerEnabled) {\r\n      $scope.layout.bannerEnabled = false;\r\n    }\r\n\r\n    if ($scope.layout.isLazyLoadingRequested) {\r\n      $scope.layout.isLazyLoadingRequested = false;\r\n    }\r\n  };\r\n\r\n  $scope.getUnreadNotificationCount = function () {\r\n    notificationStreamService.unreadCount().then(\r\n      function (data) {\r\n        if (data) {\r\n          $scope.library.unreadNotifications = data.unreadNotifications;\r\n          if (!$scope.layout.isNotificationContentOpen) {\r\n            $document.triggerHandler('Roblox.NotificationStream.UnreadNotifications', {\r\n              count: data.unreadNotifications,\r\n              isNotificationContentOpen: $scope.layout.isNotificationContentOpen\r\n            });\r\n          } else {\r\n            $scope.layout.bannerText = notificationStreamUtility.textTemplate.newNotification(\r\n              $scope.library.unreadNotifications\r\n            );\r\n          }\r\n        }\r\n      },\r\n      function () {\r\n        $log.debug('--- unreadCount call failed ----- ');\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.resetNotificationStreamData = function () {\r\n    $scope.notificationIds = [];\r\n    $scope.notifications = {};\r\n    if ($scope.notificationApiParams) {\r\n      $scope.notificationApiParams.startIndexOfNotifications = 0;\r\n    }\r\n  };\r\n\r\n  $scope.reloadNotificationStreamData = function () {\r\n    $scope.resetNotificationStreamData();\r\n    $document.triggerHandler('Roblox.NotificationStream.ClearUnreadNotifications', {});\r\n    $scope.getRecentNotifications();\r\n    $scope.layout.bannerEnabled = false;\r\n  };\r\n\r\n  $scope.updateNewNotificationInfo = function () {\r\n    $scope.layout.isGetRecentDataLoadedRequested = true;\r\n    $scope.getUnreadNotificationCount();\r\n    if ($scope.layout.isNotificationContentOpen) {\r\n      $scope.$evalAsync(function () {\r\n        $scope.layout.bannerEnabled = true;\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.updateSettingsInLibrary = function (data) {\r\n    $scope.library.bannerDismissTimeSpan = data.bannerDismissTimeSpan;\r\n    $scope.library.signalRDisconnectionResponseInMilliseconds =\r\n      data.signalRDisconnectionResponseInMilliseconds;\r\n\r\n    $scope.library.eventStreamMetaData = {\r\n      userId: $scope.library.currentUserId,\r\n      inApp: $scope.library.inApp\r\n    };\r\n\r\n    // Switch for launching game from game updates.\r\n    $scope.library.canLaunchGameFromGameUpdate = data.canLaunchGameFromGameUpdate;\r\n  };\r\n\r\n  $scope.handleSignalRSuccess = function () {\r\n    $scope.$evalAsync(function () {\r\n      $scope.layout.errorBannerEnabled = false;\r\n    });\r\n  };\r\n\r\n  $scope.handleSignalRError = function () {\r\n    $timeout(function () {\r\n      $scope.layout.errorBannerEnabled = true;\r\n      $scope.layout.errorText = notificationStreamUtility.textTemplate.noNetworkConnectionText();\r\n    }, $scope.library.signalRDisconnectionResponseInMilliseconds);\r\n  };\r\n\r\n  $scope.handleNotificationStreamNotification = function (data) {\r\n    $log.debug(`--------- this is NotificationStream subscription -----------${data.Type}`);\r\n    switch (data.Type) {\r\n      case notificationStreamUtility.signalRType.NewNotification:\r\n        $scope.updateNewNotificationInfo();\r\n        break;\r\n      case notificationStreamUtility.signalRType.NotificationsRead:\r\n        $scope.clearUnreadNotifications();\r\n        break;\r\n      case notificationStreamUtility.signalRType.NotificationRevoked:\r\n        $scope.getUnreadNotificationCount();\r\n        if (!$scope.layout.isStreamBodyInteracted) {\r\n          $scope.reloadNotificationStreamData();\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  $scope.handleChatPrivacySettingNotification = function (data) {\r\n    $log.debug(\r\n      `--------- this is ChatPrivacySettingNotifications subscription -----------${data.Type}`\r\n    );\r\n    try {\r\n      switch (data.Type) {\r\n        case notificationStreamUtility.signalRType.chatEnabled:\r\n          $scope.library.isChatDisabledByPrivacySetting = false;\r\n          break;\r\n        case notificationStreamUtility.signalRType.chatDisabled:\r\n          $scope.library.isChatDisabledByPrivacySetting = true;\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      let message = `ChatPrivacySettingNotifications:${data.Type}: `;\r\n      if (e && e.message) {\r\n        message += e.message;\r\n      }\r\n      $log.debug(message);\r\n    }\r\n  };\r\n\r\n  $scope.getChatPrivacySetting = function () {\r\n    notificationStreamService.getChatPrivacySettings().then(\r\n      function success(data) {\r\n        $scope.library.isChatDisabledByPrivacySetting = data && !data.chatEnabled;\r\n      },\r\n      function error(e) {\r\n        $log.debug(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.closeErrorBanner = function () {\r\n    $scope.layout.errorBannerEnabled = false;\r\n    $scope.layout.errorText = '';\r\n  };\r\n\r\n  $scope.closeBanner = function () {\r\n    $scope.layout.bannerEnabled = false;\r\n    $scope.layout.bannerText = '';\r\n  };\r\n\r\n  // // ----------------------------------- SignalR --------------------------------\r\n  $scope.initializeRealTimeSubscriptions = function () {\r\n    if (angular.isDefined(RealTime)) {\r\n      const realTimeClient = RealTime.Factory.GetClient();\r\n      realTimeClient.SubscribeToConnectionEvents(\r\n        $scope.handleSignalRSuccess,\r\n        $scope.handleSignalRSuccess,\r\n        $scope.handleSignalRError,\r\n        notificationStreamUtility.notificationsName.NotificationStream\r\n      );\r\n\r\n      realTimeClient.Subscribe(\r\n        notificationStreamUtility.notificationsName.NotificationStream,\r\n        $scope.handleNotificationStreamNotification\r\n      );\r\n\r\n      realTimeClient.Subscribe(\r\n        notificationStreamUtility.notificationsName.ChatPrivacySettingNotifications,\r\n        $scope.handleChatPrivacySettingNotification\r\n      );\r\n    }\r\n  };\r\n\r\n  // // ----------------------------------- CODE TO RUN --------------------------------\r\n\r\n  $scope.getUnreadNotificationCountFromDom = () => {\r\n    const unreadNotificationElement = angular.element(\r\n      '.notification-stream-icon .notification-red'\r\n    );\r\n    if (unreadNotificationElement && !Number.isNaN(unreadNotificationElement)) {\r\n      $scope.library.unreadNotifications = parseInt(unreadNotificationElement.html(), 10);\r\n    }\r\n  };\r\n\r\n  function initializeLayout() {\r\n    $scope.layout = angular.copy(notificationStreamUtility.layout);\r\n    $scope.notificationApiParams = angular.copy(notificationStreamUtility.notificationApiParams);\r\n    if ($scope.library.inApp) {\r\n      $scope.getUnreadNotificationCount();\r\n      $scope.layout.isNotificationContentOpen = true;\r\n    } else {\r\n      $scope.getUnreadNotificationCountFromDom();\r\n    }\r\n  }\r\n\r\n  function initializePageData() {\r\n    try {\r\n      $scope.library = $scope.library || notificationStreamUtility.library;\r\n      $scope.resetNotificationStreamData();\r\n      $scope.getChatPrivacySetting();\r\n\r\n      notificationStreamService.initialize().then(\r\n        function (data) {\r\n          if (data) {\r\n            notificationStreamUtility.layout.pageDataInitialized = true;\r\n            $scope.updateSettingsInLibrary(data);\r\n          }\r\n        },\r\n        function () {\r\n          $log.debug('----- initialize data request failed ----');\r\n        }\r\n      );\r\n    } catch (e) {\r\n      let message = 'initializePageData:';\r\n      if (e && e.message) {\r\n        message += e.message;\r\n      }\r\n      $log.debug(message);\r\n    }\r\n  }\r\n\r\n  function initializeStream() {\r\n    if (!$scope.layout.isNotificationContentOpen) {\r\n      const property = angular.copy($scope.library.eventStreamMetaData);\r\n      property.countOfUnreadNotification = $scope.library.unreadNotifications;\r\n      eventStreamService.sendEventWithTarget(\r\n        eventStreamService.eventNames.notificationStream.openContent,\r\n        'click',\r\n        property\r\n      );\r\n    }\r\n    $scope.toggleNotificationContent();\r\n  }\r\n\r\n  $scope.initializeNotificationStream = function () {\r\n    initializePageData();\r\n    initializeLayout();\r\n    initializeStream();\r\n    $scope.initializeRealTimeSubscriptions();\r\n  };\r\n\r\n  $scope.initializeNotificationStream();\r\n}\r\n\r\nnotificationStreamModule.controller('notificationStreamController', notificationStreamController);\r\n\r\nexport default notificationStreamController;\r\n","import angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction notificationsController(\r\n  $scope,\r\n  notificationStreamService,\r\n  notificationStreamUtility,\r\n  hybridService,\r\n  eventStreamService,\r\n  urlService,\r\n  chatDispatchService,\r\n  $document,\r\n  $log\r\n) {\r\n  'ngInject';\r\n\r\n  function sendEventStream(eventName, notificationId, eventType) {\r\n    const notification = $scope.notifications[notificationId];\r\n    const property = angular.copy($scope.library.eventStreamMetaData);\r\n    property.notificationType = notification.notificationSourceType;\r\n    eventStreamService.sendEventWithTarget(eventName, eventType, property);\r\n  }\r\n\r\n  $scope.parseErrorFromApiResponse = function (response) {\r\n    const error = response && response.errors && response.errors[0];\r\n    return error;\r\n  };\r\n\r\n  $scope.acceptFriend = function (targetUserId, notificationId, event) {\r\n    $log.debug('---------------- acceptFriend --------- ');\r\n    const notification = $scope.notifications[notificationId];\r\n    $scope.interactNotification(notification);\r\n\r\n    notificationStreamService.acceptFriendV2(targetUserId).then(\r\n      function (data) {\r\n        $scope.onAcceptFriendSuccess(notificationId, event);\r\n      },\r\n      function (response) {\r\n        const error = $scope.parseErrorFromApiResponse(response);\r\n        if (error && error.userFacingMessage) {\r\n          $scope.layout.errorText = error.userFacingMessage;\r\n          $scope.layout.errorBannerEnabled = true;\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.onAcceptFriendSuccess = function (notificationId, event) {\r\n    const notification = $scope.notifications[notificationId];\r\n    notification.friendRequestActionType =\r\n      notificationStreamUtility.friendRequestActionType.chatBtn;\r\n    notification.metadataCollection[0].IsAccepted = true;\r\n    notification.isFlipped = true;\r\n    $document.triggerHandler('Roblox.Friends.CountChanged');\r\n    sendEventStream(\r\n      eventStreamService.eventNames.notificationStream.acceptFriendRequest,\r\n      notificationId,\r\n      event.type\r\n    );\r\n  };\r\n\r\n  $scope.ignoreFriend = function (targetUserId, notificationId, event) {\r\n    $log.debug('---------------- ignoreFriend --------- ');\r\n    const notification = $scope.notifications[notificationId];\r\n    $scope.interactNotification(notification);\r\n\r\n    notificationStreamService.ignoreFriendV2(targetUserId).then(\r\n      function (data) {\r\n        $scope.onIgnoreFriend(notificationId, event);\r\n      },\r\n      function (response) {\r\n        $scope.onIgnoreFriend(notificationId, event);\r\n      }\r\n    );\r\n  };\r\n\r\n  $scope.onIgnoreFriend = function (notificationId, event) {\r\n    const notification = $scope.notifications[notificationId];\r\n    notification.isSlideOut = true;\r\n    sendEventStream(\r\n      eventStreamService.eventNames.notificationStream.ignoreFriendRequest,\r\n      notificationId,\r\n      event.type\r\n    );\r\n  };\r\n\r\n  $scope.removeNotification = function (notificationId) {\r\n    $log.debug(`---------------- removeNotification --------- notificationId:  ${notificationId}`);\r\n    const index = $scope.notificationIds.indexOf(notificationId);\r\n    $scope.notificationIds.splice(index, 1);\r\n    delete $scope.notifications[notificationId];\r\n  };\r\n\r\n  $scope.chat = function (friendId, notificationId, event) {\r\n    if (!$scope.library.isChatDisabledByPrivacySetting) {\r\n      const notification = $scope.notifications[notificationId];\r\n      $scope.interactNotification(notification);\r\n      const chatPermissionVerifier = chatDispatchService.buildPermissionVerifier($scope.library);\r\n      chatPermissionVerifier.uwpApp.hybridRequired = true;\r\n      chatDispatchService.startChat(friendId, chatPermissionVerifier);\r\n      sendEventStream(\r\n        eventStreamService.eventNames.notificationStream.chat,\r\n        notificationId,\r\n        event.type\r\n      );\r\n    }\r\n  };\r\n\r\n  $scope.interactNotification = function (notification) {\r\n    if (!notification.isInteracted) {\r\n      notificationStreamService.markInteracted(notification.id).then(function () {\r\n        notification.isInteracted = true;\r\n      });\r\n    }\r\n  };\r\n\r\n  $scope.clickCard = function (notification) {\r\n    let url = '';\r\n    let params = {};\r\n    switch (notification.notificationSourceType) {\r\n      case notificationStreamUtility.notificationSourceType.friendRequestReceived:\r\n        $scope.interactNotification(notification);\r\n        if (notification.eventCount > 1 || notification.metadataCollection.length === 0) {\r\n          url = notificationStreamUtility.links.friendRequestLink;\r\n          if ($scope.library.inApp) {\r\n            params = {\r\n              feature: notificationStreamUtility.links.friendRequestTabName,\r\n              urlPath: url\r\n            };\r\n            hybridService.navigateToFeature(params, function (status) {\r\n              $log.debug(`openUserFriendsPage ---- status:${status}`);\r\n            });\r\n          } else {\r\n            window.location.href = urlService.getAbsoluteUrl(url);\r\n          }\r\n        } else if (notification.metadataCollection && notification.metadataCollection.length > 0) {\r\n          var validData = notification.metadataCollection[0];\r\n          url = notificationStreamUtility.links.profileLink;\r\n          const userId = validData.SenderUserId;\r\n          if ($scope.library.inApp) {\r\n            hybridService.openUserProfile(parseInt(userId), function (status) {\r\n              $log.debug(`openUserProfile ---- status:${status}`);\r\n            });\r\n          } else {\r\n            window.location.href = notificationStreamUtility.getAbsoluteUrl(url, { id: userId });\r\n          }\r\n        }\r\n\r\n        break;\r\n      case notificationStreamUtility.notificationSourceType.friendRequestAccepted:\r\n        $scope.interactNotification(notification);\r\n        url = notificationStreamUtility.links.friendsLink;\r\n        if ($scope.library.inApp) {\r\n          params = {\r\n            feature: notificationStreamUtility.links.friendsTabName,\r\n            urlPath: url\r\n          };\r\n          hybridService.navigateToFeature(params, function (status) {\r\n            $log.debug(`openUserFriendsPage ---- status:${status}`);\r\n          });\r\n        } else {\r\n          window.location.href = urlService.getAbsoluteUrl(url);\r\n        }\r\n        break;\r\n      case notificationStreamUtility.notificationSourceType.privateMessageReceived:\r\n        $scope.interactNotification(notification);\r\n        if (notification.eventCount > 1 || notification.metadataCollection.length === 0) {\r\n          url = notificationStreamUtility.links.inboxLink;\r\n        } else if (notification.metadataCollection && notification.metadataCollection.length > 0) {\r\n          var validData = notification.metadataCollection[0];\r\n          url =\r\n            notificationStreamUtility.links.inboxLink +\r\n            notificationStreamUtility.links.inboxMessageDetailQuery +\r\n            validData.MessageId;\r\n        }\r\n\r\n        if ($scope.library.inApp) {\r\n          params = {\r\n            feature: notificationStreamUtility.links.inboxTabName,\r\n            urlPath: url\r\n          };\r\n          hybridService.navigateToFeature(params, function (status) {\r\n            $log.debug(`openUserProfile ---- status:${status}`);\r\n          });\r\n        } else {\r\n          window.location.href = urlService.getAbsoluteUrl(url);\r\n        }\r\n        break;\r\n      case notificationStreamUtility.notificationSourceType.developerMetricsAvailable:\r\n        $scope.interactNotification(notification);\r\n        break;\r\n      case notificationStreamUtility.notificationSourceType.groupJoinRequestAccepted:\r\n        $scope.interactNotification(notification);\r\n        if (notification.metadataCollection.length === 0) {\r\n          url = notificationStreamUtility.links.myGroupsLink;\r\n          if ($scope.library.inApp) {\r\n            params = {\r\n              feature: notificationStreamUtility.links.groupsTabName,\r\n              urlPath: url\r\n            };\r\n            hybridService.navigateToFeature(params, function (status) {\r\n              $log.debug(`openGroupDetails ---- status:${status}`);\r\n            });\r\n          } else {\r\n            window.location.href = urlService.getAbsoluteUrl(url);\r\n          }\r\n        } else if (notification.metadataCollection && notification.metadataCollection.length > 0) {\r\n          var validData = notification.metadataCollection[0];\r\n          url = notificationStreamUtility.links.groupLink;\r\n          const groupId = validData.AccepterGroupId;\r\n          params = {\r\n            feature: notificationStreamUtility.links.groupsTabName,\r\n            urlPath: url\r\n          };\r\n          if ($scope.library.inApp) {\r\n            hybridService.navigateToFeature(params, function (status) {\r\n              $log.debug(`openGroupDetails ---- status:${status}`);\r\n            });\r\n          } else {\r\n            window.location.href = notificationStreamUtility.getAbsoluteUrl(url, { id: groupId });\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  $scope.notificationSourceType = notificationStreamUtility.notificationSourceType;\r\n\r\n  // Content view manager to support switching between the default\r\n  // notification view and  Game Updates view.\r\n  $scope.contentViewManager = (function () {\r\n    const contentViews = {};\r\n    const manager = {};\r\n\r\n    manager.addContentView = function (viewScope) {\r\n      contentViews[viewScope.viewId] = viewScope;\r\n    };\r\n\r\n    manager.selectContentView = function (viewId) {\r\n      const viewScope = contentViews[viewId];\r\n\r\n      if (!viewScope) {\r\n        return;\r\n      }\r\n\r\n      angular.forEach(contentViews, function (vScope) {\r\n        vScope.isActive = false;\r\n      });\r\n\r\n      viewScope.isActive = true;\r\n    };\r\n\r\n    return manager;\r\n  })();\r\n\r\n  $document.bind('Roblox.Popover.Status', function (event, args) {\r\n    $log.debug('notificationsController');\r\n\r\n    // Go to main content view when notification stream is being opened.\r\n    if (!args.isOpen) {\r\n      $scope.contentViewManager.selectContentView($scope.library.notificationContentViews.main);\r\n    }\r\n  });\r\n}\r\n\r\nnotificationStreamModule.controller('notificationsController', notificationsController);\r\n\r\nexport default notificationsController;\r\n","import angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction clickInCard(eventStreamService, hybridService, notificationStreamUtility, $log, $filter) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    link(scope, element, attrs) {\r\n      element.bind('click', function (event) {\r\n        if (!event.target) {\r\n          return false;\r\n        }\r\n\r\n        const selectedElm = angular.element(event.target);\r\n        const eventType = selectedElm.attr('type');\r\n        if (event.target && eventType) {\r\n          const property = angular.copy(scope.library.eventStreamMetaData);\r\n          if (scope.notification) {\r\n            property.notificationType = scope.notification.notificationSourceType;\r\n            scope.interactNotification(scope.notification);\r\n          }\r\n          const eventName = eventStreamService.eventNames.notificationStream[eventType];\r\n          eventStreamService.sendEventWithTarget(eventName, event.type, property);\r\n\r\n          if (scope.library.inApp) {\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n            switch (eventType) {\r\n              case notificationStreamUtility.links.settingLinkName:\r\n                var params = {\r\n                  feature: notificationStreamUtility.links.settingTabName,\r\n                  urlPath: notificationStreamUtility.links.settingLink\r\n                };\r\n                hybridService.navigateToFeature(params, function (status) {\r\n                  $log.debug(`navigateToFeature ---- status:${status}`);\r\n                });\r\n                break;\r\n              case notificationStreamUtility.links.friendRequestLinkName:\r\n                var params = {\r\n                  feature: notificationStreamUtility.links.friendRequestTabName,\r\n                  urlPath: notificationStreamUtility.links.friendRequestLink\r\n                };\r\n                hybridService.navigateToFeature(params, function (status) {\r\n                  $log.debug(`openUserProfile ---- status:${status}`);\r\n                });\r\n                break;\r\n              case notificationStreamUtility.links.profileLinkName:\r\n                var userId;\r\n                if (\r\n                  selectedElm.attr('href') &&\r\n                  selectedElm.attr('href').match(/users\\/(\\d+)/, '')\r\n                ) {\r\n                  userId = selectedElm.attr('href').match(/users\\/(\\d+)/, '')[1];\r\n                } else {\r\n                  userId = scope.userIds[0];\r\n                }\r\n                hybridService.openUserProfile(parseInt(userId), function (status) {\r\n                  $log.debug(`openUserProfile ---- status:${status}`);\r\n                });\r\n                break;\r\n              case notificationStreamUtility.links.groupLinkName:\r\n                var url;\r\n                if (\r\n                  selectedElm.attr('href') &&\r\n                  selectedElm.attr('href').match(/groups\\/(\\d+)/, '')\r\n                ) {\r\n                  const groupId = selectedElm.attr('href').match(/groups\\/(\\d+)/, '')[1];\r\n                  url = $filter('formatString')(notificationStreamUtility.links.groupLink, {\r\n                    id: groupId\r\n                  });\r\n                } else {\r\n                  url = notificationStreamUtility.links.myGroupsLink;\r\n                }\r\n                params = {\r\n                  feature: notificationStreamUtility.links.groupsTabName,\r\n                  urlPath: url\r\n                };\r\n                hybridService.navigateToFeature(params, function (status) {\r\n                  $log.debug(`openGroupDetails ---- status:${status}`);\r\n                });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.directive('clickInCard', clickInCard);\r\n\r\nexport default clickInCard;\r\n","import { Intl } from \"Roblox\";\r\nimport notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction developerMetricsAvailable($window, gameUpdatesService, notificationStreamUtility, urlService, $log) {\r\n    \"ngInject\";\r\n\r\n    function getMonthName(month) {\r\n        var months = new Intl().getMonthsList('long');\r\n        for (var i = 0, len = months.length; i < len; i++) {\r\n            if (months[i].value === month) {\r\n                return months[i].name;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: {\r\n            notification: \"=\",\r\n            appMeta: \"=\",\r\n            library: \"=\",\r\n            interactNotification: \"&\"\r\n        },\r\n        templateUrl: notificationStreamUtility.templates.developerMetricsAvailableTemplate,\r\n        link: function (scope, element, attrs) {\r\n            var init = function () {\r\n                scope.notificationSourceType = notificationStreamUtility.notificationSourceType;\r\n                scope.developerMetricsAvailableLayout = {\r\n                    month: \"\",\r\n                    year: \"\",\r\n                    universeId: -1,\r\n                    gameName: \"\",\r\n                    gameNameLinked: \"\",\r\n                    rootPlaceId: -1,\r\n                    gameLinkUrl: null,\r\n                    gameIconUrl: null\r\n                }\r\n                var metaData = scope.notification.metadataCollection;\r\n                if (metaData && metaData.length > 0) {\r\n                    var validData = metaData[0];\r\n                    var url = urlService.getAbsoluteUrl(\"/places/\" + validData.rootPlaceId + \"/stats\");\r\n                    scope.developerMetricsAvailableLayout.month = getMonthName(validData.month);\r\n                    scope.developerMetricsAvailableLayout.year = validData.year;\r\n                    scope.developerMetricsAvailableLayout.universeId = validData.universeId;\r\n                    scope.developerMetricsAvailableLayout.gameName = validData.gameName;\r\n                    scope.developerMetricsAvailableLayout.gameNameLinked = '<a class=\"text-name font-caption-header\" href=\\\"' + url + '\\\">' + validData.gameName + '</a>';\r\n                    scope.developerMetricsAvailableLayout.rootPlaceId = validData.rootPlaceId;\r\n                    scope.developerMetricsAvailableLayout.gameLinkUrl = url;\r\n                    gameUpdatesService.multiGetGameIconsAsync([validData.universeId]).then(\r\n                        function (gameIcons) {\r\n                            if (!gameIcons || !gameIcons.hasOwnProperty(validData.universeId)) {\r\n                                return;\r\n                            }\r\n\r\n                            scope.developerMetricsAvailableLayout.gameIconUrl = gameIcons[validData.universeId];\r\n                        }\r\n                    );\r\n\r\n                    // Handler to launch game when view button is clicked.\r\n                    scope.viewButtonHandler = function () {\r\n                        $window.location.href = scope.developerMetricsAvailableLayout.gameLinkUrl;\r\n                    };\r\n                }\r\n            }\r\n\r\n            init();\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"developerMetricsAvailable\", developerMetricsAvailable);\r\n\r\nexport default developerMetricsAvailable;","import notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction friendRequest(notificationStreamUtility, $log, thumbnailConstants) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: {\r\n      notification: '=',\r\n      library: '=',\r\n      appMeta: '=',\r\n      acceptFriend: '&',\r\n      ignoreFriend: '&',\r\n      chat: '&',\r\n      interactNotification: '&'\r\n    },\r\n    templateUrl: notificationStreamUtility.templates.friendRequestTemplate,\r\n    link(scope, element, attrs) {\r\n      const metaData = scope.notification.metadataCollection;\r\n      const notificationType = scope.notification.notificationSourceType;\r\n      const { length } = metaData;\r\n      const count = scope.notification.eventCount ? scope.notification.eventCount : length;\r\n      let userOne = '';\r\n      let userTwo = '';\r\n\r\n      const textFormat = function () {\r\n        scope.userIds = [];\r\n        scope.notificationDisplayText = '';\r\n        metaData.forEach(function (data, index) {\r\n          const user = notificationStreamUtility.normalizeUser(notificationType, data);\r\n          const { userId } = user;\r\n          const { userName } = user;\r\n          const { displayName } = user;\r\n          const profileLink =\r\n            scope.library.userLibrary[userId] && scope.library.userLibrary[userId].profileLink\r\n              ? scope.library.userLibrary[userId].profileLink\r\n              : notificationStreamUtility.getAbsoluteUrl(\r\n                  notificationStreamUtility.links.profileLink,\r\n                  { id: userId }\r\n                );\r\n          if (scope.userIds.indexOf(userId) < 0) {\r\n            scope.userIds.push(userId);\r\n          }\r\n          const htmlTemplate = notificationStreamUtility.getUserHtmlTemplate(\r\n            notificationType,\r\n            count\r\n          );\r\n          const html = notificationStreamUtility.getFormatString(htmlTemplate, {\r\n            userId,\r\n            userName,\r\n            displayName,\r\n            profileLink\r\n          });\r\n          if (index < 1) {\r\n            userOne += html;\r\n          } else if (index < 2) {\r\n            userTwo += html;\r\n          }\r\n        });\r\n\r\n        if (length === 0) {\r\n          scope.notificationDisplayText = notificationStreamUtility.normalizeYouHaveText(\r\n            notificationType,\r\n            count\r\n          );\r\n        } else {\r\n          // Multiple Users\r\n          if (count > 2 || count > length) {\r\n            const userMultipleCount = length > 2 ? count - 2 : count - length;\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeMultipleDisplayText(\r\n              notificationType,\r\n              userOne,\r\n              userTwo,\r\n              userMultipleCount\r\n            );\r\n            scope.requestConfirmedText = notificationStreamUtility.normalizeMultipleConfirmedText(\r\n              notificationType,\r\n              userOne,\r\n              userTwo,\r\n              userMultipleCount\r\n            );\r\n            // Two Users\r\n          } else if (count === 2) {\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeDoubleDisplayText(\r\n              notificationType,\r\n              userOne,\r\n              userTwo\r\n            );\r\n            scope.requestConfirmedText = notificationStreamUtility.normalizeDoubleConfirmedText(\r\n              notificationType,\r\n              userOne,\r\n              userTwo\r\n            );\r\n            // One User\r\n          } else {\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeSingleDisplayText(\r\n              notificationType,\r\n              userOne\r\n            );\r\n            scope.requestConfirmedText = notificationStreamUtility.normalizeSingleConfirmedText(\r\n              notificationType,\r\n              userOne\r\n            );\r\n          }\r\n        }\r\n      };\r\n\r\n      const actionTypeDistribution = function () {\r\n        // check action Type based on event count and metadata\r\n        scope.friendRequestActionType = notificationStreamUtility.friendRequestActionType;\r\n        if (\r\n          scope.notification.notificationSourceType ===\r\n          notificationStreamUtility.notificationSourceType.friendRequestReceived\r\n        ) {\r\n          if (length === 1 && count === 1 && !metaData[0].IsAccepted) {\r\n            scope.notification.friendRequestActionType = metaData[0].IsAccepted\r\n              ? notificationStreamUtility.friendRequestActionType.chatBtn\r\n              : notificationStreamUtility.friendRequestActionType.acceptIgnoreBtns;\r\n          } else if (length === 1 && count === 1 && metaData[0].IsAccepted) {\r\n            scope.notification.friendRequestActionType =\r\n              notificationStreamUtility.friendRequestActionType.chatBtn;\r\n          } else {\r\n            scope.notification.friendRequestActionType =\r\n              notificationStreamUtility.friendRequestActionType.viewAllBtn;\r\n          }\r\n        } else if (\r\n          scope.notification.notificationSourceType ===\r\n          notificationStreamUtility.notificationSourceType.friendRequestAccepted\r\n        ) {\r\n          if (length === 1 && count === 1) {\r\n            scope.notification.friendRequestActionType =\r\n              notificationStreamUtility.friendRequestActionType.chatBtn;\r\n          }\r\n        }\r\n      };\r\n\r\n      const init = function () {\r\n        scope.notificationSourceType = notificationStreamUtility.notificationSourceType;\r\n        scope.friendRequestLink = notificationStreamUtility.layout.friendRequestLink;\r\n        scope.thumbnailTypes = thumbnailConstants.thumbnailTypes;\r\n\r\n        textFormat();\r\n        actionTypeDistribution();\r\n      };\r\n\r\n      init();\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.directive('friendRequest', friendRequest);\r\n\r\nexport default friendRequest;\r\n","import { GameLauncher } from 'Roblox';\r\nimport angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction gameUpdate(\r\n  $window,\r\n  gameUpdatesService,\r\n  gameUpdatesUtility,\r\n  gameUpdatesConstants,\r\n  notificationStreamUtility,\r\n  hybridService,\r\n  $log,\r\n  thumbnailConstants\r\n) {\r\n  'ngInject';\r\n\r\n  const { gameUpdateInteractions } = gameUpdatesConstants;\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    templateUrl: notificationStreamUtility.templates.gameUpdateTemplate,\r\n\r\n    scope: {\r\n      library: '=',\r\n      appMeta: '=',\r\n      contentViewManager: '=',\r\n      notification: '=?',\r\n      gameUpdateModel: '=?'\r\n    },\r\n\r\n    link(scope, element, attrs) {\r\n      const gameUpdateElement = $(element);\r\n      let metaDataCollection;\r\n\r\n      if (!scope.gameUpdateModel) {\r\n        if (!scope.notification) {\r\n          return;\r\n        }\r\n\r\n        metaDataCollection = scope.notification.metadataCollection;\r\n\r\n        if (metaDataCollection && metaDataCollection.length > 0) {\r\n          scope.gameUpdateModel = scope.library.gameUpdateModels[metaDataCollection[0].UniverseId];\r\n        }\r\n\r\n        if (!scope.gameUpdateModel) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      scope.notificationSourceType = notificationStreamUtility.notificationSourceType;\r\n      scope.thumbnailTypes = thumbnailConstants.thumbnailTypes;\r\n\r\n      if (metaDataCollection && metaDataCollection.length > 1) {\r\n        // Aggregated message.\r\n        scope.isAggregated = true;\r\n\r\n        scope.aggregatedDisplayText = gameUpdatesUtility.formatAggregatedDisplayText(\r\n          metaDataCollection[0].GameName,\r\n          metaDataCollection[1].GameName,\r\n          scope.notification.eventCount - 2\r\n        );\r\n      }\r\n\r\n      scope.gameNameMaxLength = gameUpdatesUtility.gameNameMaxLength;\r\n      scope.actionMenuTemplate = 'game-update-action-popover-template';\r\n\r\n      // State of the action menu.\r\n      scope.isActionMenuOpen = false;\r\n\r\n      // Handler to go to game details page.\r\n      scope.goToGameDetails = function () {\r\n        if (scope.library.inApp) {\r\n          hybridService.navigateToFeature({\r\n            feature: 'GameDetails',\r\n            urlPath: scope.gameUpdateModel.gameLinkUrlForApp\r\n          });\r\n        } else {\r\n          $window.location.href = scope.gameUpdateModel.gameLinkUrl;\r\n        }\r\n      };\r\n\r\n      // Handler to launch game when play button is clicked.\r\n      scope.playButtonHandler = function () {\r\n        gameUpdatesService.markGameUpdateInteractedAsync(\r\n          scope.gameUpdateModel.universeId,\r\n          scope.gameUpdateModel.createdOnKey,\r\n          gameUpdateInteractions.played,\r\n          scope.library.currentUserId\r\n        );\r\n\r\n        if (scope.library.inApp) {\r\n          hybridService.launchGame({\r\n            placeId: scope.gameUpdateModel.rootPlaceId,\r\n            requestType: 'RequestGame',\r\n            isPartyLeader: false\r\n          });\r\n        } else {\r\n          GameLauncher.joinMultiplayerGame(scope.gameUpdateModel.rootPlaceId, true, false);\r\n        }\r\n      };\r\n\r\n      // Handler to show game updates inside an aggregated notification.\r\n      scope.viewGameUpdates = function () {\r\n        scope.contentViewManager.selectContentView(\r\n          scope.library.notificationContentViews.gameUpdates\r\n        );\r\n        angular.forEach(scope.library.gameUpdateModels, function (gameUpdateModel) {\r\n          if (!gameUpdateModel.seen) {\r\n            gameUpdatesService\r\n              .markGameUpdateInteractedAsync(\r\n                gameUpdateModel.universeId,\r\n                gameUpdateModel.createdOnKey,\r\n                gameUpdateInteractions.seen,\r\n                scope.library.currentUserId\r\n              )\r\n              .then(\r\n                function () {\r\n                  gameUpdateModel.seen = true;\r\n                },\r\n                function () {\r\n                  // Failed to report game update seen interaction.\r\n                }\r\n              );\r\n          }\r\n        });\r\n      };\r\n\r\n      // Handler to follow the game.\r\n      scope.followGame = function () {\r\n        gameUpdatesService\r\n          .followGameAsync(scope.library.currentUserId, scope.gameUpdateModel.universeId)\r\n          .then(\r\n            function () {\r\n              // Follow completed.\r\n              gameUpdateElement.focus();\r\n              scope.gameUpdateModel.isUnfollowed = false;\r\n\r\n              // Get the game update message if needed.\r\n              if (!scope.gameUpdateModel.updateMessage) {\r\n                gameUpdatesUtility.getGameUpdatesAsync(\r\n                  [scope.gameUpdateModel.universeId],\r\n                  scope.library.gameUpdateModels,\r\n                  null\r\n                );\r\n              }\r\n            },\r\n            function () {\r\n              // TODO: Follow failed. Show error banner.\r\n            }\r\n          );\r\n      };\r\n\r\n      // Handler to unfollow the game.\r\n      scope.unfollowGame = function ($event) {\r\n        if ($event && $event.stopPropagation) {\r\n          $event.stopPropagation();\r\n        }\r\n\r\n        gameUpdatesService\r\n          .unfollowGameAsync(scope.library.currentUserId, scope.gameUpdateModel.universeId)\r\n          .then(\r\n            function () {\r\n              // Unfollow completed.\r\n              gameUpdateElement.focus();\r\n              scope.gameUpdateModel.isUnfollowed = true;\r\n              scope.isActionMenuOpen = false;\r\n              gameUpdatesService.markGameUpdateInteractedAsync(\r\n                scope.gameUpdateModel.universeId,\r\n                scope.gameUpdateModel.createdOnKey,\r\n                gameUpdateInteractions.unfollowed,\r\n                scope.library.currentUserId\r\n              );\r\n            },\r\n            function () {\r\n              // TODO: Unfollow failed. Show error banner.\r\n            }\r\n          );\r\n      };\r\n\r\n      // Handler to report abuse.\r\n      scope.reportAbuse = function () {\r\n        gameUpdatesService.reportAbuse(\r\n          scope.gameUpdateModel.universeId,\r\n          new Date(scope.gameUpdateModel.createdOn)\r\n        );\r\n      };\r\n\r\n      // Handler for the Cancel item on the action menu.\r\n      scope.closeActionMenu = function () {\r\n        scope.isActionMenuOpen = false;\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.directive('gameUpdate', gameUpdate);\r\n\r\nexport default gameUpdate;\r\n","import notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction groupMembership(notificationStreamUtility, $log, thumbnailConstants, $filter) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: {\r\n      notification: '=',\r\n      appMeta: '=',\r\n      library: '=',\r\n      interactNotification: '&'\r\n    },\r\n    templateUrl: notificationStreamUtility.templates.groupMembershipTemplate,\r\n    link(scope, element, attrs) {\r\n      const metaData = scope.notification.metadataCollection;\r\n      const notificationType = scope.notification.notificationSourceType;\r\n      const { length } = metaData;\r\n      const count = scope.notification.eventCount ? scope.notification.eventCount : length;\r\n      let groupOne = '';\r\n      let groupTwo = '';\r\n\r\n      const textFormat = function () {\r\n        scope.notificationDisplayText = '';\r\n        metaData.forEach(function (group, index) {\r\n          const { AccepterGroupId: groupId, AccepterGroupName: groupName } = group;\r\n          const groupLink = notificationStreamUtility.getAbsoluteUrl(\r\n            notificationStreamUtility.layout.groupLink,\r\n            { id: groupId }\r\n          );\r\n          const htmlTemplate = notificationStreamUtility.getGroupHtmlTemplate();\r\n          const html = notificationStreamUtility.getFormatString(htmlTemplate, {\r\n            groupId,\r\n            groupName: $filter('escapeHtml')(groupName),\r\n            groupLink\r\n          });\r\n          if (index < 1) {\r\n            groupOne += html;\r\n            scope.groupMembershipLayout = {\r\n              groupId,\r\n              groupName,\r\n              groupLink\r\n            };\r\n          } else if (index < 2) {\r\n            groupTwo += html;\r\n          }\r\n        });\r\n\r\n        if (length === 0) {\r\n          scope.notificationDisplayText = notificationStreamUtility.normalizeYouHaveText(\r\n            notificationType,\r\n            count\r\n          );\r\n        } else {\r\n          // Multiple groups\r\n          if (count > 2 || count > length) {\r\n            const groupMultipleCount = length > 2 ? count - 2 : count - length;\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeMultipleDisplayText(\r\n              notificationType,\r\n              groupOne,\r\n              groupTwo,\r\n              groupMultipleCount\r\n            );\r\n            // Two groups\r\n          } else if (count === 2) {\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeDoubleDisplayText(\r\n              notificationType,\r\n              groupOne,\r\n              groupTwo\r\n            );\r\n            // One group\r\n          } else {\r\n            scope.notificationDisplayText = notificationStreamUtility.normalizeSingleDisplayText(\r\n              notificationType,\r\n              groupOne\r\n            );\r\n          }\r\n        }\r\n      };\r\n\r\n      const init = function () {\r\n        scope.thumbnailTypes = thumbnailConstants.thumbnailTypes;\r\n        scope.groupMembershipLayout = {};\r\n\r\n        textFormat();\r\n      };\r\n\r\n      init();\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.directive('groupMembership', groupMembership);\r\n\r\nexport default groupMembership;\r\n","import { Scrollbar } from \"Roblox\";\r\nimport angular from \"angular\";\r\nimport notificationStreamModule from \"../notificationStreamModule\";\r\n\r\n\r\nfunction lazyLoading(notificationStreamService, $document, $log) {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        scope: true,\r\n        link: function (scope, element, attrs) {\r\n            scope.callbackLazyLoad = function () {\r\n                if (!scope.notificationApiParams) {\r\n                    return false;\r\n                }\r\n                if (scope.notificationApiParams.loadMoreNotifications) {\r\n                    scope.layout.notiticationsLazyLoadingEnabled = true;\r\n                    notificationStreamService.getRecentNotifications(\r\n                        scope.notificationApiParams.startIndexOfNotifications,\r\n                        scope.notificationApiParams.pageSizeOfNotifications)\r\n                        .then(\r\n                            function (data) {\r\n                                scope.layout.notiticationsLazyLoadingEnabled = false;\r\n                                if (data && data.length > 0) {\r\n                                    scope.buildNotificationsList(data);\r\n                                    scope.notificationApiParams.startIndexOfNotifications = scope.notificationApiParams.startIndexOfNotifications + scope.notificationApiParams.pageSizeOfNotifications;\r\n                                    if (data.length < scope.notificationApiParams.pageSizeOfNotifications) {\r\n                                        scope.notificationApiParams.loadMoreNotifications = false;\r\n                                        scope.notificationApiParams.startIndexOfNotifications = 0;\r\n                                    }\r\n                                } else {\r\n                                    scope.notificationApiParams.loadMoreNotifications = false;\r\n                                    scope.notificationApiParams.startIndexOfNotifications = 0;\r\n                                }\r\n                            }, function () {\r\n                                scope.layout.notiticationsLazyLoadingEnabled = false;\r\n                                $log.debug(\"---error from get Notificaitons in lazyLoadingDirective.js---\");\r\n                            });\r\n                }\r\n            };\r\n\r\n            scope.setupScrollbar = function () {\r\n                element.mCustomScrollbar({\r\n                    autoExpandScrollbar: false,\r\n                    scrollInertia: 5,\r\n                    contentTouchScroll: 1,\r\n                    mouseWheel: {\r\n                        preventDefault: true\r\n                    },\r\n                    callbacks: {\r\n                        onTotalScrollOffset: 100,\r\n                        onTotalScroll: scope.callbackLazyLoad,\r\n                        onOverflowYNone: scope.callbackLazyLoad\r\n                    }\r\n                });\r\n            }\r\n\r\n            scope.destroyScrollbar = function () {\r\n                $log.debug(\"----- destroyScrollbar ----\");\r\n                element.mCustomScrollbar(\"destroy\");\r\n            }\r\n            var init = function () {\r\n                if (scope.library.inApp) {\r\n                    Scrollbar.setUpOverflowY(element, scope.callbackLazyLoad);\r\n                    Scrollbar.listenToScroll($document, null, scope.callbackLazyLoad);\r\n                } else {\r\n                    scope.setupScrollbar();\r\n                }\r\n            }\r\n\r\n            var watchPageDataInitialized = scope.$watch(\r\n                function () {\r\n                    return scope.layout && scope.layout.isLazyLoadingRequested;\r\n                },\r\n                function (newValue, oldValue) {\r\n                    if (angular.isDefined(newValue) && newValue !== oldValue) {\r\n                        $log.debug(\"----- initializeLayout ----\");\r\n                        if (newValue) {\r\n                            init();\r\n                        } else if (!scope.library.inApp) {\r\n                            scope.destroyScrollbar();\r\n                        }\r\n                    }\r\n                }, true\r\n            );\r\n\r\n            scope.$on(\"$destroy\", function () {\r\n                if (watchPageDataInitialized) {\r\n                    watchPageDataInitialized();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"lazyLoading\", lazyLoading);\r\n\r\nexport default lazyLoading;","import angular from \"angular\";\r\nimport notificationStreamModule from \"../notificationStreamModule\";\r\n\r\n\r\nfunction notificationCard($log, notificationStreamService) {\r\n    \"ngInject\";\r\n\r\n    var transitions = {\r\n        \"transition\": \"transitionend\",\r\n        \"OTransition\": \"oTransitionEnd\",\r\n        \"MozTransition\": \"transitionend\",\r\n        \"WebkitTransition\": \"webkitTransitionEnd\"\r\n    };\r\n\r\n    var whichTransitionEvent = function () {\r\n        var t;\r\n        var el = document.createElement(\"supportedEvent\");\r\n\r\n        for (t in transitions) {\r\n            if (angular.isDefined(el.style[t])) {\r\n                return transitions[t];\r\n            }\r\n        }\r\n    };\r\n\r\n    var transitionEvent = whichTransitionEvent();\r\n    return {\r\n        restrict: \"A\",\r\n        link: function (scope, element, attrs) {\r\n            element.bind(transitionEvent, function (evt) {\r\n                $log.debug('got a css transition event', evt);\r\n\r\n                var slideOutTransition = evt.target.className.search(\"slide-out-left\");\r\n                if (slideOutTransition >= 0) {\r\n                    scope.$evalAsync(function () { scope.removeNotification(scope.notification.id) });\r\n                }\r\n            });\r\n\r\n            scope.updateNotificationSetting = function (isEnabled) {\r\n                notificationStreamService.updateNotificationSettings(scope.notification.notificationSourceType, isEnabled)\r\n                    .then(function (data) {\r\n                        $log.debug('turnOffNotification -- success', data);\r\n                        scope.notification.isTurnOff = !isEnabled;\r\n                    }, function (error) {\r\n                        $log.debug('turnOffNotification --fail');\r\n\r\n                    });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationCard\", notificationCard);\r\n\r\nexport default notificationCard;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationContent(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationContentTemplate\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationContent\", notificationContent);\r\n\r\nexport default notificationContent;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationContentView(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        transclude: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationContentViewTemplate,\r\n\r\n        scope: {\r\n            library: \"=\",\r\n            contentViewManager: \"=\",\r\n            viewId: \"@\",\r\n            isActive: \"=?\"\r\n        },\r\n\r\n        link: function (scope, element, attrs) {\r\n            // Add this view to the notificationsController's collection of content views.\r\n            scope.contentViewManager.addContentView(scope);\r\n        }\r\n    };\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationContentView\", notificationContentView);\r\n\r\nexport default notificationContentView;","import notificationStreamModule from '../notificationStreamModule';\r\n\r\n// for notification stream embedded page (in mobile)\r\nfunction notificationStreamBase(notificationStreamUtility, $log) {\r\n  'ngInject';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    replace: true,\r\n    scope: true,\r\n    templateUrl: notificationStreamUtility.templates.notificationStreamBaseViewTemplate\r\n  };\r\n}\r\n\r\nnotificationStreamModule.directive('notificationStreamBase', notificationStreamBase);\r\n\r\nexport default notificationStreamBase;\r\n","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationStreamBaseView(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationStreamBaseViewTemplate\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationStreamBaseView\", notificationStreamBaseView);\r\n\r\nexport default notificationStreamBaseView;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationStreamBody($document, $log) {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        link: function (scope, element, attrs) {\r\n            $document.on(\"click touchstart\", function (event) {\r\n                if (scope.layout) {\r\n                    if (!scope.layout.isStreamBodyInteracted && element.has(event.target).length > 0) {\r\n                        scope.layout.isStreamBodyInteracted = true;\r\n                    } else if (scope.layout.isStreamBodyInteracted && !element.has(event.target).length > 0) {\r\n                        scope.layout.isStreamBodyInteracted = false;\r\n                    }\r\n                    $log.debug(\" ------------------scope.layout.isStreamBodyInteracted----------------- \" + scope.layout.isStreamBodyInteracted);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationStreamBody\", notificationStreamBody);\r\n\r\nexport default notificationStreamBody;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationStreamContainer(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.notificationStreamContainerTemplate\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"notificationStreamContainer\", notificationStreamContainer);\r\n\r\nexport default notificationStreamContainer;","import notificationStreamModule from \"../notificationStreamModule\";\r\nimport { DisplayNames } from \"Roblox\";\r\n\r\nfunction privateMessage(notificationStreamUtility, $log, thumbnailConstants) {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: {\r\n            notification: \"=\",\r\n            appMeta: \"=\",\r\n            library: \"=\",\r\n            interactNotification: \"&\"\r\n        },\r\n        templateUrl: notificationStreamUtility.templates.privateMessageTemplate,\r\n        link: function (scope, element, attrs) {\r\n            var init = function () {\r\n                scope.thumbnailTypes = thumbnailConstants.thumbnailTypes;\r\n                scope.notificationSourceType = notificationStreamUtility.notificationSourceType;\r\n                scope.friendRequestLink = notificationStreamUtility.layout.friendRequestLink;\r\n                scope.privateMessageLayout = {\r\n                    displayUserId: null,\r\n                    displayUserName: \"\",\r\n                    messagePreview: \"\",\r\n                    isStacked: false\r\n                }\r\n                var metaData = scope.notification.metadataCollection;\r\n                var notificationType = scope.notification.notificationSourceType;\r\n                if (scope.notification.eventCount > 1 || (metaData && metaData.length === 0)) {\r\n                    scope.privateMessageLayout.isStacked = true;\r\n                }\r\n\r\n                if (metaData && metaData.length > 0) {\r\n                    var user = notificationStreamUtility.normalizeUser(notificationType, metaData[0]);\r\n                    scope.privateMessageLayout.displayUserId = user.userId;\r\n                    scope.privateMessageLayout.displayUserName = DisplayNames && DisplayNames.Enabled() ? user.displayName : user.userName;\r\n                    scope.privateMessageLayout.messagePreview = metaData[0].BodyPreview;\r\n                }\r\n            }\r\n\r\n            init();\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"privateMessage\", privateMessage);\r\n\r\nexport default privateMessage;\r\n","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction test(notificationStreamUtility, $log) {\r\n    \"ngInject\";\r\n    return {\r\n        restrict: \"A\",\r\n        replace: true,\r\n        scope: true,\r\n        templateUrl: notificationStreamUtility.templates.testTemplate,\r\n        link: function (scope, element, attrs) {\r\n            var metaData = scope.notification.metadataCollection;\r\n            scope.notificationDisplayText = \"\";\r\n            metaData.forEach(function (data) {\r\n                scope.notificationDisplayText += data.Detail;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.directive(\"test\", test);\r\n\r\nexport default test;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction sortGameUpdates(gameUpdatesUtility) {\r\n    \"ngInject\";\r\n    return function (gameUpdateModels) {\r\n        // Sort in descending order.\r\n        return gameUpdatesUtility.sortGameUpdatesByCreatedDate(gameUpdateModels, false);\r\n    };\r\n}\r\n\r\nnotificationStreamModule.filter(\"sortGameUpdates\", sortGameUpdates);\r\n\r\nexport default sortGameUpdates;","import notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction sortNotificationsByEventDateDesc(notificationStreamUtility) {\r\n    \"ngInject\";\r\n    return function (notifications) {\r\n        // Sort in descending order.\r\n        return notificationStreamUtility.sortNotificationsByEventDate(notifications, false);\r\n    };\r\n}\r\n\r\nnotificationStreamModule.filter(\"sortNotificationsByEventDateDesc\", sortNotificationsByEventDateDesc);\r\n\r\nexport default sortNotificationsByEventDateDesc;","import { Lang } from 'Roblox';\r\nimport angular from 'angular';\r\n\r\nconst notificationStream = angular\r\n  .module('notificationStream', [\r\n    'robloxApp',\r\n    'ui.bootstrap',\r\n    'notificationStreamHtmlTemplate',\r\n    'thumbnails'\r\n  ])\r\n  .config([\r\n    'languageResourceProvider',\r\n    function (languageResourceProvider) {\r\n      const notificationStreamResources = Lang.NotificationStreamResources;\r\n      // Temporary until translation strings are added\r\n      const translationConstants = {\r\n        'Message.GroupJoinRequestAcceptedSingle':\r\n          (notificationStreamResources &&\r\n            notificationStreamResources['Message.GroupJoinRequestAcceptedSingle']) ||\r\n          'Your request to join {groupOne} has been accepted.',\r\n        'Message.GroupJoinRequestAcceptedDouble':\r\n          (notificationStreamResources &&\r\n            notificationStreamResources['Message.GroupJoinRequestAcceptedDouble']) ||\r\n          'Your requests to join {groupOne} and {groupTwo} have been accepted.',\r\n        'Message.GroupJoinRequestAcceptedMultiple':\r\n          (notificationStreamResources &&\r\n            notificationStreamResources['Message.GroupJoinRequestAcceptedMultiple']) ||\r\n          'Your requests to join {groupOne}, {groupTwo}, and {groupMultipleCount, plural, =1 {# other} other {# others}} have been accepted.'\r\n      };\r\n\r\n      if (Lang.NotificationStreamResources) {\r\n        languageResourceProvider.setLanguageKeysFromFile(notificationStreamResources);\r\n        languageResourceProvider.setLanguageKeysFromFile(translationConstants);\r\n      }\r\n    }\r\n  ]);\r\n\r\nexport default notificationStream;\r\n","import { AbuseReportDispatcher } from 'Roblox';\r\nimport angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction gameUpdatesService(httpService, $q, $log, urlService, gameUpdatesConstants, $window) {\r\n  'ngInject';\r\n\r\n  const { endpoints } = gameUpdatesConstants;\r\n  const { apiParams } = gameUpdatesConstants;\r\n\r\n  // Helper to invoke a multi-get endpoint with input batches of acceptable size.\r\n  function batchMultiGet(endpoint, paramValues, batchSize, paramsBuilder) {\r\n    const promises = [];\r\n    let params;\r\n    let batchStartIndex = 0;\r\n    let batch;\r\n\r\n    batch = paramValues.slice(batchStartIndex, batchSize);\r\n\r\n    while (batch.length > 0 && batchStartIndex < paramValues.length) {\r\n      params = paramsBuilder(batch);\r\n\r\n      promises.push(httpService.httpGet(endpoint, params));\r\n\r\n      batchStartIndex += batchSize;\r\n      batch = paramValues.slice(batchStartIndex, batchStartIndex + batchSize);\r\n    }\r\n\r\n    return $q.all(promises);\r\n  }\r\n\r\n  // Helper to get game playability.\r\n  function multiGetPlaceDetailsAsync(placeIds) {\r\n    const endpoint = endpoints.getGameDetailsEndpoint();\r\n\r\n    return batchMultiGet(endpoint, placeIds, apiParams.placeDetailBatchSize, function (batch) {\r\n      return {\r\n        placeIds: batch\r\n      };\r\n    }).then(function (results) {\r\n      const placeDetails = {};\r\n      const imageTokens = [];\r\n\r\n      if (!results || results.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      angular.forEach(results, function (result) {\r\n        if (!result) {\r\n          return;\r\n        }\r\n\r\n        angular.forEach(result, function (item) {\r\n          placeDetails[item.placeId] = {\r\n            universeId: item.universeId,\r\n            isPlayable: item.isPlayable,\r\n            imageToken: item.imageToken\r\n          };\r\n        });\r\n      });\r\n\r\n      return placeDetails;\r\n    });\r\n  }\r\n\r\n  // Helper to retrieve latest game updates.\r\n  function multiGetGameUpdatesAsync(universeIds, sinceDateTime) {\r\n    // sinceDateTime is not being used right now because the EventDate from notifications stream does not return the correct date for now.\r\n    const endpoint = endpoints.getGameUpdatesEndpoint();\r\n\r\n    return batchMultiGet(endpoint, universeIds, apiParams.gameUpdateBatchSize, function (batch) {\r\n      return {\r\n        universeIds: batch\r\n      };\r\n    }).then(function (results) {\r\n      const gameUpdates = [];\r\n\r\n      if (!results || results.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      angular.forEach(results, function (result) {\r\n        if (!result) {\r\n          return;\r\n        }\r\n\r\n        angular.forEach(result, function (item) {\r\n          gameUpdates.push(item);\r\n        });\r\n      });\r\n\r\n      return gameUpdates;\r\n    });\r\n  }\r\n\r\n  return {\r\n    markGameUpdateReadAsync(universeId, createdOn, currentUserId) {\r\n      const endpoint = endpoints.getReadEndpoint();\r\n\r\n      const params = {\r\n        universeId,\r\n        createdOn: createdOn.toString(),\r\n        currentUserId\r\n      };\r\n\r\n      return httpService.httpPost(endpoint, params);\r\n    },\r\n\r\n    markGameUpdateInteractedAsync(universeId, createdOnKey, interactionType, currentUserId) {\r\n      const endpoint = endpoints.getInteractedEndpoint();\r\n\r\n      const params = {\r\n        universeId,\r\n        createdOnKey,\r\n        interactionType,\r\n        currentUserId\r\n      };\r\n\r\n      return httpService.httpPost(endpoint, params);\r\n    },\r\n\r\n    multiGetPlaceDetailsAsync(placeIds) {\r\n      if (!placeIds || placeIds.length === 0) {\r\n        return $q(function (resolve, reject) {\r\n          resolve(null);\r\n        });\r\n      }\r\n\r\n      return multiGetPlaceDetailsAsync(placeIds);\r\n    },\r\n\r\n    multiGetGameUpdatesAsync(universeIds, sinceDateTime) {\r\n      if (!universeIds || universeIds.length === 0) {\r\n        return $q(function (resolve, reject) {\r\n          resolve(null);\r\n        });\r\n      }\r\n\r\n      return multiGetGameUpdatesAsync(universeIds, sinceDateTime);\r\n    },\r\n\r\n    getGameFollowingsForUserAsync(userId) {\r\n      const endpoint = endpoints.getGameFollowingsEndpoint(userId);\r\n      return httpService.httpGet(endpoint, {});\r\n    },\r\n\r\n    followGameAsync(userId, universeId) {\r\n      const endpoint = endpoints.getFollowGameEndpoint(userId, universeId);\r\n      return httpService.httpPost(endpoint, {});\r\n    },\r\n\r\n    unfollowGameAsync(userId, universeId) {\r\n      const endpoint = endpoints.getFollowGameEndpoint(userId, universeId);\r\n      return httpService.httpDelete(endpoint, {});\r\n    },\r\n\r\n    reportAbuse(universeId, gameUpdateCreatedOn) {\r\n      const url = urlService.getAbsoluteUrl(\r\n        endpoints.getAbuseReportUrl(\r\n          universeId,\r\n          gameUpdateCreatedOn,\r\n          encodeURIComponent($window.location.href)\r\n        )\r\n      );\r\n\r\n      if (AbuseReportDispatcher) {\r\n        AbuseReportDispatcher.triggerUrlAction(url);\r\n      } else {\r\n        $window.location.href = url;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.factory('gameUpdatesService', gameUpdatesService);\r\n\r\nexport default gameUpdatesService;\r\n","import angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction gameUpdatesUtility(\r\n  gameUpdatesService,\r\n  urlService,\r\n  $log,\r\n  notificationStreamUtility,\r\n  layoutLibraryService,\r\n  gameUpdatesConstants\r\n) {\r\n  'ngInject';\r\n\r\n  const { parseEpochMilliseconds } = notificationStreamUtility;\r\n  const { gameNameMaxLength } = gameUpdatesConstants;\r\n\r\n  function truncateGameName(gameName) {\r\n    let truncated = gameName;\r\n\r\n    if (gameName && gameName.length > gameNameMaxLength) {\r\n      truncated = `${gameName.substr(0, gameNameMaxLength - 3)}...`;\r\n    }\r\n\r\n    return truncated;\r\n  }\r\n\r\n  function getGameUpdatesAsync(universeIds, gameUpdateModels, minEventDate) {\r\n    const millisecondsInOneMinute = 60 * 1000;\r\n\r\n    const promise = gameUpdatesService\r\n      .multiGetGameUpdatesAsync(\r\n        universeIds,\r\n        minEventDate ? new Date(minEventDate.getTime() - millisecondsInOneMinute) : null\r\n      )\r\n      .then(function (gameUpdates) {\r\n        let i;\r\n        let gameUpdate;\r\n        let model;\r\n        let createdOnEpoch;\r\n\r\n        if (!gameUpdates || gameUpdates.length === 0) {\r\n          return null;\r\n        }\r\n\r\n        // Add to game update models.\r\n        for (i = 0; i < gameUpdates.length; i++) {\r\n          gameUpdate = gameUpdates[i];\r\n          createdOnEpoch = parseEpochMilliseconds(gameUpdate.createdOn);\r\n\r\n          if (!gameUpdateModels.hasOwnProperty(gameUpdate.universeId)) {\r\n            gameUpdateModels[gameUpdate.universeId] = {\r\n              universeId: gameUpdate.universeId,\r\n              rootPlaceId: gameUpdate.rootPlaceId,\r\n              updateMessage: gameUpdate.content,\r\n              createdOn: createdOnEpoch,\r\n              createdOnKey: gameUpdate.createdOnKey,\r\n              gameName: gameUpdate.universeName,\r\n              truncatedGameName: truncateGameName(gameUpdate.universeName),\r\n              isPlayable: null,\r\n              gameLinkUrl: gameUpdate.rootPlaceId\r\n                ? urlService.getAbsoluteUrl(\r\n                    `/games/${gameUpdate.rootPlaceId}?originatorType=GameUpdateNotification&originatorId=${createdOnEpoch}`\r\n                  )\r\n                : null,\r\n              gameLinkUrlForApp: gameUpdate.rootPlaceId\r\n                ? `games/${gameUpdate.rootPlaceId}?originatorType=GameUpdateNotification&originatorId=${createdOnEpoch}`\r\n                : null\r\n            };\r\n          } else {\r\n            model = gameUpdateModels[gameUpdate.universeId];\r\n            model.updateMessage = gameUpdate.content;\r\n            model.createdOn = createdOnEpoch;\r\n            model.createdOnKey = gameUpdate.createdOnKey;\r\n          }\r\n        }\r\n\r\n        return gameUpdates;\r\n      });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Fill in game details for models that still need them.\r\n  function fillGameDetails(gameUpdateModels) {\r\n    const newRootPlaceIds = [];\r\n    let universeId;\r\n    let model;\r\n\r\n    for (universeId in gameUpdateModels) {\r\n      if (!gameUpdateModels.hasOwnProperty(universeId)) {\r\n        continue;\r\n      }\r\n\r\n      model = gameUpdateModels[universeId];\r\n\r\n      if (model.isPlayable === null) {\r\n        newRootPlaceIds.push(model.rootPlaceId);\r\n      }\r\n    }\r\n\r\n    if (newRootPlaceIds.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Start getting details for new games.\r\n    gameUpdatesService.multiGetPlaceDetailsAsync(newRootPlaceIds).then(function (placeDetails) {\r\n      if (!placeDetails) {\r\n        return;\r\n      }\r\n\r\n      angular.forEach(placeDetails, function (placeDetail, placeId) {\r\n        const model = gameUpdateModels[placeDetail.universeId];\r\n\r\n        if (model) {\r\n          model.isPlayable = placeDetail.isPlayable;\r\n        }\r\n      });\r\n\r\n      return placeDetails;\r\n    });\r\n  }\r\n\r\n  function aggregateGameUpdateNotifications(gameUpdateNotifications, gameUpdateModels) {\r\n    if (!gameUpdateNotifications || gameUpdateNotifications.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let maxEventTimeStamp = null;\r\n    let minEventTimeStamp = null;\r\n    let maxEventDate = null;\r\n    let totalEventCount = 0;\r\n    const processed = {};\r\n    const aggregated = {};\r\n\r\n    aggregated.id = gameUpdateNotifications[0].id;\r\n    aggregated.notificationSourceType = gameUpdateNotifications[0].notificationSourceType;\r\n    aggregated.metadataCollection = [];\r\n\r\n    angular.forEach(gameUpdateNotifications, function (update) {\r\n      let eventTimeStamp;\r\n\r\n      // Find max event date.\r\n      if (update.eventDate) {\r\n        eventTimeStamp = parseEpochMilliseconds(update.eventDate);\r\n\r\n        if (!maxEventTimeStamp || maxEventTimeStamp < eventTimeStamp) {\r\n          maxEventTimeStamp = eventTimeStamp;\r\n          maxEventDate = update.eventDate;\r\n        }\r\n\r\n        if (!minEventTimeStamp || minEventTimeStamp > eventTimeStamp) {\r\n          minEventTimeStamp = eventTimeStamp;\r\n        }\r\n      }\r\n\r\n      // Aggregate meta data collection.\r\n      angular.forEach(update.metadataCollection, function (metaData) {\r\n        if (\r\n          gameUpdateModels.hasOwnProperty(metaData.UniverseId) &&\r\n          !processed.hasOwnProperty(metaData.UniverseId)\r\n        ) {\r\n          aggregated.metadataCollection.push(metaData);\r\n          processed[metaData.UniverseId] = true;\r\n        }\r\n      });\r\n\r\n      // Aggregate event count.\r\n      if (update.eventCount) {\r\n        totalEventCount += update.eventCount;\r\n      }\r\n    });\r\n\r\n    aggregated.eventDate = maxEventDate;\r\n    aggregated.minEventDate = new Date(minEventTimeStamp);\r\n    aggregated.eventCount = Math.max(totalEventCount, aggregated.metadataCollection.length);\r\n\r\n    // Return null if there's no notification in the aggregated one.\r\n    return aggregated.metadataCollection.length > 0 ? aggregated : null;\r\n  }\r\n\r\n  function formatAggregatedDisplayText(game1, game2, otherGameCount) {\r\n    if (otherGameCount === 0) {\r\n      return layoutLibraryService.gameUpdates.formatDisplayTextDouble(game1, game2);\r\n    }\r\n\r\n    return layoutLibraryService.gameUpdates.formatDisplayTextMultiple(game1, game2, otherGameCount);\r\n  }\r\n\r\n  function sortGameUpdatesByCreatedDate(gameUpdateModels, isAscending) {\r\n    if (!gameUpdateModels) {\r\n      return null;\r\n    }\r\n\r\n    const models = Object.keys(gameUpdateModels).map(function (k) {\r\n      return gameUpdateModels[k];\r\n    });\r\n\r\n    models.sort(function (model1, model2) {\r\n      return isAscending\r\n        ? model1.createdOn - model2.createdOn\r\n        : model2.createdOn - model1.createdOn;\r\n    });\r\n\r\n    return models;\r\n  }\r\n\r\n  return {\r\n    formatAggregatedDisplayText,\r\n    getGameUpdatesAsync,\r\n    fillGameDetails,\r\n    aggregateGameUpdateNotifications,\r\n    sortGameUpdatesByCreatedDate\r\n  };\r\n}\r\n\r\nnotificationStreamModule.factory('gameUpdatesUtility', gameUpdatesUtility);\r\n\r\nexport default gameUpdatesUtility;\r\n","import notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction layoutLibraryService($log, languageResource) {\r\n  'ngInject';\r\n\r\n  const lang = languageResource;\r\n  return {\r\n    links: {\r\n      profileLinkName: 'goToProfilePage',\r\n      profileLink: '/users/{id}/profile',\r\n      friendRequestLinkName: 'viewAllFriendRequests',\r\n      friendRequestTabName: 'Friends',\r\n      friendRequestLink: '/users/friends#!/friend-requests',\r\n      settingLinkName: 'goToSettingPage',\r\n      settingTabName: 'Settings',\r\n      settingLink: '/my/account#!/notifications',\r\n      friendsTabName: 'Friends',\r\n      friendsLink: '/users/friends',\r\n      inboxTabName: 'Messages',\r\n      inboxLink: '/my/messages/#!/inbox',\r\n      inboxMessageDetailQuery: '?conversationId=',\r\n      groupLinkName: 'goToGroupPage',\r\n      groupLink: '/groups/{id}',\r\n      myGroupsLink: '/my/groups'\r\n    },\r\n\r\n    stringTemplates: {\r\n      boldLink: \"<a class='font-caption-header'>{username}</a>\",\r\n      userLink:\r\n        \"<a class='text-name small font-caption-header' type='goToProfilePage' user_id='{userid}' href='{profilelink}'>{username}</a>\",\r\n      boldDisplayNameLink: \"<a class='font-caption-header'>{displayname}</a>\",\r\n      displayNameLink:\r\n        \"<span class='cursor-pointer text-name paired-name'><a class='element small text-emphasis' type='goToProfilePage' user_id='{userid}' href='{profilelink}'>{displayname}</a><span class='text-emphasis small connector'>@</span><span class='small element'>{username}</span></span>\",\r\n      groupLink:\r\n        \"<a class='text-name small font-caption-header' type='goToGroupPage' group_id='{groupid}' href='{grouplink}'>{groupname}</a>\"\r\n    },\r\n\r\n    newFriendRequests(numberOfRequests) {\r\n      return lang.get('Message.YouHaveNewFriendRequests', { numberOfRequests });\r\n    },\r\n\r\n    newFriends(numberOfFriends) {\r\n      return lang.get('Message.YouHaveNewFriends', { numberOfFriends });\r\n    },\r\n\r\n    newGroups(numberOfGroups) {\r\n      return lang.get('Message.YouHaveBeenAcceptedToNewGroups', { numberOfGroups });\r\n    },\r\n\r\n    friendRequestAcceptedSingle(userOne) {\r\n      return lang.get('Message.FriendRequestAcceptedSingle', { userOne });\r\n    },\r\n\r\n    friendRequestAcceptedDouble(userOne, userTwo) {\r\n      return lang.get('Message.FriendRequestAcceptedDouble', {\r\n        userOne,\r\n        userTwo\r\n      });\r\n    },\r\n\r\n    friendRequestAcceptedMultiple(userOne, userTwo, userMultipleCount) {\r\n      return lang.get('Message.FriendRequestAcceptedMultiple', {\r\n        userOne,\r\n        userTwo,\r\n        userMultipleCount\r\n      });\r\n    },\r\n\r\n    groupJoinRequestAcceptedSingle(groupOne) {\r\n      return lang.get('Message.GroupJoinRequestAcceptedSingle', { groupOne });\r\n    },\r\n\r\n    groupJoinRequestAcceptedDouble(groupOne, groupTwo) {\r\n      return lang.get('Message.GroupJoinRequestAcceptedDouble', {\r\n        groupOne,\r\n        groupTwo\r\n      });\r\n    },\r\n\r\n    groupJoinRequestAcceptedMultiple(groupOne, groupTwo, groupMultipleCount) {\r\n      return lang.get('Message.GroupJoinRequestAcceptedMultiple', {\r\n        groupOne,\r\n        groupTwo,\r\n        groupMultipleCount\r\n      });\r\n    },\r\n\r\n    friendRequestSentSingle(userOne) {\r\n      return lang.get('Message.FriendRequestSentSingle', { userOne });\r\n    },\r\n\r\n    friendRequestSentDouble(userOne, userTwo) {\r\n      return lang.get('Message.FriendRequestSentDouble', { userOne, userTwo });\r\n    },\r\n\r\n    friendRequestSentMultiple(userOne, userTwo, userMultipleCount) {\r\n      return lang.get('Message.FriendRequestSentMultiple', {\r\n        userOne,\r\n        userTwo,\r\n        userMultipleCount\r\n      });\r\n    },\r\n\r\n    confirmAcceptedSingle(userOne) {\r\n      return lang.get('Message.ConfirmAcceptedSingle', { userOne });\r\n    },\r\n\r\n    confirmAcceptedDouble(userOne, userTwo) {\r\n      return lang.get('Message.ConfirmAcceptedDouble', { userOne, userTwo });\r\n    },\r\n\r\n    confirmAcceptedMultiple(userOne, userTwo, userMultipleCount) {\r\n      return lang.get('Message.ConfirmAcceptedMultiple', {\r\n        userOne,\r\n        userTwo,\r\n        userMultipleCount\r\n      });\r\n    },\r\n\r\n    confirmSentSingle(userOne) {\r\n      return lang.get('Message.ConfirmSentSingle', { userOne });\r\n    },\r\n\r\n    confirmSentDouble(userOne, userTwo) {\r\n      return lang.get('Message.ConfirmSentDouble', { userOne, userTwo });\r\n    },\r\n\r\n    confirmSentMultiple(userOne, userTwo, userMultipleCount) {\r\n      return lang.get('Message.ConfirmSentMultiple', {\r\n        userOne,\r\n        userTwo,\r\n        userMultipleCount\r\n      });\r\n    },\r\n\r\n    textTemplate: {\r\n      newNotification(numberOfNotifications) {\r\n        return lang.get('Message.NumberofNewNotifications', {\r\n          notificationCount: numberOfNotifications\r\n        });\r\n      },\r\n\r\n      noNetworkConnectionText() {\r\n        return lang.get('Label.NoNetworkConnectionText');\r\n      }\r\n    },\r\n\r\n    friendRequestActionType: {\r\n      acceptIgnoreBtns: 'AcceptIgnoreBtns',\r\n      chatBtn: 'chatBtn',\r\n      viewAllBtn: 'ViewAllBtn'\r\n    },\r\n\r\n    directiveTemplatesName: {\r\n      notificationIndicatorTemplate: 'notification-indicator',\r\n      notificationStreamIndicatorTemplate: 'notification-stream-indicator',\r\n      notificationContentTemplate: 'notification-content',\r\n      friendRequestReceivedTemplate: 'friend-request-received',\r\n      friendRequestAcceptedTemplate: 'friend-request-accepted',\r\n      friendRequestTemplate: 'friend-request',\r\n      privateMessageTemplate: 'private-message',\r\n      developerMetricsAvailableTemplate: 'developer-metrics-available',\r\n      testTemplate: 'test',\r\n      notificationStreamBaseTemplate: 'notification-stream-base',\r\n      notificationStreamIconTemplate: 'notification-stream-icon',\r\n      notificationContentViewTemplate: 'notification-content-view-template',\r\n      gameUpdateTemplate: 'game-update-template',\r\n      gameUpdateActionPopoverTemplate: 'game-update-action-popover-template',\r\n      groupMembershipTemplate: 'group-membership',\r\n      notificationStreamBaseViewTemplate: 'notification-stream-base-view',\r\n      notificationStreamContainerTemplate: 'notification-stream-container'\r\n    },\r\n\r\n    notificationSourceType: {\r\n      test: 'Test',\r\n      friendRequestReceived: 'FriendRequestReceived',\r\n      friendRequestAccepted: 'FriendRequestAccepted',\r\n      privateMessageReceived: 'PrivateMessageReceived',\r\n      developerMetricsAvailable: 'DeveloperMetricsAvailable',\r\n      gameUpdate: 'GameUpdate',\r\n      groupJoinRequestAccepted: 'GroupJoinRequestAccepted'\r\n    },\r\n\r\n    gameUpdates: {\r\n      formatDisplayTextDouble(game1, game2) {\r\n        return lang.get('Message.AggregatedGameUpdateDouble', {\r\n          gameOne: `<span class='font-caption-header'>${game1}</span>`,\r\n          gameTwo: `<span class='font-caption-header'>${game2}</span>`\r\n        });\r\n      },\r\n\r\n      formatDisplayTextMultiple(game1, game2, otherCount) {\r\n        return lang.get('Message.AggregatedGameUpdateMultiple', {\r\n          gameOne: `<span class='font-caption-header'>${game1}</span>`,\r\n          gameTwo: `<span class='font-caption-header'>${game2}</span>`,\r\n          otherCount\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.factory('layoutLibraryService', layoutLibraryService);\r\n\r\nexport default layoutLibraryService;\r\n","import { EnvironmentUrls } from 'Roblox'; \r\nimport notificationStreamModule from \"../notificationStreamModule\";\r\n\r\nfunction notificationStreamService(httpService, $log, urlService) {\r\n    \"ngInject\";\r\n\r\n    const { notificationApi, chatApi, friendsApi } = EnvironmentUrls;\r\n    var initializeUrl = notificationApi + \"/v2/stream-notifications/metadata\";\r\n\r\n    return {\r\n        endpoints: {\r\n            \"initializeData\": { url: initializeUrl, retryable: true },\r\n            \"unreadCount\": { url: notificationApi + \"/v2/stream-notifications/unread-count\", retryable: true, withCredentials: true },\r\n            \"getRecent\": { url: notificationApi + \"/v2/stream-notifications/get-recent\", retryable: true, withCredentials: true },\r\n            \"clearUnread\": { url: notificationApi + \"/v2/stream-notifications/clear-unread\", retryable: false, withCredentials: true },\r\n            \"markInteracted\": { url: notificationApi + \"/v2/stream-notifications/mark-interacted\", retryable: false, withCredentials: true },\r\n            \"updateNotificationSettings\": { url: notificationApi + \"/v2/notifications/update-notification-settings\", retryable: false, withCredentials: true },\r\n            \"getChatPrivacySettings\": { url: chatApi + \"/v2/chat-settings\", retryable: false, withCredentials: true }\r\n        },\r\n\r\n        initialize: function () {\r\n            var params = {};\r\n            return httpService.httpGet(this.endpoints[\"initializeData\"], params);\r\n        },\r\n\r\n\r\n        getChatPrivacySettings: function () {\r\n            var params = {};\r\n            return httpService.httpGet(this.endpoints[\"getChatPrivacySettings\"], params);\r\n        },\r\n\r\n        unreadCount: function () {\r\n            var params = {};\r\n            return httpService.httpGet(this.endpoints[\"unreadCount\"], params);\r\n        },\r\n\r\n        clearUnread: function () {\r\n            var data = {};\r\n            return httpService.httpPost(this.endpoints[\"clearUnread\"], data);\r\n        },\r\n\r\n        getRecentNotifications: function (startIndexOfNotifications, pageSizeOfNotifications) {\r\n            var params = {\r\n                startIndex: startIndexOfNotifications,\r\n                maxRows: pageSizeOfNotifications\r\n            };\r\n\r\n            return httpService.httpGet(this.endpoints[\"getRecent\"], params);\r\n        },\r\n\r\n        markInteracted: function (eventId) {\r\n            var data = {\r\n                eventId: eventId\r\n            };\r\n            return httpService.httpPost(this.endpoints[\"markInteracted\"], data);\r\n        },\r\n\r\n        acceptFriendV2: function (targetUserId) {\r\n            var urlConfig = {\r\n                url: friendsApi + \"/v1/users/\" + targetUserId + \"/accept-friend-request\",\r\n                withCredentials: true\r\n            };\r\n\r\n            return httpService.httpPost(urlConfig);\r\n        },\r\n\r\n        ignoreFriendV2: function (targetUserId) {\r\n            var urlConfig = {\r\n                url: friendsApi + \"/v1/users/\" + targetUserId + \"/decline-friend-request\",\r\n                withCredentials: true\r\n            };\r\n\r\n            return httpService.httpPost(urlConfig);\r\n        },\r\n\r\n        updateNotificationSettings: function (notificationSourceType, isEnabled) {\r\n            var data = {\r\n                notificationSourceType: notificationSourceType,\r\n                receiverDestinationType: \"NotificationStream\",\r\n                isEnabled: isEnabled\r\n            };\r\n            var list = [];\r\n            list.push(data);\r\n            return httpService.httpPost(this.endpoints[\"updateNotificationSettings\"], list);\r\n        }\r\n    }\r\n}\r\n\r\nnotificationStreamModule.factory(\"notificationStreamService\", notificationStreamService);\r\n\r\nexport default notificationStreamService;","var __WEBPACK_NAMESPACE_OBJECT__ = HeaderScripts;","import { Endpoints, DeviceFeatureDetection, DisplayNames, DeviceMeta } from 'Roblox';\r\nimport { authenticatedUser } from 'header-scripts';\r\nimport angular from 'angular';\r\nimport notificationStreamModule from '../notificationStreamModule';\r\n\r\nfunction notificationStreamUtility(signalR, layoutLibraryService, $log) {\r\n  'ngInject';\r\n\r\n  const { notificationSourceType } = layoutLibraryService;\r\n  const { links } = layoutLibraryService;\r\n  const { stringTemplates } = layoutLibraryService;\r\n\r\n  function parseEpochMilliseconds(dateTime) {\r\n    if (!dateTime) {\r\n      return null;\r\n    }\r\n\r\n    if (dateTime.getTime) {\r\n      // Input is a javascript Date object.\r\n      return dateTime.getTime();\r\n    }\r\n\r\n    if (typeof dateTime === 'string') {\r\n      // Input is a string. Can be of serialized format \"Date(123456789)\", or a date string \"2019-01-17T02:56:31.3146112Z\".\r\n      const serializedPattern = /Date\\((\\d+)\\)/;\r\n      const matchResult = serializedPattern.exec(dateTime);\r\n\r\n      if (matchResult) {\r\n        return parseInt(matchResult[1]);\r\n      }\r\n\r\n      return new Date(dateTime).getTime() || null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    templates: layoutLibraryService.directiveTemplatesName,\r\n    links,\r\n    textTemplate: layoutLibraryService.textTemplate,\r\n\r\n    stringTemplates,\r\n\r\n    layout: {\r\n      pageDataInitialized: false,\r\n      firstTimeNotificationStream: false,\r\n      getRecentDataInitialized: false,\r\n      isNotificationContentOpen: false,\r\n      isLazyLoadingRequested: false,\r\n      isGetRecentDataLoadedRequested: true,\r\n      notificationsScrollbarSelector: '#notification-stream-scrollbar',\r\n      settingLink: Endpoints ? Endpoints.getAbsoluteUrl(links.settingLink) : links.settingLink,\r\n      groupLink: Endpoints ? Endpoints.getAbsoluteUrl(links.groupLink) : links.groupLink,\r\n      friendRequestLink: Endpoints\r\n        ? Endpoints.getAbsoluteUrl(links.friendRequestLink)\r\n        : links.friendRequestLink,\r\n      bannerEnabled: false,\r\n      emptyNotificationEnabled: false,\r\n      notificationsLazyLoadingEnabled: false,\r\n      isNotificationsLoading: false,\r\n      isStreamBodyInteracted: false,\r\n      isDisplayNamesEnabled: DisplayNames && DisplayNames.Enabled(),\r\n      bannerText: '',\r\n      errorText: '',\r\n      dataBindSelector: '#notification-stream',\r\n      dataContainerSelector: '#notification-stream-container'\r\n    },\r\n\r\n    notificationApiParams: {\r\n      startIndexOfNotifications: 0,\r\n      pageSizeOfNotifications: 10,\r\n      loadMoreNotifications: false\r\n    },\r\n\r\n    library: {\r\n      unreadNotifications: 0,\r\n      userIdList: [],\r\n      userLibrary: {},\r\n      prefixLocalStoragekey: 'user_',\r\n      inApp: DeviceMeta ? DeviceMeta().isInApp : false,\r\n      isPhone: DeviceMeta ? DeviceMeta().isPhone : false,\r\n      isTouch: DeviceFeatureDetection ? DeviceFeatureDetection.isTouch : false,\r\n      eventStreamMetaData: {},\r\n      gameUpdateModels: {},\r\n      notificationContentViews: {\r\n        main: 'main',\r\n        gameUpdates: 'gameUpdates'\r\n      },\r\n      canLaunchGameFromGameUpdate: false,\r\n      currentUserId: authenticatedUser.id\r\n    },\r\n\r\n    notificationsName: signalR.notifications,\r\n    notificationSourceType,\r\n\r\n    signalRType: signalR.types,\r\n\r\n    friendRequestReceivedLayout: layoutLibraryService.friendRequestReceivedLayout,\r\n\r\n    friendRequestAcceptedLayout: layoutLibraryService.friendRequestAcceptedLayout,\r\n\r\n    friendRequestActionType: layoutLibraryService.friendRequestActionType,\r\n\r\n    getAbsoluteUrl(link, params) {\r\n      if (Endpoints) {\r\n        return Endpoints.generateAbsoluteUrl(link, params, true);\r\n      }\r\n      return getFormatString(link, params);\r\n    },\r\n\r\n    getFormatString(link, params) {\r\n      for (const prop in params) {\r\n        const value = params[prop];\r\n        const regex = new RegExp(`{${prop.toLowerCase()}(:.*?)?\\\\??}`);\r\n        link = link.replace(regex, value);\r\n      }\r\n      return link;\r\n    },\r\n\r\n    isNotificationTypeValid(notificationType) {\r\n      let isMatch = false;\r\n      for (const type in notificationSourceType) {\r\n        if (notificationSourceType[type] === notificationType) {\r\n          isMatch = true;\r\n          break;\r\n        }\r\n      }\r\n      return isMatch;\r\n    },\r\n\r\n    isCardClickable(notification) {\r\n      const notificationType = notification.notificationSourceType;\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return (\r\n            notification.eventCount > 1 ||\r\n            (notification.eventCount === 1 && notification.metadataCollection.length === 0)\r\n          );\r\n        case notificationSourceType.privateMessageReceived:\r\n        case notificationSourceType.developerMetricsAvailable:\r\n        case notificationSourceType.groupJoinRequestAccepted:\r\n          return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    normalizeUser(notificationType, userData) {\r\n      const user = {\r\n        userId: null,\r\n        userName: null,\r\n        displayName: null\r\n      };\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          user.userId = userData.SenderUserId;\r\n          user.userName = userData.SenderUserName;\r\n          user.displayName = userData.SenderDisplayName;\r\n          break;\r\n        case notificationSourceType.friendRequestAccepted:\r\n          user.userId = userData.AccepterUserId;\r\n          user.userName = userData.AccepterUserName;\r\n          user.displayName = userData.AccepterDisplayName;\r\n          break;\r\n        case notificationSourceType.privateMessageReceived:\r\n          user.userId = userData.AuthorUserId;\r\n          user.userName = userData.AuthorUserName;\r\n          user.displayName = userData.AuthorDisplayName;\r\n          break;\r\n        case notificationSourceType.developerMetricsAvailable:\r\n        case notificationSourceType.test:\r\n          break;\r\n      }\r\n      return user;\r\n    },\r\n\r\n    getUserHtmlTemplate(notificationType, count) {\r\n      let htmlTemplate = '';\r\n      const isDisplayNamesEnabled = DisplayNames && DisplayNames.Enabled();\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestAccepted:\r\n          if (count > 1) {\r\n            htmlTemplate = isDisplayNamesEnabled\r\n              ? stringTemplates.boldDisplayNameLink\r\n              : stringTemplates.boldLink;\r\n          } else {\r\n            htmlTemplate = isDisplayNamesEnabled\r\n              ? stringTemplates.displayNameLink\r\n              : stringTemplates.userLink;\r\n          }\r\n          break;\r\n\r\n        case notificationSourceType.friendRequestReceived:\r\n        default:\r\n          htmlTemplate = isDisplayNamesEnabled\r\n            ? stringTemplates.displayNameLink\r\n            : stringTemplates.userLink;\r\n          break;\r\n      }\r\n      return htmlTemplate;\r\n    },\r\n\r\n    getGroupHtmlTemplate() {\r\n      return stringTemplates.groupLink;\r\n    },\r\n\r\n    normalizeYouHaveText(notificationType, requestCount) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.newFriendRequests(requestCount);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.newFriends(requestCount);\r\n        case notificationSourceType.groupJoinRequestAccepted:\r\n          return layoutLibraryService.newGroups(requestCount);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeSingleDisplayText(notificationType, targetOne) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.friendRequestSentSingle(targetOne);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.friendRequestAcceptedSingle(targetOne);\r\n        case notificationSourceType.groupJoinRequestAccepted:\r\n          return layoutLibraryService.groupJoinRequestAcceptedSingle(targetOne);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeSingleConfirmedText(notificationType, userOne) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.confirmSentSingle(userOne);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.confirmAcceptedSingle(userOne);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeDoubleDisplayText(notificationType, targetOne, targetTwo) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.friendRequestSentDouble(targetOne, targetTwo);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.friendRequestAcceptedDouble(targetOne, targetTwo);\r\n        case notificationSourceType.groupJoinRequestAccepted:\r\n          return layoutLibraryService.groupJoinRequestAcceptedDouble(targetOne, targetTwo);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeDoubleConfirmedText(notificationType, userOne, userTwo) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.confirmSentDouble(userOne, userTwo);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.confirmAcceptedDouble(userOne, userTwo);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeMultipleDisplayText(notificationType, targetOne, targetTwo, targetMultipleCount) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.friendRequestSentMultiple(\r\n            targetOne,\r\n            targetTwo,\r\n            targetMultipleCount\r\n          );\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.friendRequestAcceptedMultiple(\r\n            targetOne,\r\n            targetTwo,\r\n            targetMultipleCount\r\n          );\r\n        case notificationSourceType.groupJoinRequestAccepted:\r\n          return layoutLibraryService.groupJoinRequestAcceptedMultiple(\r\n            targetOne,\r\n            targetTwo,\r\n            targetMultipleCount\r\n          );\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    normalizeMultipleConfirmedText(notificationType, userOne, userTwo, userMultipleCount) {\r\n      switch (notificationType) {\r\n        case notificationSourceType.friendRequestReceived:\r\n          return layoutLibraryService.confirmSentMultiple(userOne, userTwo, userMultipleCount);\r\n        case notificationSourceType.friendRequestAccepted:\r\n          return layoutLibraryService.confirmAcceptedMultiple(userOne, userTwo, userMultipleCount);\r\n        default:\r\n          return '';\r\n      }\r\n    },\r\n\r\n    buildScrollbar(className) {\r\n      const scrollbarElm = angular.element(className);\r\n      scrollbarElm.mCustomScrollbar({\r\n        autoHideScrollbar: false,\r\n        autoExpandScrollbar: false,\r\n        contentTouchScroll: 10000,\r\n        documentTouchScroll: false,\r\n        mouseWheel: {\r\n          preventDefault: true\r\n        },\r\n        advanced: {\r\n          autoScrollOnFocus: false\r\n        }\r\n      });\r\n    },\r\n\r\n    isGameUpdateNotification(notificationType) {\r\n      return notificationType === notificationSourceType.gameUpdate;\r\n    },\r\n\r\n    parseEpochMilliseconds,\r\n\r\n    sortNotificationsByEventDate(notifications, isAscending) {\r\n      if (!notifications) {\r\n        return null;\r\n      }\r\n\r\n      const notificationArray = Object.keys(notifications).map(function (k) {\r\n        return notifications[k];\r\n      });\r\n\r\n      notificationArray.sort(function (n1, n2) {\r\n        const epoch1 = parseEpochMilliseconds(n1.eventDate) || 0;\r\n        const epoch2 = parseEpochMilliseconds(n2.eventDate) || 0;\r\n\r\n        return isAscending ? epoch1 - epoch2 : epoch2 - epoch1;\r\n      });\r\n\r\n      return notificationArray;\r\n    }\r\n  };\r\n}\r\n\r\nnotificationStreamModule.factory('notificationStreamUtility', notificationStreamUtility);\r\n\r\nexport default notificationStreamUtility;\r\n","module.exports = \"<a id=\\\"nav-ns-icon\\\" class=\\\"roblox-popover rbx-menu-item notification-stream-icon\\\" data-bind=\\\"notification-stream-base\\\" data-container=\\\"notification-stream-container\\\"> <span class=\\\"icon-nav-notification-stream\\\" id=\\\"nav-notifications\\\"></span> <span class=\\\"notification-red notification\\\" ng-show=\\\"layout.unreadNotifications > 0 && (!layout.isNotificationContentOpen)\\\"> {{layout.unreadNotifications | abbreivateCount}} </span> </a>\";","module.exports = \"<div class=\\\"notification-stream\\\" ng-class=\\\"{'inApp': library.inApp}\\\"> <div notification-indicator></div> </div>\";","module.exports = \"<div class=\\\"notification-stream-indicator\\\" ng-class=\\\"{'inApp': library.inApp}\\\"> <a id=\\\"nav-ns-icon\\\" class=\\\"rbx-menu-item notification-stream-icon\\\"> <span class=\\\"icon-nav-notification-stream\\\" id=\\\"nav-notifications\\\"></span> <span class=\\\"notification-red notification\\\" ng-show=\\\"layout.unreadNotifications > 0 && (!layout.isNotificationContentOpen)\\\"> {{layout.unreadNotifications | abbreivateCount}} </span> </a> </div>\";","module.exports = \"<div class=\\\"developer-metrics-notification-container\\\"> <div class=\\\"notification-image-container\\\"> <div title=\\\"{{developerMetricsAvailableLayout.gameName}}\\\"> <a class=\\\"text-name font-caption-header\\\" ng-href=\\\"{{developerMetricsAvailableLayout.gameLinkUrl}}\\\"> <img ng-src=\\\"{{developerMetricsAvailableLayout.gameIconUrl}}\\\" class=\\\"notification-icon placeholder-asset-icon\\\"/> </a> </div> </div> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container\\\"> <span class=\\\"small text notification-display-text\\\" ng-bind-html=\\\"'Message.DeveloperMetricsAvailable' | translate:developerMetricsAvailableLayout\\\"> </span> <div class=\\\"text-date-hint\\\"> {{notification.eventDate | datetime: 'full'}} </div> </div> <div class=\\\"notification-action-container\\\"> <button class=\\\"view-button btn-primary-xs font-caption-header\\\" ng-class=\\\"{'btn-full-width': library.isPhone }\\\" ng-click=\\\"viewButtonHandler()\\\" ng-bind=\\\"'Action.View' | translate\\\"></button> </div> </div> </div>\";","module.exports = \"<div> <div class=\\\"notification-item-front\\\"> <div class=\\\"notification-image-container\\\"> <div class=\\\"avatar avatar-headshot-sm\\\" ng-if=\\\"userIds.length >= 1\\\" title=\\\"{{library.userLibrary[userIds[0]].name}}\\\"> <a ng-href=\\\"{{library.userLibrary[userIds[0]].profileLink}}\\\" type=\\\"goToProfilePage\\\" user_id=\\\"{{userIds[0]}}\\\" click-in-card> <thumbnail-2d class=\\\"avatar-card-image\\\" thumbnail-target-id=\\\"userIds[0]\\\" thumbnail-type=\\\"thumbnailTypes.avatarHeadshot\\\"> </thumbnail-2d> </a> </div> <span class=\\\"icon-nav-group notification-image-placeholder\\\" ng-if=\\\"!userIds || userIds.length == 0\\\"></span> </div> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container font-caption-body\\\"> <span class=\\\"small text notification-display-text\\\" click-in-card ng-hide=\\\"notification.metadataCollection[0].IsAccepted\\\" ng-bind-html=\\\"notificationDisplayText\\\"></span> <span class=\\\"small text notification-display-text\\\" click-in-card ng-show=\\\"notification.metadataCollection[0].IsAccepted\\\" ng-bind-html=\\\"requestConfirmedText\\\"></span> <div class=\\\"text-date-hint\\\" ng-bind=\\\"notification.eventDate | datetime: 'full'\\\"></div> </div> <div class=\\\"notification-action-container\\\"> <button class=\\\"btn-control-xs font-caption-header\\\" id=\\\"ignore-fr-btn\\\" ng-show=\\\"notification.friendRequestActionType === friendRequestActionType.acceptIgnoreBtns\\\" ng-click=\\\"ignoreFriend({targetUserId: userIds[0], notificationId: notification.id, event: $event})\\\" ng-bind=\\\"'Action.Ignore' | translate\\\"></button> <button class=\\\"btn-primary-xs font-caption-header\\\" id=\\\"accept-fr-btn\\\" ng-show=\\\"notification.friendRequestActionType === friendRequestActionType.acceptIgnoreBtns\\\" ng-click=\\\"acceptFriend({targetUserId: userIds[0], notificationId: notification.id, event: $event})\\\" ng-bind=\\\"'Action.Accept' | translate\\\"></button> <button class=\\\"btn-primary-xs roblox-popover-close font-caption-header\\\" id=\\\"chat-btn\\\" ng-class=\\\"{'btn-full-width': library.isPhone}\\\" ng-show=\\\"notification.friendRequestActionType === friendRequestActionType.chatBtn && !library.isChatDisabledByPrivacySetting\\\" ng-click=\\\"chat({friendId: userIds[0], notificationId: notification.id, event: $event})\\\" ng-bind=\\\"'Action.Chat' | translate\\\"></button> <a class=\\\"btn-secondary-xs font-caption-header\\\" id=\\\"view-all-btn\\\" ng-class=\\\"{'btn-full-width': library.isPhone }\\\" ng-show=\\\"notification.friendRequestActionType === friendRequestActionType.viewAllBtn\\\" click-in-card type=\\\"viewAllFriendRequests\\\" ng-href=\\\"{{friendRequestLink}}\\\" ng-bind=\\\"'Action.ViewAll' | translate\\\"></a> </div> </div> </div> <div class=\\\"notification-item-back\\\"> <div class=\\\"notification-image-container\\\"> <div class=\\\"avatar avatar-headshot-sm\\\" ng-if=\\\"userIds.length >= 1\\\" title=\\\"{{library.userLibrary[userIds[0]].name}}\\\"> <a ng-href=\\\"{{library.userLibrary[userIds[0]].profileLink}}\\\" type=\\\"goToProfilePage\\\" user_id=\\\"{{userIds[0]}}\\\" click-in-card> <thumbnail-2d class=\\\"avatar-card-image\\\" thumbnail-target-id=\\\"userIds[0]\\\" thumbnail-type=\\\"thumbnailTypes.avatarHeadshot\\\"> </thumbnail-2d> </a> </div> <span class=\\\"icon-nav-group notification-image-placeholder\\\" ng-if=\\\"!userIds || userIds.length == 0\\\"></span> </div> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container font-caption-body\\\"> <span class=\\\"text notification-display-text\\\" click-in-card ng-show=\\\"notification.metadataCollection[0].IsAccepted\\\" ng-bind-html=\\\"requestConfirmedText\\\"></span> <div class=\\\"text-date-hint\\\" ng-bind=\\\"notification.eventDate | datetime: 'full'\\\"></div> </div> <div class=\\\"notification-action-container\\\" ng-show=\\\"notification.notificationSourceType == notificationSourceType.friendRequestReceived\\\"> <button class=\\\"btn-primary-xs font-caption-header\\\" id=\\\"chat-btn\\\" ng-class=\\\"{'btn-full-width': library.isPhone}\\\" ng-show=\\\"notification.friendRequestActionType == friendRequestActionType.chatBtn && !library.isChatDisabledByPrivacySetting\\\" ng-click=\\\"chat({friendId: userIds[0], notificationId: notification.id, event: $event})\\\"> <span ng-bind=\\\"'Action.Chat' | translate\\\"></span> </button> </div> </div> </div> </div>\";","module.exports = \"<div> <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\"> <li> <a class=\\\"unfollow-link\\\" ng-click=\\\"unfollowGame($event)\\\"><span class=\\\"action-icon icon-follow-game-gray\\\"></span><span ng-bind=\\\"'Action.UnfollowGame' | translate:{gameName: gameUpdateModel.truncatedGameName}\\\"></span></a> </li> <li> <a class=\\\"report-abuse-link\\\" ng-click=\\\"reportAbuse()\\\"><span class=\\\"action-icon icon-report-darkgray\\\"></span><span ng-bind=\\\"'Action.ReportAbuse' | translate\\\"></span></a> </li> <li class=\\\"li-cancel-link\\\"> <a class=\\\"cancel-link\\\" ng-click=\\\"closeActionMenu()\\\"><span class=\\\"action-icon icon-close\\\"></span><span ng-bind=\\\"'Action.Cancel' | translate\\\"></span></a> </li> </ul> </div>\";","module.exports = \"<div class=\\\"game-update-notification-container\\\" ng-class=\\\"{ 'active':isActionMenuOpen }\\\"> <div class=\\\"notification-image-container\\\" ng-show=\\\"isAggregated || !gameUpdateModel.isUnfollowed\\\"> <div ng-if=\\\"gameUpdateModel.universeId !== null\\\" title=\\\"{{gameUpdateModel.gameName}}\\\"> <a ng-click=\\\"goToGameDetails()\\\"> <thumbnail-2d class=\\\"notification-icon\\\" thumbnail-target-id=\\\"gameUpdateModel.universeId\\\" thumbnail-type=\\\"thumbnailTypes.gameIcon\\\"> </thumbnail-2d> </a> </div> </div> <div class=\\\"notification-item-content\\\" ng-show=\\\"!isAggregated && !gameUpdateModel.isUnfollowed\\\"> <a class=\\\"more-link\\\" uib-popover-template=\\\"actionMenuTemplate\\\" popover-trigger=\\\"'outsideClick'\\\" popover-placement=\\\"bottom-right\\\" popover-is-open=\\\"isActionMenuOpen\\\" popover-append-to-body=\\\"true\\\" popover-class=\\\"game-update-action-menu\\\" popover-animation=\\\"false\\\"> <span class=\\\"icon-more-gray-vertical\\\"></span> </a> <div class=\\\"notification-data-container\\\" ng-class=\\\"{ 'single-game-update': !isAggregated, 'play-button-visible':library.canLaunchGameFromGameUpdate }\\\"> <span class=\\\"small text notification-display-text\\\"> <a class=\\\"text-name font-caption-header\\\" ng-click=\\\"goToGameDetails()\\\"> {{gameUpdateModel.truncatedGameName}} </a> : {{gameUpdateModel.updateMessage}} </span> <span class=\\\"spinner spinner-sm\\\" ng-if=\\\"!gameUpdateModel.updateMessage\\\"></span> <div class=\\\"text-secondary text-date-hint\\\"> {{gameUpdateModel.createdOn | datetime: 'full'}} </div> </div> <div class=\\\"notification-action-container\\\"> <div class=\\\"font-caption-body not-playable-message\\\" ng-if=\\\"library.canLaunchGameFromGameUpdate && gameUpdateModel.isPlayable === false\\\"> <span ng-bind=\\\"'Message.GameNotPlayableOnDevice' | translate\\\"></span> </div> <button class=\\\"play-button btn-growth-xs font-caption-header\\\" ng-class=\\\"{'btn-full-width': library.isPhone }\\\" ng-if=\\\"library.canLaunchGameFromGameUpdate && gameUpdateModel.isPlayable\\\" ng-click=\\\"playButtonHandler()\\\" ng-bind=\\\"'Action.Play' | translate\\\"></button> </div> </div> <div class=\\\"notification-item-content aggregated\\\" ng-show=\\\"isAggregated\\\" ng-click=\\\"viewGameUpdates()\\\"> <div class=\\\"notification-data-container\\\"> <span class=\\\"small text notification-display-text\\\" ng-bind-html=\\\"aggregatedDisplayText\\\"></span> <div class=\\\"text-secondary text-date-hint\\\"> {{gameUpdateModel.createdOn | datetime: 'full'}} </div> <span class=\\\"icon-right\\\"></span> </div> </div> <div ng-show=\\\"!isAggregated && gameUpdateModel.isUnfollowed\\\"> <div class=\\\"unfollowed-game-update-notification small text\\\" ng-class=\\\"{ 'play-button-visible':library.canLaunchGameFromGameUpdate }\\\"> <span ng-bind=\\\"'Message.UnfollowedGame' | translate:{gameName: gameUpdateModel.truncatedGameName}\\\"></span><a class=\\\"undo-unfollow-link text-link small\\\" ng-click=\\\"followGame()\\\" ng-bind=\\\"'Action.Undo' | translate\\\"></a> </div> </div> </div>\";","module.exports = \"<div> <div class=\\\"notification-image-container\\\"> <div ng-if=\\\"groupMembershipLayout.groupId !== null\\\" title=\\\"{{groupMembershipLayout.groupName}}\\\"> <a ng-href=\\\"{{groupMembershipLayout.groupLink}}\\\" type=\\\"goToGroupPage\\\" click-in-card> <thumbnail-2d class=\\\"notification-icon\\\" thumbnail-target-id=\\\"groupMembershipLayout.groupId\\\" thumbnail-type=\\\"thumbnailTypes.groupIcon\\\"> </thumbnail-2d> </a> </div> </div> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container\\\"> <span class=\\\"font-caption-body text notification-display-text\\\" ng-bind-html=\\\"notificationDisplayText\\\"> </span> <div class=\\\"text-date-hint\\\" ng-bind=\\\"notification.eventDate | datetime: 'full'\\\"></div> </div> </div> </div>\";","module.exports = \"<div class=\\\"notification-content-view\\\" ng-show=\\\"isActive\\\" ng-transclude></div>\";","module.exports = \"<div ng-controller=\\\"notificationStreamController\\\" id=\\\"notification-stream-base-view\\\" ng-class=\\\"{'inApp': library.inApp,'isPhone': library.isPhone}\\\"> <div notification-stream-container></div> </div>\";","module.exports = \"<div class=\\\"notification-stream-content\\\" id=\\\"notification-stream-container\\\" ng-cloak> <div ng-controller=\\\"notificationsController\\\" class=\\\"notification-stream-wrap open\\\"> <div class=\\\"notification-stream-container\\\"> <div notification-content-view library=\\\"library\\\" content-view-manager=\\\"contentViewManager\\\" view-id=\\\"{{library.notificationContentViews.main}}\\\" is-active=\\\"true\\\"> <div class=\\\"notification-stream-header\\\" ng-hide=\\\"library.isPhone || library.iniOSApp\\\"> <span class=\\\"text-label font-caption-header\\\" ng-bind=\\\"'Label.Notifications' | translate\\\"></span> <a class=\\\"text-link font-caption-header\\\" click-in-card type=\\\"goToSettingPage\\\" ng-href=\\\"{{layout.settingLink}}\\\" ng-bind=\\\"'Label.Settings' | translate\\\"></a> </div> <div id=\\\"notification-stream-body\\\" class=\\\"notification-stream-body\\\" notification-stream-body ng-class=\\\"{'notification-stream-body-height' : layout.getRecentDataInitialized && notificationIds.length == 0 }\\\"> <div class=\\\"small notification-stream-banner banner-new\\\" ng-class=\\\"{'on': layout.isNotificationContentOpen && layout.bannerEnabled}\\\"> <span class=\\\"banner-text\\\" ng-click=\\\"reloadNotificationStreamData()\\\">{{layout.bannerText}}</span> <span id=\\\"close\\\" class=\\\"icon-close-white\\\" ng-click=\\\"closeBanner()\\\"></span> </div> <div class=\\\"small notification-stream-banner banner-error\\\" ng-class=\\\"{'on': layout.isNotificationContentOpen && layout.errorBannerEnabled}\\\"> <span class=\\\"banner-text\\\">{{layout.errorText}}</span> <span id=\\\"close\\\" class=\\\"icon-close-white\\\" ng-click=\\\"closeErrorBanner()\\\"></span> </div> <div ng-show=\\\"layout.getRecentDataInitialized && notificationIds.length > 0\\\" class=\\\"notification-stream-data\\\"> <div id=\\\"notification-stream-scrollbar\\\" class=\\\"rbx-scrollbar notification-stream-scrollbar\\\" lazy-loading> <ul class=\\\"notification-stream-list\\\"> <li ng-repeat=\\\"notification in notifications | sortNotificationsByEventDateDesc\\\" notification-card class=\\\"border-bottom notification-stream-item\\\" id=\\\"notification-stream-{{notification.id}}\\\" ng-class=\\\"{'unInteracted': !notification.isInteracted,'slide-out-left': notification.isSlideOut,'turn-off': notification.isTurnOff,'clickable': notification.isClickable,'game-update': notification.notificationSourceType == notificationSourceType.gameUpdate }\\\"> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.friendRequestReceived\\\" friend-request notification=\\\"notification\\\" library=\\\"library\\\" app-meta=\\\"appMeta\\\" accept-friend=\\\"acceptFriend(targetUserId, notificationId, event)\\\" ignore-friend=\\\"ignoreFriend(targetUserId, notificationId, event)\\\" chat=\\\"chat(friendId, notificationId, event)\\\" interact-notification=\\\"interactNotification(notification)\\\" class=\\\"notification-item\\\" ng-hide=\\\"notification.isTurnOff\\\" ng-class=\\\"{'flipped': notification.isFlipped}\\\"></div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.friendRequestAccepted\\\" friend-request notification=\\\"notification\\\" library=\\\"library\\\" app-meta=\\\"appMeta\\\" chat=\\\"chat(friendId, notificationId, event)\\\" interact-notification=\\\"interactNotification(notification)\\\" ng-hide=\\\"notification.isTurnOff\\\" class=\\\"notification-item\\\" ng-click=\\\"notification.isClickable ?  clickCard(notification) : null\\\"> </div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.test\\\" test notification=\\\"notification\\\" interact-notification=\\\"interactNotification(notification)\\\" class=\\\"notification-item\\\"></div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.privateMessageReceived\\\" private-message notification=\\\"notification\\\" interact-notification=\\\"interactNotification(notification)\\\" app-meta=\\\"appMeta\\\" library=\\\"library\\\" class=\\\"notification-item notification-stream-pm\\\" ng-click=\\\"notification.isClickable ?  clickCard(notification) : null\\\"></div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.developerMetricsAvailable\\\" developer-metrics-available notification=\\\"notification\\\" interact-notification=\\\"interactNotification(notification)\\\" app-meta=\\\"appMeta\\\" library=\\\"library\\\" class=\\\"notification-item notification-stream-pm\\\" ng-click=\\\"notification.isClickable ?  clickCard(notification) : null\\\"></div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.gameUpdate\\\" game-update notification=\\\"notification\\\" library=\\\"library\\\" content-view-manager=\\\"contentViewManager\\\" app-meta=\\\"appMeta\\\" class=\\\"notification-item\\\" ng-hide=\\\"notification.isTurnOff\\\" ng-click=\\\"null\\\"></div> <div ng-if=\\\"notification.notificationSourceType == notificationSourceType.groupJoinRequestAccepted\\\" group-membership notification=\\\"notification\\\" library=\\\"library\\\" app-meta=\\\"appMeta\\\" interact-notification=\\\"interactNotification(notification)\\\" ng-hide=\\\"notification.isTurnOff\\\" class=\\\"notification-item\\\" ng-click=\\\"notification.isClickable ?  clickCard(notification) : null\\\"> </div> <div class=\\\"small turn-off-container\\\" ng-hide=\\\"!notification.isTurnOff\\\"> <span class=\\\"turn-off-text\\\">You have turned off notifications for</span> <a class=\\\"text-link small\\\" ng-click=\\\"updateNotificationSetting(true)\\\">Undo</a> </div> <span class=\\\"hidden icon-turn-off\\\" ng-click=\\\"updateNotificationSetting(false)\\\"></span> </li> </ul> <div class=\\\"notifications-lazy-loading\\\" ng-show=\\\"layout.notiticationsLazyLoadingEnabled\\\"> <span class=\\\"spinner spinner-sm\\\"></span> </div> </div> </div> <div class=\\\"notification-stream-loading\\\" ng-hide=\\\"layout.getRecentDataInitialized\\\"> <span class=\\\"spinner spinner-sm\\\"></span> </div> <div class=\\\"container-empty\\\" ng-show=\\\"layout.getRecentDataInitialized && notificationIds.length === 0 \\\"> <div class=\\\"notification-stream-empty\\\"></div> <div><span class=\\\"text\\\" ng-bind=\\\"'Label.NoNotifications' | translate\\\"></span></div> </div> </div> </div> <div notification-content-view class=\\\"game-updates\\\" library=\\\"library\\\" content-view-manager=\\\"contentViewManager\\\" view-id=\\\"{{library.notificationContentViews.gameUpdates}}\\\" is-active=\\\"false\\\"> <div class=\\\"notification-stream-header\\\"> <a class=\\\"back-icon icon-left\\\" ng-click=\\\"contentViewManager.selectContentView(library.notificationContentViews.main)\\\"></a> <span class=\\\"text-label font-caption-header game-updates-header\\\" ng-click=\\\"contentViewManager.selectContentView(library.notificationContentViews.main)\\\" ng-bind=\\\"'Heading.BackToAllNotifications' | translate\\\"> </span> </div> <div id=\\\"notification-stream-body\\\" class=\\\"notification-stream-body game-updates\\\"> <div class=\\\"notification-stream-data\\\"> <div id=\\\"notification-stream-scrollbar\\\" class=\\\"rbx-scrollbar notification-stream-scrollbar\\\"> <ul class=\\\"notification-stream-list\\\"> <li ng-repeat=\\\"gameUpdateModel in library.gameUpdateModels | sortGameUpdates\\\" class=\\\"border-bottom notification-stream-item unInteracted game-update\\\"> <div game-update game-update-model=\\\"gameUpdateModel\\\" library=\\\"library\\\" app-meta=\\\"appMeta\\\" class=\\\"notification-item\\\" ng-click=\\\"null\\\"></div> </li> </ul> </div> </div> </div> </div> </div> </div> </div>\";","module.exports = \"<div> <div class=\\\"notification-image-container\\\"> <div class=\\\"avatar avatar-headshot-sm\\\" ng-if=\\\"privateMessageLayout.displayUserId !== null\\\" title=\\\"{{privateMessageLayout.displayUserName}}\\\"> <a ng-href=\\\"{{library.userLibrary[privateMessageLayout.displayUserId].profileLink}}\\\" type=\\\"goToProfilePage\\\" user_id=\\\"{{privateMessageLayout.displayUserId}}\\\" click-in-card> <thumbnail-2d class=\\\"avatar-card-image\\\" thumbnail-target-id=\\\"privateMessageLayout.displayUserId\\\" thumbnail-type=\\\"thumbnailTypes.avatarHeadshot\\\"> </thumbnail-2d> </a> </div> <span class=\\\"icon-nav-group\\\" ng-if=\\\"privateMessageLayout.displayUserId === null\\\"></span> </div> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container\\\"> <div class=\\\"font-caption-body notification-display-text\\\" ng-class=\\\"{'text': notification.isInteracted, 'text-emphasis': !notification.isInteracted}\\\" ng-show=\\\"!privateMessageLayout.isStacked\\\"> <span class=\\\"font-caption-body message-header\\\" ng-bind-html=\\\"'Message.MessageFrom' | translate:{username: '<span class=font-caption-header>' + privateMessageLayout.displayUserName + '</span>'}\\\"> </span> <span class=\\\"text-secondary message-preview\\\" ng-bind=\\\"privateMessageLayout.messagePreview\\\"></span> </div> <div class=\\\"font-caption-body notification-display-text\\\" ng-class=\\\"{'text': notification.isInteracted, 'text-emphasis': !notification.isInteracted}\\\" ng-show=\\\"privateMessageLayout.isStacked\\\" ng-bind-html=\\\"'Message.YouReceivedMessages' | translate:{numberOfMessagesText: '<span class=font-caption-header>' + notification.eventCount + '</span>', numberOfMessages: notification.eventCount}\\\"> </div> <div class=\\\"text-date-hint\\\" ng-bind=\\\"notification.eventDate | datetime: 'full'\\\"></div> </div> </div> </div>\";","module.exports = \"<div> <div class=\\\"notification-item-test\\\"> <div class=\\\"notification-item-content\\\"> <div class=\\\"notification-data-container\\\"> <span class=\\\"text notification-display-text\\\">{{notificationDisplayText}}</span> <div class=\\\"text-date-hint\\\">{{notification.eventDate | datetime: 'full'}}</div> </div> </div> </div> </div>\";","module.exports = Roblox;","module.exports = angular;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import angular from 'angular';\r\nimport { importFilesUnderPath, templateCacheGenerator } from 'roblox-es6-migration-helper';\r\n\r\nimport '../../../css/notificationStream/notificationStream.scss';\r\n\r\n// import stream indicator\r\nimport notificationStreamIconModule from '../notificationStreamIcon/notificationStreamIconModule';\r\n\r\n// import stream body\r\nimport notificationStreamModule from './notificationStreamModule';\r\n\r\nimportFilesUnderPath(require.context('../notificationStreamIcon/directives/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('../notificationStreamIcon/filters/', true, /\\.js$/));\r\n\r\nconst templateContextForIcon = require.context('../notificationStreamIcon/', true, /\\.html$/);\r\n\r\nconst templatesForIcon = templateCacheGenerator(\r\n  angular,\r\n  'notificationStreamIconHtmlTemplate',\r\n  templateContextForIcon\r\n);\r\n// self manual initialization\r\nangular.element(function() {\r\n  angular.bootstrap('#notification-stream-icon-container', [notificationStreamIconModule.name]);\r\n});\r\n\r\nimportFilesUnderPath(require.context('./constants/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./filters/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./directives/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./controllers/', true, /\\.js$/));\r\nimportFilesUnderPath(require.context('./services/', true, /\\.js$/));\r\n\r\nconst templateContextForBody = require.context('./', true, /\\.html$/);\r\n\r\nconst templatesForBody = templateCacheGenerator(\r\n  angular,\r\n  'notificationStreamHtmlTemplate',\r\n  templateContextForBody\r\n);\r\n\r\n// self manual initialization\r\nangular.element(function() {\r\n  angular.bootstrap('.notification-stream-base', [notificationStreamModule.name]);\r\n});\r\n\r\nexport default { notificationStreamIconModule, notificationStreamModule };\r\n"],"sourceRoot":""}